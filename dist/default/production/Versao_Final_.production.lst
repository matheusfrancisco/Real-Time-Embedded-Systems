

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Nov  5 19:01:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4520 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77 ;;___wmul@product	offset	0
    78 ;;___wmul@multiplier	offset=-2 (param)
    79 ;;___wmul@multiplicand	offset=-4 (param)
    80 ;;aviao1@tempo_p1	offset	0
    81 ;;aviao1@tempo_v1	offset	2
    82 ;;sem_wait@s	offset=-2 (param)
    83 ;;sem_post@s	offset=-2 (param)
    84 ;;delay@time_ms	offset=-2 (param)
    85 ;;dispatcher@state	offset=-1 (param)
    86 ;;rr_scheduler@next_task_to_run	offset	0
    87 ;;___wmul@product	offset	0
    88 ;;___wmul@multiplier	offset=-2 (param)
    89 ;;___wmul@multiplicand	offset=-4 (param)
    90 ;;___lwmod@counter	offset	0
    91 ;;___lwmod@dividend	offset=-2 (param)
    92 ;;___lwmod@divisor	offset=-4 (param)
    93 ;;aviao2@tempo_v2	offset	0
    94 ;;aviao2@tempo_p2	offset	2
    95 ;;write_pipe@pipe	offset=-2 (param)
    96 ;;write_pipe@data	offset=-3 (param)
    97 ;;create_pipe@pipe	offset=-2 (param)
    98 ;;tluzes@dado	offset	0
    99 ;;read_pipe@dado	offset	0
   100 ;;read_pipe@pipe	offset=-2 (param)
   101 ;;SRAMfree@pSRAM	offset=-2 (param)
   102 ;;SRAMalloc@pHeap	offset	0
   103 ;;SRAMalloc@temp	offset	2
   104 ;;SRAMalloc@segHeader	offset	4
   105 ;;SRAMalloc@segLen	offset	5
   106 ;;SRAMalloc@nBytes	offset=-1 (param)
   107 ;;__SRAMmerge@pSegB	offset	0
   108 ;;__SRAMmerge@uSegB	offset	2
   109 ;;__SRAMmerge@uSegA	offset	3
   110 ;;__SRAMmerge@uSum	offset	4
   111 ;;__SRAMmerge@pSegA	offset=-2 (param)
   112 ;;dispatcher@state	offset=-1 (param)
   113 ;;rr_scheduler@next_task_to_run	offset	0
   114 ;;___wmul@product	offset	0
   115 ;;___wmul@multiplier	offset=-2 (param)
   116 ;;___wmul@multiplicand	offset=-4 (param)
   117 ;;___lwmod@counter	offset	0
   118 ;;___lwmod@dividend	offset=-2 (param)
   119 ;;___lwmod@divisor	offset=-4 (param)
   120                           
   121                           	psect	idataCOMRAM
   122  0015EA                     __pidataCOMRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _quantum
   126  0015EA  0004               	dw	4
   127  0000                     _TOS	set	4093
   128  0000                     _PORTCbits	set	3970
   129  0000                     _TRISCbits	set	3988
   130  0000                     _TMR0L	set	4054
   131  0000                     _T0CONbits	set	4053
   132  0000                     _PORTDbits	set	3971
   133  0000                     _TRISDbits	set	3989
   134  0000                     _STKPTR	set	4092
   135  0000                     _TOSH	set	4094
   136  0000                     _TOSL	set	4093
   137  0000                     _TOSU	set	4095
   138  0000                     _WREG	set	4072
   139  0000                     _STATUS	set	4056
   140  0000                     _BSR	set	4064
   141  0000                     _INTCONbits	set	4082
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  0014CA                     __pcinit:
   147                           	opt stack 0
   148  0014CA                     start_initialization:
   149                           	opt stack 0
   150  0014CA                     __initialization:
   151                           	opt stack 0
   152                           
   153                           ; Initialize objects allocated to COMRAM (2 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155  0014CA  0EEA               	movlw	low __pidataCOMRAM
   156  0014CC  6EF6               	movwf	tblptrl,c
   157  0014CE  0E15               	movlw	high __pidataCOMRAM
   158  0014D0  6EF7               	movwf	tblptrh,c
   159  0014D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   160  0014D4  6EF8               	movwf	tblptru,c
   161  0014D6  0009               	tblrd		*+	;fetch initializer
   162  0014D8  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   163  0014DC  0009               	tblrd		*+	;fetch initializer
   164  0014DE  CFF5 F04C          	movff	tablat,__pdataCOMRAM+1
   165                           
   166                           ; Clear objects allocated to BIGRAM (952 bytes)
   167  0014E2  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   168  0014E6  EE23 F0B8          	lfsr	2,952
   169  0014EA                     clear_0:
   170  0014EA  6AEE               	clrf	postinc0,c
   171  0014EC  50DD               	movf	postdec2,w,c
   172  0014EE  50D9               	movf	fsr2l,w,c
   173  0014F0  E1FC               	bnz	clear_0
   174  0014F2  50DA               	movf	fsr2h,w,c
   175  0014F4  E1FA               	bnz	clear_0
   176                           
   177                           ; Clear objects allocated to COMRAM (39 bytes)
   178  0014F6  EE00  F001         	lfsr	0,__pbssCOMRAM
   179  0014FA  0E27               	movlw	39
   180  0014FC                     clear_1:
   181  0014FC  6AEE               	clrf	postinc0,c
   182  0014FE  06E8               	decf	wreg,f,c
   183  001500  E1FD               	bnz	clear_1
   184  001502                     end_of_initialization:
   185                           	opt stack 0
   186  001502                     __end_of__initialization:
   187                           	opt stack 0
   188  001502  0100               	movlb	0
   189  001504  EF37  F009         	goto	_main	;jump to C main() function
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           postdec2	equ	0xFDD
   197                           fsr2h	equ	0xFDA
   198                           fsr2l	equ	0xFD9
   199                           
   200                           	psect	bssCOMRAM
   201  000001                     __pbssCOMRAM:
   202                           	opt stack 0
   203  000001                     _count:
   204                           	opt stack 0
   205  000001                     	ds	4
   206  000005                     _task_running:
   207                           	opt stack 0
   208  000005                     	ds	2
   209  000007                     _tasks_installed:
   210                           	opt stack 0
   211  000007                     	ds	2
   212  000009                     _c:
   213                           	opt stack 0
   214  000009                     	ds	1
   215  00000A                     _pipeluzes:
   216                           	opt stack 0
   217  00000A                     	ds	16
   218  00001A                     _spista:
   219                           	opt stack 0
   220  00001A                     	ds	14
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           postdec2	equ	0xFDD
   228                           fsr2h	equ	0xFDA
   229                           fsr2l	equ	0xFD9
   230                           
   231                           	psect	dataCOMRAM
   232  00004B                     __pdataCOMRAM:
   233                           	opt stack 0
   234  00004B                     _quantum:
   235                           	opt stack 0
   236  00004B                     	ds	2
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           postdec2	equ	0xFDD
   244                           fsr2h	equ	0xFDA
   245                           fsr2l	equ	0xFD9
   246                           
   247                           	psect	bssBIGRAM
   248  0000EE                     __pbssBIGRAM:
   249                           	opt stack 0
   250  0000EE                     _F_APTOS:
   251                           	opt stack 0
   252  0000EE                     	ds	440
   253  0002A6                     __uDynamicHeap:
   254                           	opt stack 0
   255  0002A6                     	ds	512
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec2	equ	0xFDD
   263                           fsr2h	equ	0xFDA
   264                           fsr2l	equ	0xFD9
   265                           
   266                           	psect	cstackBANK0
   267  000080                     __pcstackBANK0:
   268                           	opt stack 0
   269  000080                     create_task@task:
   270                           	opt stack 0
   271                           
   272                           ; 110 bytes @ 0x0
   273  000080                     	ds	110
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           postdec2	equ	0xFDD
   281                           fsr2h	equ	0xFDA
   282                           fsr2l	equ	0xFD9
   283                           
   284                           	psect	cstackCOMRAM
   285  000028                     __pcstackCOMRAM:
   286                           	opt stack 0
   287  000028                     ??_int_high:
   288                           
   289                           ; 1 bytes @ 0x0
   290  000028                     	ds	15
   291  000037                     int_high@i:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0xF
   295  000037                     	ds	2
   296  000039                     create_task@id:
   297                           	opt stack 0
   298  000039                     sem_init@s:
   299                           	opt stack 0
   300  000039                     SRAMInitHeap@count:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x11
   304  000039                     	ds	2
   305  00003B                     create_task@prior:
   306                           	opt stack 0
   307  00003B                     sem_init@value:
   308                           	opt stack 0
   309  00003B                     SRAMInitHeap@pHeap:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x13
   313  00003B                     	ds	2
   314  00003D                     create_task@task_f:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x15
   318  00003D                     	ds	2
   319  00003F                     tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec2	equ	0xFDD
   326                           fsr2h	equ	0xFDA
   327                           fsr2l	equ	0xFD9
   328                           
   329                           ; 1 bytes @ 0x17
   330 ;;
   331 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   332 ;;
   333 ;; *************** function _main *****************
   334 ;; Defined at:
   335 ;;		line 15 in file "main.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;		None
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : 0/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   349 ;;      Params:         0       0       0       0       0       0       0
   350 ;;      Locals:         0       0       0       0       0       0       0
   351 ;;      Temps:          0       0       0       0       0       0       0
   352 ;;      Totals:         0       0       0       0       0       0       0
   353 ;;Total ram usage:        0 bytes
   354 ;; Hardware stack levels required when called:   12
   355 ;; This function calls:
   356 ;;		_create_task
   357 ;;		_sem_init
   358 ;;		_setupOS
   359 ;;		_start_os
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text0
   366  00126E                     __ptext0:
   367                           	opt stack 0
   368  00126E                     _main:
   369                           	opt stack 19
   370                           
   371                           ;main.c: 17: setupOS();
   372                           
   373                           ;incstack = 0
   374  00126E  ECA3  F00A         	call	_setupOS	;wreg free
   375                           
   376                           ;main.c: 18: sem_init(&spista, 1);
   377  001272  0E1A               	movlw	low _spista
   378  001274  6E39               	movwf	sem_init@s,c
   379  001276  0E00               	movlw	high _spista
   380  001278  6E3A               	movwf	sem_init@s+1,c
   381  00127A  0E00               	movlw	0
   382  00127C  6E3C               	movwf	sem_init@value+1,c
   383  00127E  0E01               	movlw	1
   384  001280  6E3B               	movwf	sem_init@value,c
   385  001282  EC84  F00A         	call	_sem_init	;wreg free
   386                           
   387                           ;main.c: 21: create_task(1, 3, &aviao1);
   388  001286  0E00               	movlw	0
   389  001288  6E3A               	movwf	create_task@id+1,c
   390  00128A  0E01               	movlw	1
   391  00128C  6E39               	movwf	create_task@id,c
   392  00128E  0E00               	movlw	0
   393  001290  6E3C               	movwf	create_task@prior+1,c
   394  001292  0E03               	movlw	3
   395  001294  6E3B               	movwf	create_task@prior,c
   396  001296  0E0A               	movlw	low _aviao1
   397  001298  6E3D               	movwf	create_task@task_f,c
   398  00129A  0E0E               	movlw	high _aviao1
   399  00129C  6E3E               	movwf	create_task@task_f+1,c
   400  00129E  ECC0  F009         	call	_create_task	;wreg free
   401                           
   402                           ;main.c: 22: create_task(5, 3, &aviao2);
   403  0012A2  0E00               	movlw	0
   404  0012A4  6E3A               	movwf	create_task@id+1,c
   405  0012A6  0E05               	movlw	5
   406  0012A8  6E39               	movwf	create_task@id,c
   407  0012AA  0E00               	movlw	0
   408  0012AC  6E3C               	movwf	create_task@prior+1,c
   409  0012AE  0E03               	movlw	3
   410  0012B0  6E3B               	movwf	create_task@prior,c
   411  0012B2  0EAC               	movlw	low _aviao2
   412  0012B4  6E3D               	movwf	create_task@task_f,c
   413  0012B6  0E0F               	movlw	high _aviao2
   414  0012B8  6E3E               	movwf	create_task@task_f+1,c
   415  0012BA  ECC0  F009         	call	_create_task	;wreg free
   416                           
   417                           ;main.c: 24: create_task(2, 3, &tluzesescreve);
   418  0012BE  0E00               	movlw	0
   419  0012C0  6E3A               	movwf	create_task@id+1,c
   420  0012C2  0E02               	movlw	2
   421  0012C4  6E39               	movwf	create_task@id,c
   422  0012C6  0E00               	movlw	0
   423  0012C8  6E3C               	movwf	create_task@prior+1,c
   424  0012CA  0E03               	movlw	3
   425  0012CC  6E3B               	movwf	create_task@prior,c
   426  0012CE  0E7C               	movlw	low _tluzesescreve
   427  0012D0  6E3D               	movwf	create_task@task_f,c
   428  0012D2  0E15               	movlw	high _tluzesescreve
   429  0012D4  6E3E               	movwf	create_task@task_f+1,c
   430  0012D6  ECC0  F009         	call	_create_task	;wreg free
   431                           
   432                           ;main.c: 25: create_task(3, 3, &tluzes);
   433  0012DA  0E00               	movlw	0
   434  0012DC  6E3A               	movwf	create_task@id+1,c
   435  0012DE  0E03               	movlw	3
   436  0012E0  6E39               	movwf	create_task@id,c
   437  0012E2  0E00               	movlw	0
   438  0012E4  6E3C               	movwf	create_task@prior+1,c
   439  0012E6  0E03               	movlw	3
   440  0012E8  6E3B               	movwf	create_task@prior,c
   441  0012EA  0E34               	movlw	low _tluzes
   442  0012EC  6E3D               	movwf	create_task@task_f,c
   443  0012EE  0E14               	movlw	high _tluzes
   444  0012F0  6E3E               	movwf	create_task@task_f+1,c
   445  0012F2  ECC0  F009         	call	_create_task	;wreg free
   446                           
   447                           ;main.c: 33: start_os();
   448  0012F6  ECF3  F00A         	call	_start_os	;wreg free
   449  0012FA                     l23:
   450  0012FA  D7FF               	goto	l23
   451  0012FC                     __end_of_main:
   452                           	opt stack 0
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec2	equ	0xFDD
   460                           fsr2h	equ	0xFDA
   461                           fsr2l	equ	0xFD9
   462                           
   463 ;; *************** function _start_os *****************
   464 ;; Defined at:
   465 ;;		line 128 in file "kernel.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		None
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   479 ;;      Params:         0       0       0       0       0       0       0
   480 ;;      Locals:         0       0       0       0       0       0       0
   481 ;;      Temps:          0       0       0       0       0       0       0
   482 ;;      Totals:         0       0       0       0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels used:    1
   485 ;; Hardware stack levels required when called:    9
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text1
   494  0015E6                     __ptext1:
   495                           	opt stack 0
   496  0015E6                     _start_os:
   497                           	opt stack 21
   498                           
   499                           ;kernel.c: 133: T0CONbits.TMR0ON = 1;
   500                           
   501                           ;incstack = 0
   502  0015E6  8ED5               	bsf	4053,7,c	;volatile
   503  0015E8  0012               	return		;funcret
   504  0015EA                     __end_of_start_os:
   505                           	opt stack 0
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec2	equ	0xFDD
   513                           fsr2h	equ	0xFDA
   514                           fsr2l	equ	0xFD9
   515                           
   516 ;; *************** function _setupOS *****************
   517 ;; Defined at:
   518 ;;		line 80 in file "kernel.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   532 ;;      Params:         0       0       0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0
   535 ;;      Totals:         0       0       0       0       0       0       0
   536 ;;Total ram usage:        0 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:   11
   539 ;; This function calls:
   540 ;;		_SRAMInitHeap
   541 ;;		_create_task
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text2
   548  001546                     __ptext2:
   549                           	opt stack 0
   550  001546                     _setupOS:
   551                           	opt stack 19
   552                           
   553                           ;kernel.c: 86: T0CONbits.T0CS = 0;
   554                           
   555                           ;incstack = 0
   556  001546  9AD5               	bcf	4053,5,c	;volatile
   557                           
   558                           ;kernel.c: 87: T0CONbits.PSA = 0;
   559  001548  96D5               	bcf	4053,3,c	;volatile
   560                           
   561                           ;kernel.c: 88: T0CONbits.T0PS = 0b111;
   562  00154A  80D5               	bsf	4053,0,c	;volatile
   563  00154C  82D5               	bsf	4053,1,c	;volatile
   564  00154E  84D5               	bsf	4053,2,c	;volatile
   565                           
   566                           ;kernel.c: 89: INTCONbits.PEIE = 1;
   567  001550  8CF2               	bsf	intcon,6,c	;volatile
   568                           
   569                           ;kernel.c: 90: INTCONbits.TMR0IE = 1;
   570  001552  8AF2               	bsf	intcon,5,c	;volatile
   571                           
   572                           ;kernel.c: 91: TMR0L = 252;
   573  001554  0EFC               	movlw	252
   574  001556  6ED6               	movwf	4054,c	;volatile
   575                           
   576                           ;kernel.c: 94: create_task(1,5, &task_idle);
   577  001558  0E00               	movlw	0
   578  00155A  6E3A               	movwf	create_task@id+1,c
   579  00155C  0E01               	movlw	1
   580  00155E  6E39               	movwf	create_task@id,c
   581  001560  0E00               	movlw	0
   582  001562  6E3C               	movwf	create_task@prior+1,c
   583  001564  0E05               	movlw	5
   584  001566  6E3B               	movwf	create_task@prior,c
   585  001568  0EC6               	movlw	low _task_idle
   586  00156A  6E3D               	movwf	create_task@task_f,c
   587  00156C  0E15               	movlw	high _task_idle
   588  00156E  6E3E               	movwf	create_task@task_f+1,c
   589  001570  ECC0  F009         	call	_create_task	;wreg free
   590                           
   591                           ;kernel.c: 98: SRAMInitHeap();
   592  001574  ECED  F009         	call	_SRAMInitHeap	;wreg free
   593                           
   594                           ;kernel.c: 100: (INTCONbits.GIE = 1);
   595  001578  8EF2               	bsf	intcon,7,c	;volatile
   596  00157A  0012               	return		;funcret
   597  00157C                     __end_of_setupOS:
   598                           	opt stack 0
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           intcon	equ	0xFF2
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec2	equ	0xFDD
   607                           fsr2h	equ	0xFDA
   608                           fsr2l	equ	0xFD9
   609                           
   610 ;; *************** function _create_task *****************
   611 ;; Defined at:
   612 ;;		line 20 in file "kernel.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  id              2   17[COMRAM] unsigned int 
   615 ;;  prior           2   19[COMRAM] unsigned int 
   616 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   617 ;;		 -> task_idle(1), tluzes(1), tluzesescreve(1), aviao2(1), 
   618 ;;		 -> aviao1(1), 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  task          110    0[BANK0 ] struct tcb
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   630 ;;      Params:         6       0       0       0       0       0       0
   631 ;;      Locals:         0     110       0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0       0       0
   633 ;;      Totals:         6     110       0       0       0       0       0
   634 ;;Total ram usage:      116 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:   10
   637 ;; This function calls:
   638 ;;		___wmul
   639 ;; This function is called by:
   640 ;;		_main
   641 ;;		_setupOS
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text3
   646  001380                     __ptext3:
   647                           	opt stack 0
   648  001380                     _create_task:
   649                           	opt stack 19
   650                           
   651                           ;kernel.c: 22: tcb_t task;
   652                           ;kernel.c: 24: task.task_id = id;
   653                           
   654                           ;incstack = 0
   655  001380  C039  F080         	movff	create_task@id,create_task@task
   656  001384  C03A  F081         	movff	create_task@id+1,create_task@task+1
   657                           
   658                           ;kernel.c: 25: task.task_prior = prior;
   659  001388  C03B  F082         	movff	create_task@prior,create_task@task+2
   660  00138C  C03C  F083         	movff	create_task@prior+1,create_task@task+3
   661                           
   662                           ;kernel.c: 26: task.task_f = task_f;
   663  001390  C03D  F084         	movff	create_task@task_f,create_task@task+4
   664  001394  C03E  F085         	movff	create_task@task_f+1,create_task@task+5
   665                           
   666                           ;kernel.c: 27: task.task_stack.stack_size = 0;
   667  001398  0E00               	movlw	0
   668  00139A  0100               	movlb	0	; () banked
   669  00139C  6FEA               	movwf	(create_task@task+106)& (0+255),b
   670  00139E  0E00               	movlw	0
   671  0013A0  6FE9               	movwf	(create_task@task+105)& (0+255),b
   672                           
   673                           ; BSR set to: 0
   674                           ;kernel.c: 28: task.task_state = READY;
   675  0013A2  0E01               	movlw	1
   676  0013A4  6F88               	movwf	(create_task@task+8)& (0+255),b
   677                           
   678                           ; BSR set to: 0
   679                           ;kernel.c: 30: F_APTOS[tasks_installed] = task;
   680  0013A6  0E6E               	movlw	110
   681  0013A8  6EE6               	movwf	postinc1,c
   682  0013AA  0E00               	movlw	0
   683  0013AC  6EE6               	movwf	postinc1,c
   684  0013AE  C007  FFE6         	movff	_tasks_installed,postinc1
   685  0013B2  C008  FFE6         	movff	_tasks_installed+1,postinc1
   686  0013B6  ECEC  F008         	call	___wmul	;wreg free
   687  0013BA  0EEE               	movlw	low _F_APTOS
   688  0013BC  243F               	addwf	btemp,w,c
   689  0013BE  6EE9               	movwf	fsr0l,c
   690  0013C0  0E00               	movlw	high _F_APTOS
   691  0013C2  2040               	addwfc	btemp+1,w,c
   692  0013C4  6EEA               	movwf	fsr0h,c
   693  0013C6  EE20  F080         	lfsr	2,create_task@task
   694  0013CA  0E6D               	movlw	109
   695  0013CC                     u421:
   696  0013CC  CFDB FFEB          	movff	plusw2,plusw0
   697  0013D0  06E8               	decf	wreg,f,c
   698  0013D2  E2FC               	bc	u421
   699                           
   700                           ;kernel.c: 31: tasks_installed++;
   701  0013D4  4A07               	infsnz	_tasks_installed,f,c
   702  0013D6  2A08               	incf	_tasks_installed+1,f,c
   703  0013D8  0012               	return		;funcret
   704  0013DA                     __end_of_create_task:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           intcon	equ	0xFF2
   711                           postinc0	equ	0xFEE
   712                           plusw0	equ	0xFEB
   713                           fsr0h	equ	0xFEA
   714                           fsr0l	equ	0xFE9
   715                           wreg	equ	0xFE8
   716                           postinc1	equ	0xFE6
   717                           postdec2	equ	0xFDD
   718                           plusw2	equ	0xFDB
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           
   722 ;; *************** function ___wmul *****************
   723 ;; Defined at:
   724 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  multiplier      2  [STACK] unsigned int 
   727 ;;  multiplicand    2  [STACK] unsigned int 
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  product         2  [STACK] unsigned int 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  2  [STACK] unsigned int 
   732 ;; Registers used:
   733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   739 ;;      Params:         0       0       0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    9
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_create_task
   750 ;;		_dispatcher
   751 ;;		_delay
   752 ;;		_int_high
   753 ;;		_rr_scheduler
   754 ;;		_sem_post
   755 ;;		_write_pipe
   756 ;;		_read_pipe
   757 ;;		_get_id
   758 ;;		_prior_scheduler
   759 ;; This function uses a reentrant model
   760 ;;
   761                           
   762                           	psect	text4
   763  0011D8                     __ptext4:
   764                           	opt stack 0
   765  0011D8                     ___wmul:
   766                           	opt stack 0
   767                           
   768                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   769  0011D8  52E6               	movf	postinc1,f,c
   770  0011DA  52E6               	movf	postinc1,f,c
   771                           
   772                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   773                           
   774                           ;incstack = 0
   775  0011DC  0EFA               	movlw	-6
   776  0011DE  CFE3 F04A          	movff	plusw1,btemp+11
   777                           
   778                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   779  0011E2  0EFC               	movlw	-4
   780  0011E4  50E3               	movf	plusw1,w,c
   781  0011E6  024A               	mulwf	btemp+11,c
   782                           
   783                           ;stkvar	___wmul@product @ sp[(-2)+0]
   784  0011E8  0EFE               	movlw	-2
   785  0011EA  CFF3 FFE3          	movff	prodl,plusw1
   786  0011EE  0EFF               	movlw	-1
   787  0011F0  CFF4 FFE3          	movff	prodh,plusw1
   788                           
   789                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   790  0011F4  0EFB               	movlw	251
   791  0011F6  24E1               	addwf	fsr1l,w,c
   792  0011F8  6ED9               	movwf	fsr2l,c
   793  0011FA  0EFF               	movlw	255
   794  0011FC  20E2               	addwfc	fsr1h,w,c
   795  0011FE  6EDA               	movwf	fsr2h,c
   796  001200  50DF               	movf	indf2,w,c
   797  001202  6E4A               	movwf	btemp+11,c
   798                           
   799                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   800  001204  0EFC               	movlw	-4
   801  001206  50E3               	movf	plusw1,w,c
   802  001208  024A               	mulwf	btemp+11,c
   803  00120A  CFF3 FFF4          	movff	prodl,prodh
   804  00120E  6AF3               	clrf	prodl,c
   805                           
   806                           ;stkvar	___wmul@product @ sp[(-2)+0]
   807  001210  50E1               	movf	fsr1l,w,c
   808  001212  0FFE               	addlw	-2
   809  001214  6ED9               	movwf	fsr2l,c
   810  001216  50E2               	movf	fsr1h,w,c
   811  001218  6EDA               	movwf	fsr2h,c
   812  00121A  0EFF               	movlw	255
   813  00121C  22DA               	addwfc	fsr2h,f,c
   814  00121E  50F3               	movf	prodl,w,c
   815  001220  26DE               	addwf	postinc2,f,c
   816  001222  50F4               	movf	prodh,w,c
   817  001224  22DD               	addwfc	postdec2,f,c
   818                           
   819                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   820  001226  0EFA               	movlw	-6
   821  001228  CFE3 F04A          	movff	plusw1,btemp+11
   822                           
   823                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   824  00122C  0EFD               	movlw	253
   825  00122E  24E1               	addwf	fsr1l,w,c
   826  001230  6ED9               	movwf	fsr2l,c
   827  001232  0EFF               	movlw	255
   828  001234  20E2               	addwfc	fsr1h,w,c
   829  001236  6EDA               	movwf	fsr2h,c
   830  001238  50DF               	movf	indf2,w,c
   831  00123A  024A               	mulwf	btemp+11,c
   832  00123C  CFF3 FFF4          	movff	prodl,prodh
   833  001240  6AF3               	clrf	prodl,c
   834                           
   835                           ;stkvar	___wmul@product @ sp[(-2)+0]
   836  001242  50E1               	movf	fsr1l,w,c
   837  001244  0FFE               	addlw	-2
   838  001246  6ED9               	movwf	fsr2l,c
   839  001248  50E2               	movf	fsr1h,w,c
   840  00124A  6EDA               	movwf	fsr2h,c
   841  00124C  0EFF               	movlw	255
   842  00124E  22DA               	addwfc	fsr2h,f,c
   843  001250  50F3               	movf	prodl,w,c
   844  001252  26DE               	addwf	postinc2,f,c
   845  001254  50F4               	movf	prodh,w,c
   846  001256  22DD               	addwfc	postdec2,f,c
   847                           
   848                           ;stkvar	___wmul@product @ sp[(-2)+0]
   849  001258  0EFE               	movlw	-2
   850  00125A  CFE3 F03F          	movff	plusw1,btemp
   851  00125E  0EFF               	movlw	-1
   852  001260  CFE3 F040          	movff	plusw1,btemp+1
   853                           
   854                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   855  001264  0EFA               	movlw	250
   856  001266  26E1               	addwf	fsr1l,f,c
   857  001268  0EFF               	movlw	255
   858  00126A  22E2               	addwfc	fsr1h,f,c
   859  00126C  0012               	return		;funcret
   860  00126E                     __end_of___wmul:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodh	equ	0xFF4
   867                           prodl	equ	0xFF3
   868                           intcon	equ	0xFF2
   869                           postinc0	equ	0xFEE
   870                           plusw0	equ	0xFEB
   871                           fsr0h	equ	0xFEA
   872                           fsr0l	equ	0xFE9
   873                           wreg	equ	0xFE8
   874                           postinc1	equ	0xFE6
   875                           plusw1	equ	0xFE3
   876                           fsr1h	equ	0xFE2
   877                           fsr1l	equ	0xFE1
   878                           indf2	equ	0xFDF
   879                           postinc2	equ	0xFDE
   880                           postdec2	equ	0xFDD
   881                           plusw2	equ	0xFDB
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           
   885 ;; *************** function _SRAMInitHeap *****************
   886 ;; Defined at:
   887 ;;		line 303 in file "memory.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  count           2   17[COMRAM] unsigned int 
   892 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   893 ;;		 -> _uDynamicHeap(512), 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   903 ;;      Params:         0       0       0       0       0       0       0
   904 ;;      Locals:         4       0       0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0
   906 ;;      Totals:         4       0       0       0       0       0       0
   907 ;;Total ram usage:        4 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    9
   910 ;; This function calls:
   911 ;;		Nothing
   912 ;; This function is called by:
   913 ;;		_setupOS
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text5
   918  0013DA                     __ptext5:
   919                           	opt stack 0
   920  0013DA                     _SRAMInitHeap:
   921                           	opt stack 20
   922                           
   923                           ;memory.c: 305: unsigned char * near pHeap;
   924                           ;memory.c: 306: near unsigned int count;
   925                           ;memory.c: 308: pHeap = _uDynamicHeap;
   926                           
   927                           ;incstack = 0
   928  0013DA  0EA6               	movlw	low __uDynamicHeap
   929  0013DC  6E3B               	movwf	SRAMInitHeap@pHeap,c
   930  0013DE  0E02               	movlw	high __uDynamicHeap
   931  0013E0  6E3C               	movwf	SRAMInitHeap@pHeap+1,c
   932                           
   933                           ;memory.c: 309: count = 0x200-1;
   934  0013E2  0E01               	movlw	1
   935  0013E4  6E3A               	movwf	SRAMInitHeap@count+1,c
   936  0013E6  6839               	setf	SRAMInitHeap@count,c
   937  0013E8                     
   938                           ;memory.c: 312: {
   939                           ;memory.c: 313: if (count > 0x7F)
   940  0013E8  503A               	movf	SRAMInitHeap@count+1,w,c
   941  0013EA  E104               	bnz	u440
   942  0013EC  0E80               	movlw	128
   943  0013EE  5C39               	subwf	SRAMInitHeap@count,w,c
   944  0013F0  A0D8               	btfss	status,0,c
   945  0013F2  D011               	goto	l253
   946  0013F4                     u440:
   947                           
   948                           ;memory.c: 314: {
   949                           ;memory.c: 315: *pHeap = 0x7F;
   950  0013F4  C03B  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   951  0013F8  C03C  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   952  0013FC  0E7F               	movlw	127
   953  0013FE  6EDF               	movwf	indf2,c
   954                           
   955                           ;memory.c: 316: pHeap += 0x7F;
   956  001400  0E7F               	movlw	127
   957  001402  263B               	addwf	SRAMInitHeap@pHeap,f,c
   958  001404  0E00               	movlw	0
   959  001406  223C               	addwfc	SRAMInitHeap@pHeap+1,f,c
   960                           
   961                           ;memory.c: 317: count = count - 0x7F;
   962  001408  0E81               	movlw	129
   963  00140A  2439               	addwf	SRAMInitHeap@count,w,c
   964  00140C  6E39               	movwf	SRAMInitHeap@count,c
   965  00140E  0EFF               	movlw	255
   966  001410  203A               	addwfc	SRAMInitHeap@count+1,w,c
   967  001412  6E3A               	movwf	SRAMInitHeap@count+1,c
   968                           
   969                           ;memory.c: 318: }
   970  001414  D7E9               	goto	l252
   971  001416                     l253:
   972                           
   973                           ;memory.c: 319: else
   974                           ;memory.c: 320: {
   975                           ;memory.c: 321: *pHeap = count;
   976  001416  C03B  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   977  00141A  C03C  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   978  00141E  C039  FFDF         	movff	SRAMInitHeap@count,indf2
   979                           
   980                           ;memory.c: 322: *(pHeap + count) = 0;
   981  001422  5039               	movf	SRAMInitHeap@count,w,c
   982  001424  243B               	addwf	SRAMInitHeap@pHeap,w,c
   983  001426  6ED9               	movwf	fsr2l,c
   984  001428  503A               	movf	SRAMInitHeap@count+1,w,c
   985  00142A  203C               	addwfc	SRAMInitHeap@pHeap+1,w,c
   986  00142C  6EDA               	movwf	fsr2h,c
   987  00142E  0E00               	movlw	0
   988  001430  6EDF               	movwf	indf2,c
   989                           
   990                           ;memory.c: 323: return;
   991  001432  0012               	return	
   992  001434                     __end_of_SRAMInitHeap:
   993                           	opt stack 0
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           prodh	equ	0xFF4
   999                           prodl	equ	0xFF3
  1000                           intcon	equ	0xFF2
  1001                           postinc0	equ	0xFEE
  1002                           plusw0	equ	0xFEB
  1003                           fsr0h	equ	0xFEA
  1004                           fsr0l	equ	0xFE9
  1005                           wreg	equ	0xFE8
  1006                           postinc1	equ	0xFE6
  1007                           plusw1	equ	0xFE3
  1008                           fsr1h	equ	0xFE2
  1009                           fsr1l	equ	0xFE1
  1010                           indf2	equ	0xFDF
  1011                           postinc2	equ	0xFDE
  1012                           postdec2	equ	0xFDD
  1013                           plusw2	equ	0xFDB
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _sem_init *****************
  1019 ;; Defined at:
  1020 ;;		line 6 in file "semaphore.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  s               2   17[COMRAM] PTR struct sem
  1023 ;;		 -> spista(14), 
  1024 ;;  value           2   19[COMRAM] int 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1036 ;;      Params:         4       0       0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0       0       0
  1038 ;;      Temps:          0       0       0       0       0       0       0
  1039 ;;      Totals:         4       0       0       0       0       0       0
  1040 ;;Total ram usage:        4 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    9
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text6
  1051  001508                     __ptext6:
  1052                           	opt stack 0
  1053  001508                     _sem_init:
  1054                           	opt stack 21
  1055                           
  1056                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1057                           
  1058                           ;incstack = 0
  1059  001508  9EF2               	bcf	intcon,7,c	;volatile
  1060                           
  1061                           ;semaphore.c: 10: s->contador = value;
  1062  00150A  C039  FFD9         	movff	sem_init@s,fsr2l
  1063  00150E  C03A  FFDA         	movff	sem_init@s+1,fsr2h
  1064  001512  C03B  FFDE         	movff	sem_init@value,postinc2
  1065  001516  C03C  FFDD         	movff	sem_init@value+1,postdec2
  1066                           
  1067                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1068  00151A  EE20 F00A          	lfsr	2,10
  1069  00151E  5039               	movf	sem_init@s,w,c
  1070  001520  26D9               	addwf	fsr2l,f,c
  1071  001522  503A               	movf	sem_init@s+1,w,c
  1072  001524  22DA               	addwfc	fsr2h,f,c
  1073  001526  0E00               	movlw	0
  1074  001528  6EDE               	movwf	postinc2,c
  1075  00152A  0E00               	movlw	0
  1076  00152C  6EDD               	movwf	postdec2,c
  1077                           
  1078                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1079  00152E  EE20 F00C          	lfsr	2,12
  1080  001532  5039               	movf	sem_init@s,w,c
  1081  001534  26D9               	addwf	fsr2l,f,c
  1082  001536  503A               	movf	sem_init@s+1,w,c
  1083  001538  22DA               	addwfc	fsr2h,f,c
  1084  00153A  0E00               	movlw	0
  1085  00153C  6EDE               	movwf	postinc2,c
  1086  00153E  0E00               	movlw	0
  1087  001540  6EDD               	movwf	postdec2,c
  1088                           
  1089                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1090  001542  8EF2               	bsf	intcon,7,c	;volatile
  1091  001544  0012               	return		;funcret
  1092  001546                     __end_of_sem_init:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           prodh	equ	0xFF4
  1099                           prodl	equ	0xFF3
  1100                           intcon	equ	0xFF2
  1101                           postinc0	equ	0xFEE
  1102                           plusw0	equ	0xFEB
  1103                           fsr0h	equ	0xFEA
  1104                           fsr0l	equ	0xFE9
  1105                           wreg	equ	0xFE8
  1106                           postinc1	equ	0xFE6
  1107                           plusw1	equ	0xFE3
  1108                           fsr1h	equ	0xFE2
  1109                           fsr1l	equ	0xFE1
  1110                           indf2	equ	0xFDF
  1111                           postinc2	equ	0xFDE
  1112                           postdec2	equ	0xFDD
  1113                           plusw2	equ	0xFDB
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _aviao1 *****************
  1119 ;; Defined at:
  1120 ;;		line 22 in file "tasks.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  tempo_p1        2  [STACK] unsigned int 
  1125 ;;  tempo_v1        2  [STACK] unsigned int 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1  [STACK] void 
  1128 ;; Registers used:
  1129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1135 ;;      Params:         0       0       0       0       0       0       0
  1136 ;;      Locals:         0       0       0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0       0       0
  1138 ;;      Totals:         0       0       0       0       0       0       0
  1139 ;;Total ram usage:        0 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    8
  1142 ;; This function calls:
  1143 ;;		_delay
  1144 ;;		_sem_post
  1145 ;;		_sem_wait
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text7
  1152  000E0A                     __ptext7:
  1153                           	opt stack 0
  1154  000E0A                     _aviao1:
  1155                           	opt stack 0
  1156                           
  1157                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1158  000E0A  52E6               	movf	postinc1,f,c
  1159  000E0C  52E6               	movf	postinc1,f,c
  1160  000E0E  52E6               	movf	postinc1,f,c
  1161  000E10  52E6               	movf	postinc1,f,c
  1162                           
  1163                           ;tasks.c: 24: TRISCbits.RC5 = 0;
  1164                           
  1165                           ;incstack = 0
  1166  000E12  9A94               	bcf	3988,5,c	;volatile
  1167                           
  1168                           ;tasks.c: 25: PORTCbits.RC5 = 0;
  1169  000E14  9A82               	bcf	3970,5,c	;volatile
  1170                           
  1171                           ;tasks.c: 27: TRISDbits.RD1 = 0;
  1172  000E16  9295               	bcf	3989,1,c	;volatile
  1173                           
  1174                           ;tasks.c: 28: PORTDbits.RD1 = 0;
  1175  000E18  9283               	bcf	3971,1,c	;volatile
  1176                           
  1177                           ;tasks.c: 30: TRISDbits.RD0 = 0;
  1178  000E1A  9095               	bcf	3989,0,c	;volatile
  1179                           
  1180                           ;tasks.c: 31: PORTDbits.RD0 = 0;
  1181  000E1C  9083               	bcf	3971,0,c	;volatile
  1182                           
  1183                           ;tasks.c: 36: u_int tempo_v1 = 5000;
  1184  000E1E  0E88               	movlw	136
  1185  000E20  6E40               	movwf	btemp+1,c
  1186  000E22  0E13               	movlw	19
  1187  000E24  6E41               	movwf	btemp+2,c
  1188                           
  1189                           ;stkvar	aviao1@tempo_v1 @ sp[(-4)+2]
  1190  000E26  0EFE               	movlw	-2
  1191  000E28  C040  FFE3         	movff	btemp+1,plusw1
  1192  000E2C  0EFF               	movlw	-1
  1193  000E2E  C041  FFE3         	movff	btemp+2,plusw1
  1194                           
  1195                           ;tasks.c: 37: u_int tempo_p1 = 1000;
  1196  000E32  0EE8               	movlw	232
  1197  000E34  6E40               	movwf	btemp+1,c
  1198  000E36  0E03               	movlw	3
  1199  000E38  6E41               	movwf	btemp+2,c
  1200                           
  1201                           ;stkvar	aviao1@tempo_p1 @ sp[(-4)+0]
  1202  000E3A  0EFC               	movlw	-4
  1203  000E3C  C040  FFE3         	movff	btemp+1,plusw1
  1204  000E40  0EFD               	movlw	-3
  1205  000E42  C041  FFE3         	movff	btemp+2,plusw1
  1206  000E46                     l1625:
  1207                           
  1208                           ;tasks.c: 44: PORTDbits.RD1 = 1;
  1209  000E46  8283               	bsf	3971,1,c	;volatile
  1210                           
  1211                           ;tasks.c: 45: delay(tempo_v1);
  1212                           ;stkvar	aviao1@tempo_v1 @ sp[(-4)+2]
  1213  000E48  0EFE               	movlw	-2
  1214  000E4A  CFE3 FFE6          	movff	plusw1,postinc1
  1215  000E4E  CFE3 FFE6          	movff	plusw1,postinc1
  1216  000E52  EC41  F00A         	call	_delay	;wreg free
  1217                           
  1218                           ;tasks.c: 47: sem_wait(&spista);
  1219  000E56  0E1A               	movlw	low _spista
  1220  000E58  6EE6               	movwf	postinc1,c
  1221  000E5A  0E00               	movlw	high _spista
  1222  000E5C  6EE6               	movwf	postinc1,c
  1223  000E5E  EC6E  F007         	call	_sem_wait	;wreg free
  1224                           
  1225                           ;tasks.c: 49: PORTDbits.RD1 = 0;
  1226  000E62  9283               	bcf	3971,1,c	;volatile
  1227                           
  1228                           ;tasks.c: 50: PORTCbits.RC5 = 1;
  1229  000E64  8A82               	bsf	3970,5,c	;volatile
  1230                           
  1231                           ;tasks.c: 54: delay(tempo_p1);
  1232                           ;stkvar	aviao1@tempo_p1 @ sp[(-4)+0]
  1233  000E66  0EFC               	movlw	-4
  1234  000E68  CFE3 FFE6          	movff	plusw1,postinc1
  1235  000E6C  CFE3 FFE6          	movff	plusw1,postinc1
  1236  000E70  EC41  F00A         	call	_delay	;wreg free
  1237                           
  1238                           ;tasks.c: 56: PORTCbits.RC5 = 0;
  1239  000E74  9A82               	bcf	3970,5,c	;volatile
  1240                           
  1241                           ;tasks.c: 57: delay(2000);
  1242  000E76  0ED0               	movlw	208
  1243  000E78  6EE6               	movwf	postinc1,c
  1244  000E7A  0E07               	movlw	7
  1245  000E7C  6EE6               	movwf	postinc1,c
  1246  000E7E  EC41  F00A         	call	_delay	;wreg free
  1247                           
  1248                           ;tasks.c: 59: sem_post(&spista);
  1249  000E82  0E1A               	movlw	low _spista
  1250  000E84  6EE6               	movwf	postinc1,c
  1251  000E86  0E00               	movlw	high _spista
  1252  000E88  6EE6               	movwf	postinc1,c
  1253  000E8A  EC6F  F006         	call	_sem_post	;wreg free
  1254                           
  1255                           ;tasks.c: 61: delay(600);
  1256  000E8E  0E58               	movlw	88
  1257  000E90  6EE6               	movwf	postinc1,c
  1258  000E92  0E02               	movlw	2
  1259  000E94  6EE6               	movwf	postinc1,c
  1260  000E96  EC41  F00A         	call	_delay	;wreg free
  1261                           
  1262                           ;tasks.c: 62: sem_wait(&spista);
  1263  000E9A  0E1A               	movlw	low _spista
  1264  000E9C  6EE6               	movwf	postinc1,c
  1265  000E9E  0E00               	movlw	high _spista
  1266  000EA0  6EE6               	movwf	postinc1,c
  1267  000EA2  EC6E  F007         	call	_sem_wait	;wreg free
  1268                           
  1269                           ;tasks.c: 64: PORTDbits.RD0 = 1;
  1270  000EA6  8083               	bsf	3971,0,c	;volatile
  1271                           
  1272                           ;tasks.c: 65: delay(5200);
  1273  000EA8  0E50               	movlw	80
  1274  000EAA  6EE6               	movwf	postinc1,c
  1275  000EAC  0E14               	movlw	20
  1276  000EAE  6EE6               	movwf	postinc1,c
  1277  000EB0  EC41  F00A         	call	_delay	;wreg free
  1278                           
  1279                           ;tasks.c: 66: PORTDbits.RD0 = 0;
  1280  000EB4  9083               	bcf	3971,0,c	;volatile
  1281                           
  1282                           ;tasks.c: 67: delay(2500);
  1283  000EB6  0EC4               	movlw	196
  1284  000EB8  6EE6               	movwf	postinc1,c
  1285  000EBA  0E09               	movlw	9
  1286  000EBC  6EE6               	movwf	postinc1,c
  1287  000EBE  EC41  F00A         	call	_delay	;wreg free
  1288                           
  1289                           ;tasks.c: 68: sem_post(&spista);
  1290  000EC2  0E1A               	movlw	low _spista
  1291  000EC4  6EE6               	movwf	postinc1,c
  1292  000EC6  0E00               	movlw	high _spista
  1293  000EC8  6EE6               	movwf	postinc1,c
  1294  000ECA  EC6F  F006         	call	_sem_post	;wreg free
  1295                           
  1296                           ;tasks.c: 69: delay(2340);
  1297  000ECE  0E24               	movlw	36
  1298  000ED0  6EE6               	movwf	postinc1,c
  1299  000ED2  0E09               	movlw	9
  1300  000ED4  6EE6               	movwf	postinc1,c
  1301  000ED6  EC41  F00A         	call	_delay	;wreg free
  1302  000EDA  D7B5               	goto	l1625
  1303  000EDC                     __end_of_aviao1:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           prodh	equ	0xFF4
  1310                           prodl	equ	0xFF3
  1311                           intcon	equ	0xFF2
  1312                           postinc0	equ	0xFEE
  1313                           plusw0	equ	0xFEB
  1314                           fsr0h	equ	0xFEA
  1315                           fsr0l	equ	0xFE9
  1316                           wreg	equ	0xFE8
  1317                           postinc1	equ	0xFE6
  1318                           plusw1	equ	0xFE3
  1319                           fsr1h	equ	0xFE2
  1320                           fsr1l	equ	0xFE1
  1321                           indf2	equ	0xFDF
  1322                           postinc2	equ	0xFDE
  1323                           postdec2	equ	0xFDD
  1324                           plusw2	equ	0xFDB
  1325                           fsr2h	equ	0xFDA
  1326                           fsr2l	equ	0xFD9
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _sem_wait *****************
  1330 ;; Defined at:
  1331 ;;		line 17 in file "semaphore.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  s               2  [STACK] PTR struct sem
  1334 ;;		 -> spista(14), 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1  [STACK] void 
  1339 ;; Registers used:
  1340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1346 ;;      Params:         0       0       0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0
  1349 ;;      Totals:         0       0       0       0       0       0       0
  1350 ;;Total ram usage:        0 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    7
  1353 ;; This function calls:
  1354 ;;		_dispatcher
  1355 ;; This function is called by:
  1356 ;;		_aviao1
  1357 ;;		_aviao2
  1358 ;; This function uses a reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text8
  1362  000EDC                     __ptext8:
  1363                           	opt stack 0
  1364  000EDC                     _sem_wait:
  1365                           	opt stack 19
  1366                           
  1367                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  1368                           
  1369                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1370                           ;incstack = 0
  1371  000EDC  9EF2               	bcf	intcon,7,c	;volatile
  1372                           
  1373                           ;semaphore.c: 22: s->contador--;
  1374                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1375  000EDE  0EFE               	movlw	-2
  1376  000EE0  CFE3 FFD9          	movff	plusw1,fsr2l
  1377  000EE4  0EFF               	movlw	-1
  1378  000EE6  CFE3 FFDA          	movff	plusw1,fsr2h
  1379  000EEA  06DE               	decf	postinc2,f,c
  1380  000EEC  0E00               	movlw	0
  1381  000EEE  5ADD               	subwfb	postdec2,f,c
  1382                           
  1383                           ;semaphore.c: 23: if (s->contador < 0) {
  1384                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1385  000EF0  0EFE               	movlw	-2
  1386  000EF2  CFE3 FFD9          	movff	plusw1,fsr2l
  1387  000EF6  0EFF               	movlw	-1
  1388  000EF8  CFE3 FFDA          	movff	plusw1,fsr2h
  1389  000EFC  0E01               	movlw	1
  1390  000EFE  AEDB               	btfss	plusw2,7,c
  1391  000F00  D051               	goto	l1515
  1392                           
  1393                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  1394                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1395  000F02  0EFE               	movlw	-2
  1396  000F04  CFE3 F040          	movff	plusw1,btemp+1
  1397  000F08  0EFF               	movlw	-1
  1398  000F0A  CFE3 F041          	movff	plusw1,btemp+2
  1399  000F0E  0E0A               	movlw	10
  1400  000F10  2440               	addwf	btemp+1,w,c
  1401  000F12  6ED9               	movwf	fsr2l,c
  1402  000F14  0E00               	movlw	0
  1403  000F16  2041               	addwfc	btemp+2,w,c
  1404  000F18  6EDA               	movwf	fsr2h,c
  1405  000F1A  CFDE F049          	movff	postinc2,btemp+10
  1406  000F1E  CFDD F04A          	movff	postdec2,btemp+11
  1407  000F22  90D8               	bcf	status,0,c
  1408  000F24  3449               	rlcf	btemp+10,w,c
  1409  000F26  6E40               	movwf	btemp+1,c
  1410  000F28  344A               	rlcf	btemp+11,w,c
  1411  000F2A  6E41               	movwf	btemp+2,c
  1412                           
  1413                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1414  000F2C  0EFE               	movlw	-2
  1415  000F2E  50E3               	movf	plusw1,w,c
  1416  000F30  2640               	addwf	btemp+1,f,c
  1417  000F32  0EFF               	movlw	-1
  1418  000F34  50E3               	movf	plusw1,w,c
  1419  000F36  2241               	addwfc	btemp+2,f,c
  1420  000F38  0E02               	movlw	2
  1421  000F3A  2440               	addwf	btemp+1,w,c
  1422  000F3C  6ED9               	movwf	fsr2l,c
  1423  000F3E  0E00               	movlw	0
  1424  000F40  2041               	addwfc	btemp+2,w,c
  1425  000F42  6EDA               	movwf	fsr2h,c
  1426  000F44  C005  FFDE         	movff	_task_running,postinc2
  1427  000F48  C006  FFDD         	movff	_task_running+1,postdec2
  1428                           
  1429                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 4;
  1430                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1431  000F4C  0EFE               	movlw	-2
  1432  000F4E  CFE3 F040          	movff	plusw1,btemp+1
  1433  000F52  0EFF               	movlw	-1
  1434  000F54  CFE3 F041          	movff	plusw1,btemp+2
  1435  000F58  0E0A               	movlw	10
  1436  000F5A  2440               	addwf	btemp+1,w,c
  1437  000F5C  6ED9               	movwf	fsr2l,c
  1438  000F5E  0E00               	movlw	0
  1439  000F60  2041               	addwfc	btemp+2,w,c
  1440  000F62  6EDA               	movwf	fsr2h,c
  1441  000F64  CFDE F040          	movff	postinc2,btemp+1
  1442  000F68  CFDD F041          	movff	postdec2,btemp+2
  1443  000F6C  0E01               	movlw	1
  1444  000F6E  2640               	addwf	btemp+1,f,c
  1445  000F70  0E00               	movlw	0
  1446  000F72  2241               	addwfc	btemp+2,f,c
  1447  000F74  0E03               	movlw	3
  1448  000F76  1640               	andwf	btemp+1,f,c
  1449  000F78  0E00               	movlw	0
  1450  000F7A  1641               	andwf	btemp+2,f,c
  1451                           
  1452                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1453  000F7C  0EFE               	movlw	-2
  1454  000F7E  CFE3 F049          	movff	plusw1,btemp+10
  1455  000F82  0EFF               	movlw	-1
  1456  000F84  CFE3 F04A          	movff	plusw1,btemp+11
  1457  000F88  0E0A               	movlw	10
  1458  000F8A  2449               	addwf	btemp+10,w,c
  1459  000F8C  6ED9               	movwf	fsr2l,c
  1460  000F8E  0E00               	movlw	0
  1461  000F90  204A               	addwfc	btemp+11,w,c
  1462  000F92  6EDA               	movwf	fsr2h,c
  1463  000F94  C040  FFDE         	movff	btemp+1,postinc2
  1464  000F98  C041  FFDD         	movff	btemp+2,postdec2
  1465                           
  1466                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  1467  000F9C  0E05               	movlw	5
  1468  000F9E  6EE6               	movwf	postinc1,c
  1469  000FA0  EC0A  F000         	call	_dispatcher	;wreg free
  1470  000FA4                     l1515:
  1471                           
  1472                           ;semaphore.c: 27: }
  1473                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  1474  000FA4  8EF2               	bsf	intcon,7,c	;volatile
  1475                           
  1476                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  1477  000FA6  52E5               	movf	postdec1,f,c
  1478  000FA8  52E5               	movf	postdec1,f,c
  1479  000FAA  0012               	return		;funcret
  1480  000FAC                     __end_of_sem_wait:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           prodh	equ	0xFF4
  1487                           prodl	equ	0xFF3
  1488                           intcon	equ	0xFF2
  1489                           postinc0	equ	0xFEE
  1490                           plusw0	equ	0xFEB
  1491                           fsr0h	equ	0xFEA
  1492                           fsr0l	equ	0xFE9
  1493                           wreg	equ	0xFE8
  1494                           postinc1	equ	0xFE6
  1495                           postdec1	equ	0xFE5
  1496                           plusw1	equ	0xFE3
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           indf2	equ	0xFDF
  1500                           postinc2	equ	0xFDE
  1501                           postdec2	equ	0xFDD
  1502                           plusw2	equ	0xFDB
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _sem_post *****************
  1508 ;; Defined at:
  1509 ;;		line 32 in file "semaphore.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  s               2  [STACK] PTR struct sem
  1512 ;;		 -> spista(14), 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1  [STACK] void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1524 ;;      Params:         0       0       0       0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0
  1527 ;;      Totals:         0       0       0       0       0       0       0
  1528 ;;Total ram usage:        0 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    7
  1531 ;; This function calls:
  1532 ;;		___lwmod
  1533 ;;		___wmul
  1534 ;;		_dispatcher
  1535 ;; This function is called by:
  1536 ;;		_aviao1
  1537 ;;		_aviao2
  1538 ;; This function uses a reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text9
  1542  000CDE                     __ptext9:
  1543                           	opt stack 0
  1544  000CDE                     _sem_post:
  1545                           	opt stack 19
  1546                           
  1547                           ;semaphore.c: 34: (INTCONbits.GIE = 0);
  1548                           
  1549                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1550                           ;incstack = 0
  1551  000CDE  9EF2               	bcf	intcon,7,c	;volatile
  1552                           
  1553                           ;semaphore.c: 36: s->contador++;
  1554                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1555  000CE0  0EFE               	movlw	-2
  1556  000CE2  CFE3 FFD9          	movff	plusw1,fsr2l
  1557  000CE6  0EFF               	movlw	-1
  1558  000CE8  CFE3 FFDA          	movff	plusw1,fsr2h
  1559  000CEC  2ADE               	incf	postinc2,f,c
  1560  000CEE  0E00               	movlw	0
  1561  000CF0  22DD               	addwfc	postdec2,f,c
  1562                           
  1563                           ;semaphore.c: 37: if (s->contador <= 0) {
  1564                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1565  000CF2  0EFE               	movlw	-2
  1566  000CF4  CFE3 FFD9          	movff	plusw1,fsr2l
  1567  000CF8  0EFF               	movlw	-1
  1568  000CFA  CFE3 FFDA          	movff	plusw1,fsr2h
  1569  000CFE  0E01               	movlw	1
  1570  000D00  BEDB               	btfsc	plusw2,7,c
  1571  000D02  D006               	goto	u49_20
  1572  000D04  0E01               	movlw	1
  1573  000D06  50DB               	movf	plusw2,w,c
  1574  000D08  E17C               	bnz	l1529
  1575  000D0A  04DE               	decf	postinc2,w,c
  1576  000D0C  B0D8               	btfsc	status,0,c
  1577  000D0E  D079               	goto	l1529
  1578  000D10                     u49_20:
  1579                           
  1580                           ;semaphore.c: 38: F_APTOS[s->queue.s_queue[s->queue.s_queue_pos_out]].task_state = READY
      +                          ;
  1581  000D10  0E6E               	movlw	110
  1582  000D12  6EE6               	movwf	postinc1,c
  1583  000D14  0E00               	movlw	0
  1584  000D16  6EE6               	movwf	postinc1,c
  1585                           
  1586                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  1587  000D18  0EFC               	movlw	-4
  1588  000D1A  CFE3 F040          	movff	plusw1,btemp+1
  1589  000D1E  0EFD               	movlw	-3
  1590  000D20  CFE3 F041          	movff	plusw1,btemp+2
  1591  000D24  0E0C               	movlw	12
  1592  000D26  2440               	addwf	btemp+1,w,c
  1593  000D28  6ED9               	movwf	fsr2l,c
  1594  000D2A  0E00               	movlw	0
  1595  000D2C  2041               	addwfc	btemp+2,w,c
  1596  000D2E  6EDA               	movwf	fsr2h,c
  1597  000D30  CFDE F049          	movff	postinc2,btemp+10
  1598  000D34  CFDD F04A          	movff	postdec2,btemp+11
  1599  000D38  90D8               	bcf	status,0,c
  1600  000D3A  3449               	rlcf	btemp+10,w,c
  1601  000D3C  6E40               	movwf	btemp+1,c
  1602  000D3E  344A               	rlcf	btemp+11,w,c
  1603  000D40  6E41               	movwf	btemp+2,c
  1604                           
  1605                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  1606  000D42  0EFC               	movlw	-4
  1607  000D44  50E3               	movf	plusw1,w,c
  1608  000D46  2640               	addwf	btemp+1,f,c
  1609  000D48  0EFD               	movlw	-3
  1610  000D4A  50E3               	movf	plusw1,w,c
  1611  000D4C  2241               	addwfc	btemp+2,f,c
  1612  000D4E  0E02               	movlw	2
  1613  000D50  2440               	addwf	btemp+1,w,c
  1614  000D52  6ED9               	movwf	fsr2l,c
  1615  000D54  0E00               	movlw	0
  1616  000D56  2041               	addwfc	btemp+2,w,c
  1617  000D58  6EDA               	movwf	fsr2h,c
  1618  000D5A  CFDE F040          	movff	postinc2,btemp+1
  1619  000D5E  CFDD F041          	movff	postdec2,btemp+2
  1620  000D62  C040  FFE6         	movff	btemp+1,postinc1
  1621  000D66  C041  FFE6         	movff	btemp+2,postinc1
  1622  000D6A  ECEC  F008         	call	___wmul	;wreg free
  1623  000D6E  0EF6               	movlw	low (_F_APTOS+8)
  1624  000D70  243F               	addwf	btemp,w,c
  1625  000D72  6ED9               	movwf	fsr2l,c
  1626  000D74  0E00               	movlw	high (_F_APTOS+8)
  1627  000D76  2040               	addwfc	btemp+1,w,c
  1628  000D78  6EDA               	movwf	fsr2h,c
  1629  000D7A  0E01               	movlw	1
  1630  000D7C  6EDF               	movwf	indf2,c
  1631                           
  1632                           ;semaphore.c: 39: s->queue.s_queue_pos_out = (s->queue.s_queue_pos_out + 1) % s->queue.s
      +                          _queue_pos_in;
  1633                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1634  000D7E  0EFE               	movlw	-2
  1635  000D80  CFE3 F040          	movff	plusw1,btemp+1
  1636  000D84  0EFF               	movlw	-1
  1637  000D86  CFE3 F041          	movff	plusw1,btemp+2
  1638  000D8A  0E0A               	movlw	10
  1639  000D8C  2440               	addwf	btemp+1,w,c
  1640  000D8E  6ED9               	movwf	fsr2l,c
  1641  000D90  0E00               	movlw	0
  1642  000D92  2041               	addwfc	btemp+2,w,c
  1643  000D94  6EDA               	movwf	fsr2h,c
  1644  000D96  CFDE F040          	movff	postinc2,btemp+1
  1645  000D9A  CFDD F041          	movff	postdec2,btemp+2
  1646  000D9E  C040  FFE6         	movff	btemp+1,postinc1
  1647  000DA2  C041  FFE6         	movff	btemp+2,postinc1
  1648                           
  1649                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  1650  000DA6  0EFC               	movlw	-4
  1651  000DA8  CFE3 F040          	movff	plusw1,btemp+1
  1652  000DAC  0EFD               	movlw	-3
  1653  000DAE  CFE3 F041          	movff	plusw1,btemp+2
  1654  000DB2  0E0C               	movlw	12
  1655  000DB4  2440               	addwf	btemp+1,w,c
  1656  000DB6  6ED9               	movwf	fsr2l,c
  1657  000DB8  0E00               	movlw	0
  1658  000DBA  2041               	addwfc	btemp+2,w,c
  1659  000DBC  6EDA               	movwf	fsr2h,c
  1660  000DBE  CFDE F040          	movff	postinc2,btemp+1
  1661  000DC2  CFDD F041          	movff	postdec2,btemp+2
  1662  000DC6  0E01               	movlw	1
  1663  000DC8  2640               	addwf	btemp+1,f,c
  1664  000DCA  0E00               	movlw	0
  1665  000DCC  2241               	addwfc	btemp+2,f,c
  1666  000DCE  C040  FFE6         	movff	btemp+1,postinc1
  1667  000DD2  C041  FFE6         	movff	btemp+2,postinc1
  1668  000DD6  EC3B  F008         	call	___lwmod	;wreg free
  1669                           
  1670                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1671  000DDA  0EFE               	movlw	-2
  1672  000DDC  CFE3 F049          	movff	plusw1,btemp+10
  1673  000DE0  0EFF               	movlw	-1
  1674  000DE2  CFE3 F04A          	movff	plusw1,btemp+11
  1675  000DE6  0E0C               	movlw	12
  1676  000DE8  2449               	addwf	btemp+10,w,c
  1677  000DEA  6ED9               	movwf	fsr2l,c
  1678  000DEC  0E00               	movlw	0
  1679  000DEE  204A               	addwfc	btemp+11,w,c
  1680  000DF0  6EDA               	movwf	fsr2h,c
  1681  000DF2  C03F  FFDE         	movff	btemp,postinc2
  1682  000DF6  C040  FFDD         	movff	btemp+1,postdec2
  1683                           
  1684                           ;semaphore.c: 40: dispatcher(READY);
  1685  000DFA  0E01               	movlw	1
  1686  000DFC  6EE6               	movwf	postinc1,c
  1687  000DFE  EC0A  F000         	call	_dispatcher	;wreg free
  1688  000E02                     l1529:
  1689                           
  1690                           ;semaphore.c: 41: }
  1691                           ;semaphore.c: 43: (INTCONbits.GIE = 1);
  1692  000E02  8EF2               	bsf	intcon,7,c	;volatile
  1693                           
  1694                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  1695  000E04  52E5               	movf	postdec1,f,c
  1696  000E06  52E5               	movf	postdec1,f,c
  1697  000E08  0012               	return		;funcret
  1698  000E0A                     __end_of_sem_post:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           plusw0	equ	0xFEB
  1709                           fsr0h	equ	0xFEA
  1710                           fsr0l	equ	0xFE9
  1711                           wreg	equ	0xFE8
  1712                           postinc1	equ	0xFE6
  1713                           postdec1	equ	0xFE5
  1714                           plusw1	equ	0xFE3
  1715                           fsr1h	equ	0xFE2
  1716                           fsr1l	equ	0xFE1
  1717                           indf2	equ	0xFDF
  1718                           postinc2	equ	0xFDE
  1719                           postdec2	equ	0xFDD
  1720                           plusw2	equ	0xFDB
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _delay *****************
  1726 ;; Defined at:
  1727 ;;		line 59 in file "kernel.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  time_ms         2  [STACK] unsigned int 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1  [STACK] void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         0       0       0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0
  1744 ;;      Totals:         0       0       0       0       0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    7
  1748 ;; This function calls:
  1749 ;;		___wmul
  1750 ;;		_dispatcher
  1751 ;; This function is called by:
  1752 ;;		_aviao1
  1753 ;;		_aviao2
  1754 ;;		_tluzes
  1755 ;;		_tluzesescreve
  1756 ;; This function uses a reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text10
  1760  001482                     __ptext10:
  1761                           	opt stack 0
  1762  001482                     _delay:
  1763                           	opt stack 19
  1764                           
  1765                           ;kernel.c: 61: (INTCONbits.GIE = 0);
  1766                           
  1767                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1768                           ;incstack = 0
  1769  001482  9EF2               	bcf	intcon,7,c	;volatile
  1770                           
  1771                           ;kernel.c: 63: F_APTOS[task_running].delay_time = time_ms;
  1772  001484  0E6E               	movlw	110
  1773  001486  6EE6               	movwf	postinc1,c
  1774  001488  0E00               	movlw	0
  1775  00148A  6EE6               	movwf	postinc1,c
  1776  00148C  C005  FFE6         	movff	_task_running,postinc1
  1777  001490  C006  FFE6         	movff	_task_running+1,postinc1
  1778  001494  ECEC  F008         	call	___wmul	;wreg free
  1779  001498  0EF4               	movlw	low (_F_APTOS+6)
  1780  00149A  243F               	addwf	btemp,w,c
  1781  00149C  6EE9               	movwf	fsr0l,c
  1782  00149E  0E00               	movlw	high (_F_APTOS+6)
  1783  0014A0  2040               	addwfc	btemp+1,w,c
  1784  0014A2  6EEA               	movwf	fsr0h,c
  1785                           
  1786                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  1787  0014A4  50E1               	movf	fsr1l,w,c
  1788  0014A6  0FFE               	addlw	-2
  1789  0014A8  6ED9               	movwf	fsr2l,c
  1790  0014AA  50E2               	movf	fsr1h,w,c
  1791  0014AC  6EDA               	movwf	fsr2h,c
  1792  0014AE  0EFF               	movlw	255
  1793  0014B0  22DA               	addwfc	fsr2h,f,c
  1794  0014B2  CFDE FFEE          	movff	postinc2,postinc0
  1795  0014B6  CFDD FFED          	movff	postdec2,postdec0
  1796                           
  1797                           ;kernel.c: 64: dispatcher(SLEEPING);
  1798  0014BA  0E03               	movlw	3
  1799  0014BC  6EE6               	movwf	postinc1,c
  1800  0014BE  EC0A  F000         	call	_dispatcher	;wreg free
  1801                           
  1802                           ;kernel.c: 66: (INTCONbits.GIE = 1);
  1803  0014C2  8EF2               	bsf	intcon,7,c	;volatile
  1804                           
  1805                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  1806  0014C4  52E5               	movf	postdec1,f,c
  1807  0014C6  52E5               	movf	postdec1,f,c
  1808  0014C8  0012               	return		;funcret
  1809  0014CA                     __end_of_delay:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           prodh	equ	0xFF4
  1816                           prodl	equ	0xFF3
  1817                           intcon	equ	0xFF2
  1818                           postinc0	equ	0xFEE
  1819                           postdec0	equ	0xFED
  1820                           plusw0	equ	0xFEB
  1821                           fsr0h	equ	0xFEA
  1822                           fsr0l	equ	0xFE9
  1823                           wreg	equ	0xFE8
  1824                           postinc1	equ	0xFE6
  1825                           postdec1	equ	0xFE5
  1826                           plusw1	equ	0xFE3
  1827                           fsr1h	equ	0xFE2
  1828                           fsr1l	equ	0xFE1
  1829                           indf2	equ	0xFDF
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           plusw2	equ	0xFDB
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _dispatcher *****************
  1838 ;; Defined at:
  1839 ;;		line 34 in file "kernel.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  state           1  [STACK] enum E3007
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1  [STACK] void 
  1846 ;; Registers used:
  1847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1853 ;;      Params:         0       0       0       0       0       0       0
  1854 ;;      Locals:         0       0       0       0       0       0       0
  1855 ;;      Temps:          0       0       0       0       0       0       0
  1856 ;;      Totals:         0       0       0       0       0       0       0
  1857 ;;Total ram usage:        0 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    6
  1860 ;; This function calls:
  1861 ;;		___wmul
  1862 ;;		_rr_scheduler
  1863 ;; This function is called by:
  1864 ;;		_delay
  1865 ;;		_int_high
  1866 ;;		_sem_wait
  1867 ;;		_sem_post
  1868 ;;		_write_pipe
  1869 ;;		_read_pipe
  1870 ;; This function uses a reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text11
  1874  000014                     __ptext11:
  1875                           	opt stack 0
  1876  000014                     _dispatcher:
  1877                           	opt stack 15
  1878                           
  1879                           ;kernel.c: 36: (INTCONbits.GIE = 0);
  1880                           
  1881                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1882                           ;incstack = 0
  1883  000014  9EF2               	bcf	intcon,7,c	;volatile
  1884                           
  1885                           ;kernel.c: 39: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  1886                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  1887  000016  0E6E               	movlw	110
  1888  000018  6EE6               	movwf	postinc1,c
  1889  00001A  0E00               	movlw	0
  1890  00001C  6EE6               	movwf	postinc1,c
  1891  00001E  C005  FFE6         	movff	_task_running,postinc1
  1892  000022  C006  FFE6         	movff	_task_running+1,postinc1
  1893  000026  ECEC  F008         	call	___wmul	;wreg free
  1894  00002A  0EF6               	movlw	low (_F_APTOS+8)
  1895  00002C  243F               	addwf	btemp,w,c
  1896  00002E  6ED9               	movwf	fsr2l,c
  1897  000030  0E00               	movlw	high (_F_APTOS+8)
  1898  000032  2040               	addwfc	btemp+1,w,c
  1899  000034  6EDA               	movwf	fsr2h,c
  1900  000036  0EFF               	movlw	-1
  1901  000038  CFE3 FFDF          	movff	plusw1,indf2
  1902  00003C  0E6E               	movlw	110
  1903  00003E  6EE6               	movwf	postinc1,c
  1904  000040  0E00               	movlw	0
  1905  000042  6EE6               	movwf	postinc1,c
  1906  000044  C005  FFE6         	movff	_task_running,postinc1
  1907  000048  C006  FFE6         	movff	_task_running+1,postinc1
  1908  00004C  ECEC  F008         	call	___wmul	;wreg free
  1909  000050  0E59               	movlw	low (_F_APTOS+107)
  1910  000052  243F               	addwf	btemp,w,c
  1911  000054  6ED9               	movwf	fsr2l,c
  1912  000056  0E01               	movlw	high (_F_APTOS+107)
  1913  000058  2040               	addwfc	btemp+1,w,c
  1914  00005A  6EDA               	movwf	fsr2h,c
  1915  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  1916  000060  0E6E               	movlw	110
  1917  000062  6EE6               	movwf	postinc1,c
  1918  000064  0E00               	movlw	0
  1919  000066  6EE6               	movwf	postinc1,c
  1920  000068  C005  FFE6         	movff	_task_running,postinc1
  1921  00006C  C006  FFE6         	movff	_task_running+1,postinc1
  1922  000070  ECEC  F008         	call	___wmul	;wreg free
  1923  000074  0E5A               	movlw	low (_F_APTOS+108)
  1924  000076  243F               	addwf	btemp,w,c
  1925  000078  6ED9               	movwf	fsr2l,c
  1926  00007A  0E01               	movlw	high (_F_APTOS+108)
  1927  00007C  2040               	addwfc	btemp+1,w,c
  1928  00007E  6EDA               	movwf	fsr2h,c
  1929  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  1930  000084  0E6E               	movlw	110
  1931  000086  6EE6               	movwf	postinc1,c
  1932  000088  0E00               	movlw	0
  1933  00008A  6EE6               	movwf	postinc1,c
  1934  00008C  C005  FFE6         	movff	_task_running,postinc1
  1935  000090  C006  FFE6         	movff	_task_running+1,postinc1
  1936  000094  ECEC  F008         	call	___wmul	;wreg free
  1937  000098  0E5B               	movlw	low (_F_APTOS+109)
  1938  00009A  243F               	addwf	btemp,w,c
  1939  00009C  6ED9               	movwf	fsr2l,c
  1940  00009E  0E01               	movlw	high (_F_APTOS+109)
  1941  0000A0  2040               	addwfc	btemp+1,w,c
  1942  0000A2  6EDA               	movwf	fsr2h,c
  1943  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  1944  0000A8  0E6E               	movlw	110
  1945  0000AA  6EE6               	movwf	postinc1,c
  1946  0000AC  0E00               	movlw	0
  1947  0000AE  6EE6               	movwf	postinc1,c
  1948  0000B0  C005  FFE6         	movff	_task_running,postinc1
  1949  0000B4  C006  FFE6         	movff	_task_running+1,postinc1
  1950  0000B8  ECEC  F008         	call	___wmul	;wreg free
  1951  0000BC  0E57               	movlw	low (_F_APTOS+105)
  1952  0000BE  243F               	addwf	btemp,w,c
  1953  0000C0  6ED9               	movwf	fsr2l,c
  1954  0000C2  0E01               	movlw	high (_F_APTOS+105)
  1955  0000C4  2040               	addwfc	btemp+1,w,c
  1956  0000C6  6EDA               	movwf	fsr2h,c
  1957  0000C8  0E00               	movlw	0
  1958  0000CA  6EDE               	movwf	postinc2,c
  1959  0000CC  0E00               	movlw	0
  1960  0000CE  6EDD               	movwf	postdec2,c
  1961  0000D0                     l1463:
  1962  0000D0  0E03               	movlw	3
  1963  0000D2  6EE6               	movwf	postinc1,c
  1964  0000D4  0E00               	movlw	0
  1965  0000D6  6EE6               	movwf	postinc1,c
  1966  0000D8  0E6E               	movlw	110
  1967  0000DA  6EE6               	movwf	postinc1,c
  1968  0000DC  0E00               	movlw	0
  1969  0000DE  6EE6               	movwf	postinc1,c
  1970  0000E0  C005  FFE6         	movff	_task_running,postinc1
  1971  0000E4  C006  FFE6         	movff	_task_running+1,postinc1
  1972  0000E8  ECEC  F008         	call	___wmul	;wreg free
  1973  0000EC  0E57               	movlw	low (_F_APTOS+105)
  1974  0000EE  243F               	addwf	btemp,w,c
  1975  0000F0  6ED9               	movwf	fsr2l,c
  1976  0000F2  0E01               	movlw	high (_F_APTOS+105)
  1977  0000F4  2040               	addwfc	btemp+1,w,c
  1978  0000F6  6EDA               	movwf	fsr2h,c
  1979  0000F8  CFDE F040          	movff	postinc2,btemp+1
  1980  0000FC  CFDD F041          	movff	postdec2,btemp+2
  1981  000100  C040  FFE6         	movff	btemp+1,postinc1
  1982  000104  C041  FFE6         	movff	btemp+2,postinc1
  1983  000108  ECEC  F008         	call	___wmul	;wreg free
  1984  00010C  C03F  F047         	movff	btemp,btemp+8
  1985  000110  C040  F048         	movff	btemp+1,btemp+9
  1986  000114  0E6E               	movlw	110
  1987  000116  6EE6               	movwf	postinc1,c
  1988  000118  0E00               	movlw	0
  1989  00011A  6EE6               	movwf	postinc1,c
  1990  00011C  C005  FFE6         	movff	_task_running,postinc1
  1991  000120  C006  FFE6         	movff	_task_running+1,postinc1
  1992  000124  ECEC  F008         	call	___wmul	;wreg free
  1993  000128  0EEE               	movlw	low _F_APTOS
  1994  00012A  6E49               	movwf	btemp+10,c
  1995  00012C  0E00               	movlw	high _F_APTOS
  1996  00012E  6E4A               	movwf	btemp+11,c
  1997  000130  0E09               	movlw	9
  1998  000132  2649               	addwf	btemp+10,f,c
  1999  000134  0E00               	movlw	0
  2000  000136  224A               	addwfc	btemp+11,f,c
  2001  000138  503F               	movf	btemp,w,c
  2002  00013A  2649               	addwf	btemp+10,f,c
  2003  00013C  5040               	movf	btemp+1,w,c
  2004  00013E  224A               	addwfc	btemp+11,f,c
  2005  000140  5047               	movf	btemp+8,w,c
  2006  000142  2449               	addwf	btemp+10,w,c
  2007  000144  6ED9               	movwf	fsr2l,c
  2008  000146  5048               	movf	btemp+9,w,c
  2009  000148  204A               	addwfc	btemp+11,w,c
  2010  00014A  6EDA               	movwf	fsr2h,c
  2011  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  2012  000150  0E03               	movlw	3
  2013  000152  6EE6               	movwf	postinc1,c
  2014  000154  0E00               	movlw	0
  2015  000156  6EE6               	movwf	postinc1,c
  2016  000158  0E6E               	movlw	110
  2017  00015A  6EE6               	movwf	postinc1,c
  2018  00015C  0E00               	movlw	0
  2019  00015E  6EE6               	movwf	postinc1,c
  2020  000160  C005  FFE6         	movff	_task_running,postinc1
  2021  000164  C006  FFE6         	movff	_task_running+1,postinc1
  2022  000168  ECEC  F008         	call	___wmul	;wreg free
  2023  00016C  0E57               	movlw	low (_F_APTOS+105)
  2024  00016E  243F               	addwf	btemp,w,c
  2025  000170  6ED9               	movwf	fsr2l,c
  2026  000172  0E01               	movlw	high (_F_APTOS+105)
  2027  000174  2040               	addwfc	btemp+1,w,c
  2028  000176  6EDA               	movwf	fsr2h,c
  2029  000178  CFDE F040          	movff	postinc2,btemp+1
  2030  00017C  CFDD F041          	movff	postdec2,btemp+2
  2031  000180  C040  FFE6         	movff	btemp+1,postinc1
  2032  000184  C041  FFE6         	movff	btemp+2,postinc1
  2033  000188  ECEC  F008         	call	___wmul	;wreg free
  2034  00018C  C03F  F047         	movff	btemp,btemp+8
  2035  000190  C040  F048         	movff	btemp+1,btemp+9
  2036  000194  0E6E               	movlw	110
  2037  000196  6EE6               	movwf	postinc1,c
  2038  000198  0E00               	movlw	0
  2039  00019A  6EE6               	movwf	postinc1,c
  2040  00019C  C005  FFE6         	movff	_task_running,postinc1
  2041  0001A0  C006  FFE6         	movff	_task_running+1,postinc1
  2042  0001A4  ECEC  F008         	call	___wmul	;wreg free
  2043  0001A8  0EEE               	movlw	low _F_APTOS
  2044  0001AA  6E49               	movwf	btemp+10,c
  2045  0001AC  0E00               	movlw	high _F_APTOS
  2046  0001AE  6E4A               	movwf	btemp+11,c
  2047  0001B0  0E0A               	movlw	10
  2048  0001B2  2649               	addwf	btemp+10,f,c
  2049  0001B4  0E00               	movlw	0
  2050  0001B6  224A               	addwfc	btemp+11,f,c
  2051  0001B8  503F               	movf	btemp,w,c
  2052  0001BA  2649               	addwf	btemp+10,f,c
  2053  0001BC  5040               	movf	btemp+1,w,c
  2054  0001BE  224A               	addwfc	btemp+11,f,c
  2055  0001C0  5047               	movf	btemp+8,w,c
  2056  0001C2  2449               	addwf	btemp+10,w,c
  2057  0001C4  6ED9               	movwf	fsr2l,c
  2058  0001C6  5048               	movf	btemp+9,w,c
  2059  0001C8  204A               	addwfc	btemp+11,w,c
  2060  0001CA  6EDA               	movwf	fsr2h,c
  2061  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2062  0001D0  0E03               	movlw	3
  2063  0001D2  6EE6               	movwf	postinc1,c
  2064  0001D4  0E00               	movlw	0
  2065  0001D6  6EE6               	movwf	postinc1,c
  2066  0001D8  0E6E               	movlw	110
  2067  0001DA  6EE6               	movwf	postinc1,c
  2068  0001DC  0E00               	movlw	0
  2069  0001DE  6EE6               	movwf	postinc1,c
  2070  0001E0  C005  FFE6         	movff	_task_running,postinc1
  2071  0001E4  C006  FFE6         	movff	_task_running+1,postinc1
  2072  0001E8  ECEC  F008         	call	___wmul	;wreg free
  2073  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2074  0001EE  243F               	addwf	btemp,w,c
  2075  0001F0  6ED9               	movwf	fsr2l,c
  2076  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2077  0001F4  2040               	addwfc	btemp+1,w,c
  2078  0001F6  6EDA               	movwf	fsr2h,c
  2079  0001F8  CFDE F040          	movff	postinc2,btemp+1
  2080  0001FC  CFDD F041          	movff	postdec2,btemp+2
  2081  000200  C040  FFE6         	movff	btemp+1,postinc1
  2082  000204  C041  FFE6         	movff	btemp+2,postinc1
  2083  000208  ECEC  F008         	call	___wmul	;wreg free
  2084  00020C  C03F  F047         	movff	btemp,btemp+8
  2085  000210  C040  F048         	movff	btemp+1,btemp+9
  2086  000214  0E6E               	movlw	110
  2087  000216  6EE6               	movwf	postinc1,c
  2088  000218  0E00               	movlw	0
  2089  00021A  6EE6               	movwf	postinc1,c
  2090  00021C  C005  FFE6         	movff	_task_running,postinc1
  2091  000220  C006  FFE6         	movff	_task_running+1,postinc1
  2092  000224  ECEC  F008         	call	___wmul	;wreg free
  2093  000228  0EEE               	movlw	low _F_APTOS
  2094  00022A  6E49               	movwf	btemp+10,c
  2095  00022C  0E00               	movlw	high _F_APTOS
  2096  00022E  6E4A               	movwf	btemp+11,c
  2097  000230  0E0B               	movlw	11
  2098  000232  2649               	addwf	btemp+10,f,c
  2099  000234  0E00               	movlw	0
  2100  000236  224A               	addwfc	btemp+11,f,c
  2101  000238  503F               	movf	btemp,w,c
  2102  00023A  2649               	addwf	btemp+10,f,c
  2103  00023C  5040               	movf	btemp+1,w,c
  2104  00023E  224A               	addwfc	btemp+11,f,c
  2105  000240  5047               	movf	btemp+8,w,c
  2106  000242  2449               	addwf	btemp+10,w,c
  2107  000244  6ED9               	movwf	fsr2l,c
  2108  000246  5048               	movf	btemp+9,w,c
  2109  000248  204A               	addwfc	btemp+11,w,c
  2110  00024A  6EDA               	movwf	fsr2h,c
  2111  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2112  000250  0E6E               	movlw	110
  2113  000252  6EE6               	movwf	postinc1,c
  2114  000254  0E00               	movlw	0
  2115  000256  6EE6               	movwf	postinc1,c
  2116  000258  C005  FFE6         	movff	_task_running,postinc1
  2117  00025C  C006  FFE6         	movff	_task_running+1,postinc1
  2118  000260  ECEC  F008         	call	___wmul	;wreg free
  2119  000264  0E57               	movlw	low (_F_APTOS+105)
  2120  000266  243F               	addwf	btemp,w,c
  2121  000268  6ED9               	movwf	fsr2l,c
  2122  00026A  0E01               	movlw	high (_F_APTOS+105)
  2123  00026C  2040               	addwfc	btemp+1,w,c
  2124  00026E  6EDA               	movwf	fsr2h,c
  2125  000270  2ADE               	incf	postinc2,f,c
  2126  000272  0E00               	movlw	0
  2127  000274  22DD               	addwfc	postdec2,f,c
  2128  000276  0006               	pop		;# 
  2129  000278  50FC               	movf	stkptr,w,c	;volatile
  2130  00027A  A4D8               	btfss	status,2,c
  2131  00027C  D729               	goto	l1463
  2132                           
  2133                           ;kernel.c: 43: task_running = rr_scheduler();
  2134  00027E  EC7E  F009         	call	_rr_scheduler	;wreg free
  2135  000282  C03F  F005         	movff	btemp,_task_running
  2136  000286  C040  F006         	movff	btemp+1,_task_running+1
  2137                           
  2138                           ;kernel.c: 49: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2139  00028A  6AFC               	clrf	stkptr,c	;volatile
  2140  00028C  0E6E               	movlw	110
  2141  00028E  6EE6               	movwf	postinc1,c
  2142  000290  0E00               	movlw	0
  2143  000292  6EE6               	movwf	postinc1,c
  2144  000294  C005  FFE6         	movff	_task_running,postinc1
  2145  000298  C006  FFE6         	movff	_task_running+1,postinc1
  2146  00029C  ECEC  F008         	call	___wmul	;wreg free
  2147  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2148  0002A2  243F               	addwf	btemp,w,c
  2149  0002A4  6ED9               	movwf	fsr2l,c
  2150  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2151  0002A8  2040               	addwfc	btemp+1,w,c
  2152  0002AA  6EDA               	movwf	fsr2h,c
  2153  0002AC  50DE               	movf	postinc2,w,c
  2154  0002AE  10DE               	iorwf	postinc2,w,c
  2155  0002B0  A4D8               	btfss	status,2,c
  2156  0002B2  D01B               	goto	l1483
  2157  0002B4  0005               	push		;# 
  2158  0002B6  0E6E               	movlw	110
  2159  0002B8  6EE6               	movwf	postinc1,c
  2160  0002BA  0E00               	movlw	0
  2161  0002BC  6EE6               	movwf	postinc1,c
  2162  0002BE  C005  FFE6         	movff	_task_running,postinc1
  2163  0002C2  C006  FFE6         	movff	_task_running+1,postinc1
  2164  0002C6  ECEC  F008         	call	___wmul	;wreg free
  2165  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2166  0002CC  243F               	addwf	btemp,w,c
  2167  0002CE  6ED9               	movwf	fsr2l,c
  2168  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2169  0002D2  2040               	addwfc	btemp+1,w,c
  2170  0002D4  6EDA               	movwf	fsr2h,c
  2171  0002D6  CFDE F040          	movff	postinc2,btemp+1
  2172  0002DA  CFDD F041          	movff	postdec2,btemp+2
  2173  0002DE  C040  FFFD         	movff	btemp+1,tosl	;volatile
  2174  0002E2  C041  FFFE         	movff	btemp+2,tosh	;volatile
  2175  0002E6  6AFF               	clrf	tosu,c	;volatile
  2176  0002E8  D11F               	goto	u47_20
  2177  0002EA                     l1483:
  2178  0002EA  0E6E               	movlw	110
  2179  0002EC  6EE6               	movwf	postinc1,c
  2180  0002EE  0E00               	movlw	0
  2181  0002F0  6EE6               	movwf	postinc1,c
  2182  0002F2  C005  FFE6         	movff	_task_running,postinc1
  2183  0002F6  C006  FFE6         	movff	_task_running+1,postinc1
  2184  0002FA  ECEC  F008         	call	___wmul	;wreg free
  2185  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2186  000300  243F               	addwf	btemp,w,c
  2187  000302  6ED9               	movwf	fsr2l,c
  2188  000304  0E01               	movlw	high (_F_APTOS+107)
  2189  000306  2040               	addwfc	btemp+1,w,c
  2190  000308  6EDA               	movwf	fsr2h,c
  2191  00030A  50DF               	movf	indf2,w,c
  2192  00030C  6EE0               	movwf	bsr,c	;volatile
  2193  00030E  0E6E               	movlw	110
  2194  000310  6EE6               	movwf	postinc1,c
  2195  000312  0E00               	movlw	0
  2196  000314  6EE6               	movwf	postinc1,c
  2197  000316  C005  FFE6         	movff	_task_running,postinc1
  2198  00031A  C006  FFE6         	movff	_task_running+1,postinc1
  2199  00031E  ECEC  F008         	call	___wmul	;wreg free
  2200  000322  0E5A               	movlw	low (_F_APTOS+108)
  2201  000324  243F               	addwf	btemp,w,c
  2202  000326  6ED9               	movwf	fsr2l,c
  2203  000328  0E01               	movlw	high (_F_APTOS+108)
  2204  00032A  2040               	addwfc	btemp+1,w,c
  2205  00032C  6EDA               	movwf	fsr2h,c
  2206  00032E  50DF               	movf	indf2,w,c
  2207  000330  6ED8               	movwf	status,c	;volatile
  2208  000332  0E6E               	movlw	110
  2209  000334  6EE6               	movwf	postinc1,c
  2210  000336  0E00               	movlw	0
  2211  000338  6EE6               	movwf	postinc1,c
  2212  00033A  C005  FFE6         	movff	_task_running,postinc1
  2213  00033E  C006  FFE6         	movff	_task_running+1,postinc1
  2214  000342  ECEC  F008         	call	___wmul	;wreg free
  2215  000346  0E5B               	movlw	low (_F_APTOS+109)
  2216  000348  243F               	addwf	btemp,w,c
  2217  00034A  6ED9               	movwf	fsr2l,c
  2218  00034C  0E01               	movlw	high (_F_APTOS+109)
  2219  00034E  2040               	addwfc	btemp+1,w,c
  2220  000350  6EDA               	movwf	fsr2h,c
  2221  000352  50DF               	movf	indf2,w,c
  2222  000354  6E4A               	movwf	btemp+11,c
  2223  000356  504A               	movf	btemp+11,w,c
  2224  000358                     l76:
  2225  000358  0005               	push		;# 
  2226  00035A  0E6E               	movlw	110
  2227  00035C  6EE6               	movwf	postinc1,c
  2228  00035E  0E00               	movlw	0
  2229  000360  6EE6               	movwf	postinc1,c
  2230  000362  C005  FFE6         	movff	_task_running,postinc1
  2231  000366  C006  FFE6         	movff	_task_running+1,postinc1
  2232  00036A  ECEC  F008         	call	___wmul	;wreg free
  2233  00036E  0E57               	movlw	low (_F_APTOS+105)
  2234  000370  243F               	addwf	btemp,w,c
  2235  000372  6ED9               	movwf	fsr2l,c
  2236  000374  0E01               	movlw	high (_F_APTOS+105)
  2237  000376  2040               	addwfc	btemp+1,w,c
  2238  000378  6EDA               	movwf	fsr2h,c
  2239  00037A  06DE               	decf	postinc2,f,c
  2240  00037C  0E00               	movlw	0
  2241  00037E  5ADD               	subwfb	postdec2,f,c
  2242  000380  0E03               	movlw	3
  2243  000382  6EE6               	movwf	postinc1,c
  2244  000384  0E00               	movlw	0
  2245  000386  6EE6               	movwf	postinc1,c
  2246  000388  0E6E               	movlw	110
  2247  00038A  6EE6               	movwf	postinc1,c
  2248  00038C  0E00               	movlw	0
  2249  00038E  6EE6               	movwf	postinc1,c
  2250  000390  C005  FFE6         	movff	_task_running,postinc1
  2251  000394  C006  FFE6         	movff	_task_running+1,postinc1
  2252  000398  ECEC  F008         	call	___wmul	;wreg free
  2253  00039C  0E57               	movlw	low (_F_APTOS+105)
  2254  00039E  243F               	addwf	btemp,w,c
  2255  0003A0  6ED9               	movwf	fsr2l,c
  2256  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2257  0003A4  2040               	addwfc	btemp+1,w,c
  2258  0003A6  6EDA               	movwf	fsr2h,c
  2259  0003A8  CFDE F040          	movff	postinc2,btemp+1
  2260  0003AC  CFDD F041          	movff	postdec2,btemp+2
  2261  0003B0  C040  FFE6         	movff	btemp+1,postinc1
  2262  0003B4  C041  FFE6         	movff	btemp+2,postinc1
  2263  0003B8  ECEC  F008         	call	___wmul	;wreg free
  2264  0003BC  C03F  F047         	movff	btemp,btemp+8
  2265  0003C0  C040  F048         	movff	btemp+1,btemp+9
  2266  0003C4  0E6E               	movlw	110
  2267  0003C6  6EE6               	movwf	postinc1,c
  2268  0003C8  0E00               	movlw	0
  2269  0003CA  6EE6               	movwf	postinc1,c
  2270  0003CC  C005  FFE6         	movff	_task_running,postinc1
  2271  0003D0  C006  FFE6         	movff	_task_running+1,postinc1
  2272  0003D4  ECEC  F008         	call	___wmul	;wreg free
  2273  0003D8  0EEE               	movlw	low _F_APTOS
  2274  0003DA  6E49               	movwf	btemp+10,c
  2275  0003DC  0E00               	movlw	high _F_APTOS
  2276  0003DE  6E4A               	movwf	btemp+11,c
  2277  0003E0  0E09               	movlw	9
  2278  0003E2  2649               	addwf	btemp+10,f,c
  2279  0003E4  0E00               	movlw	0
  2280  0003E6  224A               	addwfc	btemp+11,f,c
  2281  0003E8  503F               	movf	btemp,w,c
  2282  0003EA  2649               	addwf	btemp+10,f,c
  2283  0003EC  5040               	movf	btemp+1,w,c
  2284  0003EE  224A               	addwfc	btemp+11,f,c
  2285  0003F0  5047               	movf	btemp+8,w,c
  2286  0003F2  2449               	addwf	btemp+10,w,c
  2287  0003F4  6ED9               	movwf	fsr2l,c
  2288  0003F6  5048               	movf	btemp+9,w,c
  2289  0003F8  204A               	addwfc	btemp+11,w,c
  2290  0003FA  6EDA               	movwf	fsr2h,c
  2291  0003FC  50DF               	movf	indf2,w,c
  2292  0003FE  6EFF               	movwf	tosu,c	;volatile
  2293  000400  0E03               	movlw	3
  2294  000402  6EE6               	movwf	postinc1,c
  2295  000404  0E00               	movlw	0
  2296  000406  6EE6               	movwf	postinc1,c
  2297  000408  0E6E               	movlw	110
  2298  00040A  6EE6               	movwf	postinc1,c
  2299  00040C  0E00               	movlw	0
  2300  00040E  6EE6               	movwf	postinc1,c
  2301  000410  C005  FFE6         	movff	_task_running,postinc1
  2302  000414  C006  FFE6         	movff	_task_running+1,postinc1
  2303  000418  ECEC  F008         	call	___wmul	;wreg free
  2304  00041C  0E57               	movlw	low (_F_APTOS+105)
  2305  00041E  243F               	addwf	btemp,w,c
  2306  000420  6ED9               	movwf	fsr2l,c
  2307  000422  0E01               	movlw	high (_F_APTOS+105)
  2308  000424  2040               	addwfc	btemp+1,w,c
  2309  000426  6EDA               	movwf	fsr2h,c
  2310  000428  CFDE F040          	movff	postinc2,btemp+1
  2311  00042C  CFDD F041          	movff	postdec2,btemp+2
  2312  000430  C040  FFE6         	movff	btemp+1,postinc1
  2313  000434  C041  FFE6         	movff	btemp+2,postinc1
  2314  000438  ECEC  F008         	call	___wmul	;wreg free
  2315  00043C  C03F  F047         	movff	btemp,btemp+8
  2316  000440  C040  F048         	movff	btemp+1,btemp+9
  2317  000444  0E6E               	movlw	110
  2318  000446  6EE6               	movwf	postinc1,c
  2319  000448  0E00               	movlw	0
  2320  00044A  6EE6               	movwf	postinc1,c
  2321  00044C  C005  FFE6         	movff	_task_running,postinc1
  2322  000450  C006  FFE6         	movff	_task_running+1,postinc1
  2323  000454  ECEC  F008         	call	___wmul	;wreg free
  2324  000458  0EEE               	movlw	low _F_APTOS
  2325  00045A  6E49               	movwf	btemp+10,c
  2326  00045C  0E00               	movlw	high _F_APTOS
  2327  00045E  6E4A               	movwf	btemp+11,c
  2328  000460  0E0A               	movlw	10
  2329  000462  2649               	addwf	btemp+10,f,c
  2330  000464  0E00               	movlw	0
  2331  000466  224A               	addwfc	btemp+11,f,c
  2332  000468  503F               	movf	btemp,w,c
  2333  00046A  2649               	addwf	btemp+10,f,c
  2334  00046C  5040               	movf	btemp+1,w,c
  2335  00046E  224A               	addwfc	btemp+11,f,c
  2336  000470  5047               	movf	btemp+8,w,c
  2337  000472  2449               	addwf	btemp+10,w,c
  2338  000474  6ED9               	movwf	fsr2l,c
  2339  000476  5048               	movf	btemp+9,w,c
  2340  000478  204A               	addwfc	btemp+11,w,c
  2341  00047A  6EDA               	movwf	fsr2h,c
  2342  00047C  50DF               	movf	indf2,w,c
  2343  00047E  6EFD               	movwf	tosl,c	;volatile
  2344  000480  0E03               	movlw	3
  2345  000482  6EE6               	movwf	postinc1,c
  2346  000484  0E00               	movlw	0
  2347  000486  6EE6               	movwf	postinc1,c
  2348  000488  0E6E               	movlw	110
  2349  00048A  6EE6               	movwf	postinc1,c
  2350  00048C  0E00               	movlw	0
  2351  00048E  6EE6               	movwf	postinc1,c
  2352  000490  C005  FFE6         	movff	_task_running,postinc1
  2353  000494  C006  FFE6         	movff	_task_running+1,postinc1
  2354  000498  ECEC  F008         	call	___wmul	;wreg free
  2355  00049C  0E57               	movlw	low (_F_APTOS+105)
  2356  00049E  243F               	addwf	btemp,w,c
  2357  0004A0  6ED9               	movwf	fsr2l,c
  2358  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2359  0004A4  2040               	addwfc	btemp+1,w,c
  2360  0004A6  6EDA               	movwf	fsr2h,c
  2361  0004A8  CFDE F040          	movff	postinc2,btemp+1
  2362  0004AC  CFDD F041          	movff	postdec2,btemp+2
  2363  0004B0  C040  FFE6         	movff	btemp+1,postinc1
  2364  0004B4  C041  FFE6         	movff	btemp+2,postinc1
  2365  0004B8  ECEC  F008         	call	___wmul	;wreg free
  2366  0004BC  C03F  F047         	movff	btemp,btemp+8
  2367  0004C0  C040  F048         	movff	btemp+1,btemp+9
  2368  0004C4  0E6E               	movlw	110
  2369  0004C6  6EE6               	movwf	postinc1,c
  2370  0004C8  0E00               	movlw	0
  2371  0004CA  6EE6               	movwf	postinc1,c
  2372  0004CC  C005  FFE6         	movff	_task_running,postinc1
  2373  0004D0  C006  FFE6         	movff	_task_running+1,postinc1
  2374  0004D4  ECEC  F008         	call	___wmul	;wreg free
  2375  0004D8  0EEE               	movlw	low _F_APTOS
  2376  0004DA  6E49               	movwf	btemp+10,c
  2377  0004DC  0E00               	movlw	high _F_APTOS
  2378  0004DE  6E4A               	movwf	btemp+11,c
  2379  0004E0  0E0B               	movlw	11
  2380  0004E2  2649               	addwf	btemp+10,f,c
  2381  0004E4  0E00               	movlw	0
  2382  0004E6  224A               	addwfc	btemp+11,f,c
  2383  0004E8  503F               	movf	btemp,w,c
  2384  0004EA  2649               	addwf	btemp+10,f,c
  2385  0004EC  5040               	movf	btemp+1,w,c
  2386  0004EE  224A               	addwfc	btemp+11,f,c
  2387  0004F0  5047               	movf	btemp+8,w,c
  2388  0004F2  2449               	addwf	btemp+10,w,c
  2389  0004F4  6ED9               	movwf	fsr2l,c
  2390  0004F6  5048               	movf	btemp+9,w,c
  2391  0004F8  204A               	addwfc	btemp+11,w,c
  2392  0004FA  6EDA               	movwf	fsr2h,c
  2393  0004FC  50DF               	movf	indf2,w,c
  2394  0004FE  6EFE               	movwf	tosh,c	;volatile
  2395  000500  0E6E               	movlw	110
  2396  000502  6EE6               	movwf	postinc1,c
  2397  000504  0E00               	movlw	0
  2398  000506  6EE6               	movwf	postinc1,c
  2399  000508  C005  FFE6         	movff	_task_running,postinc1
  2400  00050C  C006  FFE6         	movff	_task_running+1,postinc1
  2401  000510  ECEC  F008         	call	___wmul	;wreg free
  2402  000514  0E57               	movlw	low (_F_APTOS+105)
  2403  000516  243F               	addwf	btemp,w,c
  2404  000518  6ED9               	movwf	fsr2l,c
  2405  00051A  0E01               	movlw	high (_F_APTOS+105)
  2406  00051C  2040               	addwfc	btemp+1,w,c
  2407  00051E  6EDA               	movwf	fsr2h,c
  2408  000520  50DE               	movf	postinc2,w,c
  2409  000522  10DE               	iorwf	postinc2,w,c
  2410  000524  A4D8               	btfss	status,2,c
  2411  000526  D718               	goto	l76
  2412  000528                     u47_20:
  2413  000528  0E6E               	movlw	110
  2414  00052A  6EE6               	movwf	postinc1,c
  2415  00052C  0E00               	movlw	0
  2416  00052E  6EE6               	movwf	postinc1,c
  2417  000530  C005  FFE6         	movff	_task_running,postinc1
  2418  000534  C006  FFE6         	movff	_task_running+1,postinc1
  2419  000538  ECEC  F008         	call	___wmul	;wreg free
  2420  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2421  00053E  243F               	addwf	btemp,w,c
  2422  000540  6ED9               	movwf	fsr2l,c
  2423  000542  0E00               	movlw	high (_F_APTOS+8)
  2424  000544  2040               	addwfc	btemp+1,w,c
  2425  000546  6EDA               	movwf	fsr2h,c
  2426  000548  0E02               	movlw	2
  2427  00054A  6EDF               	movwf	indf2,c
  2428                           
  2429                           ;kernel.c: 51: (INTCONbits.GIE = 1);
  2430  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2431                           
  2432                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2433  00054E  52E5               	movf	postdec1,f,c
  2434  000550  0012               	return		;funcret
  2435  000552                     __end_of_dispatcher:
  2436                           	opt stack 0
  2437                           tosu	equ	0xFFF
  2438                           tosh	equ	0xFFE
  2439                           tosl	equ	0xFFD
  2440                           stkptr	equ	0xFFC
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           intcon	equ	0xFF2
  2448                           postinc0	equ	0xFEE
  2449                           postdec0	equ	0xFED
  2450                           plusw0	equ	0xFEB
  2451                           fsr0h	equ	0xFEA
  2452                           fsr0l	equ	0xFE9
  2453                           wreg	equ	0xFE8
  2454                           postinc1	equ	0xFE6
  2455                           postdec1	equ	0xFE5
  2456                           plusw1	equ	0xFE3
  2457                           fsr1h	equ	0xFE2
  2458                           fsr1l	equ	0xFE1
  2459                           bsr	equ	0xFE0
  2460                           indf2	equ	0xFDF
  2461                           postinc2	equ	0xFDE
  2462                           postdec2	equ	0xFDD
  2463                           plusw2	equ	0xFDB
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _rr_scheduler *****************
  2469 ;; Defined at:
  2470 ;;		line 12 in file "scheduler.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  next_task_to    2  [STACK] unsigned int 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  2  [STACK] unsigned int 
  2477 ;; Registers used:
  2478 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2484 ;;      Params:         0       0       0       0       0       0       0
  2485 ;;      Locals:         0       0       0       0       0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0
  2487 ;;      Totals:         0       0       0       0       0       0       0
  2488 ;;Total ram usage:        0 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    5
  2491 ;; This function calls:
  2492 ;;		___lwmod
  2493 ;;		___wmul
  2494 ;; This function is called by:
  2495 ;;		_dispatcher
  2496 ;; This function uses a reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text12
  2500  0012FC                     __ptext12:
  2501                           	opt stack 0
  2502  0012FC                     _rr_scheduler:
  2503                           	opt stack 0
  2504                           
  2505                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2506  0012FC  52E6               	movf	postinc1,f,c
  2507  0012FE  52E6               	movf	postinc1,f,c
  2508                           
  2509                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2510                           
  2511                           ;incstack = 0
  2512  001300  C005  F040         	movff	_task_running,btemp+1
  2513  001304  C006  F041         	movff	_task_running+1,btemp+2
  2514                           
  2515                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2516  001308  0EFE               	movlw	-2
  2517  00130A  C040  FFE3         	movff	btemp+1,plusw1
  2518  00130E  0EFF               	movlw	-1
  2519  001310  C041  FFE3         	movff	btemp+2,plusw1
  2520  001314                     l1411:
  2521                           
  2522                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2523  001314  C007  FFE6         	movff	_tasks_installed,postinc1
  2524  001318  C008  FFE6         	movff	_tasks_installed+1,postinc1
  2525                           
  2526                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2527  00131C  0EFC               	movlw	-4
  2528  00131E  50E3               	movf	plusw1,w,c
  2529  001320  0F01               	addlw	1
  2530  001322  6E40               	movwf	btemp+1,c
  2531  001324  0EFD               	movlw	-3
  2532  001326  CFE3 F041          	movff	plusw1,btemp+2
  2533  00132A  0E00               	movlw	0
  2534  00132C  2241               	addwfc	btemp+2,f,c
  2535  00132E  C040  FFE6         	movff	btemp+1,postinc1
  2536  001332  C041  FFE6         	movff	btemp+2,postinc1
  2537  001336  EC3B  F008         	call	___lwmod	;wreg free
  2538                           
  2539                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2540  00133A  0EFE               	movlw	-2
  2541  00133C  C03F  FFE3         	movff	btemp,plusw1
  2542  001340  0EFF               	movlw	-1
  2543  001342  C040  FFE3         	movff	btemp+1,plusw1
  2544                           
  2545                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2546  001346  0E6E               	movlw	110
  2547  001348  6EE6               	movwf	postinc1,c
  2548  00134A  0E00               	movlw	0
  2549  00134C  6EE6               	movwf	postinc1,c
  2550                           
  2551                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2552  00134E  0EFC               	movlw	-4
  2553  001350  CFE3 FFE6          	movff	plusw1,postinc1
  2554  001354  CFE3 FFE6          	movff	plusw1,postinc1
  2555  001358  ECEC  F008         	call	___wmul	;wreg free
  2556  00135C  0EF6               	movlw	low (_F_APTOS+8)
  2557  00135E  243F               	addwf	btemp,w,c
  2558  001360  6ED9               	movwf	fsr2l,c
  2559  001362  0E00               	movlw	high (_F_APTOS+8)
  2560  001364  2040               	addwfc	btemp+1,w,c
  2561  001366  6EDA               	movwf	fsr2h,c
  2562  001368  04DE               	decf	postinc2,w,c
  2563  00136A  A4D8               	btfss	status,2,c
  2564  00136C  D7D3               	goto	l1411
  2565                           
  2566                           ;scheduler.c: 20: return next_task_to_run;
  2567                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2568  00136E  0EFE               	movlw	-2
  2569  001370  CFE3 F03F          	movff	plusw1,btemp
  2570  001374  0EFF               	movlw	-1
  2571  001376  CFE3 F040          	movff	plusw1,btemp+1
  2572                           
  2573                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2574  00137A  52E5               	movf	postdec1,f,c
  2575  00137C  52E5               	movf	postdec1,f,c
  2576  00137E  0012               	return		;funcret
  2577  001380                     __end_of_rr_scheduler:
  2578                           	opt stack 0
  2579                           tosu	equ	0xFFF
  2580                           tosh	equ	0xFFE
  2581                           tosl	equ	0xFFD
  2582                           stkptr	equ	0xFFC
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           prodh	equ	0xFF4
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           postinc0	equ	0xFEE
  2591                           postdec0	equ	0xFED
  2592                           plusw0	equ	0xFEB
  2593                           fsr0h	equ	0xFEA
  2594                           fsr0l	equ	0xFE9
  2595                           wreg	equ	0xFE8
  2596                           postinc1	equ	0xFE6
  2597                           postdec1	equ	0xFE5
  2598                           plusw1	equ	0xFE3
  2599                           fsr1h	equ	0xFE2
  2600                           fsr1l	equ	0xFE1
  2601                           bsr	equ	0xFE0
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           plusw2	equ	0xFDB
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function ___lwmod *****************
  2611 ;; Defined at:
  2612 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  dividend        2  [STACK] unsigned int 
  2615 ;;  divisor         2  [STACK] unsigned int 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  counter         1  [STACK] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  2  [STACK] unsigned int 
  2620 ;; Registers used:
  2621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2627 ;;      Params:         0       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    4
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_rr_scheduler
  2638 ;;		_sem_post
  2639 ;;		_write_pipe
  2640 ;;		_read_pipe
  2641 ;; This function uses a reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text13
  2645  001076                     __ptext13:
  2646                           	opt stack 0
  2647  001076                     ___lwmod:
  2648                           	opt stack 0
  2649                           
  2650                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2651  001076  52E6               	movf	postinc1,f,c
  2652                           
  2653                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2654                           
  2655                           ;incstack = 0
  2656  001078  0EFB               	movlw	-5
  2657  00107A  CFE3 F03F          	movff	plusw1,btemp
  2658  00107E  0EFC               	movlw	-4
  2659  001080  50E3               	movf	plusw1,w,c
  2660  001082  103F               	iorwf	btemp,w,c
  2661  001084  B4D8               	btfsc	status,2,c
  2662  001086  D04A               	goto	u41_20
  2663                           
  2664                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2665  001088  0EFF               	movlw	-1
  2666  00108A  6AE3               	clrf	plusw1,c
  2667  00108C  D010               	goto	L1
  2668  00108E                     l1379:
  2669                           
  2670                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2671  00108E  0EFB               	movlw	-5
  2672  001090  50E3               	movf	plusw1,w,c
  2673  001092  90D8               	bcf	status,0,c
  2674  001094  34E8               	rlcf	wreg,w,c
  2675  001096  6E3F               	movwf	btemp,c
  2676  001098  0EFB               	movlw	-5
  2677  00109A  C03F  FFE3         	movff	btemp,plusw1
  2678  00109E  0EFC               	movlw	-4
  2679  0010A0  50E3               	movf	plusw1,w,c
  2680  0010A2  34E8               	rlcf	wreg,w,c
  2681  0010A4  6E3F               	movwf	btemp,c
  2682  0010A6  0EFC               	movlw	-4
  2683  0010A8  C03F  FFE3         	movff	btemp,plusw1
  2684                           
  2685                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2686  0010AC  0EFF               	movlw	-1
  2687  0010AE                     L1:
  2688  0010AE  2AE3               	incf	plusw1,f,c
  2689                           
  2690                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2691  0010B0  0EFC               	movlw	-4
  2692  0010B2  AEE3               	btfss	plusw1,7,c
  2693  0010B4  D7EC               	goto	l1379
  2694  0010B6                     u39_20:
  2695                           
  2696                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2697  0010B6  0EFB               	movlw	-5
  2698  0010B8  CFE3 F040          	movff	plusw1,btemp+1
  2699  0010BC  0EFC               	movlw	-4
  2700  0010BE  CFE3 F041          	movff	plusw1,btemp+2
  2701                           
  2702                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2703  0010C2  0EFD               	movlw	-3
  2704  0010C4  CFE3 F049          	movff	plusw1,btemp+10
  2705  0010C8  0EFE               	movlw	-2
  2706  0010CA  CFE3 F04A          	movff	plusw1,btemp+11
  2707  0010CE  5040               	movf	btemp+1,w,c
  2708  0010D0  5C49               	subwf	btemp+10,w,c
  2709  0010D2  5041               	movf	btemp+2,w,c
  2710  0010D4  584A               	subwfb	btemp+11,w,c
  2711  0010D6  A0D8               	btfss	status,0,c
  2712  0010D8  D012               	goto	l1389
  2713                           
  2714                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2715                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2716  0010DA  0EFD               	movlw	-3
  2717  0010DC  50E3               	movf	plusw1,w,c
  2718  0010DE  6E3F               	movwf	btemp,c
  2719  0010E0  0EFB               	movlw	-5
  2720  0010E2  50E3               	movf	plusw1,w,c
  2721  0010E4  5E3F               	subwf	btemp,f,c
  2722  0010E6  0EFD               	movlw	-3
  2723  0010E8  C03F  FFE3         	movff	btemp,plusw1
  2724  0010EC  0EFE               	movlw	-2
  2725  0010EE  50E3               	movf	plusw1,w,c
  2726  0010F0  6E3F               	movwf	btemp,c
  2727  0010F2  0EFC               	movlw	-4
  2728  0010F4  50E3               	movf	plusw1,w,c
  2729  0010F6  5A3F               	subwfb	btemp,f,c
  2730  0010F8  0EFE               	movlw	-2
  2731  0010FA  C03F  FFE3         	movff	btemp,plusw1
  2732  0010FE                     l1389:
  2733                           
  2734                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2735  0010FE  90D8               	bcf	status,0,c
  2736  001100  0EFC               	movlw	-4
  2737  001102  32E3               	rrcf	plusw1,f,c
  2738  001104  0EFB               	movlw	-5
  2739  001106  32E3               	rrcf	plusw1,f,c
  2740                           
  2741                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2742  001108  0EFF               	movlw	-1
  2743  00110A  50E3               	movf	plusw1,w,c
  2744  00110C  6E3F               	movwf	btemp,c
  2745  00110E  0E01               	movlw	1
  2746  001110  5E3F               	subwf	btemp,f,c
  2747  001112  0EFF               	movlw	-1
  2748  001114  C03F  FFE3         	movff	btemp,plusw1
  2749  001118  A4D8               	btfss	status,2,c
  2750  00111A  D7CD               	goto	u39_20
  2751  00111C                     u41_20:
  2752                           
  2753                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2754  00111C  0EFD               	movlw	-3
  2755  00111E  CFE3 F03F          	movff	plusw1,btemp
  2756  001122  0EFE               	movlw	-2
  2757  001124  CFE3 F040          	movff	plusw1,btemp+1
  2758                           
  2759                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  2760  001128  0EFB               	movlw	251
  2761  00112A  26E1               	addwf	fsr1l,f,c
  2762  00112C  0EFF               	movlw	255
  2763  00112E  22E2               	addwfc	fsr1h,f,c
  2764  001130  0012               	return		;funcret
  2765  001132                     __end_of___lwmod:
  2766                           	opt stack 0
  2767                           tosu	equ	0xFFF
  2768                           tosh	equ	0xFFE
  2769                           tosl	equ	0xFFD
  2770                           stkptr	equ	0xFFC
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           intcon	equ	0xFF2
  2778                           postinc0	equ	0xFEE
  2779                           postdec0	equ	0xFED
  2780                           plusw0	equ	0xFEB
  2781                           fsr0h	equ	0xFEA
  2782                           fsr0l	equ	0xFE9
  2783                           wreg	equ	0xFE8
  2784                           postinc1	equ	0xFE6
  2785                           postdec1	equ	0xFE5
  2786                           plusw1	equ	0xFE3
  2787                           fsr1h	equ	0xFE2
  2788                           fsr1l	equ	0xFE1
  2789                           bsr	equ	0xFE0
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           plusw2	equ	0xFDB
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _aviao2 *****************
  2799 ;; Defined at:
  2800 ;;		line 73 in file "tasks.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  tempo_v2        2  [STACK] unsigned int 
  2805 ;;  tempo_p2        2  [STACK] unsigned int 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1  [STACK] void 
  2808 ;; Registers used:
  2809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2815 ;;      Params:         0       0       0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    8
  2822 ;; This function calls:
  2823 ;;		_delay
  2824 ;;		_sem_post
  2825 ;;		_sem_wait
  2826 ;; This function is called by:
  2827 ;;		_main
  2828 ;; This function uses a reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text14
  2832  000FAC                     __ptext14:
  2833                           	opt stack 0
  2834  000FAC                     _aviao2:
  2835                           	opt stack 0
  2836                           
  2837                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2838  000FAC  52E6               	movf	postinc1,f,c
  2839  000FAE  52E6               	movf	postinc1,f,c
  2840  000FB0  52E6               	movf	postinc1,f,c
  2841  000FB2  52E6               	movf	postinc1,f,c
  2842                           
  2843                           ;tasks.c: 79: TRISDbits.RD2 = 0;
  2844                           
  2845                           ;incstack = 0
  2846  000FB4  9495               	bcf	3989,2,c	;volatile
  2847                           
  2848                           ;tasks.c: 80: PORTDbits.RD2 = 0;
  2849  000FB6  9483               	bcf	3971,2,c	;volatile
  2850                           
  2851                           ;tasks.c: 85: u_int tempo_p2 = 1000;
  2852  000FB8  0EE8               	movlw	232
  2853  000FBA  6E40               	movwf	btemp+1,c
  2854  000FBC  0E03               	movlw	3
  2855  000FBE  6E41               	movwf	btemp+2,c
  2856                           
  2857                           ;stkvar	aviao2@tempo_p2 @ sp[(-4)+2]
  2858  000FC0  0EFE               	movlw	-2
  2859  000FC2  C040  FFE3         	movff	btemp+1,plusw1
  2860  000FC6  0EFF               	movlw	-1
  2861  000FC8  C041  FFE3         	movff	btemp+2,plusw1
  2862                           
  2863                           ;tasks.c: 86: u_int tempo_v2 = 6000;
  2864  000FCC  0E70               	movlw	112
  2865  000FCE  6E40               	movwf	btemp+1,c
  2866  000FD0  0E17               	movlw	23
  2867  000FD2  6E41               	movwf	btemp+2,c
  2868                           
  2869                           ;stkvar	aviao2@tempo_v2 @ sp[(-4)+0]
  2870  000FD4  0EFC               	movlw	-4
  2871  000FD6  C040  FFE3         	movff	btemp+1,plusw1
  2872  000FDA  0EFD               	movlw	-3
  2873  000FDC  C041  FFE3         	movff	btemp+2,plusw1
  2874  000FE0                     l1663:
  2875                           
  2876                           ;tasks.c: 88: PORTDbits.RD2 = 1;
  2877  000FE0  8483               	bsf	3971,2,c	;volatile
  2878                           
  2879                           ;tasks.c: 90: delay(tempo_v2);
  2880                           ;stkvar	aviao2@tempo_v2 @ sp[(-4)+0]
  2881  000FE2  0EFC               	movlw	-4
  2882  000FE4  CFE3 FFE6          	movff	plusw1,postinc1
  2883  000FE8  CFE3 FFE6          	movff	plusw1,postinc1
  2884  000FEC  EC41  F00A         	call	_delay	;wreg free
  2885                           
  2886                           ;tasks.c: 91: sem_wait(&spista);
  2887  000FF0  0E1A               	movlw	low _spista
  2888  000FF2  6EE6               	movwf	postinc1,c
  2889  000FF4  0E00               	movlw	high _spista
  2890  000FF6  6EE6               	movwf	postinc1,c
  2891  000FF8  EC6E  F007         	call	_sem_wait	;wreg free
  2892                           
  2893                           ;tasks.c: 93: PORTDbits.RD2 = 0;
  2894  000FFC  9483               	bcf	3971,2,c	;volatile
  2895                           
  2896                           ;tasks.c: 95: PORTCbits.RC5 = 1;
  2897  000FFE  8A82               	bsf	3970,5,c	;volatile
  2898                           
  2899                           ;tasks.c: 97: delay(tempo_p2);
  2900                           ;stkvar	aviao2@tempo_p2 @ sp[(-4)+2]
  2901  001000  0EFE               	movlw	-2
  2902  001002  CFE3 FFE6          	movff	plusw1,postinc1
  2903  001006  CFE3 FFE6          	movff	plusw1,postinc1
  2904  00100A  EC41  F00A         	call	_delay	;wreg free
  2905                           
  2906                           ;tasks.c: 100: PORTCbits.RC5 = 0;
  2907  00100E  9A82               	bcf	3970,5,c	;volatile
  2908                           
  2909                           ;tasks.c: 101: delay(600);
  2910  001010  0E58               	movlw	88
  2911  001012  6EE6               	movwf	postinc1,c
  2912  001014  0E02               	movlw	2
  2913  001016  6EE6               	movwf	postinc1,c
  2914  001018  EC41  F00A         	call	_delay	;wreg free
  2915                           
  2916                           ;tasks.c: 103: sem_post(&spista);
  2917  00101C  0E1A               	movlw	low _spista
  2918  00101E  6EE6               	movwf	postinc1,c
  2919  001020  0E00               	movlw	high _spista
  2920  001022  6EE6               	movwf	postinc1,c
  2921  001024  EC6F  F006         	call	_sem_post	;wreg free
  2922                           
  2923                           ;tasks.c: 105: delay(600);
  2924  001028  0E58               	movlw	88
  2925  00102A  6EE6               	movwf	postinc1,c
  2926  00102C  0E02               	movlw	2
  2927  00102E  6EE6               	movwf	postinc1,c
  2928  001030  EC41  F00A         	call	_delay	;wreg free
  2929                           
  2930                           ;tasks.c: 106: sem_wait(&spista);
  2931  001034  0E1A               	movlw	low _spista
  2932  001036  6EE6               	movwf	postinc1,c
  2933  001038  0E00               	movlw	high _spista
  2934  00103A  6EE6               	movwf	postinc1,c
  2935  00103C  EC6E  F007         	call	_sem_wait	;wreg free
  2936                           
  2937                           ;tasks.c: 108: PORTDbits.RD0 = 1;
  2938  001040  8083               	bsf	3971,0,c	;volatile
  2939                           
  2940                           ;tasks.c: 109: delay(4200);
  2941  001042  0E68               	movlw	104
  2942  001044  6EE6               	movwf	postinc1,c
  2943  001046  0E10               	movlw	16
  2944  001048  6EE6               	movwf	postinc1,c
  2945  00104A  EC41  F00A         	call	_delay	;wreg free
  2946                           
  2947                           ;tasks.c: 111: PORTDbits.RD0 = 0;
  2948  00104E  9083               	bcf	3971,0,c	;volatile
  2949                           
  2950                           ;tasks.c: 112: delay(1250);
  2951  001050  0EE2               	movlw	226
  2952  001052  6EE6               	movwf	postinc1,c
  2953  001054  0E04               	movlw	4
  2954  001056  6EE6               	movwf	postinc1,c
  2955  001058  EC41  F00A         	call	_delay	;wreg free
  2956                           
  2957                           ;tasks.c: 113: sem_post(&spista);
  2958  00105C  0E1A               	movlw	low _spista
  2959  00105E  6EE6               	movwf	postinc1,c
  2960  001060  0E00               	movlw	high _spista
  2961  001062  6EE6               	movwf	postinc1,c
  2962  001064  EC6F  F006         	call	_sem_post	;wreg free
  2963                           
  2964                           ;tasks.c: 114: delay(2300);
  2965  001068  0EFC               	movlw	252
  2966  00106A  6EE6               	movwf	postinc1,c
  2967  00106C  0E08               	movlw	8
  2968  00106E  6EE6               	movwf	postinc1,c
  2969  001070  EC41  F00A         	call	_delay	;wreg free
  2970  001074  D7B5               	goto	l1663
  2971  001076                     __end_of_aviao2:
  2972                           	opt stack 0
  2973                           tosu	equ	0xFFF
  2974                           tosh	equ	0xFFE
  2975                           tosl	equ	0xFFD
  2976                           stkptr	equ	0xFFC
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           postinc0	equ	0xFEE
  2985                           postdec0	equ	0xFED
  2986                           plusw0	equ	0xFEB
  2987                           fsr0h	equ	0xFEA
  2988                           fsr0l	equ	0xFE9
  2989                           wreg	equ	0xFE8
  2990                           postinc1	equ	0xFE6
  2991                           postdec1	equ	0xFE5
  2992                           plusw1	equ	0xFE3
  2993                           fsr1h	equ	0xFE2
  2994                           fsr1l	equ	0xFE1
  2995                           bsr	equ	0xFE0
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _tluzesescreve *****************
  3005 ;; Defined at:
  3006 ;;		line 192 in file "tasks.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1  [STACK] void 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3020 ;;      Params:         0       0       0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0
  3023 ;;      Totals:         0       0       0       0       0       0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    8
  3027 ;; This function calls:
  3028 ;;		_create_pipe
  3029 ;;		_delay
  3030 ;;		_write_pipe
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text15
  3037  00157C                     __ptext15:
  3038                           	opt stack 0
  3039  00157C                     _tluzesescreve:
  3040                           	opt stack 19
  3041                           
  3042                           ;tasks.c: 195: create_pipe(&pipeluzes);
  3043                           
  3044                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3045                           ;incstack = 0
  3046  00157C  0E0A               	movlw	low _pipeluzes
  3047  00157E  6EE6               	movwf	postinc1,c
  3048  001580  0E00               	movlw	high _pipeluzes
  3049  001582  6EE6               	movwf	postinc1,c
  3050  001584  EC99  F008         	call	_create_pipe	;wreg free
  3051  001588                     l1715:
  3052                           
  3053                           ;tasks.c: 197: {
  3054                           ;tasks.c: 198: delay(3000);
  3055  001588  0EB8               	movlw	184
  3056  00158A  6EE6               	movwf	postinc1,c
  3057  00158C  0E0B               	movlw	11
  3058  00158E  6EE6               	movwf	postinc1,c
  3059  001590  EC41  F00A         	call	_delay	;wreg free
  3060                           
  3061                           ;tasks.c: 199: write_pipe(&pipeluzes,'a');
  3062  001594  0E61               	movlw	97
  3063  001596  6EE6               	movwf	postinc1,c
  3064  001598  0E0A               	movlw	low _pipeluzes
  3065  00159A  6EE6               	movwf	postinc1,c
  3066  00159C  0E00               	movlw	high _pipeluzes
  3067  00159E  6EE6               	movwf	postinc1,c
  3068  0015A0  EC47  F004         	call	_write_pipe	;wreg free
  3069  0015A4  D7F1               	goto	l1715
  3070  0015A6                     __end_of_tluzesescreve:
  3071                           	opt stack 0
  3072                           tosu	equ	0xFFF
  3073                           tosh	equ	0xFFE
  3074                           tosl	equ	0xFFD
  3075                           stkptr	equ	0xFFC
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           postinc0	equ	0xFEE
  3084                           postdec0	equ	0xFED
  3085                           plusw0	equ	0xFEB
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           postinc1	equ	0xFE6
  3090                           postdec1	equ	0xFE5
  3091                           plusw1	equ	0xFE3
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           bsr	equ	0xFE0
  3095                           indf2	equ	0xFDF
  3096                           postinc2	equ	0xFDE
  3097                           postdec2	equ	0xFDD
  3098                           plusw2	equ	0xFDB
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _write_pipe *****************
  3104 ;; Defined at:
  3105 ;;		line 20 in file "pipe.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  pipe            2  [STACK] PTR struct pipe
  3108 ;;		 -> pipeluzes(16), 
  3109 ;;  data            1  [STACK] unsigned char 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1  [STACK] void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3121 ;;      Params:         0       0       0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0
  3123 ;;      Temps:          0       0       0       0       0       0       0
  3124 ;;      Totals:         0       0       0       0       0       0       0
  3125 ;;Total ram usage:        0 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    7
  3128 ;; This function calls:
  3129 ;;		___lwmod
  3130 ;;		___wmul
  3131 ;;		_dispatcher
  3132 ;; This function is called by:
  3133 ;;		_tluzesescreve
  3134 ;; This function uses a reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text16
  3138  00088E                     __ptext16:
  3139                           	opt stack 0
  3140  00088E                     _write_pipe:
  3141                           	opt stack 19
  3142                           
  3143                           ;pipe.c: 22: (INTCONbits.GIE = 0);
  3144                           
  3145                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  3146                           ;incstack = 0
  3147  00088E  9EF2               	bcf	intcon,7,c	;volatile
  3148                           
  3149                           ;pipe.c: 25: if (pipe->pipe_itens == 6) {
  3150                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3151  000890  0EFE               	movlw	-2
  3152  000892  CFE3 F040          	movff	plusw1,btemp+1
  3153  000896  0EFF               	movlw	-1
  3154  000898  CFE3 F041          	movff	plusw1,btemp+2
  3155  00089C  0E0A               	movlw	10
  3156  00089E  2440               	addwf	btemp+1,w,c
  3157  0008A0  6ED9               	movwf	fsr2l,c
  3158  0008A2  0E00               	movlw	0
  3159  0008A4  2041               	addwfc	btemp+2,w,c
  3160  0008A6  6EDA               	movwf	fsr2h,c
  3161  0008A8  0E06               	movlw	6
  3162  0008AA  18DE               	xorwf	postinc2,w,c
  3163  0008AC  10DE               	iorwf	postinc2,w,c
  3164  0008AE  A4D8               	btfss	status,2,c
  3165  0008B0  D014               	goto	l1565
  3166                           
  3167                           ;pipe.c: 28: pipe->pos_bloqued_write = task_running;
  3168                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3169  0008B2  0EFE               	movlw	-2
  3170  0008B4  CFE3 F040          	movff	plusw1,btemp+1
  3171  0008B8  0EFF               	movlw	-1
  3172  0008BA  CFE3 F041          	movff	plusw1,btemp+2
  3173  0008BE  0E0E               	movlw	14
  3174  0008C0  2440               	addwf	btemp+1,w,c
  3175  0008C2  6ED9               	movwf	fsr2l,c
  3176  0008C4  0E00               	movlw	0
  3177  0008C6  2041               	addwfc	btemp+2,w,c
  3178  0008C8  6EDA               	movwf	fsr2h,c
  3179  0008CA  C005  FFDE         	movff	_task_running,postinc2
  3180  0008CE  C006  FFDD         	movff	_task_running+1,postdec2
  3181                           
  3182                           ;pipe.c: 29: dispatcher(WAITING_PIPE);
  3183  0008D2  0E06               	movlw	6
  3184  0008D4  6EE6               	movwf	postinc1,c
  3185  0008D6  EC0A  F000         	call	_dispatcher	;wreg free
  3186  0008DA                     l1565:
  3187                           
  3188                           ;pipe.c: 30: }
  3189                           ;pipe.c: 32: pipe->pipe_queue[pipe->pos_write_pipe] = data;
  3190                           ;stkvar	write_pipe@data @ sp[(0)+-3]
  3191                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3192  0008DA  0EFE               	movlw	-2
  3193  0008DC  CFE3 F040          	movff	plusw1,btemp+1
  3194  0008E0  0EFF               	movlw	-1
  3195  0008E2  CFE3 F041          	movff	plusw1,btemp+2
  3196  0008E6  0E08               	movlw	8
  3197  0008E8  2440               	addwf	btemp+1,w,c
  3198  0008EA  6ED9               	movwf	fsr2l,c
  3199  0008EC  0E00               	movlw	0
  3200  0008EE  2041               	addwfc	btemp+2,w,c
  3201  0008F0  6EDA               	movwf	fsr2h,c
  3202  0008F2  CFDE F040          	movff	postinc2,btemp+1
  3203  0008F6  CFDD F041          	movff	postdec2,btemp+2
  3204                           
  3205                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3206  0008FA  0EFE               	movlw	-2
  3207  0008FC  CFE3 F049          	movff	plusw1,btemp+10
  3208  000900  0EFF               	movlw	-1
  3209  000902  CFE3 F04A          	movff	plusw1,btemp+11
  3210  000906  5040               	movf	btemp+1,w,c
  3211  000908  2449               	addwf	btemp+10,w,c
  3212  00090A  6ED9               	movwf	fsr2l,c
  3213  00090C  5041               	movf	btemp+2,w,c
  3214  00090E  204A               	addwfc	btemp+11,w,c
  3215  000910  6EDA               	movwf	fsr2h,c
  3216  000912  0EFD               	movlw	-3
  3217  000914  CFE3 FFDF          	movff	plusw1,indf2
  3218                           
  3219                           ;pipe.c: 33: pipe->pos_write_pipe = (pipe->pos_write_pipe + 1) % 6;
  3220  000918  0E06               	movlw	6
  3221  00091A  6EE6               	movwf	postinc1,c
  3222  00091C  0E00               	movlw	0
  3223  00091E  6EE6               	movwf	postinc1,c
  3224                           
  3225                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  3226  000920  0EFC               	movlw	-4
  3227  000922  CFE3 F040          	movff	plusw1,btemp+1
  3228  000926  0EFD               	movlw	-3
  3229  000928  CFE3 F041          	movff	plusw1,btemp+2
  3230  00092C  0E08               	movlw	8
  3231  00092E  2440               	addwf	btemp+1,w,c
  3232  000930  6ED9               	movwf	fsr2l,c
  3233  000932  0E00               	movlw	0
  3234  000934  2041               	addwfc	btemp+2,w,c
  3235  000936  6EDA               	movwf	fsr2h,c
  3236  000938  CFDE F040          	movff	postinc2,btemp+1
  3237  00093C  CFDD F041          	movff	postdec2,btemp+2
  3238  000940  0E01               	movlw	1
  3239  000942  2640               	addwf	btemp+1,f,c
  3240  000944  0E00               	movlw	0
  3241  000946  2241               	addwfc	btemp+2,f,c
  3242  000948  C040  FFE6         	movff	btemp+1,postinc1
  3243  00094C  C041  FFE6         	movff	btemp+2,postinc1
  3244  000950  EC3B  F008         	call	___lwmod	;wreg free
  3245                           
  3246                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3247  000954  0EFE               	movlw	-2
  3248  000956  CFE3 F049          	movff	plusw1,btemp+10
  3249  00095A  0EFF               	movlw	-1
  3250  00095C  CFE3 F04A          	movff	plusw1,btemp+11
  3251  000960  0E08               	movlw	8
  3252  000962  2449               	addwf	btemp+10,w,c
  3253  000964  6ED9               	movwf	fsr2l,c
  3254  000966  0E00               	movlw	0
  3255  000968  204A               	addwfc	btemp+11,w,c
  3256  00096A  6EDA               	movwf	fsr2h,c
  3257  00096C  C03F  FFDE         	movff	btemp,postinc2
  3258  000970  C040  FFDD         	movff	btemp+1,postdec2
  3259                           
  3260                           ;pipe.c: 34: pipe->pipe_itens++;
  3261                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3262  000974  0EFE               	movlw	-2
  3263  000976  CFE3 F040          	movff	plusw1,btemp+1
  3264  00097A  0EFF               	movlw	-1
  3265  00097C  CFE3 F041          	movff	plusw1,btemp+2
  3266  000980  0E0A               	movlw	10
  3267  000982  2440               	addwf	btemp+1,w,c
  3268  000984  6ED9               	movwf	fsr2l,c
  3269  000986  0E00               	movlw	0
  3270  000988  2041               	addwfc	btemp+2,w,c
  3271  00098A  6EDA               	movwf	fsr2h,c
  3272  00098C  2ADE               	incf	postinc2,f,c
  3273  00098E  0E00               	movlw	0
  3274  000990  22DD               	addwfc	postdec2,f,c
  3275                           
  3276                           ;pipe.c: 37: if(pipe->pos_bloqued_read > 0 )
  3277                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3278  000992  0EFE               	movlw	-2
  3279  000994  CFE3 F040          	movff	plusw1,btemp+1
  3280  000998  0EFF               	movlw	-1
  3281  00099A  CFE3 F041          	movff	plusw1,btemp+2
  3282  00099E  0E0C               	movlw	12
  3283  0009A0  2440               	addwf	btemp+1,w,c
  3284  0009A2  6ED9               	movwf	fsr2l,c
  3285  0009A4  0E00               	movlw	0
  3286  0009A6  2041               	addwfc	btemp+2,w,c
  3287  0009A8  6EDA               	movwf	fsr2h,c
  3288  0009AA  50DE               	movf	postinc2,w,c
  3289  0009AC  10DE               	iorwf	postinc2,w,c
  3290  0009AE  B4D8               	btfsc	status,2,c
  3291  0009B0  D032               	goto	l1577
  3292                           
  3293                           ;pipe.c: 38: {
  3294                           ;pipe.c: 40: F_APTOS[pipe->pos_bloqued_read].task_state = READY;
  3295  0009B2  0E6E               	movlw	110
  3296  0009B4  6EE6               	movwf	postinc1,c
  3297  0009B6  0E00               	movlw	0
  3298  0009B8  6EE6               	movwf	postinc1,c
  3299                           
  3300                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  3301  0009BA  0EFC               	movlw	-4
  3302  0009BC  CFE3 F040          	movff	plusw1,btemp+1
  3303  0009C0  0EFD               	movlw	-3
  3304  0009C2  CFE3 F041          	movff	plusw1,btemp+2
  3305  0009C6  0E0C               	movlw	12
  3306  0009C8  2440               	addwf	btemp+1,w,c
  3307  0009CA  6ED9               	movwf	fsr2l,c
  3308  0009CC  0E00               	movlw	0
  3309  0009CE  2041               	addwfc	btemp+2,w,c
  3310  0009D0  6EDA               	movwf	fsr2h,c
  3311  0009D2  CFDE F040          	movff	postinc2,btemp+1
  3312  0009D6  CFDD F041          	movff	postdec2,btemp+2
  3313  0009DA  C040  FFE6         	movff	btemp+1,postinc1
  3314  0009DE  C041  FFE6         	movff	btemp+2,postinc1
  3315  0009E2  ECEC  F008         	call	___wmul	;wreg free
  3316  0009E6  0EF6               	movlw	low (_F_APTOS+8)
  3317  0009E8  243F               	addwf	btemp,w,c
  3318  0009EA  6ED9               	movwf	fsr2l,c
  3319  0009EC  0E00               	movlw	high (_F_APTOS+8)
  3320  0009EE  2040               	addwfc	btemp+1,w,c
  3321  0009F0  6EDA               	movwf	fsr2h,c
  3322  0009F2  0E01               	movlw	1
  3323  0009F4  6EDF               	movwf	indf2,c
  3324                           
  3325                           ;pipe.c: 41: pipe->pos_bloqued_read = 0;
  3326                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  3327  0009F6  0EFE               	movlw	-2
  3328  0009F8  CFE3 F040          	movff	plusw1,btemp+1
  3329  0009FC  0EFF               	movlw	-1
  3330  0009FE  CFE3 F041          	movff	plusw1,btemp+2
  3331  000A02  0E0C               	movlw	12
  3332  000A04  2440               	addwf	btemp+1,w,c
  3333  000A06  6ED9               	movwf	fsr2l,c
  3334  000A08  0E00               	movlw	0
  3335  000A0A  2041               	addwfc	btemp+2,w,c
  3336  000A0C  6EDA               	movwf	fsr2h,c
  3337  000A0E  0E00               	movlw	0
  3338  000A10  6EDE               	movwf	postinc2,c
  3339  000A12  0E00               	movlw	0
  3340  000A14  6EDD               	movwf	postdec2,c
  3341  000A16                     l1577:
  3342                           
  3343                           ;pipe.c: 46: }
  3344                           ;pipe.c: 48: (INTCONbits.GIE = 1);
  3345  000A16  8EF2               	bsf	intcon,7,c	;volatile
  3346                           
  3347                           ; _write_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
  3348  000A18  52E5               	movf	postdec1,f,c
  3349  000A1A  52E5               	movf	postdec1,f,c
  3350  000A1C  52E5               	movf	postdec1,f,c
  3351  000A1E  0012               	return		;funcret
  3352  000A20                     __end_of_write_pipe:
  3353                           	opt stack 0
  3354                           tosu	equ	0xFFF
  3355                           tosh	equ	0xFFE
  3356                           tosl	equ	0xFFD
  3357                           stkptr	equ	0xFFC
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           postinc0	equ	0xFEE
  3366                           postdec0	equ	0xFED
  3367                           plusw0	equ	0xFEB
  3368                           fsr0h	equ	0xFEA
  3369                           fsr0l	equ	0xFE9
  3370                           wreg	equ	0xFE8
  3371                           postinc1	equ	0xFE6
  3372                           postdec1	equ	0xFE5
  3373                           plusw1	equ	0xFE3
  3374                           fsr1h	equ	0xFE2
  3375                           fsr1l	equ	0xFE1
  3376                           bsr	equ	0xFE0
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           plusw2	equ	0xFDB
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _create_pipe *****************
  3386 ;; Defined at:
  3387 ;;		line 9 in file "pipe.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  pipe            2  [STACK] PTR struct pipe
  3390 ;;		 -> pipeluzes(16), 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1  [STACK] void 
  3395 ;; Registers used:
  3396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         0       0       0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         0       0       0       0       0       0       0
  3406 ;;Total ram usage:        0 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    4
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_tluzesescreve
  3413 ;; This function uses a reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text17
  3417  001132                     __ptext17:
  3418                           	opt stack 0
  3419  001132                     _create_pipe:
  3420                           	opt stack 22
  3421                           
  3422                           ;pipe.c: 11: pipe->pos_read_pipe = 0;
  3423                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3424                           
  3425                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3426                           ;incstack = 0
  3427  001132  0EFE               	movlw	-2
  3428  001134  CFE3 F040          	movff	plusw1,btemp+1
  3429  001138  0EFF               	movlw	-1
  3430  00113A  CFE3 F041          	movff	plusw1,btemp+2
  3431  00113E  0E06               	movlw	6
  3432  001140  2440               	addwf	btemp+1,w,c
  3433  001142  6ED9               	movwf	fsr2l,c
  3434  001144  0E00               	movlw	0
  3435  001146  2041               	addwfc	btemp+2,w,c
  3436  001148  6EDA               	movwf	fsr2h,c
  3437  00114A  0E00               	movlw	0
  3438  00114C  6EDE               	movwf	postinc2,c
  3439  00114E  0E00               	movlw	0
  3440  001150  6EDD               	movwf	postdec2,c
  3441                           
  3442                           ;pipe.c: 12: pipe->pos_write_pipe = 0;
  3443                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3444  001152  0EFE               	movlw	-2
  3445  001154  CFE3 F040          	movff	plusw1,btemp+1
  3446  001158  0EFF               	movlw	-1
  3447  00115A  CFE3 F041          	movff	plusw1,btemp+2
  3448  00115E  0E08               	movlw	8
  3449  001160  2440               	addwf	btemp+1,w,c
  3450  001162  6ED9               	movwf	fsr2l,c
  3451  001164  0E00               	movlw	0
  3452  001166  2041               	addwfc	btemp+2,w,c
  3453  001168  6EDA               	movwf	fsr2h,c
  3454  00116A  0E00               	movlw	0
  3455  00116C  6EDE               	movwf	postinc2,c
  3456  00116E  0E00               	movlw	0
  3457  001170  6EDD               	movwf	postdec2,c
  3458                           
  3459                           ;pipe.c: 13: pipe->pipe_itens = 0;
  3460                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3461  001172  0EFE               	movlw	-2
  3462  001174  CFE3 F040          	movff	plusw1,btemp+1
  3463  001178  0EFF               	movlw	-1
  3464  00117A  CFE3 F041          	movff	plusw1,btemp+2
  3465  00117E  0E0A               	movlw	10
  3466  001180  2440               	addwf	btemp+1,w,c
  3467  001182  6ED9               	movwf	fsr2l,c
  3468  001184  0E00               	movlw	0
  3469  001186  2041               	addwfc	btemp+2,w,c
  3470  001188  6EDA               	movwf	fsr2h,c
  3471  00118A  0E00               	movlw	0
  3472  00118C  6EDE               	movwf	postinc2,c
  3473  00118E  0E00               	movlw	0
  3474  001190  6EDD               	movwf	postdec2,c
  3475                           
  3476                           ;pipe.c: 16: pipe->pos_bloqued_read = 0;
  3477                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3478  001192  0EFE               	movlw	-2
  3479  001194  CFE3 F040          	movff	plusw1,btemp+1
  3480  001198  0EFF               	movlw	-1
  3481  00119A  CFE3 F041          	movff	plusw1,btemp+2
  3482  00119E  0E0C               	movlw	12
  3483  0011A0  2440               	addwf	btemp+1,w,c
  3484  0011A2  6ED9               	movwf	fsr2l,c
  3485  0011A4  0E00               	movlw	0
  3486  0011A6  2041               	addwfc	btemp+2,w,c
  3487  0011A8  6EDA               	movwf	fsr2h,c
  3488  0011AA  0E00               	movlw	0
  3489  0011AC  6EDE               	movwf	postinc2,c
  3490  0011AE  0E00               	movlw	0
  3491  0011B0  6EDD               	movwf	postdec2,c
  3492                           
  3493                           ;pipe.c: 17: pipe->pos_bloqued_write =0;
  3494                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3495  0011B2  0EFE               	movlw	-2
  3496  0011B4  CFE3 F040          	movff	plusw1,btemp+1
  3497  0011B8  0EFF               	movlw	-1
  3498  0011BA  CFE3 F041          	movff	plusw1,btemp+2
  3499  0011BE  0E0E               	movlw	14
  3500  0011C0  2440               	addwf	btemp+1,w,c
  3501  0011C2  6ED9               	movwf	fsr2l,c
  3502  0011C4  0E00               	movlw	0
  3503  0011C6  2041               	addwfc	btemp+2,w,c
  3504  0011C8  6EDA               	movwf	fsr2h,c
  3505  0011CA  0E00               	movlw	0
  3506  0011CC  6EDE               	movwf	postinc2,c
  3507  0011CE  0E00               	movlw	0
  3508  0011D0  6EDD               	movwf	postdec2,c
  3509                           
  3510                           ; _create_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, a
      +                          rgsize = 2, vargsize = 0
  3511  0011D2  52E5               	movf	postdec1,f,c
  3512  0011D4  52E5               	movf	postdec1,f,c
  3513  0011D6  0012               	return		;funcret
  3514  0011D8                     __end_of_create_pipe:
  3515                           	opt stack 0
  3516                           tosu	equ	0xFFF
  3517                           tosh	equ	0xFFE
  3518                           tosl	equ	0xFFD
  3519                           stkptr	equ	0xFFC
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           intcon	equ	0xFF2
  3527                           postinc0	equ	0xFEE
  3528                           postdec0	equ	0xFED
  3529                           plusw0	equ	0xFEB
  3530                           fsr0h	equ	0xFEA
  3531                           fsr0l	equ	0xFE9
  3532                           wreg	equ	0xFE8
  3533                           postinc1	equ	0xFE6
  3534                           postdec1	equ	0xFE5
  3535                           plusw1	equ	0xFE3
  3536                           fsr1h	equ	0xFE2
  3537                           fsr1l	equ	0xFE1
  3538                           bsr	equ	0xFE0
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           plusw2	equ	0xFDB
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _tluzes *****************
  3548 ;; Defined at:
  3549 ;;		line 164 in file "tasks.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  dado            1  [STACK] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1  [STACK] void 
  3556 ;; Registers used:
  3557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3563 ;;      Params:         0       0       0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0       0       0
  3566 ;;      Totals:         0       0       0       0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    8
  3570 ;; This function calls:
  3571 ;;		_SRAMalloc
  3572 ;;		_SRAMfree
  3573 ;;		_delay
  3574 ;;		_read_pipe
  3575 ;; This function is called by:
  3576 ;;		_main
  3577 ;; This function uses a reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text18
  3581  001434                     __ptext18:
  3582                           	opt stack 0
  3583  001434                     _tluzes:
  3584                           	opt stack 0
  3585                           
  3586                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3587  001434  52E6               	movf	postinc1,f,c
  3588                           
  3589                           ;tasks.c: 166: TRISDbits.RD6 = 0;
  3590                           
  3591                           ;incstack = 0
  3592  001436  9C95               	bcf	3989,6,c	;volatile
  3593                           
  3594                           ;tasks.c: 167: PORTDbits.RD6 = 0;
  3595  001438  9C83               	bcf	3971,6,c	;volatile
  3596  00143A                     l1699:
  3597  00143A  0E03               	movlw	3
  3598  00143C  6EE6               	movwf	postinc1,c
  3599  00143E  ECA9  F002         	call	_SRAMalloc	;wreg free
  3600                           
  3601                           ;tasks.c: 177: dado = read_pipe(&pipeluzes);
  3602  001442  0E0A               	movlw	low _pipeluzes
  3603  001444  6EE6               	movwf	postinc1,c
  3604  001446  0E00               	movlw	high _pipeluzes
  3605  001448  6EE6               	movwf	postinc1,c
  3606  00144A  EC7A  F003         	call	_read_pipe	;wreg free
  3607                           
  3608                           ;stkvar	tluzes@dado @ sp[(-1)+0]
  3609  00144E  0EFF               	movlw	-1
  3610  001450  C03F  FFE3         	movff	btemp,plusw1
  3611                           
  3612                           ;tasks.c: 179: if (dado == 'a')
  3613                           ;stkvar	tluzes@dado @ sp[(-1)+0]
  3614  001454  0EFF               	movlw	-1
  3615  001456  CFE3 F03F          	movff	plusw1,btemp
  3616  00145A  0E61               	movlw	97
  3617  00145C  183F               	xorwf	btemp,w,c
  3618  00145E  A4D8               	btfss	status,2,c
  3619  001460  D008               	goto	l1711
  3620                           
  3621                           ;tasks.c: 180: {
  3622                           ;tasks.c: 182: PORTDbits.RD6 = 1;
  3623  001462  8C83               	bsf	3971,6,c	;volatile
  3624                           
  3625                           ;tasks.c: 183: delay(1000);
  3626  001464  0EE8               	movlw	232
  3627  001466  6EE6               	movwf	postinc1,c
  3628  001468  0E03               	movlw	3
  3629  00146A  6EE6               	movwf	postinc1,c
  3630  00146C  EC41  F00A         	call	_delay	;wreg free
  3631                           
  3632                           ;tasks.c: 184: PORTDbits.RD6 = 0;
  3633  001470  9C83               	bcf	3971,6,c	;volatile
  3634  001472                     l1711:
  3635                           
  3636                           ;tasks.c: 186: }
  3637                           ;tasks.c: 187: SRAMfree(dado);
  3638                           ;stkvar	tluzes@dado @ sp[(-1)+0]
  3639  001472  0EFF               	movlw	-1
  3640  001474  50E3               	movf	plusw1,w,c
  3641  001476  6EE6               	movwf	postinc1,c
  3642  001478  0E00               	movlw	0
  3643  00147A  6EE6               	movwf	postinc1,c
  3644  00147C  ECD3  F00A         	call	_SRAMfree	;wreg free
  3645  001480  D7DC               	goto	l1699
  3646  001482                     __end_of_tluzes:
  3647                           	opt stack 0
  3648                           tosu	equ	0xFFF
  3649                           tosh	equ	0xFFE
  3650                           tosl	equ	0xFFD
  3651                           stkptr	equ	0xFFC
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           postinc0	equ	0xFEE
  3660                           postdec0	equ	0xFED
  3661                           plusw0	equ	0xFEB
  3662                           fsr0h	equ	0xFEA
  3663                           fsr0l	equ	0xFE9
  3664                           wreg	equ	0xFE8
  3665                           postinc1	equ	0xFE6
  3666                           postdec1	equ	0xFE5
  3667                           plusw1	equ	0xFE3
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           bsr	equ	0xFE0
  3671                           indf2	equ	0xFDF
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           plusw2	equ	0xFDB
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _read_pipe *****************
  3680 ;; Defined at:
  3681 ;;		line 51 in file "pipe.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  pipe            2  [STACK] PTR struct pipe
  3684 ;;		 -> pipeluzes(16), 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  dado            1  [STACK] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1  [STACK] unsigned char 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3696 ;;      Params:         0       0       0       0       0       0       0
  3697 ;;      Locals:         0       0       0       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0       0       0
  3699 ;;      Totals:         0       0       0       0       0       0       0
  3700 ;;Total ram usage:        0 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    7
  3703 ;; This function calls:
  3704 ;;		___lwmod
  3705 ;;		___wmul
  3706 ;;		_dispatcher
  3707 ;; This function is called by:
  3708 ;;		_tluzes
  3709 ;; This function uses a reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text19
  3713  0006F4                     __ptext19:
  3714                           	opt stack 0
  3715  0006F4                     _read_pipe:
  3716                           	opt stack 0
  3717                           
  3718                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3719  0006F4  52E6               	movf	postinc1,f,c
  3720                           
  3721                           ;pipe.c: 53: (INTCONbits.GIE = 0);
  3722                           
  3723                           ;incstack = 0
  3724  0006F6  9EF2               	bcf	intcon,7,c	;volatile
  3725                           
  3726                           ;pipe.c: 55: byte dado;
  3727                           ;pipe.c: 57: if (pipe->pipe_itens == 0) {
  3728                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3729  0006F8  0EFD               	movlw	-3
  3730  0006FA  CFE3 F040          	movff	plusw1,btemp+1
  3731  0006FE  0EFE               	movlw	-2
  3732  000700  CFE3 F041          	movff	plusw1,btemp+2
  3733  000704  0E0A               	movlw	10
  3734  000706  2440               	addwf	btemp+1,w,c
  3735  000708  6ED9               	movwf	fsr2l,c
  3736  00070A  0E00               	movlw	0
  3737  00070C  2041               	addwfc	btemp+2,w,c
  3738  00070E  6EDA               	movwf	fsr2h,c
  3739  000710  50DE               	movf	postinc2,w,c
  3740  000712  10DE               	iorwf	postinc2,w,c
  3741  000714  A4D8               	btfss	status,2,c
  3742  000716  D014               	goto	l1539
  3743                           
  3744                           ;pipe.c: 60: pipe->pos_bloqued_read = task_running;
  3745                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3746  000718  0EFD               	movlw	-3
  3747  00071A  CFE3 F040          	movff	plusw1,btemp+1
  3748  00071E  0EFE               	movlw	-2
  3749  000720  CFE3 F041          	movff	plusw1,btemp+2
  3750  000724  0E0C               	movlw	12
  3751  000726  2440               	addwf	btemp+1,w,c
  3752  000728  6ED9               	movwf	fsr2l,c
  3753  00072A  0E00               	movlw	0
  3754  00072C  2041               	addwfc	btemp+2,w,c
  3755  00072E  6EDA               	movwf	fsr2h,c
  3756  000730  C005  FFDE         	movff	_task_running,postinc2
  3757  000734  C006  FFDD         	movff	_task_running+1,postdec2
  3758                           
  3759                           ;pipe.c: 61: dispatcher(WAITING_PIPE);
  3760  000738  0E06               	movlw	6
  3761  00073A  6EE6               	movwf	postinc1,c
  3762  00073C  EC0A  F000         	call	_dispatcher	;wreg free
  3763  000740                     l1539:
  3764                           
  3765                           ;pipe.c: 62: }
  3766                           ;pipe.c: 64: dado = pipe->pipe_queue[pipe->pos_read_pipe];
  3767                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3768  000740  0EFD               	movlw	-3
  3769  000742  CFE3 F040          	movff	plusw1,btemp+1
  3770  000746  0EFE               	movlw	-2
  3771  000748  CFE3 F041          	movff	plusw1,btemp+2
  3772  00074C  0E06               	movlw	6
  3773  00074E  2440               	addwf	btemp+1,w,c
  3774  000750  6ED9               	movwf	fsr2l,c
  3775  000752  0E00               	movlw	0
  3776  000754  2041               	addwfc	btemp+2,w,c
  3777  000756  6EDA               	movwf	fsr2h,c
  3778  000758  CFDE F040          	movff	postinc2,btemp+1
  3779  00075C  CFDD F041          	movff	postdec2,btemp+2
  3780                           
  3781                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3782  000760  0EFD               	movlw	-3
  3783  000762  CFE3 F049          	movff	plusw1,btemp+10
  3784  000766  0EFE               	movlw	-2
  3785  000768  CFE3 F04A          	movff	plusw1,btemp+11
  3786  00076C  5040               	movf	btemp+1,w,c
  3787  00076E  2449               	addwf	btemp+10,w,c
  3788  000770  6ED9               	movwf	fsr2l,c
  3789  000772  5041               	movf	btemp+2,w,c
  3790  000774  204A               	addwfc	btemp+11,w,c
  3791  000776  6EDA               	movwf	fsr2h,c
  3792  000778  50DF               	movf	indf2,w,c
  3793  00077A  6E4A               	movwf	btemp+11,c
  3794                           
  3795                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3796  00077C  0EFF               	movlw	-1
  3797  00077E  C04A  FFE3         	movff	btemp+11,plusw1
  3798                           
  3799                           ;pipe.c: 65: pipe->pos_read_pipe = (pipe->pos_read_pipe + 1) % 6;
  3800  000782  0E06               	movlw	6
  3801  000784  6EE6               	movwf	postinc1,c
  3802  000786  0E00               	movlw	0
  3803  000788  6EE6               	movwf	postinc1,c
  3804                           
  3805                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  3806  00078A  0EFB               	movlw	-5
  3807  00078C  CFE3 F040          	movff	plusw1,btemp+1
  3808  000790  0EFC               	movlw	-4
  3809  000792  CFE3 F041          	movff	plusw1,btemp+2
  3810  000796  0E06               	movlw	6
  3811  000798  2440               	addwf	btemp+1,w,c
  3812  00079A  6ED9               	movwf	fsr2l,c
  3813  00079C  0E00               	movlw	0
  3814  00079E  2041               	addwfc	btemp+2,w,c
  3815  0007A0  6EDA               	movwf	fsr2h,c
  3816  0007A2  CFDE F040          	movff	postinc2,btemp+1
  3817  0007A6  CFDD F041          	movff	postdec2,btemp+2
  3818  0007AA  0E01               	movlw	1
  3819  0007AC  2640               	addwf	btemp+1,f,c
  3820  0007AE  0E00               	movlw	0
  3821  0007B0  2241               	addwfc	btemp+2,f,c
  3822  0007B2  C040  FFE6         	movff	btemp+1,postinc1
  3823  0007B6  C041  FFE6         	movff	btemp+2,postinc1
  3824  0007BA  EC3B  F008         	call	___lwmod	;wreg free
  3825                           
  3826                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3827  0007BE  0EFD               	movlw	-3
  3828  0007C0  CFE3 F049          	movff	plusw1,btemp+10
  3829  0007C4  0EFE               	movlw	-2
  3830  0007C6  CFE3 F04A          	movff	plusw1,btemp+11
  3831  0007CA  0E06               	movlw	6
  3832  0007CC  2449               	addwf	btemp+10,w,c
  3833  0007CE  6ED9               	movwf	fsr2l,c
  3834  0007D0  0E00               	movlw	0
  3835  0007D2  204A               	addwfc	btemp+11,w,c
  3836  0007D4  6EDA               	movwf	fsr2h,c
  3837  0007D6  C03F  FFDE         	movff	btemp,postinc2
  3838  0007DA  C040  FFDD         	movff	btemp+1,postdec2
  3839                           
  3840                           ;pipe.c: 66: pipe->pipe_itens--;
  3841                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3842  0007DE  0EFD               	movlw	-3
  3843  0007E0  CFE3 F040          	movff	plusw1,btemp+1
  3844  0007E4  0EFE               	movlw	-2
  3845  0007E6  CFE3 F041          	movff	plusw1,btemp+2
  3846  0007EA  0E0A               	movlw	10
  3847  0007EC  2440               	addwf	btemp+1,w,c
  3848  0007EE  6ED9               	movwf	fsr2l,c
  3849  0007F0  0E00               	movlw	0
  3850  0007F2  2041               	addwfc	btemp+2,w,c
  3851  0007F4  6EDA               	movwf	fsr2h,c
  3852  0007F6  06DE               	decf	postinc2,f,c
  3853  0007F8  0E00               	movlw	0
  3854  0007FA  5ADD               	subwfb	postdec2,f,c
  3855                           
  3856                           ;pipe.c: 69: if(pipe->pos_bloqued_write > 0)
  3857                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3858  0007FC  0EFD               	movlw	-3
  3859  0007FE  CFE3 F040          	movff	plusw1,btemp+1
  3860  000802  0EFE               	movlw	-2
  3861  000804  CFE3 F041          	movff	plusw1,btemp+2
  3862  000808  0E0E               	movlw	14
  3863  00080A  2440               	addwf	btemp+1,w,c
  3864  00080C  6ED9               	movwf	fsr2l,c
  3865  00080E  0E00               	movlw	0
  3866  000810  2041               	addwfc	btemp+2,w,c
  3867  000812  6EDA               	movwf	fsr2h,c
  3868  000814  50DE               	movf	postinc2,w,c
  3869  000816  10DE               	iorwf	postinc2,w,c
  3870  000818  B4D8               	btfsc	status,2,c
  3871  00081A  D032               	goto	l1551
  3872                           
  3873                           ;pipe.c: 70: {
  3874                           ;pipe.c: 71: F_APTOS[pipe->pos_bloqued_write].task_state = READY;
  3875  00081C  0E6E               	movlw	110
  3876  00081E  6EE6               	movwf	postinc1,c
  3877  000820  0E00               	movlw	0
  3878  000822  6EE6               	movwf	postinc1,c
  3879                           
  3880                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  3881  000824  0EFB               	movlw	-5
  3882  000826  CFE3 F040          	movff	plusw1,btemp+1
  3883  00082A  0EFC               	movlw	-4
  3884  00082C  CFE3 F041          	movff	plusw1,btemp+2
  3885  000830  0E0E               	movlw	14
  3886  000832  2440               	addwf	btemp+1,w,c
  3887  000834  6ED9               	movwf	fsr2l,c
  3888  000836  0E00               	movlw	0
  3889  000838  2041               	addwfc	btemp+2,w,c
  3890  00083A  6EDA               	movwf	fsr2h,c
  3891  00083C  CFDE F040          	movff	postinc2,btemp+1
  3892  000840  CFDD F041          	movff	postdec2,btemp+2
  3893  000844  C040  FFE6         	movff	btemp+1,postinc1
  3894  000848  C041  FFE6         	movff	btemp+2,postinc1
  3895  00084C  ECEC  F008         	call	___wmul	;wreg free
  3896  000850  0EF6               	movlw	low (_F_APTOS+8)
  3897  000852  243F               	addwf	btemp,w,c
  3898  000854  6ED9               	movwf	fsr2l,c
  3899  000856  0E00               	movlw	high (_F_APTOS+8)
  3900  000858  2040               	addwfc	btemp+1,w,c
  3901  00085A  6EDA               	movwf	fsr2h,c
  3902  00085C  0E01               	movlw	1
  3903  00085E  6EDF               	movwf	indf2,c
  3904                           
  3905                           ;pipe.c: 72: pipe->pos_bloqued_write = 0;
  3906                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3907  000860  0EFD               	movlw	-3
  3908  000862  CFE3 F040          	movff	plusw1,btemp+1
  3909  000866  0EFE               	movlw	-2
  3910  000868  CFE3 F041          	movff	plusw1,btemp+2
  3911  00086C  0E0E               	movlw	14
  3912  00086E  2440               	addwf	btemp+1,w,c
  3913  000870  6ED9               	movwf	fsr2l,c
  3914  000872  0E00               	movlw	0
  3915  000874  2041               	addwfc	btemp+2,w,c
  3916  000876  6EDA               	movwf	fsr2h,c
  3917  000878  0E00               	movlw	0
  3918  00087A  6EDE               	movwf	postinc2,c
  3919  00087C  0E00               	movlw	0
  3920  00087E  6EDD               	movwf	postdec2,c
  3921  000880                     l1551:
  3922                           
  3923                           ;pipe.c: 77: }
  3924                           ;pipe.c: 79: return dado;
  3925                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3926  000880  0EFF               	movlw	-1
  3927  000882  CFE3 F03F          	movff	plusw1,btemp
  3928                           
  3929                           ; _read_pipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  3930  000886  52E5               	movf	postdec1,f,c
  3931  000888  52E5               	movf	postdec1,f,c
  3932  00088A  52E5               	movf	postdec1,f,c
  3933  00088C  0012               	return		;funcret
  3934  00088E                     __end_of_read_pipe:
  3935                           	opt stack 0
  3936                           tosu	equ	0xFFF
  3937                           tosh	equ	0xFFE
  3938                           tosl	equ	0xFFD
  3939                           stkptr	equ	0xFFC
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           postinc0	equ	0xFEE
  3948                           postdec0	equ	0xFED
  3949                           plusw0	equ	0xFEB
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           postinc1	equ	0xFE6
  3954                           postdec1	equ	0xFE5
  3955                           plusw1	equ	0xFE3
  3956                           fsr1h	equ	0xFE2
  3957                           fsr1l	equ	0xFE1
  3958                           bsr	equ	0xFE0
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           plusw2	equ	0xFDB
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _SRAMfree *****************
  3968 ;; Defined at:
  3969 ;;		line 277 in file "memory.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  pSRAM           2  [STACK] near PTR unsigned char 
  3972 ;;		 -> RAM(1535), 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;		None
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1  [STACK] void 
  3977 ;; Registers used:
  3978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3984 ;;      Params:         0       0       0       0       0       0       0
  3985 ;;      Locals:         0       0       0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0
  3987 ;;      Totals:         0       0       0       0       0       0       0
  3988 ;;Total ram usage:        0 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    4
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_tluzes
  3995 ;; This function uses a reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text20
  3999  0015A6                     __ptext20:
  4000                           	opt stack 0
  4001  0015A6                     _SRAMfree:
  4002                           	opt stack 22
  4003                           
  4004                           ;memory.c: 280: (*(SALLOC *)(pSRAM - 1)).bits.alloc = 0;
  4005                           ;stkvar	SRAMfree@pSRAM @ sp[(0)+-2]
  4006                           
  4007                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4008                           ;incstack = 0
  4009  0015A6  0EFE               	movlw	-2
  4010  0015A8  CFE3 F040          	movff	plusw1,btemp+1
  4011  0015AC  0EFF               	movlw	-1
  4012  0015AE  CFE3 F041          	movff	plusw1,btemp+2
  4013  0015B2  0EFF               	movlw	255
  4014  0015B4  2440               	addwf	btemp+1,w,c
  4015  0015B6  6ED9               	movwf	fsr2l,c
  4016  0015B8  0EFF               	movlw	255
  4017  0015BA  2041               	addwfc	btemp+2,w,c
  4018  0015BC  6EDA               	movwf	fsr2h,c
  4019  0015BE  9EDF               	bcf	indf2,7,c
  4020                           
  4021                           ; _SRAMfree: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  4022  0015C0  52E5               	movf	postdec1,f,c
  4023  0015C2  52E5               	movf	postdec1,f,c
  4024  0015C4  0012               	return		;funcret
  4025  0015C6                     __end_of_SRAMfree:
  4026                           	opt stack 0
  4027                           tosu	equ	0xFFF
  4028                           tosh	equ	0xFFE
  4029                           tosl	equ	0xFFD
  4030                           stkptr	equ	0xFFC
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           postinc0	equ	0xFEE
  4039                           postdec0	equ	0xFED
  4040                           plusw0	equ	0xFEB
  4041                           fsr0h	equ	0xFEA
  4042                           fsr0l	equ	0xFE9
  4043                           wreg	equ	0xFE8
  4044                           postinc1	equ	0xFE6
  4045                           postdec1	equ	0xFE5
  4046                           plusw1	equ	0xFE3
  4047                           fsr1h	equ	0xFE2
  4048                           fsr1l	equ	0xFE1
  4049                           bsr	equ	0xFE0
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           plusw2	equ	0xFDB
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _SRAMalloc *****************
  4059 ;; Defined at:
  4060 ;;		line 181 in file "memory.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  nBytes          1  [STACK] near unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  pHeap           2  [STACK] near PTR struct _SALLOC
  4065 ;;		 -> _uDynamicHeap(512), 
  4066 ;;  temp            2  [STACK] near PTR struct _SALLOC
  4067 ;;		 -> _uDynamicHeap(512), 
  4068 ;;  segHeader       1  [STACK] struct _SALLOC
  4069 ;;  segLen          1  [STACK] unsigned char 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  2  [STACK] PTR unsigned char 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4079 ;;      Params:         0       0       0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0
  4082 ;;      Totals:         0       0       0       0       0       0       0
  4083 ;;Total ram usage:        0 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		__SRAMmerge
  4088 ;; This function is called by:
  4089 ;;		_tluzes
  4090 ;; This function uses a reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text21
  4094  000552                     __ptext21:
  4095                           	opt stack 0
  4096  000552                     _SRAMalloc:
  4097                           	opt stack 0
  4098                           
  4099                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  4100  000552  0E06               	movlw	6
  4101  000554  26E1               	addwf	fsr1l,f,c
  4102  000556  0E00               	movlw	0
  4103  000558  22E2               	addwfc	fsr1h,f,c
  4104                           
  4105                           ;memory.c: 183: SALLOC * near pHeap;
  4106                           ;memory.c: 184: SALLOC * near temp;
  4107                           ;memory.c: 185: near SALLOC segHeader;
  4108                           ;memory.c: 186: near unsigned char segLen;
  4109                           ;memory.c: 189: if (nBytes > (0x7F - 1)) return (0);
  4110                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4111                           
  4112                           ;incstack = 0
  4113  00055A  0EF9               	movlw	-7
  4114  00055C  CFE3 F03F          	movff	plusw1,btemp
  4115  000560  0E7E               	movlw	126
  4116  000562  643F               	cpfsgt	btemp,c
  4117  000564  D004               	goto	l1109
  4118  000566                     u18_20:
  4119  000566  0E00               	movlw	0
  4120  000568  6E3F               	movwf	btemp,c
  4121  00056A  0E00               	movlw	0
  4122  00056C  D07B               	goto	L2
  4123  00056E                     l1109:
  4124                           
  4125                           ;memory.c: 192: pHeap = (SALLOC *)_uDynamicHeap;
  4126                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4127  00056E  0E02               	movlw	high __uDynamicHeap
  4128  000570  6E3F               	movwf	btemp,c
  4129  000572  0EFB               	movlw	-5
  4130  000574  C03F  FFE3         	movff	btemp,plusw1
  4131  000578  0EA6               	movlw	low __uDynamicHeap
  4132  00057A  6E3F               	movwf	btemp,c
  4133  00057C  0EFA               	movlw	-6
  4134  00057E  C03F  FFE3         	movff	btemp,plusw1
  4135  000582                     l1111:
  4136                           
  4137                           ;memory.c: 195: {
  4138                           ;memory.c: 197: segHeader = *pHeap;
  4139                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4140  000582  0EFA               	movlw	-6
  4141  000584  CFE3 FFD9          	movff	plusw1,fsr2l
  4142  000588  0EFB               	movlw	-5
  4143  00058A  CFE3 FFDA          	movff	plusw1,fsr2h
  4144  00058E  50DF               	movf	indf2,w,c
  4145  000590  6E4A               	movwf	btemp+11,c
  4146                           
  4147                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  4148  000592  0EFE               	movlw	-2
  4149  000594  C04A  FFE3         	movff	btemp+11,plusw1
  4150                           
  4151                           ;memory.c: 200: segLen = segHeader.bits.count - 1;
  4152                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  4153  000598  50E1               	movf	fsr1l,w,c
  4154  00059A  0FFE               	addlw	-2
  4155  00059C  6ED9               	movwf	fsr2l,c
  4156  00059E  50E2               	movf	fsr1h,w,c
  4157  0005A0  6EDA               	movwf	fsr2h,c
  4158  0005A2  0EFF               	movlw	255
  4159  0005A4  22DA               	addwfc	fsr2h,f,c
  4160  0005A6  50DF               	movf	223,w,c
  4161  0005A8  0B7F               	andlw	127
  4162  0005AA  6E4A               	movwf	btemp+11,c
  4163  0005AC  0EFF               	movlw	255
  4164  0005AE  264A               	addwf	btemp+11,f,c
  4165                           
  4166                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  4167  0005B0  0EFF               	movlw	-1
  4168  0005B2  C04A  FFE3         	movff	btemp+11,plusw1
  4169                           
  4170                           ;memory.c: 203: if (segHeader.byte == 0) return (0);
  4171                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  4172  0005B6  0EFE               	movlw	-2
  4173  0005B8  50E3               	movf	plusw1,w,c
  4174  0005BA  B4D8               	btfsc	status,2,c
  4175  0005BC  D7D4               	goto	u18_20
  4176                           
  4177                           ;memory.c: 206: if (!(segHeader.bits.alloc))
  4178                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  4179  0005BE  50E1               	movf	fsr1l,w,c
  4180  0005C0  0FFE               	addlw	-2
  4181  0005C2  6ED9               	movwf	fsr2l,c
  4182  0005C4  50E2               	movf	fsr1h,w,c
  4183  0005C6  6EDA               	movwf	fsr2h,c
  4184  0005C8  0EFF               	movlw	255
  4185  0005CA  22DA               	addwfc	fsr2h,f,c
  4186  0005CC  BEDF               	btfsc	indf2,7,c
  4187  0005CE  D016               	goto	u22_20
  4188                           
  4189                           ;memory.c: 207: {
  4190                           ;memory.c: 209: if (nBytes > segLen)
  4191                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4192                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  4193  0005D0  50E1               	movf	fsr1l,w,c
  4194  0005D2  0FFF               	addlw	-1
  4195  0005D4  6ED9               	movwf	fsr2l,c
  4196  0005D6  50E2               	movf	fsr1h,w,c
  4197  0005D8  6EDA               	movwf	fsr2h,c
  4198  0005DA  0EFF               	movlw	255
  4199  0005DC  22DA               	addwfc	fsr2h,f,c
  4200  0005DE  0EF9               	movlw	-7
  4201  0005E0  50E3               	movf	plusw1,w,c
  4202  0005E2  5CDE               	subwf	postinc2,w,c
  4203  0005E4  B0D8               	btfsc	status,0,c
  4204  0005E6  D020               	goto	l1129
  4205                           
  4206                           ;memory.c: 210: {
  4207                           ;memory.c: 212: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  4208                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4209  0005E8  0EFA               	movlw	-6
  4210  0005EA  CFE3 FFE6          	movff	plusw1,postinc1
  4211  0005EE  CFE3 FFE6          	movff	plusw1,postinc1
  4212  0005F2  ECC6  F005         	call	__SRAMmerge	;wreg free
  4213  0005F6  503F               	movf	btemp,w,c
  4214  0005F8  A4D8               	btfss	status,2,c
  4215  0005FA  D7C3               	goto	l1111
  4216  0005FC                     u22_20:
  4217                           
  4218                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  4219  0005FC  50E1               	movf	fsr1l,w,c
  4220  0005FE  0FFE               	addlw	-2
  4221  000600  6ED9               	movwf	fsr2l,c
  4222  000602  50E2               	movf	fsr1h,w,c
  4223  000604  6EDA               	movwf	fsr2h,c
  4224  000606  0EFF               	movlw	255
  4225  000608  22DA               	addwfc	fsr2h,f,c
  4226  00060A  50DF               	movf	223,w,c
  4227  00060C  0B7F               	andlw	127
  4228  00060E  0D01               	mullw	1
  4229                           
  4230                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4231  000610  50E1               	movf	fsr1l,w,c
  4232  000612  0FFA               	addlw	-6
  4233  000614  6ED9               	movwf	fsr2l,c
  4234  000616  50E2               	movf	fsr1h,w,c
  4235  000618  6EDA               	movwf	fsr2h,c
  4236  00061A  0EFF               	movlw	255
  4237  00061C  22DA               	addwfc	fsr2h,f,c
  4238  00061E  50F3               	movf	prodl,w,c
  4239  000620  26DE               	addwf	postinc2,f,c
  4240  000622  50F4               	movf	prodh,w,c
  4241  000624  22DD               	addwfc	postdec2,f,c
  4242  000626  D7AD               	goto	l1111
  4243  000628                     l1129:
  4244                           
  4245                           ;memory.c: 214: else
  4246                           ;memory.c: 218: if (nBytes == segLen)
  4247                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  4248                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4249  000628  50E1               	movf	fsr1l,w,c
  4250  00062A  0FF9               	addlw	-7
  4251  00062C  6ED9               	movwf	fsr2l,c
  4252  00062E  50E2               	movf	fsr1h,w,c
  4253  000630  6EDA               	movwf	fsr2h,c
  4254  000632  0EFF               	movlw	255
  4255  000634  22DA               	addwfc	fsr2h,f,c
  4256  000636  0EFF               	movlw	-1
  4257  000638  50E3               	movf	plusw1,w,c
  4258  00063A  18DE               	xorwf	postinc2,w,c
  4259  00063C  A4D8               	btfss	status,2,c
  4260  00063E  D014               	goto	l1139
  4261                           
  4262                           ;memory.c: 219: {
  4263                           ;memory.c: 221: (*pHeap).bits.alloc = 1;
  4264                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4265  000640  0EFA               	movlw	-6
  4266  000642  CFE3 FFD9          	movff	plusw1,fsr2l
  4267  000646  0EFB               	movlw	-5
  4268  000648  CFE3 FFDA          	movff	plusw1,fsr2h
  4269  00064C  8EDF               	bsf	indf2,7,c
  4270                           
  4271                           ;memory.c: 224: return ((unsigned char *)(pHeap + 1));
  4272                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4273  00064E  0EFA               	movlw	-6
  4274  000650  CFE3 F049          	movff	plusw1,btemp+10
  4275  000654  0EFB               	movlw	-5
  4276  000656  CFE3 F04A          	movff	plusw1,btemp+11
  4277  00065A  0E01               	movlw	1
  4278  00065C  2449               	addwf	btemp+10,w,c
  4279  00065E  6E3F               	movwf	btemp,c
  4280  000660  0E00               	movlw	0
  4281  000662  204A               	addwfc	btemp+11,w,c
  4282  000664                     L2:
  4283  000664  6E40               	movwf	btemp+1,c
  4284  000666  D041               	goto	l235
  4285  000668                     l1139:
  4286                           
  4287                           ;memory.c: 228: else
  4288                           ;memory.c: 229: {
  4289                           ;memory.c: 231: (*pHeap).byte = nBytes + 0x81;
  4290                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4291  000668  0EFA               	movlw	-6
  4292  00066A  CFE3 FFD9          	movff	plusw1,fsr2l
  4293  00066E  0EFB               	movlw	-5
  4294  000670  CFE3 FFDA          	movff	plusw1,fsr2h
  4295                           
  4296                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4297  000674  0EF9               	movlw	-7
  4298  000676  50E3               	movf	plusw1,w,c
  4299  000678  0F81               	addlw	129
  4300  00067A  6EDF               	movwf	indf2,c
  4301                           
  4302                           ;memory.c: 234: temp = pHeap + 1;
  4303                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4304  00067C  0EFA               	movlw	-6
  4305  00067E  50E3               	movf	plusw1,w,c
  4306  000680  0F01               	addlw	1
  4307  000682  6E40               	movwf	btemp+1,c
  4308  000684  0EFB               	movlw	-5
  4309  000686  CFE3 F041          	movff	plusw1,btemp+2
  4310  00068A  0E00               	movlw	0
  4311  00068C  2241               	addwfc	btemp+2,f,c
  4312                           
  4313                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  4314  00068E  0EFD               	movlw	-3
  4315  000690  C041  FFE3         	movff	btemp+2,plusw1
  4316  000694  0EFC               	movlw	-4
  4317  000696  C040  FFE3         	movff	btemp+1,plusw1
  4318                           
  4319                           ;memory.c: 237: pHeap += (nBytes + 1);
  4320                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4321  00069A  0EF9               	movlw	-7
  4322  00069C  50E3               	movf	plusw1,w,c
  4323  00069E  6E40               	movwf	btemp+1,c
  4324  0006A0  6A41               	clrf	btemp+2,c
  4325  0006A2  0E01               	movlw	1
  4326  0006A4  2640               	addwf	btemp+1,f,c
  4327  0006A6  0E00               	movlw	0
  4328  0006A8  2241               	addwfc	btemp+2,f,c
  4329                           
  4330                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4331  0006AA  50E1               	movf	fsr1l,w,c
  4332  0006AC  0FFA               	addlw	-6
  4333  0006AE  6ED9               	movwf	fsr2l,c
  4334  0006B0  50E2               	movf	fsr1h,w,c
  4335  0006B2  6EDA               	movwf	fsr2h,c
  4336  0006B4  0EFF               	movlw	255
  4337  0006B6  22DA               	addwfc	fsr2h,f,c
  4338  0006B8  5040               	movf	btemp+1,w,c
  4339  0006BA  26DE               	addwf	postinc2,f,c
  4340  0006BC  5041               	movf	btemp+2,w,c
  4341  0006BE  22DD               	addwfc	postdec2,f,c
  4342                           
  4343                           ;memory.c: 240: (*pHeap).byte = segLen - nBytes;
  4344                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  4345  0006C0  0EFA               	movlw	-6
  4346  0006C2  CFE3 FFD9          	movff	plusw1,fsr2l
  4347  0006C6  0EFB               	movlw	-5
  4348  0006C8  CFE3 FFDA          	movff	plusw1,fsr2h
  4349                           
  4350                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  4351  0006CC  0EF9               	movlw	-7
  4352  0006CE  CFE3 F04A          	movff	plusw1,btemp+11
  4353                           
  4354                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  4355  0006D2  0EFF               	movlw	-1
  4356  0006D4  CFE3 F049          	movff	plusw1,btemp+10
  4357  0006D8  504A               	movf	btemp+11,w,c
  4358  0006DA  5C49               	subwf	btemp+10,w,c
  4359  0006DC  6EDF               	movwf	indf2,c
  4360                           
  4361                           ;memory.c: 243: return ((unsigned char *) temp);
  4362                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  4363  0006DE  0EFC               	movlw	-4
  4364  0006E0  CFE3 F03F          	movff	plusw1,btemp
  4365  0006E4  0EFD               	movlw	-3
  4366  0006E6  CFE3 F040          	movff	plusw1,btemp+1
  4367  0006EA                     l235:
  4368                           
  4369                           ; _SRAMalloc: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
  4370  0006EA  0EF9               	movlw	249
  4371  0006EC  26E1               	addwf	fsr1l,f,c
  4372  0006EE  0EFF               	movlw	255
  4373  0006F0  22E2               	addwfc	fsr1h,f,c
  4374  0006F2  0012               	return		;funcret
  4375  0006F4                     __end_of_SRAMalloc:
  4376                           	opt stack 0
  4377                           tosu	equ	0xFFF
  4378                           tosh	equ	0xFFE
  4379                           tosl	equ	0xFFD
  4380                           stkptr	equ	0xFFC
  4381                           tblptru	equ	0xFF8
  4382                           tblptrh	equ	0xFF7
  4383                           tblptrl	equ	0xFF6
  4384                           tablat	equ	0xFF5
  4385                           prodh	equ	0xFF4
  4386                           prodl	equ	0xFF3
  4387                           intcon	equ	0xFF2
  4388                           postinc0	equ	0xFEE
  4389                           postdec0	equ	0xFED
  4390                           plusw0	equ	0xFEB
  4391                           fsr0h	equ	0xFEA
  4392                           fsr0l	equ	0xFE9
  4393                           wreg	equ	0xFE8
  4394                           postinc1	equ	0xFE6
  4395                           postdec1	equ	0xFE5
  4396                           plusw1	equ	0xFE3
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           bsr	equ	0xFE0
  4400                           indf2	equ	0xFDF
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           plusw2	equ	0xFDB
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function __SRAMmerge *****************
  4409 ;; Defined at:
  4410 ;;		line 349 in file "memory.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  pSegA           2  [STACK] near PTR struct _SALLOC
  4413 ;;		 -> _uDynamicHeap(512), 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  pSegB           2  [STACK] near PTR struct _SALLOC
  4416 ;;		 -> _uDynamicHeap(512), 
  4417 ;;  uSegB           1  [STACK] struct _SALLOC
  4418 ;;  uSegA           1  [STACK] struct _SALLOC
  4419 ;;  uSum            1  [STACK] struct _SALLOC
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1  [STACK] unsigned char 
  4422 ;; Registers used:
  4423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4429 ;;      Params:         0       0       0       0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    4
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_SRAMalloc
  4440 ;; This function uses a reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text22
  4444  000B8C                     __ptext22:
  4445                           	opt stack 0
  4446  000B8C                     __SRAMmerge:
  4447                           	opt stack 0
  4448                           
  4449                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4450  000B8C  0E05               	movlw	5
  4451  000B8E  26E1               	addwf	fsr1l,f,c
  4452  000B90  0E00               	movlw	0
  4453  000B92  22E2               	addwfc	fsr1h,f,c
  4454                           
  4455                           ;memory.c: 351: SALLOC * near pSegB;
  4456                           ;memory.c: 352: near SALLOC uSegA, uSegB, uSum;
  4457                           ;memory.c: 356: pSegB = pSegA + (*pSegA).byte;
  4458                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4459                           
  4460                           ;incstack = 0
  4461  000B94  0EF9               	movlw	-7
  4462  000B96  CFE3 FFD9          	movff	plusw1,fsr2l
  4463  000B9A  0EFA               	movlw	-6
  4464  000B9C  CFE3 FFDA          	movff	plusw1,fsr2h
  4465  000BA0  50DF               	movf	indf2,w,c
  4466  000BA2  6E40               	movwf	btemp+1,c
  4467  000BA4  6A41               	clrf	btemp+2,c
  4468                           
  4469                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4470  000BA6  0EF9               	movlw	-7
  4471  000BA8  50E3               	movf	plusw1,w,c
  4472  000BAA  2640               	addwf	btemp+1,f,c
  4473  000BAC  0EFA               	movlw	-6
  4474  000BAE  50E3               	movf	plusw1,w,c
  4475  000BB0  2241               	addwfc	btemp+2,f,c
  4476                           
  4477                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  4478  000BB2  0EFC               	movlw	-4
  4479  000BB4  C041  FFE3         	movff	btemp+2,plusw1
  4480  000BB8  0EFB               	movlw	-5
  4481  000BBA  C040  FFE3         	movff	btemp+1,plusw1
  4482                           
  4483                           ;memory.c: 359: uSegA = *pSegA;
  4484                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4485  000BBE  0EF9               	movlw	-7
  4486  000BC0  CFE3 FFD9          	movff	plusw1,fsr2l
  4487  000BC4  0EFA               	movlw	-6
  4488  000BC6  CFE3 FFDA          	movff	plusw1,fsr2h
  4489  000BCA  50DF               	movf	indf2,w,c
  4490  000BCC  6E4A               	movwf	btemp+11,c
  4491                           
  4492                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  4493  000BCE  0EFE               	movlw	-2
  4494  000BD0  C04A  FFE3         	movff	btemp+11,plusw1
  4495                           
  4496                           ;memory.c: 360: uSegB = *pSegB;
  4497                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  4498  000BD4  0EFB               	movlw	-5
  4499  000BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  4500  000BDA  0EFC               	movlw	-4
  4501  000BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  4502  000BE0  50DF               	movf	indf2,w,c
  4503  000BE2  6E4A               	movwf	btemp+11,c
  4504                           
  4505                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  4506  000BE4  0EFD               	movlw	-3
  4507  000BE6  C04A  FFE3         	movff	btemp+11,plusw1
  4508                           
  4509                           ;memory.c: 363: if (uSegB.byte == 0) return (0);
  4510                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  4511  000BEA  0EFD               	movlw	-3
  4512  000BEC  50E3               	movf	plusw1,w,c
  4513  000BEE  A4D8               	btfss	status,2,c
  4514  000BF0  D002               	goto	l973
  4515  000BF2                     u8_20:
  4516  000BF2  0E00               	movlw	0
  4517  000BF4  D06E               	goto	L3
  4518  000BF6                     l973:
  4519                           
  4520                           ;memory.c: 366: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  4521                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  4522  000BF6  50E1               	movf	fsr1l,w,c
  4523  000BF8  0FFE               	addlw	-2
  4524  000BFA  6ED9               	movwf	fsr2l,c
  4525  000BFC  50E2               	movf	fsr1h,w,c
  4526  000BFE  6EDA               	movwf	fsr2h,c
  4527  000C00  0EFF               	movlw	255
  4528  000C02  22DA               	addwfc	fsr2h,f,c
  4529  000C04  BEDF               	btfsc	indf2,7,c
  4530  000C06  D7F5               	goto	u8_20
  4531                           
  4532                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  4533  000C08  50E1               	movf	fsr1l,w,c
  4534  000C0A  0FFD               	addlw	-3
  4535  000C0C  6ED9               	movwf	fsr2l,c
  4536  000C0E  50E2               	movf	fsr1h,w,c
  4537  000C10  6EDA               	movwf	fsr2h,c
  4538  000C12  0EFF               	movlw	255
  4539  000C14  22DA               	addwfc	fsr2h,f,c
  4540  000C16  BEDF               	btfsc	indf2,7,c
  4541  000C18  D7EC               	goto	u8_20
  4542                           
  4543                           ;memory.c: 369: if (uSegA.bits.count == 0x7F) return (0);
  4544                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  4545  000C1A  50E1               	movf	fsr1l,w,c
  4546  000C1C  0FFE               	addlw	-2
  4547  000C1E  6ED9               	movwf	fsr2l,c
  4548  000C20  50E2               	movf	fsr1h,w,c
  4549  000C22  6EDA               	movwf	fsr2h,c
  4550  000C24  0EFF               	movlw	255
  4551  000C26  22DA               	addwfc	fsr2h,f,c
  4552  000C28  50DF               	movf	223,w,c
  4553  000C2A  0B7F               	andlw	127
  4554  000C2C  0A7F               	xorlw	127
  4555  000C2E  B4D8               	btfsc	status,2,c
  4556  000C30  D7E0               	goto	u8_20
  4557                           
  4558                           ;memory.c: 372: uSum.byte = uSegA.byte + uSegB.byte;
  4559                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  4560  000C32  0EFD               	movlw	-3
  4561  000C34  CFE3 F04A          	movff	plusw1,btemp+11
  4562                           
  4563                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  4564  000C38  0EFE               	movlw	-2
  4565  000C3A  50E3               	movf	plusw1,w,c
  4566  000C3C  244A               	addwf	btemp+11,w,c
  4567  000C3E  6E49               	movwf	btemp+10,c
  4568                           
  4569                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  4570  000C40  0EFF               	movlw	-1
  4571  000C42  C049  FFE3         	movff	btemp+10,plusw1
  4572                           
  4573                           ;memory.c: 378: if ((uSum.byte) > 0x7F)
  4574                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  4575  000C46  0EFF               	movlw	-1
  4576  000C48  CFE3 F03F          	movff	plusw1,btemp
  4577  000C4C  0E7F               	movlw	127
  4578  000C4E  643F               	cpfsgt	btemp,c
  4579  000C50  D036               	goto	l1005
  4580                           
  4581                           ;memory.c: 379: {
  4582                           ;memory.c: 380: (*pSegA).byte = 0x7F;
  4583                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4584  000C52  0EF9               	movlw	-7
  4585  000C54  CFE3 FFD9          	movff	plusw1,fsr2l
  4586  000C58  0EFA               	movlw	-6
  4587  000C5A  CFE3 FFDA          	movff	plusw1,fsr2h
  4588  000C5E  0E7F               	movlw	127
  4589  000C60  6EDF               	movwf	indf2,c
  4590                           
  4591                           ;memory.c: 381: pSegA += 0x7F;
  4592                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4593  000C62  0EF9               	movlw	-7
  4594  000C64  50E3               	movf	plusw1,w,c
  4595  000C66  0F7F               	addlw	127
  4596  000C68  6E3F               	movwf	btemp,c
  4597  000C6A  0EF9               	movlw	-7
  4598  000C6C  C03F  FFE3         	movff	btemp,plusw1
  4599  000C70  6A3F               	clrf	btemp,c
  4600  000C72  0EFA               	movlw	-6
  4601  000C74  50E3               	movf	plusw1,w,c
  4602  000C76  203F               	addwfc	btemp,w,c
  4603  000C78  6E3F               	movwf	btemp,c
  4604  000C7A  0EFA               	movlw	-6
  4605  000C7C  C03F  FFE3         	movff	btemp,plusw1
  4606                           
  4607                           ;memory.c: 382: pSegB += uSegB.byte;
  4608                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  4609  000C80  0EFD               	movlw	-3
  4610  000C82  50E3               	movf	plusw1,w,c
  4611  000C84  0D01               	mullw	1
  4612                           
  4613                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  4614  000C86  50E1               	movf	fsr1l,w,c
  4615  000C88  0FFB               	addlw	-5
  4616  000C8A  6ED9               	movwf	fsr2l,c
  4617  000C8C  50E2               	movf	fsr1h,w,c
  4618  000C8E  6EDA               	movwf	fsr2h,c
  4619  000C90  0EFF               	movlw	255
  4620  000C92  22DA               	addwfc	fsr2h,f,c
  4621  000C94  50F3               	movf	prodl,w,c
  4622  000C96  26DE               	addwf	postinc2,f,c
  4623  000C98  50F4               	movf	prodh,w,c
  4624  000C9A  22DD               	addwfc	postdec2,f,c
  4625                           
  4626                           ;memory.c: 383: (*pSegA).byte = pSegB - pSegA;
  4627                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4628  000C9C  0EF9               	movlw	-7
  4629  000C9E  CFE3 FFD9          	movff	plusw1,fsr2l
  4630  000CA2  0EFA               	movlw	-6
  4631  000CA4  CFE3 FFDA          	movff	plusw1,fsr2h
  4632                           
  4633                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4634  000CA8  0EF9               	movlw	-7
  4635  000CAA  CFE3 F04A          	movff	plusw1,btemp+11
  4636                           
  4637                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  4638  000CAE  0EFB               	movlw	-5
  4639  000CB0  CFE3 F049          	movff	plusw1,btemp+10
  4640  000CB4  504A               	movf	btemp+11,w,c
  4641  000CB6  5C49               	subwf	btemp+10,w,c
  4642  000CB8  6EDF               	movwf	indf2,c
  4643                           
  4644                           ;memory.c: 385: return (0x7F);
  4645  000CBA  0E7F               	movlw	127
  4646  000CBC  D00A               	goto	L3
  4647  000CBE                     l1005:
  4648                           
  4649                           ;memory.c: 389: else
  4650                           ;memory.c: 390: {
  4651                           ;memory.c: 391: return ((*pSegA).byte = uSum.byte);
  4652                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  4653                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  4654  000CBE  0EF9               	movlw	-7
  4655  000CC0  CFE3 FFD9          	movff	plusw1,fsr2l
  4656  000CC4  0EFA               	movlw	-6
  4657  000CC6  CFE3 FFDA          	movff	plusw1,fsr2h
  4658  000CCA  0EFF               	movlw	-1
  4659  000CCC  CFE3 FFDF          	movff	plusw1,indf2
  4660  000CD0  50DF               	movf	indf2,w,c
  4661  000CD2                     L3:
  4662  000CD2  6E3F               	movwf	btemp,c
  4663                           
  4664                           ; __SRAMmerge: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  4665  000CD4  0EF9               	movlw	249
  4666  000CD6  26E1               	addwf	fsr1l,f,c
  4667  000CD8  0EFF               	movlw	255
  4668  000CDA  22E2               	addwfc	fsr1h,f,c
  4669  000CDC  0012               	return		;funcret
  4670  000CDE                     __end_of__SRAMmerge:
  4671                           	opt stack 0
  4672                           tosu	equ	0xFFF
  4673                           tosh	equ	0xFFE
  4674                           tosl	equ	0xFFD
  4675                           stkptr	equ	0xFFC
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           intcon	equ	0xFF2
  4683                           postinc0	equ	0xFEE
  4684                           postdec0	equ	0xFED
  4685                           plusw0	equ	0xFEB
  4686                           fsr0h	equ	0xFEA
  4687                           fsr0l	equ	0xFE9
  4688                           wreg	equ	0xFE8
  4689                           postinc1	equ	0xFE6
  4690                           postdec1	equ	0xFE5
  4691                           plusw1	equ	0xFE3
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           bsr	equ	0xFE0
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           plusw2	equ	0xFDB
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function _task_idle *****************
  4704 ;; Defined at:
  4705 ;;		line 69 in file "kernel.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1  [STACK] void 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, btemp+11
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4719 ;;      Params:         0       0       0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0
  4722 ;;      Totals:         0       0       0       0       0       0       0
  4723 ;;Total ram usage:        0 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    4
  4726 ;; This function calls:
  4727 ;;		Nothing
  4728 ;; This function is called by:
  4729 ;;		_setupOS
  4730 ;; This function uses a reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text23
  4734  0015C6                     __ptext23:
  4735                           	opt stack 0
  4736  0015C6                     _task_idle:
  4737                           	opt stack 23
  4738                           
  4739                           ;kernel.c: 71: TRISDbits.RD4 = 0;
  4740                           
  4741                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  4742                           ;incstack = 0
  4743  0015C6  9895               	bcf	3989,4,c	;volatile
  4744  0015C8                     l1225:
  4745                           
  4746                           ;kernel.c: 74: PORTDbits.RD4 = ~PORTDbits.RD4;
  4747  0015C8  A883               	btfss	3971,4,c	;volatile
  4748  0015CA  D002               	goto	u28_20
  4749  0015CC  0E01               	movlw	1
  4750  0015CE  D001               	goto	u28_26
  4751  0015D0                     u28_20:
  4752  0015D0  0E00               	movlw	0
  4753  0015D2                     u28_26:
  4754  0015D2  0AFF               	xorlw	255
  4755  0015D4  6E4A               	movwf	btemp+11,c
  4756  0015D6  3A4A               	swapf	btemp+11,f,c
  4757  0015D8  5083               	movf	3971,w,c	;volatile
  4758  0015DA  184A               	xorwf	btemp+11,w,c
  4759  0015DC  0BEF               	andlw	-17
  4760  0015DE  184A               	xorwf	btemp+11,w,c
  4761  0015E0  6E83               	movwf	3971,c	;volatile
  4762                           
  4763                           ;kernel.c: 75: __nop();
  4764  0015E2  F000               	nop	
  4765  0015E4  D7F1               	goto	l1225
  4766  0015E6                     __end_of_task_idle:
  4767                           	opt stack 0
  4768                           tosu	equ	0xFFF
  4769                           tosh	equ	0xFFE
  4770                           tosl	equ	0xFFD
  4771                           stkptr	equ	0xFFC
  4772                           tblptru	equ	0xFF8
  4773                           tblptrh	equ	0xFF7
  4774                           tblptrl	equ	0xFF6
  4775                           tablat	equ	0xFF5
  4776                           prodh	equ	0xFF4
  4777                           prodl	equ	0xFF3
  4778                           intcon	equ	0xFF2
  4779                           postinc0	equ	0xFEE
  4780                           postdec0	equ	0xFED
  4781                           plusw0	equ	0xFEB
  4782                           fsr0h	equ	0xFEA
  4783                           fsr0l	equ	0xFE9
  4784                           wreg	equ	0xFE8
  4785                           postinc1	equ	0xFE6
  4786                           postdec1	equ	0xFE5
  4787                           plusw1	equ	0xFE3
  4788                           fsr1h	equ	0xFE2
  4789                           fsr1l	equ	0xFE1
  4790                           bsr	equ	0xFE0
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _int_high *****************
  4800 ;; Defined at:
  4801 ;;		line 103 in file "kernel.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  i               2   15[COMRAM] unsigned int 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4815 ;;      Params:         0       0       0       0       0       0       0
  4816 ;;      Locals:         2       0       0       0       0       0       0
  4817 ;;      Temps:         15       0       0       0       0       0       0
  4818 ;;      Totals:        17       0       0       0       0       0       0
  4819 ;;Total ram usage:       17 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    3
  4822 ;; This function calls:
  4823 ;;		___wmul
  4824 ;;		_dispatcher
  4825 ;; This function is called by:
  4826 ;;		Interrupt level 2
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	intcode
  4831  000008                     __pintcode:
  4832                           	opt stack 0
  4833  000008                     _int_high:
  4834                           	opt stack 19
  4835                           
  4836                           ;incstack = 0
  4837  000008  ED10  F005         	call	int_func,f	;refresh shadow registers
  4838                           tosu	equ	0xFFF
  4839                           tosh	equ	0xFFE
  4840                           tosl	equ	0xFFD
  4841                           stkptr	equ	0xFFC
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           postinc0	equ	0xFEE
  4850                           postdec0	equ	0xFED
  4851                           plusw0	equ	0xFEB
  4852                           fsr0h	equ	0xFEA
  4853                           fsr0l	equ	0xFE9
  4854                           wreg	equ	0xFE8
  4855                           postinc1	equ	0xFE6
  4856                           postdec1	equ	0xFE5
  4857                           plusw1	equ	0xFE3
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           bsr	equ	0xFE0
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           plusw2	equ	0xFDB
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869                           	psect	intcode_body
  4870  000A20                     __pintcode_body:
  4871                           	opt stack 19
  4872  000A20                     int_func:
  4873                           	opt stack 19
  4874  000A20  0006               	pop		; remove dummy address from shadow register refresh
  4875  000A22  CFE1 F02A          	movff	fsr1l,??_int_high+2
  4876  000A26  CFE2 F02B          	movff	fsr1h,??_int_high+3
  4877  000A2A  CFD9 F02C          	movff	fsr2l,??_int_high+4
  4878  000A2E  CFDA F02D          	movff	fsr2h,??_int_high+5
  4879  000A32  CFF3 F02E          	movff	prodl,??_int_high+6
  4880  000A36  CFF4 F02F          	movff	prodh,??_int_high+7
  4881  000A3A  C03F  F030         	movff	btemp,??_int_high+8
  4882  000A3E  C040  F031         	movff	btemp+1,??_int_high+9
  4883  000A42  C041  F032         	movff	btemp+2,??_int_high+10
  4884  000A46  C047  F033         	movff	btemp+8,??_int_high+11
  4885  000A4A  C048  F034         	movff	btemp+9,??_int_high+12
  4886  000A4E  C049  F035         	movff	btemp+10,??_int_high+13
  4887  000A52  C04A  F036         	movff	btemp+11,??_int_high+14
  4888  000A56  EE15  F01A         	lfsr	1,___inthi_sp
  4889                           
  4890                           ;kernel.c: 105: u_int i;
  4891                           ;kernel.c: 107: if (INTCONbits.TMR0IF) {
  4892  000A5A  A4F2               	btfss	intcon,2,c	;volatile
  4893  000A5C  D07C               	goto	i2l104
  4894                           
  4895                           ;kernel.c: 108: INTCONbits.TMR0IF = 0;
  4896  000A5E  94F2               	bcf	intcon,2,c	;volatile
  4897                           
  4898                           ;kernel.c: 109: TMR0L = 252;
  4899  000A60  0EFC               	movlw	252
  4900  000A62  6ED6               	movwf	4054,c	;volatile
  4901                           
  4902                           ;kernel.c: 111: for (i = 1; i < tasks_installed; i++) {
  4903  000A64  0E00               	movlw	0
  4904  000A66  6E38               	movwf	int_high@i+1,c
  4905  000A68  0E01               	movlw	1
  4906  000A6A  6E37               	movwf	int_high@i,c
  4907  000A6C  D05F               	goto	i2l99
  4908  000A6E                     
  4909                           ;kernel.c: 112: if (F_APTOS[i].task_state == SLEEPING) {
  4910  000A6E  0E6E               	movlw	110
  4911  000A70  6EE6               	movwf	postinc1,c
  4912  000A72  0E00               	movlw	0
  4913  000A74  6EE6               	movwf	postinc1,c
  4914  000A76  C037  FFE6         	movff	int_high@i,postinc1
  4915  000A7A  C038  FFE6         	movff	int_high@i+1,postinc1
  4916  000A7E  ECEC  F008         	call	___wmul	;wreg free
  4917  000A82  0E08               	movlw	8
  4918  000A84  263F               	addwf	btemp,f,c
  4919  000A86  0E00               	movlw	0
  4920  000A88  2240               	addwfc	btemp+1,f,c
  4921  000A8A  0EEE               	movlw	low _F_APTOS
  4922  000A8C  243F               	addwf	btemp,w,c
  4923  000A8E  6ED9               	movwf	fsr2l,c
  4924  000A90  0E00               	movlw	high _F_APTOS
  4925  000A92  2040               	addwfc	btemp+1,w,c
  4926  000A94  6EDA               	movwf	fsr2h,c
  4927  000A96  0E03               	movlw	3
  4928  000A98  18DE               	xorwf	postinc2,w,c
  4929  000A9A  A4D8               	btfss	status,2,c
  4930  000A9C  D045               	goto	i2l102
  4931                           
  4932                           ;kernel.c: 113: F_APTOS[i].delay_time--;
  4933  000A9E  0E6E               	movlw	110
  4934  000AA0  6EE6               	movwf	postinc1,c
  4935  000AA2  0E00               	movlw	0
  4936  000AA4  6EE6               	movwf	postinc1,c
  4937  000AA6  C037  FFE6         	movff	int_high@i,postinc1
  4938  000AAA  C038  FFE6         	movff	int_high@i+1,postinc1
  4939  000AAE  ECEC  F008         	call	___wmul	;wreg free
  4940  000AB2  0E06               	movlw	6
  4941  000AB4  263F               	addwf	btemp,f,c
  4942  000AB6  0E00               	movlw	0
  4943  000AB8  2240               	addwfc	btemp+1,f,c
  4944  000ABA  0EEE               	movlw	low _F_APTOS
  4945  000ABC  243F               	addwf	btemp,w,c
  4946  000ABE  6ED9               	movwf	fsr2l,c
  4947  000AC0  0E00               	movlw	high _F_APTOS
  4948  000AC2  2040               	addwfc	btemp+1,w,c
  4949  000AC4  6EDA               	movwf	fsr2h,c
  4950  000AC6  06DE               	decf	postinc2,f,c
  4951  000AC8  0E00               	movlw	0
  4952  000ACA  5ADD               	subwfb	postdec2,f,c
  4953                           
  4954                           ;kernel.c: 114: if (F_APTOS[i].delay_time == 0) {
  4955  000ACC  0E6E               	movlw	110
  4956  000ACE  6EE6               	movwf	postinc1,c
  4957  000AD0  0E00               	movlw	0
  4958  000AD2  6EE6               	movwf	postinc1,c
  4959  000AD4  C037  FFE6         	movff	int_high@i,postinc1
  4960  000AD8  C038  FFE6         	movff	int_high@i+1,postinc1
  4961  000ADC  ECEC  F008         	call	___wmul	;wreg free
  4962  000AE0  0E06               	movlw	6
  4963  000AE2  263F               	addwf	btemp,f,c
  4964  000AE4  0E00               	movlw	0
  4965  000AE6  2240               	addwfc	btemp+1,f,c
  4966  000AE8  0EEE               	movlw	low _F_APTOS
  4967  000AEA  243F               	addwf	btemp,w,c
  4968  000AEC  6ED9               	movwf	fsr2l,c
  4969  000AEE  0E00               	movlw	high _F_APTOS
  4970  000AF0  2040               	addwfc	btemp+1,w,c
  4971  000AF2  6EDA               	movwf	fsr2h,c
  4972  000AF4  50DE               	movf	postinc2,w,c
  4973  000AF6  10DE               	iorwf	postinc2,w,c
  4974  000AF8  A4D8               	btfss	status,2,c
  4975  000AFA  D016               	goto	i2l102
  4976                           
  4977                           ;kernel.c: 115: F_APTOS[i].task_state = READY;
  4978  000AFC  0E6E               	movlw	110
  4979  000AFE  6EE6               	movwf	postinc1,c
  4980  000B00  0E00               	movlw	0
  4981  000B02  6EE6               	movwf	postinc1,c
  4982  000B04  C037  FFE6         	movff	int_high@i,postinc1
  4983  000B08  C038  FFE6         	movff	int_high@i+1,postinc1
  4984  000B0C  ECEC  F008         	call	___wmul	;wreg free
  4985  000B10  0E08               	movlw	8
  4986  000B12  263F               	addwf	btemp,f,c
  4987  000B14  0E00               	movlw	0
  4988  000B16  2240               	addwfc	btemp+1,f,c
  4989  000B18  0EEE               	movlw	low _F_APTOS
  4990  000B1A  243F               	addwf	btemp,w,c
  4991  000B1C  6ED9               	movwf	fsr2l,c
  4992  000B1E  0E00               	movlw	high _F_APTOS
  4993  000B20  2040               	addwfc	btemp+1,w,c
  4994  000B22  6EDA               	movwf	fsr2h,c
  4995  000B24  0E01               	movlw	1
  4996  000B26  6EDF               	movwf	indf2,c
  4997  000B28                     i2l102:
  4998  000B28  4A37               	infsnz	int_high@i,f,c
  4999  000B2A  2A38               	incf	int_high@i+1,f,c
  5000  000B2C                     i2l99:
  5001  000B2C  5007               	movf	_tasks_installed,w,c
  5002  000B2E  5C37               	subwf	int_high@i,w,c
  5003  000B30  5008               	movf	_tasks_installed+1,w,c
  5004  000B32  5838               	subwfb	int_high@i+1,w,c
  5005  000B34  A0D8               	btfss	status,0,c
  5006  000B36  D79B               	goto	i2l100
  5007                           
  5008                           ;kernel.c: 116: }
  5009                           ;kernel.c: 117: }
  5010                           ;kernel.c: 118: }
  5011                           ;kernel.c: 120: quantum--;
  5012  000B38  064B               	decf	_quantum,f,c
  5013  000B3A  A0D8               	btfss	status,0,c
  5014  000B3C  064C               	decf	_quantum+1,f,c
  5015                           
  5016                           ;kernel.c: 121: if (quantum == 0) {
  5017  000B3E  504B               	movf	_quantum,w,c
  5018  000B40  104C               	iorwf	_quantum+1,w,c
  5019  000B42  A4D8               	btfss	status,2,c
  5020  000B44  D008               	goto	i2l104
  5021                           
  5022                           ;kernel.c: 122: quantum = 4;
  5023  000B46  0E00               	movlw	0
  5024  000B48  6E4C               	movwf	_quantum+1,c
  5025  000B4A  0E04               	movlw	4
  5026  000B4C  6E4B               	movwf	_quantum,c
  5027                           
  5028                           ;kernel.c: 123: dispatcher(READY);
  5029  000B4E  0E01               	movlw	1
  5030  000B50  6EE6               	movwf	postinc1,c
  5031  000B52  EC0A  F000         	call	_dispatcher	;wreg free
  5032  000B56                     i2l104:
  5033  000B56  C036  F04A         	movff	??_int_high+14,btemp+11
  5034  000B5A  C035  F049         	movff	??_int_high+13,btemp+10
  5035  000B5E  C034  F048         	movff	??_int_high+12,btemp+9
  5036  000B62  C033  F047         	movff	??_int_high+11,btemp+8
  5037  000B66  C032  F041         	movff	??_int_high+10,btemp+2
  5038  000B6A  C031  F040         	movff	??_int_high+9,btemp+1
  5039  000B6E  C030  F03F         	movff	??_int_high+8,btemp
  5040  000B72  C02F  FFF4         	movff	??_int_high+7,prodh
  5041  000B76  C02E  FFF3         	movff	??_int_high+6,prodl
  5042  000B7A  C02D  FFDA         	movff	??_int_high+5,fsr2h
  5043  000B7E  C02C  FFD9         	movff	??_int_high+4,fsr2l
  5044  000B82  C02B  FFE2         	movff	??_int_high+3,fsr1h
  5045  000B86  C02A  FFE1         	movff	??_int_high+2,fsr1l
  5046  000B8A  0011               	retfie		f
  5047  000B8C                     __end_of_int_high:
  5048                           	opt stack 0
  5049  0000                     tosu	equ	0xFFF
  5050                           tosh	equ	0xFFE
  5051                           tosl	equ	0xFFD
  5052                           stkptr	equ	0xFFC
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           postinc0	equ	0xFEE
  5061                           postdec0	equ	0xFED
  5062                           plusw0	equ	0xFEB
  5063                           fsr0h	equ	0xFEA
  5064                           fsr0l	equ	0xFE9
  5065                           wreg	equ	0xFE8
  5066                           postinc1	equ	0xFE6
  5067                           postdec1	equ	0xFE5
  5068                           plusw1	equ	0xFE3
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           bsr	equ	0xFE0
  5072                           indf2	equ	0xFDF
  5073                           postinc2	equ	0xFDE
  5074                           postdec2	equ	0xFDD
  5075                           plusw2	equ	0xFDB
  5076                           fsr2h	equ	0xFDA
  5077                           fsr2l	equ	0xFD9
  5078                           status	equ	0xFD8
  5079                           tosu	equ	0xFFF
  5080                           tosh	equ	0xFFE
  5081                           tosl	equ	0xFFD
  5082                           stkptr	equ	0xFFC
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           postinc0	equ	0xFEE
  5091                           postdec0	equ	0xFED
  5092                           plusw0	equ	0xFEB
  5093                           fsr0h	equ	0xFEA
  5094                           fsr0l	equ	0xFE9
  5095                           wreg	equ	0xFE8
  5096                           postinc1	equ	0xFE6
  5097                           postdec1	equ	0xFE5
  5098                           plusw1	equ	0xFE3
  5099                           fsr1h	equ	0xFE2
  5100                           fsr1l	equ	0xFE1
  5101                           bsr	equ	0xFE0
  5102                           indf2	equ	0xFDF
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           plusw2	equ	0xFDB
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110                           	psect	rparam
  5111  0000                     tosu	equ	0xFFF
  5112                           tosh	equ	0xFFE
  5113                           tosl	equ	0xFFD
  5114                           stkptr	equ	0xFFC
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           intcon	equ	0xFF2
  5122                           postinc0	equ	0xFEE
  5123                           postdec0	equ	0xFED
  5124                           plusw0	equ	0xFEB
  5125                           fsr0h	equ	0xFEA
  5126                           fsr0l	equ	0xFE9
  5127                           wreg	equ	0xFE8
  5128                           postinc1	equ	0xFE6
  5129                           postdec1	equ	0xFE5
  5130                           plusw1	equ	0xFE3
  5131                           fsr1h	equ	0xFE2
  5132                           fsr1l	equ	0xFE1
  5133                           bsr	equ	0xFE0
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           postdec2	equ	0xFDD
  5137                           plusw2	equ	0xFDB
  5138                           fsr2h	equ	0xFDA
  5139                           fsr2l	equ	0xFD9
  5140                           status	equ	0xFD8
  5141                           
  5142                           	psect	temp
  5143  00003F                     btemp:
  5144                           	opt stack 0
  5145  00003F                     	ds	12
  5146  0000                     wtemp0	set	btemp
  5147  0000                     wtemp1	set	btemp+2
  5148  0000                     wtemp2	set	btemp+4
  5149  0000                     wtemp3	set	btemp+6
  5150  0000                     wtemp4	set	btemp+8
  5151  0000                     wtemp5	set	btemp+10
  5152  0000                     wtemp6	set	btemp+1
  5153  0000                     ttemp0	set	btemp
  5154  0000                     ttemp1	set	btemp+3
  5155  0000                     ttemp2	set	btemp+6
  5156  0000                     ttemp3	set	btemp+9
  5157  0000                     ltemp0	set	btemp
  5158  0000                     ltemp1	set	btemp+4
  5159  0000                     ltemp2	set	btemp+8
  5160                           tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           stkptr	equ	0xFFC
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           postinc0	equ	0xFEE
  5172                           postdec0	equ	0xFED
  5173                           plusw0	equ	0xFEB
  5174                           fsr0h	equ	0xFEA
  5175                           fsr0l	equ	0xFE9
  5176                           wreg	equ	0xFE8
  5177                           postinc1	equ	0xFE6
  5178                           postdec1	equ	0xFE5
  5179                           plusw1	equ	0xFE3
  5180                           fsr1h	equ	0xFE2
  5181                           fsr1l	equ	0xFE1
  5182                           bsr	equ	0xFE0
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           plusw2	equ	0xFDB
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         991
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     23      64
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMfree@pSRAM	near PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    read_pipe@pipe	PTR struct pipe size(2) Largest target is 16
		 -> pipeluzes(COMRAM[16]), 

    write_pipe@pipe	PTR struct pipe size(2) Largest target is 16
		 -> pipeluzes(COMRAM[16]), 

    create_pipe@pipe	PTR struct pipe size(2) Largest target is 16
		 -> pipeluzes(COMRAM[16]), 

    sem_post@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    sem_init@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), tluzes(), tluzesescreve(), aviao2(), 
		 -> aviao1(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), tluzes(), tluzesescreve(), aviao2(), 
		 -> aviao1(), 

    S93tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), tluzes(), tluzesescreve(), aviao2(), 
		 -> aviao1(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), tluzes(), tluzesescreve(), aviao2(), 
		 -> aviao1(), 


Critical Paths under _main in COMRAM

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _tluzesescreve in COMRAM

    None.

Critical Paths under _tluzes in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _tluzes in COMRAM

    None.

Critical Paths under _tluzesescreve in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _tluzesescreve in BANK0

    None.

Critical Paths under _tluzes in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _tluzes in BANK0

    None.

Critical Paths under _tluzesescreve in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _tluzesescreve in BANK1

    None.

Critical Paths under _tluzes in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _tluzes in BANK1

    None.

Critical Paths under _tluzesescreve in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _tluzesescreve in BANK2

    None.

Critical Paths under _tluzes in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _tluzes in BANK2

    None.

Critical Paths under _tluzesescreve in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _tluzesescreve in BANK3

    None.

Critical Paths under _tluzes in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _tluzes in BANK3

    None.

Critical Paths under _tluzesescreve in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _tluzesescreve in BANK4

    None.

Critical Paths under _tluzes in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _tluzes in BANK4

    None.

Critical Paths under _tluzesescreve in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _tluzesescreve in BANK5

    None.

Critical Paths under _tluzes in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _tluzes in BANK5

    None.

Critical Paths under _tluzesescreve in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5574
                        _create_task
                           _sem_init
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2746
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2588
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     158
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sem_init                                             4     0      4     240
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               4     4      0   12036
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3051
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4591
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               4     4      0   12036
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3051
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4591
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tluzesescreve                                        0     0      0    9089
                        _create_pipe
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4655
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tluzes                                               1     1      0    9675
                          _SRAMalloc
                           _SRAMfree
                              _delay
                          _read_pipe
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4644
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (5) _SRAMfree                                             2     0      2      26
 ---------------------------------------------------------------------------------
 (5) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (6) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               4     4      0   12036
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3051
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4591
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               4     4      0   12036
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3051
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4591
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tluzes                                               1     1      0    9675
                          _SRAMalloc
                           _SRAMfree
                              _delay
                          _read_pipe
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4644
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (5) _SRAMfree                                             2     0      2      26
 ---------------------------------------------------------------------------------
 (5) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (6) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tluzesescreve                                        0     0      0    9089
                        _create_pipe
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4655
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4348
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4246
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2871
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1586
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     255
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _create_task
     ___wmul
   _sem_init
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _aviao1 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _tluzesescreve (ROOT)
   _create_pipe
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _tluzes (ROOT)
   _SRAMalloc
     __SRAMmerge
   _SRAMfree
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _aviao1 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _tluzes (ROOT)
   _SRAMalloc
     __SRAMmerge
   _SRAMfree
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _tluzesescreve (ROOT)
   _create_pipe
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3B8      17       62.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     17      40       1       55.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE      15        0.0%
DATA                 0      0     46A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Nov  5 19:01:40 2018

                      _c 0009                       l23 12FA                       l76 0358  
                    l235 06EA                      l252 13E8                      l253 1416  
                    l973 0BF6                      _BSR 000FE0                      u421 13CC  
                    u440 13F4                      _TOS 000FFD            create_task@id 0039  
                    wreg 000FE8        SRAMInitHeap@pHeap 003B        SRAMInitHeap@count 0039  
           __CFG_WDT$OFF 000000                     l1005 0CBE                     l1111 0582  
                   l1109 056E                     l1225 15C8                     l1129 0628  
                   l1139 0668                     l1411 1314                     l1515 0FA4  
                   l1551 0880                     l1711 1472                     l1463 00D0  
                   l1529 0E02                     l1625 0E46                     l1539 0740  
                   l1715 1588                     l1379 108E                     l1483 02EA  
                   l1565 08DA                     l1389 10FE                     l1663 0FE0  
                   l1577 0A16                     l1699 143A                     i2l99 0B2C  
                   _TOSH 000FFE                     _TOSL 000FFD                     _WREG 000FE8  
                   _TOSU 000FFF                     u8_20 0BF2                     _main 126E  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 003F                     prodh 000FF4                     prodl 000FF3  
                   start 000C             ___param_bank 000000                    ?_main 0028  
        _tasks_installed 0007                    i2l100 0A6E                    i2l102 0B28  
                  i2l104 0B56          __end_of___lwmod 1132                    u22_20 05FC  
                  u41_20 111C                    _TMR0L 000FD6                    u18_20 0566  
                  u28_20 15D0                    u28_26 15D2                    u39_20 10B6  
                  u47_20 0528                    u49_20 0D10               __SRAMmerge 0B8C  
                  _delay 1482                    _count 0001         __end_of_SRAMfree 15C6  
        create_task@task 0080       __size_of_SRAMalloc 01A2                    tablat 000FF5  
                  ltemp0 003F                    ltemp1 0043                    ltemp2 0047  
        __end_of_setupOS 157C                    plusw0 000FEB                    plusw1 000FE3  
                  plusw2 000FDB                    ttemp0 003F                    ttemp1 0042  
                  ttemp2 0045                    ttemp3 0048                    status 000FD8  
                  wtemp0 003F                    wtemp1 0041                    wtemp2 0043  
                  wtemp3 0045                    wtemp4 0047                    wtemp5 0049  
                  wtemp6 0040          __initialization 14CA             __end_of_main 12FC  
                 ??_main 003F            __activetblptr 000000   __size_of_tluzesescreve 002A  
                 _STATUS 000FD8                   _STKPTR 000FFC     __size_of_create_pipe 00A6  
   __size_of_create_task 005A                   ___wmul 11D8                   _aviao1 0E0A  
                 _aviao2 0FAC        __end_of_SRAMalloc 06F4                   clear_0 14EA  
                 clear_1 14FC         __end_of_int_high 0B8C         create_task@prior 003B  
                 _spista 001A                   _tluzes 1434         __end_of_sem_init 1546  
       __end_of_sem_wait 0FAC         __end_of_sem_post 0E0A             __pdataCOMRAM 004B  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_setupOS 003F         __end_of_start_os 15EA               __accesstop 0080  
__end_of__initialization 1502            ___rparam_used 000001           __pcstackCOMRAM 0028  
             ___inthi_sp 051A            __end_of_delay 14CA            _tluzesescreve 157C  
          __uDynamicHeap 02A6       __size_of_read_pipe 019A      __size_of__SRAMmerge 0152  
     __size_of_task_idle 0020                  _F_APTOS 00EE               _dispatcher 0014  
              ?_int_high 0028                  __Hparam 0000                ?_sem_init 0039  
                __Lparam 0000          __size_of___wmul 0096                  ___lwmod 1076  
              ?_start_os 0028          __size_of_aviao1 00D2          __size_of_aviao2 00CA  
                __pcinit 14CA                  __ramtop 0600            ?_SRAMInitHeap 0028  
                __ptext0 126E                  __ptext1 15E6                  __ptext2 1546  
                __ptext3 1380                  __ptext4 11D8                  __ptext5 13DA  
                __ptext6 1508                  __ptext7 0E0A                  __ptext8 0EDC  
                __ptext9 0CDE                _T0CONbits 000FD5          __size_of_tluzes 004E  
      __end_of_read_pipe 088E                  _setupOS 1546        create_task@task_f 003D  
                _quantum 004B           __pintcode_body 0A20     end_of_initialization 1502  
      __end_of_task_idle 15E6                  int_func 0A20               ??_int_high 0028  
             ??_sem_init 003D                  postdec0 000FED                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_start_os 0039           ??_SRAMInitHeap 0039  
              _PORTCbits 000F82                _PORTDbits 000F83                _SRAMalloc 0552  
              _TRISCbits 000F94                _TRISDbits 000F95            sem_init@value 003B  
          ??_create_task 003F       __end_of__SRAMmerge 0CDE           __end_of___wmul 126E  
          __pidataCOMRAM 15EA           __end_of_aviao1 0EDC           __end_of_aviao2 1076  
             _write_pipe 088E        __size_of_SRAMfree 0020           __end_of_tluzes 1482  
    start_initialization 14CA      __end_of_create_pipe 11D8      __end_of_create_task 13DA  
    __size_of_dispatcher 053E              __pbssBIGRAM 00EE              __pbssCOMRAM 0001  
          __pcstackBANK0 0080     __end_of_SRAMInitHeap 1434        __size_of_int_high 0B84  
              __pintcode 0008        __size_of_sem_init 003E        __size_of_sem_wait 00D0  
      __size_of_sem_post 012C        __size_of_start_os 0004                 ?_setupOS 0028  
         __size_of_delay 0048     __end_of_rr_scheduler 1380                _read_pipe 06F4  
            _create_pipe 1132              _create_task 1380                _task_idle 15C6  
              _pipeluzes 000A                 _SRAMfree 15A6      __size_of_write_pipe 0192  
               __Hrparam 0000                 __Lrparam 0000                int_high@i 0037  
     __end_of_dispatcher 0552    __end_of_tluzesescreve 15A6         __size_of___lwmod 00BC  
  __size_of_SRAMInitHeap 005A                 __ptext10 1482                 __ptext11 0014  
               __ptext20 15A6                 __ptext12 12FC                 __ptext21 0552  
               __ptext13 1076                 __ptext22 0B8C                 __ptext14 0FAC  
               __ptext23 15C6                 __ptext15 157C                 __ptext16 088E  
               __ptext17 1132                 __ptext18 1434                 __ptext19 06F4  
       __size_of_setupOS 0036                sem_init@s 0039            __size_of_main 008E  
               _int_high 0008                 _sem_init 1508                 _sem_wait 0EDC  
               _sem_post 0CDE             _task_running 0005                 _start_os 15E6  
           _SRAMInitHeap 13DA    __size_of_rr_scheduler 0084               _INTCONbits 000FF2  
               intlevel1 0000                 intlevel2 0000             _rr_scheduler 12FC  
           ?_create_task 0039       __end_of_write_pipe 0A20  
