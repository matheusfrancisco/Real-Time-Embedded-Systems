

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Nov 11 18:19:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78 ;;___wmul@product	offset	0
    79 ;;___wmul@multiplier	offset=-2 (param)
    80 ;;___wmul@multiplicand	offset=-4 (param)
    81 ;;Lcd_Port@a	offset=-1 (param)
    82 ;;aviao1@tempo_p1	offset	0
    83 ;;aviao1@tempo_v1	offset	2
    84 ;;sem_wait@s	offset=-2 (param)
    85 ;;sem_post@s	offset=-2 (param)
    86 ;;delay@time_ms	offset=-2 (param)
    87 ;;dispatcher@state	offset=-1 (param)
    88 ;;rr_scheduler@next_task_to_run	offset	0
    89 ;;___wmul@product	offset	0
    90 ;;___wmul@multiplier	offset=-2 (param)
    91 ;;___wmul@multiplicand	offset=-4 (param)
    92 ;;___lwmod@counter	offset	0
    93 ;;___lwmod@dividend	offset=-2 (param)
    94 ;;___lwmod@divisor	offset=-4 (param)
    95 ;;aviao2@tempo_v2	offset	0
    96 ;;aviao2@tempo_p2	offset	2
    97 ;;testlcd@b_562	offset	0
    98 ;;testlcd@b	offset	2
    99 ;;testlcd@a	offset	4
   100 ;;sem_get_value@s	offset=-14 (param)
   101 ;;Lcd_Write_String@i	offset	0
   102 ;;Lcd_Write_String@a	offset=-2 (param)
   103 ;;Lcd_Write_Char@y	offset	0
   104 ;;Lcd_Write_Char@temp	offset	1
   105 ;;Lcd_Write_Char@a	offset=-1 (param)
   106 ;;Lcd_Port@a	offset=-1 (param)
   107 ;;dispatcher@state	offset=-1 (param)
   108 ;;rr_scheduler@next_task_to_run	offset	0
   109 ;;___wmul@product	offset	0
   110 ;;___wmul@multiplier	offset=-2 (param)
   111 ;;___wmul@multiplicand	offset=-4 (param)
   112 ;;___lwmod@counter	offset	0
   113 ;;___lwmod@dividend	offset=-2 (param)
   114 ;;___lwmod@divisor	offset=-4 (param)
   115                           
   116                           	psect	idataCOMRAM
   117  0017B0                     __pidataCOMRAM:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _quantum
   121  0017B0  0004               	dw	4
   122  0000                     _TOS	set	4093
   123  0000                     _PORTCbits	set	3970
   124  0000                     _TRISCbits	set	3988
   125  0000                     _TRISD	set	3989
   126  0000                     _TMR0L	set	4054
   127  0000                     _T0CONbits	set	4053
   128  0000                     _PORTDbits	set	3971
   129  0000                     _TRISDbits	set	3989
   130  0000                     _STKPTR	set	4092
   131  0000                     _TOSH	set	4094
   132  0000                     _TOSL	set	4093
   133  0000                     _TOSU	set	4095
   134  0000                     _WREG	set	4072
   135  0000                     _STATUS	set	4056
   136  0000                     _BSR	set	4064
   137  0000                     _INTCONbits	set	4082
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600  00                 	db	0
   143  000601                     STR_1:
   144  000601  50                 	db	80	;'P'
   145  000602  69                 	db	105	;'i'
   146  000603  73                 	db	115	;'s'
   147  000604  74                 	db	116	;'t'
   148  000605  61                 	db	97	;'a'
   149  000606  20                 	db	32
   150  000607  4F                 	db	79	;'O'
   151  000608  43                 	db	67	;'C'
   152  000609  55                 	db	85	;'U'
   153  00060A  50                 	db	80	;'P'
   154  00060B  41                 	db	65	;'A'
   155  00060C  44                 	db	68	;'D'
   156  00060D  41                 	db	65	;'A'
   157  00060E  00                 	db	0
   158  00060F                     STR_2:
   159  00060F  50                 	db	80	;'P'
   160  000610  69                 	db	105	;'i'
   161  000611  73                 	db	115	;'s'
   162  000612  74                 	db	116	;'t'
   163  000613  61                 	db	97	;'a'
   164  000614  20                 	db	32
   165  000615  4C                 	db	76	;'L'
   166  000616  69                 	db	105	;'i'
   167  000617  76                 	db	118	;'v'
   168  000618  72                 	db	114	;'r'
   169  000619  65                 	db	101	;'e'
   170  00061A  00                 	db	0
   171  00061B  00                 	db	0	; dummy byte at the end
   172  0000                     
   173                           ; #config settings
   174                           
   175                           	psect	cinit
   176  00165E                     __pcinit:
   177                           	opt stack 0
   178  00165E                     start_initialization:
   179                           	opt stack 0
   180  00165E                     __initialization:
   181                           	opt stack 0
   182                           
   183                           ; Initialize objects allocated to COMRAM (2 bytes)
   184                           ; load TBLPTR registers with __pidataCOMRAM
   185  00165E  0EB0               	movlw	low __pidataCOMRAM
   186  001660  6EF6               	movwf	tblptrl,c
   187  001662  0E17               	movlw	high __pidataCOMRAM
   188  001664  6EF7               	movwf	tblptrh,c
   189  001666  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   190  001668  6EF8               	movwf	tblptru,c
   191  00166A  0009               	tblrd		*+	;fetch initializer
   192  00166C  CFF5 F048          	movff	tablat,__pdataCOMRAM
   193  001670  0009               	tblrd		*+	;fetch initializer
   194  001672  CFF5 F049          	movff	tablat,__pdataCOMRAM+1
   195                           
   196                           ; Clear objects allocated to BIGRAM (952 bytes)
   197  001676  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   198  00167A  EE23 F0B8          	lfsr	2,952
   199  00167E                     clear_0:
   200  00167E  6AEE               	clrf	postinc0,c
   201  001680  50DD               	movf	postdec2,w,c
   202  001682  50D9               	movf	fsr2l,w,c
   203  001684  E1FC               	bnz	clear_0
   204  001686  50DA               	movf	fsr2h,w,c
   205  001688  E1FA               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to COMRAM (32 bytes)
   208  00168A  EE00  F001         	lfsr	0,__pbssCOMRAM
   209  00168E  0E20               	movlw	32
   210  001690                     clear_1:
   211  001690  6AEE               	clrf	postinc0,c
   212  001692  06E8               	decf	wreg,f,c
   213  001694  E1FD               	bnz	clear_1
   214  001696                     end_of_initialization:
   215                           	opt stack 0
   216  001696                     __end_of__initialization:
   217                           	opt stack 0
   218  001696  0E00               	movlw	low (__Lsmallconst shr (0+16))
   219  001698  6EF8               	movwf	tblptru,c
   220  00169A  0E06               	movlw	high __Lsmallconst
   221  00169C  6EF7               	movwf	tblptrh,c
   222  00169E  0100               	movlb	0
   223  0016A0  EF08  F00A         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           postdec2	equ	0xFDD
   231                           fsr2h	equ	0xFDA
   232                           fsr2l	equ	0xFD9
   233                           
   234                           	psect	bssCOMRAM
   235  000001                     __pbssCOMRAM:
   236                           	opt stack 0
   237  000001                     _pipeluzes:
   238                           	opt stack 0
   239  000001                     	ds	14
   240  00000F                     _task_running:
   241                           	opt stack 0
   242  00000F                     	ds	2
   243  000011                     _tasks_installed:
   244                           	opt stack 0
   245  000011                     	ds	2
   246  000013                     _spista:
   247                           	opt stack 0
   248  000013                     	ds	14
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec2	equ	0xFDD
   256                           fsr2h	equ	0xFDA
   257                           fsr2l	equ	0xFD9
   258                           
   259                           	psect	dataCOMRAM
   260  000048                     __pdataCOMRAM:
   261                           	opt stack 0
   262  000048                     _quantum:
   263                           	opt stack 0
   264  000048                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec2	equ	0xFDD
   272                           fsr2h	equ	0xFDA
   273                           fsr2l	equ	0xFD9
   274                           
   275                           	psect	bssBIGRAM
   276  0000EE                     __pbssBIGRAM:
   277                           	opt stack 0
   278  0000EE                     _F_APTOS:
   279                           	opt stack 0
   280  0000EE                     	ds	440
   281  0002A6                     __uDynamicHeap:
   282                           	opt stack 0
   283  0002A6                     	ds	512
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec2	equ	0xFDD
   291                           fsr2h	equ	0xFDA
   292                           fsr2l	equ	0xFD9
   293                           
   294                           	psect	cstackBANK0
   295  000080                     __pcstackBANK0:
   296                           	opt stack 0
   297  000080                     create_task@task:
   298                           	opt stack 0
   299                           
   300                           ; 110 bytes @ 0x0
   301  000080                     	ds	110
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec2	equ	0xFDD
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           
   312                           	psect	cstackCOMRAM
   313  000021                     __pcstackCOMRAM:
   314                           	opt stack 0
   315  000021                     ??_int_high:
   316  000021                     
   317                           ; 1 bytes @ 0x0
   318  000021                     	ds	15
   319  000030                     int_high@i:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xF
   323  000030                     	ds	2
   324  000032                     aviao3@tempo_v:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x11
   328  000032                     	ds	2
   329  000034                     aviao3@tempo_p:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x13
   333  000034                     	ds	2
   334  000036                     ??_Lcd_Cmd:
   335  000036                     create_task@id:
   336                           	opt stack 0
   337  000036                     sem_init@s:
   338                           	opt stack 0
   339  000036                     SRAMInitHeap@count:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x15
   343  000036                     	ds	1
   344  000037                     Lcd_Cmd@a:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x16
   348  000037                     	ds	1
   349  000038                     ??_Lcd_Init:
   350  000038                     create_task@prior:
   351                           	opt stack 0
   352  000038                     sem_init@value:
   353                           	opt stack 0
   354  000038                     SRAMInitHeap@pHeap:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x17
   358  000038                     	ds	2
   359  00003A                     create_task@task_f:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x19
   363  00003A                     	ds	2
   364  00003C                     tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec2	equ	0xFDD
   371                           fsr2h	equ	0xFDA
   372                           fsr2l	equ	0xFD9
   373                           
   374                           ; 1 bytes @ 0x1B
   375 ;;
   376 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   377 ;;
   378 ;; *************** function _main *****************
   379 ;; Defined at:
   380 ;;		line 17 in file "main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;		None
   383 ;; Auto vars:     Size  Location     Type
   384 ;;		None
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   394 ;;      Params:         0       0       0       0       0       0       0
   395 ;;      Locals:         0       0       0       0       0       0       0
   396 ;;      Temps:          0       0       0       0       0       0       0
   397 ;;      Totals:         0       0       0       0       0       0       0
   398 ;;Total ram usage:        0 bytes
   399 ;; Hardware stack levels required when called:   15
   400 ;; This function calls:
   401 ;;		_SRAMInitHeap
   402 ;;		_create_task
   403 ;;		_sem_init
   404 ;;		_setupOS
   405 ;;		_start_os
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text0
   412  001410                     __ptext0:
   413                           	opt stack 0
   414  001410                     _main:
   415                           	opt stack 16
   416                           
   417                           ;main.c: 19: setupOS();
   418                           
   419                           ;incstack = 0
   420  001410  EC52  F00B         	call	_setupOS	;wreg free
   421                           
   422                           ;main.c: 20: SRAMInitHeap();
   423  001414  ECDE  F00A         	call	_SRAMInitHeap	;wreg free
   424                           
   425                           ;main.c: 22: sem_init(&spista, 1);
   426  001418  0E13               	movlw	low _spista
   427  00141A  6E36               	movwf	sem_init@s,c
   428  00141C  0E00               	movlw	high _spista
   429  00141E  6E37               	movwf	sem_init@s+1,c
   430  001420  0E00               	movlw	0
   431  001422  6E39               	movwf	sem_init@value+1,c
   432  001424  0E01               	movlw	1
   433  001426  6E38               	movwf	sem_init@value,c
   434  001428  EC71  F00B         	call	_sem_init	;wreg free
   435                           
   436                           ;main.c: 27: create_task(1, 3, &aviao1);
   437  00142C  0E00               	movlw	0
   438  00142E  6E37               	movwf	create_task@id+1,c
   439  001430  0E01               	movlw	1
   440  001432  6E36               	movwf	create_task@id,c
   441  001434  0E00               	movlw	0
   442  001436  6E39               	movwf	create_task@prior+1,c
   443  001438  0E03               	movlw	3
   444  00143A  6E38               	movwf	create_task@prior,c
   445  00143C  0EF4               	movlw	low _aviao1
   446  00143E  6E3A               	movwf	create_task@task_f,c
   447  001440  0E0D               	movlw	high _aviao1
   448  001442  6E3B               	movwf	create_task@task_f+1,c
   449  001444  ECB1  F00A         	call	_create_task	;wreg free
   450                           
   451                           ;main.c: 28: create_task(2, 1, &aviao2);
   452  001448  0E00               	movlw	0
   453  00144A  6E37               	movwf	create_task@id+1,c
   454  00144C  0E02               	movlw	2
   455  00144E  6E36               	movwf	create_task@id,c
   456  001450  0E00               	movlw	0
   457  001452  6E39               	movwf	create_task@prior+1,c
   458  001454  0E01               	movlw	1
   459  001456  6E38               	movwf	create_task@prior,c
   460  001458  0EA2               	movlw	low _aviao2
   461  00145A  6E3A               	movwf	create_task@task_f,c
   462  00145C  0E0F               	movlw	high _aviao2
   463  00145E  6E3B               	movwf	create_task@task_f+1,c
   464  001460  ECB1  F00A         	call	_create_task	;wreg free
   465                           
   466                           ;main.c: 30: create_task(4, 4, &testlcd);
   467  001464  0E00               	movlw	0
   468  001466  6E37               	movwf	create_task@id+1,c
   469  001468  0E04               	movlw	4
   470  00146A  6E36               	movwf	create_task@id,c
   471  00146C  0E00               	movlw	0
   472  00146E  6E39               	movwf	create_task@prior+1,c
   473  001470  0E04               	movlw	4
   474  001472  6E38               	movwf	create_task@prior,c
   475  001474  0ECE               	movlw	low _testlcd
   476  001476  6E3A               	movwf	create_task@task_f,c
   477  001478  0E11               	movlw	high _testlcd
   478  00147A  6E3B               	movwf	create_task@task_f+1,c
   479  00147C  ECB1  F00A         	call	_create_task	;wreg free
   480                           
   481                           ;main.c: 42: start_os();
   482  001480  ECD6  F00B         	call	_start_os	;wreg free
   483  001484                     l23:
   484  001484  D7FF               	goto	l23
   485  001486                     __end_of_main:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           postdec2	equ	0xFDD
   494                           fsr2h	equ	0xFDA
   495                           fsr2l	equ	0xFD9
   496                           
   497 ;; *************** function _start_os *****************
   498 ;; Defined at:
   499 ;;		line 132 in file "kernel.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		None
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   513 ;;      Params:         0       0       0       0       0       0       0
   514 ;;      Locals:         0       0       0       0       0       0       0
   515 ;;      Temps:          0       0       0       0       0       0       0
   516 ;;      Totals:         0       0       0       0       0       0       0
   517 ;;Total ram usage:        0 bytes
   518 ;; Hardware stack levels used:    1
   519 ;; Hardware stack levels required when called:   11
   520 ;; This function calls:
   521 ;;		Nothing
   522 ;; This function is called by:
   523 ;;		_main
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text1
   528  0017AC                     __ptext1:
   529                           	opt stack 0
   530  0017AC                     _start_os:
   531                           	opt stack 19
   532                           
   533                           ;kernel.c: 137: T0CONbits.TMR0ON = 1;
   534                           
   535                           ;incstack = 0
   536  0017AC  8ED5               	bsf	4053,7,c	;volatile
   537  0017AE  0012               	return		;funcret
   538  0017B0                     __end_of_start_os:
   539                           	opt stack 0
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec2	equ	0xFDD
   547                           fsr2h	equ	0xFDA
   548                           fsr2l	equ	0xFD9
   549                           
   550 ;; *************** function _setupOS *****************
   551 ;; Defined at:
   552 ;;		line 81 in file "kernel.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;		None
   555 ;; Auto vars:     Size  Location     Type
   556 ;;		None
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   566 ;;      Params:         0       0       0       0       0       0       0
   567 ;;      Locals:         0       0       0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0       0       0
   569 ;;      Totals:         0       0       0       0       0       0       0
   570 ;;Total ram usage:        0 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; Hardware stack levels required when called:   14
   573 ;; This function calls:
   574 ;;		_Lcd_Init
   575 ;;		_SRAMInitHeap
   576 ;;		_create_task
   577 ;; This function is called by:
   578 ;;		_main
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text2
   583  0016A4                     __ptext2:
   584                           	opt stack 0
   585  0016A4                     _setupOS:
   586                           	opt stack 16
   587                           
   588                           ;kernel.c: 87: T0CONbits.T0CS = 0;
   589                           
   590                           ;incstack = 0
   591  0016A4  9AD5               	bcf	4053,5,c	;volatile
   592                           
   593                           ;kernel.c: 88: T0CONbits.PSA = 0;
   594  0016A6  96D5               	bcf	4053,3,c	;volatile
   595                           
   596                           ;kernel.c: 89: T0CONbits.T0PS = 0b111;
   597  0016A8  80D5               	bsf	4053,0,c	;volatile
   598  0016AA  82D5               	bsf	4053,1,c	;volatile
   599  0016AC  84D5               	bsf	4053,2,c	;volatile
   600                           
   601                           ;kernel.c: 90: INTCONbits.PEIE = 1;
   602  0016AE  8CF2               	bsf	intcon,6,c	;volatile
   603                           
   604                           ;kernel.c: 91: INTCONbits.TMR0IE = 1;
   605  0016B0  8AF2               	bsf	intcon,5,c	;volatile
   606                           
   607                           ;kernel.c: 92: TMR0L = 252;
   608  0016B2  0EFC               	movlw	252
   609  0016B4  6ED6               	movwf	4054,c	;volatile
   610                           
   611                           ;kernel.c: 95: create_task(1,5, &task_idle);
   612  0016B6  0E00               	movlw	0
   613  0016B8  6E37               	movwf	create_task@id+1,c
   614  0016BA  0E01               	movlw	1
   615  0016BC  6E36               	movwf	create_task@id,c
   616  0016BE  0E00               	movlw	0
   617  0016C0  6E39               	movwf	create_task@prior+1,c
   618  0016C2  0E05               	movlw	5
   619  0016C4  6E38               	movwf	create_task@prior,c
   620  0016C6  0E76               	movlw	low _task_idle
   621  0016C8  6E3A               	movwf	create_task@task_f,c
   622  0016CA  0E17               	movlw	high _task_idle
   623  0016CC  6E3B               	movwf	create_task@task_f+1,c
   624  0016CE  ECB1  F00A         	call	_create_task	;wreg free
   625                           
   626                           ;kernel.c: 100: TRISD = 0x00;
   627  0016D2  0E00               	movlw	0
   628  0016D4  6E95               	movwf	3989,c	;volatile
   629                           
   630                           ;kernel.c: 101: Lcd_Init();
   631  0016D6  EC43  F00A         	call	_Lcd_Init	;wreg free
   632                           
   633                           ;kernel.c: 102: SRAMInitHeap();
   634  0016DA  ECDE  F00A         	call	_SRAMInitHeap	;wreg free
   635                           
   636                           ;kernel.c: 104: (INTCONbits.GIE = 1);
   637  0016DE  8EF2               	bsf	intcon,7,c	;volatile
   638  0016E0  0012               	return		;funcret
   639  0016E2                     __end_of_setupOS:
   640                           	opt stack 0
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           intcon	equ	0xFF2
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           postdec2	equ	0xFDD
   649                           fsr2h	equ	0xFDA
   650                           fsr2l	equ	0xFD9
   651                           
   652 ;; *************** function _create_task *****************
   653 ;; Defined at:
   654 ;;		line 21 in file "kernel.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  id              2   21[COMRAM] unsigned int 
   657 ;;  prior           2   23[COMRAM] unsigned int 
   658 ;;  task_f          2   25[COMRAM] PTR FTN()void 
   659 ;;		 -> task_idle(1), testlcd(1), aviao2(1), aviao1(1), 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  task          110    0[BANK0 ] struct tcb
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   671 ;;      Params:         6       0       0       0       0       0       0
   672 ;;      Locals:         0     110       0       0       0       0       0
   673 ;;      Temps:          0       0       0       0       0       0       0
   674 ;;      Totals:         6     110       0       0       0       0       0
   675 ;;Total ram usage:      116 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:   12
   678 ;; This function calls:
   679 ;;		___wmul
   680 ;; This function is called by:
   681 ;;		_main
   682 ;;		_setupOS
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text3
   687  001562                     __ptext3:
   688                           	opt stack 0
   689  001562                     _create_task:
   690                           	opt stack 17
   691                           
   692                           ;kernel.c: 23: tcb_t task;
   693                           ;kernel.c: 25: task.task_id = id;
   694                           
   695                           ;incstack = 0
   696  001562  C036  F080         	movff	create_task@id,create_task@task
   697  001566  C037  F081         	movff	create_task@id+1,create_task@task+1
   698                           
   699                           ;kernel.c: 26: task.task_prior = prior;
   700  00156A  C038  F082         	movff	create_task@prior,create_task@task+2
   701  00156E  C039  F083         	movff	create_task@prior+1,create_task@task+3
   702                           
   703                           ;kernel.c: 27: task.task_f = task_f;
   704  001572  C03A  F084         	movff	create_task@task_f,create_task@task+4
   705  001576  C03B  F085         	movff	create_task@task_f+1,create_task@task+5
   706                           
   707                           ;kernel.c: 28: task.task_stack.stack_size = 0;
   708  00157A  0E00               	movlw	0
   709  00157C  0100               	movlb	0	; () banked
   710  00157E  6FEA               	movwf	(create_task@task+106)& (0+255),b
   711  001580  0E00               	movlw	0
   712  001582  6FE9               	movwf	(create_task@task+105)& (0+255),b
   713                           
   714                           ; BSR set to: 0
   715                           ;kernel.c: 29: task.task_state = READY;
   716  001584  0E01               	movlw	1
   717  001586  6F88               	movwf	(create_task@task+8)& (0+255),b
   718                           
   719                           ; BSR set to: 0
   720                           ;kernel.c: 31: F_APTOS[tasks_installed] = task;
   721  001588  0E6E               	movlw	110
   722  00158A  6EE6               	movwf	postinc1,c
   723  00158C  0E00               	movlw	0
   724  00158E  6EE6               	movwf	postinc1,c
   725  001590  C011  FFE6         	movff	_tasks_installed,postinc1
   726  001594  C012  FFE6         	movff	_tasks_installed+1,postinc1
   727  001598  EC36  F009         	call	___wmul	;wreg free
   728  00159C  0EEE               	movlw	low _F_APTOS
   729  00159E  243C               	addwf	btemp,w,c
   730  0015A0  6EE9               	movwf	fsr0l,c
   731  0015A2  0E00               	movlw	high _F_APTOS
   732  0015A4  203D               	addwfc	btemp+1,w,c
   733  0015A6  6EEA               	movwf	fsr0h,c
   734  0015A8  EE20  F080         	lfsr	2,create_task@task
   735  0015AC  0E6D               	movlw	109
   736  0015AE                     u551:
   737  0015AE  CFDB FFEB          	movff	plusw2,plusw0
   738  0015B2  06E8               	decf	wreg,f,c
   739  0015B4  E2FC               	bc	u551
   740                           
   741                           ;kernel.c: 32: tasks_installed++;
   742  0015B6  4A11               	infsnz	_tasks_installed,f,c
   743  0015B8  2A12               	incf	_tasks_installed+1,f,c
   744  0015BA  0012               	return		;funcret
   745  0015BC                     __end_of_create_task:
   746                           	opt stack 0
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           intcon	equ	0xFF2
   752                           postinc0	equ	0xFEE
   753                           plusw0	equ	0xFEB
   754                           fsr0h	equ	0xFEA
   755                           fsr0l	equ	0xFE9
   756                           wreg	equ	0xFE8
   757                           postinc1	equ	0xFE6
   758                           postdec2	equ	0xFDD
   759                           plusw2	equ	0xFDB
   760                           fsr2h	equ	0xFDA
   761                           fsr2l	equ	0xFD9
   762                           
   763 ;; *************** function ___wmul *****************
   764 ;; Defined at:
   765 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  multiplier      2  [STACK] unsigned int 
   768 ;;  multiplicand    2  [STACK] unsigned int 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  product         2  [STACK] unsigned int 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  2  [STACK] unsigned int 
   773 ;; Registers used:
   774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   780 ;;      Params:         0       0       0       0       0       0       0
   781 ;;      Locals:         0       0       0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0       0       0
   783 ;;      Totals:         0       0       0       0       0       0       0
   784 ;;Total ram usage:        0 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; Hardware stack levels required when called:   11
   787 ;; This function calls:
   788 ;;		Nothing
   789 ;; This function is called by:
   790 ;;		_create_task
   791 ;;		_dispatcher
   792 ;;		_delay
   793 ;;		_int_high
   794 ;;		_rr_scheduler
   795 ;;		_sem_post
   796 ;;		_get_id
   797 ;;		_prior_scheduler
   798 ;;		_write_pipe
   799 ;;		_read_pipe
   800 ;; This function uses a reentrant model
   801 ;;
   802                           
   803                           	psect	text4
   804  00126C                     __ptext4:
   805                           	opt stack 0
   806  00126C                     ___wmul:
   807                           	opt stack 0
   808                           
   809                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   810  00126C  52E6               	movf	postinc1,f,c
   811  00126E  52E6               	movf	postinc1,f,c
   812                           
   813                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   814                           
   815                           ;incstack = 0
   816  001270  0EFA               	movlw	-6
   817  001272  CFE3 F047          	movff	plusw1,btemp+11
   818                           
   819                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   820  001276  0EFC               	movlw	-4
   821  001278  50E3               	movf	plusw1,w,c
   822  00127A  0247               	mulwf	btemp+11,c
   823                           
   824                           ;stkvar	___wmul@product @ sp[(-2)+0]
   825  00127C  0EFE               	movlw	-2
   826  00127E  CFF3 FFE3          	movff	prodl,plusw1
   827  001282  0EFF               	movlw	-1
   828  001284  CFF4 FFE3          	movff	prodh,plusw1
   829                           
   830                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   831  001288  0EFB               	movlw	251
   832  00128A  24E1               	addwf	fsr1l,w,c
   833  00128C  6ED9               	movwf	fsr2l,c
   834  00128E  0EFF               	movlw	255
   835  001290  20E2               	addwfc	fsr1h,w,c
   836  001292  6EDA               	movwf	fsr2h,c
   837  001294  50DF               	movf	indf2,w,c
   838  001296  6E47               	movwf	btemp+11,c
   839                           
   840                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   841  001298  0EFC               	movlw	-4
   842  00129A  50E3               	movf	plusw1,w,c
   843  00129C  0247               	mulwf	btemp+11,c
   844  00129E  CFF3 FFF4          	movff	prodl,prodh
   845  0012A2  6AF3               	clrf	prodl,c
   846                           
   847                           ;stkvar	___wmul@product @ sp[(-2)+0]
   848  0012A4  50E1               	movf	fsr1l,w,c
   849  0012A6  0FFE               	addlw	-2
   850  0012A8  6ED9               	movwf	fsr2l,c
   851  0012AA  50E2               	movf	fsr1h,w,c
   852  0012AC  6EDA               	movwf	fsr2h,c
   853  0012AE  0EFF               	movlw	255
   854  0012B0  22DA               	addwfc	fsr2h,f,c
   855  0012B2  50F3               	movf	prodl,w,c
   856  0012B4  26DE               	addwf	postinc2,f,c
   857  0012B6  50F4               	movf	prodh,w,c
   858  0012B8  22DD               	addwfc	postdec2,f,c
   859                           
   860                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   861  0012BA  0EFA               	movlw	-6
   862  0012BC  CFE3 F047          	movff	plusw1,btemp+11
   863                           
   864                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   865  0012C0  0EFD               	movlw	253
   866  0012C2  24E1               	addwf	fsr1l,w,c
   867  0012C4  6ED9               	movwf	fsr2l,c
   868  0012C6  0EFF               	movlw	255
   869  0012C8  20E2               	addwfc	fsr1h,w,c
   870  0012CA  6EDA               	movwf	fsr2h,c
   871  0012CC  50DF               	movf	indf2,w,c
   872  0012CE  0247               	mulwf	btemp+11,c
   873  0012D0  CFF3 FFF4          	movff	prodl,prodh
   874  0012D4  6AF3               	clrf	prodl,c
   875                           
   876                           ;stkvar	___wmul@product @ sp[(-2)+0]
   877  0012D6  50E1               	movf	fsr1l,w,c
   878  0012D8  0FFE               	addlw	-2
   879  0012DA  6ED9               	movwf	fsr2l,c
   880  0012DC  50E2               	movf	fsr1h,w,c
   881  0012DE  6EDA               	movwf	fsr2h,c
   882  0012E0  0EFF               	movlw	255
   883  0012E2  22DA               	addwfc	fsr2h,f,c
   884  0012E4  50F3               	movf	prodl,w,c
   885  0012E6  26DE               	addwf	postinc2,f,c
   886  0012E8  50F4               	movf	prodh,w,c
   887  0012EA  22DD               	addwfc	postdec2,f,c
   888                           
   889                           ;stkvar	___wmul@product @ sp[(-2)+0]
   890  0012EC  0EFE               	movlw	-2
   891  0012EE  CFE3 F03C          	movff	plusw1,btemp
   892  0012F2  0EFF               	movlw	-1
   893  0012F4  CFE3 F03D          	movff	plusw1,btemp+1
   894                           
   895                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   896  0012F8  0EFA               	movlw	250
   897  0012FA  26E1               	addwf	fsr1l,f,c
   898  0012FC  0EFF               	movlw	255
   899  0012FE  22E2               	addwfc	fsr1h,f,c
   900  001300  0012               	return		;funcret
   901  001302                     __end_of___wmul:
   902                           	opt stack 0
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           prodh	equ	0xFF4
   908                           prodl	equ	0xFF3
   909                           intcon	equ	0xFF2
   910                           postinc0	equ	0xFEE
   911                           plusw0	equ	0xFEB
   912                           fsr0h	equ	0xFEA
   913                           fsr0l	equ	0xFE9
   914                           wreg	equ	0xFE8
   915                           postinc1	equ	0xFE6
   916                           plusw1	equ	0xFE3
   917                           fsr1h	equ	0xFE2
   918                           fsr1l	equ	0xFE1
   919                           indf2	equ	0xFDF
   920                           postinc2	equ	0xFDE
   921                           postdec2	equ	0xFDD
   922                           plusw2	equ	0xFDB
   923                           fsr2h	equ	0xFDA
   924                           fsr2l	equ	0xFD9
   925                           
   926 ;; *************** function _SRAMInitHeap *****************
   927 ;; Defined at:
   928 ;;		line 303 in file "memory.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  count           2   21[COMRAM] unsigned int 
   933 ;;  pHeap           2   23[COMRAM] near PTR unsigned char 
   934 ;;		 -> _uDynamicHeap(512), 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   944 ;;      Params:         0       0       0       0       0       0       0
   945 ;;      Locals:         4       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0
   947 ;;      Totals:         4       0       0       0       0       0       0
   948 ;;Total ram usage:        4 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:   11
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;;		_setupOS
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           	psect	text5
   960  0015BC                     __ptext5:
   961                           	opt stack 0
   962  0015BC                     _SRAMInitHeap:
   963                           	opt stack 18
   964                           
   965                           ;memory.c: 305: unsigned char * near pHeap;
   966                           ;memory.c: 306: near unsigned int count;
   967                           ;memory.c: 308: pHeap = _uDynamicHeap;
   968                           
   969                           ;incstack = 0
   970  0015BC  0EA6               	movlw	low __uDynamicHeap
   971  0015BE  6E38               	movwf	SRAMInitHeap@pHeap,c
   972  0015C0  0E02               	movlw	high __uDynamicHeap
   973  0015C2  6E39               	movwf	SRAMInitHeap@pHeap+1,c
   974                           
   975                           ;memory.c: 309: count = 0x200-1;
   976  0015C4  0E01               	movlw	1
   977  0015C6  6E37               	movwf	SRAMInitHeap@count+1,c
   978  0015C8  6836               	setf	SRAMInitHeap@count,c
   979  0015CA                     
   980                           ;memory.c: 312: {
   981                           ;memory.c: 313: if (count > 0x7F)
   982  0015CA  5037               	movf	SRAMInitHeap@count+1,w,c
   983  0015CC  E104               	bnz	u540
   984  0015CE  0E80               	movlw	128
   985  0015D0  5C36               	subwf	SRAMInitHeap@count,w,c
   986  0015D2  A0D8               	btfss	status,0,c
   987  0015D4  D011               	goto	l248
   988  0015D6                     u540:
   989                           
   990                           ;memory.c: 314: {
   991                           ;memory.c: 315: *pHeap = 0x7F;
   992  0015D6  C038  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   993  0015DA  C039  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   994  0015DE  0E7F               	movlw	127
   995  0015E0  6EDF               	movwf	indf2,c
   996                           
   997                           ;memory.c: 316: pHeap += 0x7F;
   998  0015E2  0E7F               	movlw	127
   999  0015E4  2638               	addwf	SRAMInitHeap@pHeap,f,c
  1000  0015E6  0E00               	movlw	0
  1001  0015E8  2239               	addwfc	SRAMInitHeap@pHeap+1,f,c
  1002                           
  1003                           ;memory.c: 317: count = count - 0x7F;
  1004  0015EA  0E81               	movlw	129
  1005  0015EC  2436               	addwf	SRAMInitHeap@count,w,c
  1006  0015EE  6E36               	movwf	SRAMInitHeap@count,c
  1007  0015F0  0EFF               	movlw	255
  1008  0015F2  2037               	addwfc	SRAMInitHeap@count+1,w,c
  1009  0015F4  6E37               	movwf	SRAMInitHeap@count+1,c
  1010                           
  1011                           ;memory.c: 318: }
  1012  0015F6  D7E9               	goto	l247
  1013  0015F8                     l248:
  1014                           
  1015                           ;memory.c: 319: else
  1016                           ;memory.c: 320: {
  1017                           ;memory.c: 321: *pHeap = count;
  1018  0015F8  C038  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
  1019  0015FC  C039  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
  1020  001600  C036  FFDF         	movff	SRAMInitHeap@count,indf2
  1021                           
  1022                           ;memory.c: 322: *(pHeap + count) = 0;
  1023  001604  5036               	movf	SRAMInitHeap@count,w,c
  1024  001606  2438               	addwf	SRAMInitHeap@pHeap,w,c
  1025  001608  6ED9               	movwf	fsr2l,c
  1026  00160A  5037               	movf	SRAMInitHeap@count+1,w,c
  1027  00160C  2039               	addwfc	SRAMInitHeap@pHeap+1,w,c
  1028  00160E  6EDA               	movwf	fsr2h,c
  1029  001610  0E00               	movlw	0
  1030  001612  6EDF               	movwf	indf2,c
  1031                           
  1032                           ;memory.c: 323: return;
  1033  001614  0012               	return	
  1034  001616                     __end_of_SRAMInitHeap:
  1035                           	opt stack 0
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           prodh	equ	0xFF4
  1041                           prodl	equ	0xFF3
  1042                           intcon	equ	0xFF2
  1043                           postinc0	equ	0xFEE
  1044                           plusw0	equ	0xFEB
  1045                           fsr0h	equ	0xFEA
  1046                           fsr0l	equ	0xFE9
  1047                           wreg	equ	0xFE8
  1048                           postinc1	equ	0xFE6
  1049                           plusw1	equ	0xFE3
  1050                           fsr1h	equ	0xFE2
  1051                           fsr1l	equ	0xFE1
  1052                           indf2	equ	0xFDF
  1053                           postinc2	equ	0xFDE
  1054                           postdec2	equ	0xFDD
  1055                           plusw2	equ	0xFDB
  1056                           fsr2h	equ	0xFDA
  1057                           fsr2l	equ	0xFD9
  1058                           status	equ	0xFD8
  1059                           
  1060 ;; *************** function _Lcd_Init *****************
  1061 ;; Defined at:
  1062 ;;		line 74 in file "lcd.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr1l, fsr1h, status,2, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1076 ;;      Params:         0       0       0       0       0       0       0
  1077 ;;      Locals:         0       0       0       0       0       0       0
  1078 ;;      Temps:          1       0       0       0       0       0       0
  1079 ;;      Totals:         1       0       0       0       0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:   13
  1083 ;; This function calls:
  1084 ;;		_Lcd_Cmd
  1085 ;;		_Lcd_Port
  1086 ;; This function is called by:
  1087 ;;		_setupOS
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text6
  1092  001486                     __ptext6:
  1093                           	opt stack 0
  1094  001486                     _Lcd_Init:
  1095                           	opt stack 16
  1096                           
  1097                           ;lcd.c: 78: Lcd_Port(0x00);
  1098                           
  1099                           ;incstack = 0
  1100  001486  0E00               	movlw	0
  1101  001488  6EE6               	movwf	postinc1,c
  1102  00148A  EC90  F00B         	call	_Lcd_Port	;wreg free
  1103                           
  1104                           ;lcd.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1105  00148E  0E1A               	movlw	26
  1106  001490  6E38               	movwf	??_Lcd_Init& (0+255),c
  1107  001492  0EF8               	movlw	248
  1108  001494                     u797:
  1109  001494  2EE8               	decfsz	wreg,f,c
  1110  001496  D7FE               	bra	u797
  1111  001498  2E38               	decfsz	??_Lcd_Init& (0+255),f,c
  1112  00149A  D7FC               	bra	u797
  1113  00149C  D000               	nop2	
  1114                           
  1115                           ;lcd.c: 80: Lcd_Cmd(0x03);
  1116  00149E  0E03               	movlw	3
  1117  0014A0  ECAA  F00B         	call	_Lcd_Cmd
  1118                           
  1119                           ;lcd.c: 81: _delay((unsigned long)((5)*(4000000/4000.0)));
  1120  0014A4  0E07               	movlw	7
  1121  0014A6  6E38               	movwf	??_Lcd_Init& (0+255),c
  1122  0014A8  0E7D               	movlw	125
  1123  0014AA                     u807:
  1124  0014AA  2EE8               	decfsz	wreg,f,c
  1125  0014AC  D7FE               	bra	u807
  1126  0014AE  2E38               	decfsz	??_Lcd_Init& (0+255),f,c
  1127  0014B0  D7FC               	bra	u807
  1128  0014B2  F000               	nop	
  1129                           
  1130                           ;lcd.c: 82: Lcd_Cmd(0x03);
  1131  0014B4  0E03               	movlw	3
  1132  0014B6  ECAA  F00B         	call	_Lcd_Cmd
  1133                           
  1134                           ;lcd.c: 83: _delay((unsigned long)((11)*(4000000/4000.0)));
  1135  0014BA  0E0F               	movlw	15
  1136  0014BC  6E38               	movwf	??_Lcd_Init& (0+255),c
  1137  0014BE  0E48               	movlw	72
  1138  0014C0                     u817:
  1139  0014C0  2EE8               	decfsz	wreg,f,c
  1140  0014C2  D7FE               	bra	u817
  1141  0014C4  2E38               	decfsz	??_Lcd_Init& (0+255),f,c
  1142  0014C6  D7FC               	bra	u817
  1143                           
  1144                           ;lcd.c: 84: Lcd_Cmd(0x03);
  1145  0014C8  0E03               	movlw	3
  1146  0014CA  ECAA  F00B         	call	_Lcd_Cmd
  1147                           
  1148                           ;lcd.c: 86: Lcd_Cmd(0x02);
  1149  0014CE  0E02               	movlw	2
  1150  0014D0  ECAA  F00B         	call	_Lcd_Cmd
  1151                           
  1152                           ;lcd.c: 87: Lcd_Cmd(0x02);
  1153  0014D4  0E02               	movlw	2
  1154  0014D6  ECAA  F00B         	call	_Lcd_Cmd
  1155                           
  1156                           ;lcd.c: 88: Lcd_Cmd(0x08);
  1157  0014DA  0E08               	movlw	8
  1158  0014DC  ECAA  F00B         	call	_Lcd_Cmd
  1159                           
  1160                           ;lcd.c: 89: Lcd_Cmd(0x00);
  1161  0014E0  0E00               	movlw	0
  1162  0014E2  ECAA  F00B         	call	_Lcd_Cmd
  1163                           
  1164                           ;lcd.c: 90: Lcd_Cmd(0x0C);
  1165  0014E6  0E0C               	movlw	12
  1166  0014E8  ECAA  F00B         	call	_Lcd_Cmd
  1167                           
  1168                           ;lcd.c: 91: Lcd_Cmd(0x00);
  1169  0014EC  0E00               	movlw	0
  1170  0014EE  ECAA  F00B         	call	_Lcd_Cmd
  1171                           
  1172                           ;lcd.c: 92: Lcd_Cmd(0x06);
  1173  0014F2  0E06               	movlw	6
  1174  0014F4  ECAA  F00B         	call	_Lcd_Cmd
  1175  0014F8  0012               	return		;funcret
  1176  0014FA                     __end_of_Lcd_Init:
  1177                           	opt stack 0
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           prodh	equ	0xFF4
  1183                           prodl	equ	0xFF3
  1184                           intcon	equ	0xFF2
  1185                           postinc0	equ	0xFEE
  1186                           plusw0	equ	0xFEB
  1187                           fsr0h	equ	0xFEA
  1188                           fsr0l	equ	0xFE9
  1189                           wreg	equ	0xFE8
  1190                           postinc1	equ	0xFE6
  1191                           plusw1	equ	0xFE3
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           indf2	equ	0xFDF
  1195                           postinc2	equ	0xFDE
  1196                           postdec2	equ	0xFDD
  1197                           plusw2	equ	0xFDB
  1198                           fsr2h	equ	0xFDA
  1199                           fsr2l	equ	0xFD9
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _Lcd_Cmd *****************
  1203 ;; Defined at:
  1204 ;;		line 35 in file "lcd.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  a               1    wreg     unsigned char 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  a               1   22[COMRAM] unsigned char 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, status,2
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1218 ;;      Params:         0       0       0       0       0       0       0
  1219 ;;      Locals:         1       0       0       0       0       0       0
  1220 ;;      Temps:          1       0       0       0       0       0       0
  1221 ;;      Totals:         2       0       0       0       0       0       0
  1222 ;;Total ram usage:        2 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:   12
  1225 ;; This function calls:
  1226 ;;		_Lcd_Port
  1227 ;; This function is called by:
  1228 ;;		_Lcd_Init
  1229 ;;		_Lcd_Clear
  1230 ;;		_Lcd_Set_Cursor
  1231 ;;		_Lcd_Shift_Right
  1232 ;;		_Lcd_Shift_Left
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text7
  1237  001754                     __ptext7:
  1238                           	opt stack 0
  1239  001754                     _Lcd_Cmd:
  1240                           	opt stack 16
  1241                           
  1242                           ;incstack = 0
  1243                           ;Lcd_Cmd@a stored from wreg
  1244  001754  6E37               	movwf	Lcd_Cmd@a,c
  1245                           
  1246                           ;lcd.c: 38: PORTDbits.RD2 = 0;
  1247  001756  9483               	bcf	3971,2,c	;volatile
  1248                           
  1249                           ;lcd.c: 39: Lcd_Port(a);
  1250  001758  5037               	movf	Lcd_Cmd@a,w,c
  1251  00175A  6EE6               	movwf	postinc1,c
  1252  00175C  EC90  F00B         	call	_Lcd_Port	;wreg free
  1253                           
  1254                           ;lcd.c: 40: PORTDbits.RD3 = 1;
  1255  001760  8683               	bsf	3971,3,c	;volatile
  1256                           
  1257                           ;lcd.c: 42: _delay((unsigned long)((4)*(4000000/4000.0)));
  1258  001762  0E06               	movlw	6
  1259  001764  6E36               	movwf	??_Lcd_Cmd& (0+255),c
  1260  001766  0E30               	movlw	48
  1261  001768                     u827:
  1262  001768  2EE8               	decfsz	wreg,f,c
  1263  00176A  D7FE               	bra	u827
  1264  00176C  2E36               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1265  00176E  D7FC               	bra	u827
  1266  001770  D000               	nop2	
  1267                           
  1268                           ;lcd.c: 43: PORTDbits.RD3 = 0;
  1269  001772  9683               	bcf	3971,3,c	;volatile
  1270  001774  0012               	return		;funcret
  1271  001776                     __end_of_Lcd_Cmd:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           prodh	equ	0xFF4
  1278                           prodl	equ	0xFF3
  1279                           intcon	equ	0xFF2
  1280                           postinc0	equ	0xFEE
  1281                           plusw0	equ	0xFEB
  1282                           fsr0h	equ	0xFEA
  1283                           fsr0l	equ	0xFE9
  1284                           wreg	equ	0xFE8
  1285                           postinc1	equ	0xFE6
  1286                           plusw1	equ	0xFE3
  1287                           fsr1h	equ	0xFE2
  1288                           fsr1l	equ	0xFE1
  1289                           indf2	equ	0xFDF
  1290                           postinc2	equ	0xFDE
  1291                           postdec2	equ	0xFDD
  1292                           plusw2	equ	0xFDB
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _Lcd_Port *****************
  1298 ;; Defined at:
  1299 ;;		line 13 in file "lcd.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  a               1  [STACK] unsigned char 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1  [STACK] void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr1l, fsr1h
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:   11
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_Lcd_Cmd
  1324 ;;		_Lcd_Init
  1325 ;;		_Lcd_Write_Char
  1326 ;; This function uses a reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text8
  1330  001720                     __ptext8:
  1331                           	opt stack 0
  1332  001720                     _Lcd_Port:
  1333                           	opt stack 12
  1334                           
  1335                           ;lcd.c: 15: if(a & 1)
  1336                           ;stkvar	Lcd_Port@a @ sp[(0)+-1]
  1337                           
  1338                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1339                           ;incstack = 0
  1340  001720  0EFF               	movlw	-1
  1341  001722  A0E3               	btfss	plusw1,0,c
  1342  001724  D002               	goto	l271
  1343                           
  1344                           ;lcd.c: 16: PORTDbits.RD4 = 1;
  1345  001726  8883               	bsf	3971,4,c	;volatile
  1346  001728  D001               	goto	l1511
  1347  00172A                     l271:
  1348                           
  1349                           ;lcd.c: 17: else
  1350                           ;lcd.c: 18: PORTDbits.RD4 = 0;
  1351  00172A  9883               	bcf	3971,4,c	;volatile
  1352  00172C                     l1511:
  1353                           
  1354                           ;lcd.c: 20: if(a & 2)
  1355                           ;stkvar	Lcd_Port@a @ sp[(0)+-1]
  1356  00172C  0EFF               	movlw	-1
  1357  00172E  A2E3               	btfss	plusw1,1,c
  1358  001730  D002               	goto	l273
  1359                           
  1360                           ;lcd.c: 21: PORTDbits.RD5 = 1;
  1361  001732  8A83               	bsf	3971,5,c	;volatile
  1362  001734  D001               	goto	l1515
  1363  001736                     l273:
  1364                           
  1365                           ;lcd.c: 22: else
  1366                           ;lcd.c: 23: PORTDbits.RD5 = 0;
  1367  001736  9A83               	bcf	3971,5,c	;volatile
  1368  001738                     l1515:
  1369                           
  1370                           ;lcd.c: 25: if(a & 4)
  1371                           ;stkvar	Lcd_Port@a @ sp[(0)+-1]
  1372  001738  0EFF               	movlw	-1
  1373  00173A  A4E3               	btfss	plusw1,2,c
  1374  00173C  D002               	goto	l275
  1375                           
  1376                           ;lcd.c: 26: PORTDbits.RD6 = 1;
  1377  00173E  8C83               	bsf	3971,6,c	;volatile
  1378  001740  D001               	goto	l1519
  1379  001742                     l275:
  1380                           
  1381                           ;lcd.c: 27: else
  1382                           ;lcd.c: 28: PORTDbits.RD6 = 0;
  1383  001742  9C83               	bcf	3971,6,c	;volatile
  1384  001744                     l1519:
  1385                           
  1386                           ;lcd.c: 30: if(a & 8)
  1387                           ;stkvar	Lcd_Port@a @ sp[(0)+-1]
  1388  001744  0EFF               	movlw	-1
  1389  001746  A6E3               	btfss	plusw1,3,c
  1390  001748  D002               	goto	l277
  1391                           
  1392                           ;lcd.c: 31: PORTDbits.RD7 = 1;
  1393  00174A  8E83               	bsf	3971,7,c	;volatile
  1394  00174C  D001               	goto	l279
  1395  00174E                     l277:
  1396                           
  1397                           ;lcd.c: 32: else
  1398                           ;lcd.c: 33: PORTDbits.RD7 = 0;
  1399  00174E  9E83               	bcf	3971,7,c	;volatile
  1400  001750                     l279:
  1401                           
  1402                           ; _Lcd_Port: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, args
      +                          ize = 1, vargsize = 0
  1403  001750  52E5               	movf	postdec1,f,c
  1404  001752  0012               	return		;funcret
  1405  001754                     __end_of_Lcd_Port:
  1406                           	opt stack 0
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           prodh	equ	0xFF4
  1412                           prodl	equ	0xFF3
  1413                           intcon	equ	0xFF2
  1414                           postinc0	equ	0xFEE
  1415                           plusw0	equ	0xFEB
  1416                           fsr0h	equ	0xFEA
  1417                           fsr0l	equ	0xFE9
  1418                           wreg	equ	0xFE8
  1419                           postinc1	equ	0xFE6
  1420                           postdec1	equ	0xFE5
  1421                           plusw1	equ	0xFE3
  1422                           fsr1h	equ	0xFE2
  1423                           fsr1l	equ	0xFE1
  1424                           indf2	equ	0xFDF
  1425                           postinc2	equ	0xFDE
  1426                           postdec2	equ	0xFDD
  1427                           plusw2	equ	0xFDB
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _sem_init *****************
  1433 ;; Defined at:
  1434 ;;		line 6 in file "semaphore.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  s               2   21[COMRAM] PTR struct sem
  1437 ;;		 -> spista(14), 
  1438 ;;  value           2   23[COMRAM] int 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1450 ;;      Params:         4       0       0       0       0       0       0
  1451 ;;      Locals:         0       0       0       0       0       0       0
  1452 ;;      Temps:          0       0       0       0       0       0       0
  1453 ;;      Totals:         4       0       0       0       0       0       0
  1454 ;;Total ram usage:        4 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:   11
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_main
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text9
  1465  0016E2                     __ptext9:
  1466                           	opt stack 0
  1467  0016E2                     _sem_init:
  1468                           	opt stack 19
  1469                           
  1470                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1471                           
  1472                           ;incstack = 0
  1473  0016E2  9EF2               	bcf	intcon,7,c	;volatile
  1474                           
  1475                           ;semaphore.c: 10: s->contador = value;
  1476  0016E4  C036  FFD9         	movff	sem_init@s,fsr2l
  1477  0016E8  C037  FFDA         	movff	sem_init@s+1,fsr2h
  1478  0016EC  C038  FFDE         	movff	sem_init@value,postinc2
  1479  0016F0  C039  FFDD         	movff	sem_init@value+1,postdec2
  1480                           
  1481                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1482  0016F4  EE20 F00A          	lfsr	2,10
  1483  0016F8  5036               	movf	sem_init@s,w,c
  1484  0016FA  26D9               	addwf	fsr2l,f,c
  1485  0016FC  5037               	movf	sem_init@s+1,w,c
  1486  0016FE  22DA               	addwfc	fsr2h,f,c
  1487  001700  0E00               	movlw	0
  1488  001702  6EDE               	movwf	postinc2,c
  1489  001704  0E00               	movlw	0
  1490  001706  6EDD               	movwf	postdec2,c
  1491                           
  1492                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1493  001708  EE20 F00C          	lfsr	2,12
  1494  00170C  5036               	movf	sem_init@s,w,c
  1495  00170E  26D9               	addwf	fsr2l,f,c
  1496  001710  5037               	movf	sem_init@s+1,w,c
  1497  001712  22DA               	addwfc	fsr2h,f,c
  1498  001714  0E00               	movlw	0
  1499  001716  6EDE               	movwf	postinc2,c
  1500  001718  0E00               	movlw	0
  1501  00171A  6EDD               	movwf	postdec2,c
  1502                           
  1503                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1504  00171C  8EF2               	bsf	intcon,7,c	;volatile
  1505  00171E  0012               	return		;funcret
  1506  001720                     __end_of_sem_init:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           prodh	equ	0xFF4
  1513                           prodl	equ	0xFF3
  1514                           intcon	equ	0xFF2
  1515                           postinc0	equ	0xFEE
  1516                           plusw0	equ	0xFEB
  1517                           fsr0h	equ	0xFEA
  1518                           fsr0l	equ	0xFE9
  1519                           wreg	equ	0xFE8
  1520                           postinc1	equ	0xFE6
  1521                           postdec1	equ	0xFE5
  1522                           plusw1	equ	0xFE3
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           plusw2	equ	0xFDB
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _aviao1 *****************
  1534 ;; Defined at:
  1535 ;;		line 69 in file "tasks.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  tempo_p1        2  [STACK] unsigned int 
  1540 ;;  tempo_v1        2  [STACK] unsigned int 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1  [STACK] void 
  1543 ;; Registers used:
  1544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1550 ;;      Params:         0       0       0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    8
  1557 ;; This function calls:
  1558 ;;		_delay
  1559 ;;		_sem_post
  1560 ;;		_sem_wait
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;; This function uses a reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text10
  1567  000DF4                     __ptext10:
  1568                           	opt stack 0
  1569  000DF4                     _aviao1:
  1570                           	opt stack 0
  1571                           
  1572                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1573  000DF4  52E6               	movf	postinc1,f,c
  1574  000DF6  52E6               	movf	postinc1,f,c
  1575  000DF8  52E6               	movf	postinc1,f,c
  1576  000DFA  52E6               	movf	postinc1,f,c
  1577                           
  1578                           ;tasks.c: 72: TRISCbits.RC5 = 0;
  1579                           
  1580                           ;incstack = 0
  1581  000DFC  9A94               	bcf	3988,5,c	;volatile
  1582                           
  1583                           ;tasks.c: 73: PORTCbits.RC5 = 0;
  1584  000DFE  9A82               	bcf	3970,5,c	;volatile
  1585                           
  1586                           ;tasks.c: 77: TRISCbits.RC4 = 0;
  1587  000E00  9894               	bcf	3988,4,c	;volatile
  1588                           
  1589                           ;tasks.c: 78: PORTCbits.RC4 = 0;
  1590  000E02  9882               	bcf	3970,4,c	;volatile
  1591                           
  1592                           ;tasks.c: 80: TRISCbits.RC3 = 0;
  1593  000E04  9694               	bcf	3988,3,c	;volatile
  1594                           
  1595                           ;tasks.c: 81: PORTCbits.RC3 = 0;
  1596  000E06  9682               	bcf	3970,3,c	;volatile
  1597                           
  1598                           ;tasks.c: 84: u_int tempo_v1 = 5000;
  1599  000E08  0E88               	movlw	136
  1600  000E0A  6E3D               	movwf	btemp+1,c
  1601  000E0C  0E13               	movlw	19
  1602  000E0E  6E3E               	movwf	btemp+2,c
  1603                           
  1604                           ;stkvar	aviao1@tempo_v1 @ sp[(-4)+2]
  1605  000E10  0EFE               	movlw	-2
  1606  000E12  C03D  FFE3         	movff	btemp+1,plusw1
  1607  000E16  0EFF               	movlw	-1
  1608  000E18  C03E  FFE3         	movff	btemp+2,plusw1
  1609                           
  1610                           ;tasks.c: 85: u_int tempo_p1 = 1000;
  1611  000E1C  0EE8               	movlw	232
  1612  000E1E  6E3D               	movwf	btemp+1,c
  1613  000E20  0E03               	movlw	3
  1614  000E22  6E3E               	movwf	btemp+2,c
  1615                           
  1616                           ;stkvar	aviao1@tempo_p1 @ sp[(-4)+0]
  1617  000E24  0EFC               	movlw	-4
  1618  000E26  C03D  FFE3         	movff	btemp+1,plusw1
  1619  000E2A  0EFD               	movlw	-3
  1620  000E2C  C03E  FFE3         	movff	btemp+2,plusw1
  1621  000E30                     l1823:
  1622                           
  1623                           ;tasks.c: 91: PORTCbits.RC4 = 1;
  1624  000E30  8882               	bsf	3970,4,c	;volatile
  1625                           
  1626                           ;tasks.c: 92: delay(tempo_v1);
  1627                           ;stkvar	aviao1@tempo_v1 @ sp[(-4)+2]
  1628  000E32  0EFE               	movlw	-2
  1629  000E34  CFE3 FFE6          	movff	plusw1,postinc1
  1630  000E38  CFE3 FFE6          	movff	plusw1,postinc1
  1631  000E3C  EC0B  F00B         	call	_delay	;wreg free
  1632                           
  1633                           ;tasks.c: 97: sem_wait(&spista);
  1634  000E40  0E13               	movlw	low _spista
  1635  000E42  6EE6               	movwf	postinc1,c
  1636  000E44  0E00               	movlw	high _spista
  1637  000E46  6EE6               	movwf	postinc1,c
  1638  000E48  EC69  F007         	call	_sem_wait	;wreg free
  1639                           
  1640                           ;tasks.c: 100: PORTCbits.RC4 = 0;
  1641  000E4C  9882               	bcf	3970,4,c	;volatile
  1642                           
  1643                           ;tasks.c: 101: PORTCbits.RC5 = 1;
  1644  000E4E  8A82               	bsf	3970,5,c	;volatile
  1645                           
  1646                           ;tasks.c: 103: delay(5000);
  1647  000E50  0E88               	movlw	136
  1648  000E52  6EE6               	movwf	postinc1,c
  1649  000E54  0E13               	movlw	19
  1650  000E56  6EE6               	movwf	postinc1,c
  1651  000E58  EC0B  F00B         	call	_delay	;wreg free
  1652                           
  1653                           ;tasks.c: 105: delay(tempo_p1);
  1654                           ;stkvar	aviao1@tempo_p1 @ sp[(-4)+0]
  1655  000E5C  0EFC               	movlw	-4
  1656  000E5E  CFE3 FFE6          	movff	plusw1,postinc1
  1657  000E62  CFE3 FFE6          	movff	plusw1,postinc1
  1658  000E66  EC0B  F00B         	call	_delay	;wreg free
  1659                           
  1660                           ;tasks.c: 107: PORTCbits.RC5 = 0;
  1661  000E6A  9A82               	bcf	3970,5,c	;volatile
  1662                           
  1663                           ;tasks.c: 108: delay(2000);
  1664  000E6C  0ED0               	movlw	208
  1665  000E6E  6EE6               	movwf	postinc1,c
  1666  000E70  0E07               	movlw	7
  1667  000E72  6EE6               	movwf	postinc1,c
  1668  000E74  EC0B  F00B         	call	_delay	;wreg free
  1669                           
  1670                           ;tasks.c: 110: sem_post(&spista);
  1671  000E78  0E13               	movlw	low _spista
  1672  000E7A  6EE6               	movwf	postinc1,c
  1673  000E7C  0E00               	movlw	high _spista
  1674  000E7E  6EE6               	movwf	postinc1,c
  1675  000E80  EC64  F006         	call	_sem_post	;wreg free
  1676                           
  1677                           ;tasks.c: 112: delay(600);
  1678  000E84  0E58               	movlw	88
  1679  000E86  6EE6               	movwf	postinc1,c
  1680  000E88  0E02               	movlw	2
  1681  000E8A  6EE6               	movwf	postinc1,c
  1682  000E8C  EC0B  F00B         	call	_delay	;wreg free
  1683                           
  1684                           ;tasks.c: 113: sem_wait(&spista);
  1685  000E90  0E13               	movlw	low _spista
  1686  000E92  6EE6               	movwf	postinc1,c
  1687  000E94  0E00               	movlw	high _spista
  1688  000E96  6EE6               	movwf	postinc1,c
  1689  000E98  EC69  F007         	call	_sem_wait	;wreg free
  1690                           
  1691                           ;tasks.c: 115: PORTCbits.RC3 = 1;
  1692  000E9C  8682               	bsf	3970,3,c	;volatile
  1693                           
  1694                           ;tasks.c: 116: delay(5200);
  1695  000E9E  0E50               	movlw	80
  1696  000EA0  6EE6               	movwf	postinc1,c
  1697  000EA2  0E14               	movlw	20
  1698  000EA4  6EE6               	movwf	postinc1,c
  1699  000EA6  EC0B  F00B         	call	_delay	;wreg free
  1700                           
  1701                           ;tasks.c: 117: PORTCbits.RC3 = 0;
  1702  000EAA  9682               	bcf	3970,3,c	;volatile
  1703                           
  1704                           ;tasks.c: 118: delay(2500);
  1705  000EAC  0EC4               	movlw	196
  1706  000EAE  6EE6               	movwf	postinc1,c
  1707  000EB0  0E09               	movlw	9
  1708  000EB2  6EE6               	movwf	postinc1,c
  1709  000EB4  EC0B  F00B         	call	_delay	;wreg free
  1710                           
  1711                           ;tasks.c: 119: sem_post(&spista);
  1712  000EB8  0E13               	movlw	low _spista
  1713  000EBA  6EE6               	movwf	postinc1,c
  1714  000EBC  0E00               	movlw	high _spista
  1715  000EBE  6EE6               	movwf	postinc1,c
  1716  000EC0  EC64  F006         	call	_sem_post	;wreg free
  1717                           
  1718                           ;tasks.c: 120: delay(2340);
  1719  000EC4  0E24               	movlw	36
  1720  000EC6  6EE6               	movwf	postinc1,c
  1721  000EC8  0E09               	movlw	9
  1722  000ECA  6EE6               	movwf	postinc1,c
  1723  000ECC  EC0B  F00B         	call	_delay	;wreg free
  1724  000ED0  D7AF               	goto	l1823
  1725  000ED2                     __end_of_aviao1:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           postinc0	equ	0xFEE
  1735                           plusw0	equ	0xFEB
  1736                           fsr0h	equ	0xFEA
  1737                           fsr0l	equ	0xFE9
  1738                           wreg	equ	0xFE8
  1739                           postinc1	equ	0xFE6
  1740                           postdec1	equ	0xFE5
  1741                           plusw1	equ	0xFE3
  1742                           fsr1h	equ	0xFE2
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           postinc2	equ	0xFDE
  1746                           postdec2	equ	0xFDD
  1747                           plusw2	equ	0xFDB
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8
  1751                           
  1752 ;; *************** function _sem_wait *****************
  1753 ;; Defined at:
  1754 ;;		line 17 in file "semaphore.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  s               2  [STACK] PTR struct sem
  1757 ;;		 -> spista(14), 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1  [STACK] void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1769 ;;      Params:         0       0       0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0
  1772 ;;      Totals:         0       0       0       0       0       0       0
  1773 ;;Total ram usage:        0 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    7
  1776 ;; This function calls:
  1777 ;;		_dispatcher
  1778 ;; This function is called by:
  1779 ;;		_aviao1
  1780 ;;		_aviao2
  1781 ;;		_aviao3
  1782 ;; This function uses a reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text11
  1786  000ED2                     __ptext11:
  1787                           	opt stack 0
  1788  000ED2                     _sem_wait:
  1789                           	opt stack 18
  1790                           
  1791                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  1792                           
  1793                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1794                           ;incstack = 0
  1795  000ED2  9EF2               	bcf	intcon,7,c	;volatile
  1796                           
  1797                           ;semaphore.c: 22: s->contador--;
  1798                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1799  000ED4  0EFE               	movlw	-2
  1800  000ED6  CFE3 FFD9          	movff	plusw1,fsr2l
  1801  000EDA  0EFF               	movlw	-1
  1802  000EDC  CFE3 FFDA          	movff	plusw1,fsr2h
  1803  000EE0  06DE               	decf	postinc2,f,c
  1804  000EE2  0E00               	movlw	0
  1805  000EE4  5ADD               	subwfb	postdec2,f,c
  1806                           
  1807                           ;semaphore.c: 23: if (s->contador < 0) {
  1808                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1809  000EE6  0EFE               	movlw	-2
  1810  000EE8  CFE3 FFD9          	movff	plusw1,fsr2l
  1811  000EEC  0EFF               	movlw	-1
  1812  000EEE  CFE3 FFDA          	movff	plusw1,fsr2h
  1813  000EF2  0E01               	movlw	1
  1814  000EF4  AEDB               	btfss	plusw2,7,c
  1815  000EF6  D051               	goto	l1747
  1816                           
  1817                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  1818                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1819  000EF8  0EFE               	movlw	-2
  1820  000EFA  CFE3 F03D          	movff	plusw1,btemp+1
  1821  000EFE  0EFF               	movlw	-1
  1822  000F00  CFE3 F03E          	movff	plusw1,btemp+2
  1823  000F04  0E0A               	movlw	10
  1824  000F06  243D               	addwf	btemp+1,w,c
  1825  000F08  6ED9               	movwf	fsr2l,c
  1826  000F0A  0E00               	movlw	0
  1827  000F0C  203E               	addwfc	btemp+2,w,c
  1828  000F0E  6EDA               	movwf	fsr2h,c
  1829  000F10  CFDE F046          	movff	postinc2,btemp+10
  1830  000F14  CFDD F047          	movff	postdec2,btemp+11
  1831  000F18  90D8               	bcf	status,0,c
  1832  000F1A  3446               	rlcf	btemp+10,w,c
  1833  000F1C  6E3D               	movwf	btemp+1,c
  1834  000F1E  3447               	rlcf	btemp+11,w,c
  1835  000F20  6E3E               	movwf	btemp+2,c
  1836                           
  1837                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1838  000F22  0EFE               	movlw	-2
  1839  000F24  50E3               	movf	plusw1,w,c
  1840  000F26  263D               	addwf	btemp+1,f,c
  1841  000F28  0EFF               	movlw	-1
  1842  000F2A  50E3               	movf	plusw1,w,c
  1843  000F2C  223E               	addwfc	btemp+2,f,c
  1844  000F2E  0E02               	movlw	2
  1845  000F30  243D               	addwf	btemp+1,w,c
  1846  000F32  6ED9               	movwf	fsr2l,c
  1847  000F34  0E00               	movlw	0
  1848  000F36  203E               	addwfc	btemp+2,w,c
  1849  000F38  6EDA               	movwf	fsr2h,c
  1850  000F3A  C00F  FFDE         	movff	_task_running,postinc2
  1851  000F3E  C010  FFDD         	movff	_task_running+1,postdec2
  1852                           
  1853                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 4;
  1854                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1855  000F42  0EFE               	movlw	-2
  1856  000F44  CFE3 F03D          	movff	plusw1,btemp+1
  1857  000F48  0EFF               	movlw	-1
  1858  000F4A  CFE3 F03E          	movff	plusw1,btemp+2
  1859  000F4E  0E0A               	movlw	10
  1860  000F50  243D               	addwf	btemp+1,w,c
  1861  000F52  6ED9               	movwf	fsr2l,c
  1862  000F54  0E00               	movlw	0
  1863  000F56  203E               	addwfc	btemp+2,w,c
  1864  000F58  6EDA               	movwf	fsr2h,c
  1865  000F5A  CFDE F03D          	movff	postinc2,btemp+1
  1866  000F5E  CFDD F03E          	movff	postdec2,btemp+2
  1867  000F62  0E01               	movlw	1
  1868  000F64  263D               	addwf	btemp+1,f,c
  1869  000F66  0E00               	movlw	0
  1870  000F68  223E               	addwfc	btemp+2,f,c
  1871  000F6A  0E03               	movlw	3
  1872  000F6C  163D               	andwf	btemp+1,f,c
  1873  000F6E  0E00               	movlw	0
  1874  000F70  163E               	andwf	btemp+2,f,c
  1875                           
  1876                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1877  000F72  0EFE               	movlw	-2
  1878  000F74  CFE3 F046          	movff	plusw1,btemp+10
  1879  000F78  0EFF               	movlw	-1
  1880  000F7A  CFE3 F047          	movff	plusw1,btemp+11
  1881  000F7E  0E0A               	movlw	10
  1882  000F80  2446               	addwf	btemp+10,w,c
  1883  000F82  6ED9               	movwf	fsr2l,c
  1884  000F84  0E00               	movlw	0
  1885  000F86  2047               	addwfc	btemp+11,w,c
  1886  000F88  6EDA               	movwf	fsr2h,c
  1887  000F8A  C03D  FFDE         	movff	btemp+1,postinc2
  1888  000F8E  C03E  FFDD         	movff	btemp+2,postdec2
  1889                           
  1890                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  1891  000F92  0E05               	movlw	5
  1892  000F94  6EE6               	movwf	postinc1,c
  1893  000F96  EC0E  F003         	call	_dispatcher	;wreg free
  1894  000F9A                     l1747:
  1895                           
  1896                           ;semaphore.c: 27: }
  1897                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  1898  000F9A  8EF2               	bsf	intcon,7,c	;volatile
  1899                           
  1900                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  1901  000F9C  52E5               	movf	postdec1,f,c
  1902  000F9E  52E5               	movf	postdec1,f,c
  1903  000FA0  0012               	return		;funcret
  1904  000FA2                     __end_of_sem_wait:
  1905                           	opt stack 0
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           prodh	equ	0xFF4
  1911                           prodl	equ	0xFF3
  1912                           intcon	equ	0xFF2
  1913                           postinc0	equ	0xFEE
  1914                           plusw0	equ	0xFEB
  1915                           fsr0h	equ	0xFEA
  1916                           fsr0l	equ	0xFE9
  1917                           wreg	equ	0xFE8
  1918                           postinc1	equ	0xFE6
  1919                           postdec1	equ	0xFE5
  1920                           plusw1	equ	0xFE3
  1921                           fsr1h	equ	0xFE2
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           postdec2	equ	0xFDD
  1926                           plusw2	equ	0xFDB
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8
  1930                           
  1931 ;; *************** function _sem_post *****************
  1932 ;; Defined at:
  1933 ;;		line 32 in file "semaphore.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  s               2  [STACK] PTR struct sem
  1936 ;;		 -> spista(14), 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1  [STACK] void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1948 ;;      Params:         0       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0
  1951 ;;      Totals:         0       0       0       0       0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    7
  1955 ;; This function calls:
  1956 ;;		___lwmod
  1957 ;;		___wmul
  1958 ;;		_dispatcher
  1959 ;; This function is called by:
  1960 ;;		_aviao1
  1961 ;;		_aviao2
  1962 ;;		_aviao3
  1963 ;; This function uses a reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text12
  1967  000CC8                     __ptext12:
  1968                           	opt stack 0
  1969  000CC8                     _sem_post:
  1970                           	opt stack 18
  1971                           
  1972                           ;semaphore.c: 34: (INTCONbits.GIE = 0);
  1973                           
  1974                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1975                           ;incstack = 0
  1976  000CC8  9EF2               	bcf	intcon,7,c	;volatile
  1977                           
  1978                           ;semaphore.c: 36: s->contador++;
  1979                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1980  000CCA  0EFE               	movlw	-2
  1981  000CCC  CFE3 FFD9          	movff	plusw1,fsr2l
  1982  000CD0  0EFF               	movlw	-1
  1983  000CD2  CFE3 FFDA          	movff	plusw1,fsr2h
  1984  000CD6  2ADE               	incf	postinc2,f,c
  1985  000CD8  0E00               	movlw	0
  1986  000CDA  22DD               	addwfc	postdec2,f,c
  1987                           
  1988                           ;semaphore.c: 37: if (s->contador <= 0) {
  1989                           ;stkvar	sem_post@s @ sp[(0)+-2]
  1990  000CDC  0EFE               	movlw	-2
  1991  000CDE  CFE3 FFD9          	movff	plusw1,fsr2l
  1992  000CE2  0EFF               	movlw	-1
  1993  000CE4  CFE3 FFDA          	movff	plusw1,fsr2h
  1994  000CE8  0E01               	movlw	1
  1995  000CEA  BEDB               	btfsc	plusw2,7,c
  1996  000CEC  D006               	goto	u62_20
  1997  000CEE  0E01               	movlw	1
  1998  000CF0  50DB               	movf	plusw2,w,c
  1999  000CF2  E17C               	bnz	l1761
  2000  000CF4  04DE               	decf	postinc2,w,c
  2001  000CF6  B0D8               	btfsc	status,0,c
  2002  000CF8  D079               	goto	l1761
  2003  000CFA                     u62_20:
  2004                           
  2005                           ;semaphore.c: 38: F_APTOS[s->queue.s_queue[s->queue.s_queue_pos_out]].task_state = READY
      +                          ;
  2006  000CFA  0E6E               	movlw	110
  2007  000CFC  6EE6               	movwf	postinc1,c
  2008  000CFE  0E00               	movlw	0
  2009  000D00  6EE6               	movwf	postinc1,c
  2010                           
  2011                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  2012  000D02  0EFC               	movlw	-4
  2013  000D04  CFE3 F03D          	movff	plusw1,btemp+1
  2014  000D08  0EFD               	movlw	-3
  2015  000D0A  CFE3 F03E          	movff	plusw1,btemp+2
  2016  000D0E  0E0C               	movlw	12
  2017  000D10  243D               	addwf	btemp+1,w,c
  2018  000D12  6ED9               	movwf	fsr2l,c
  2019  000D14  0E00               	movlw	0
  2020  000D16  203E               	addwfc	btemp+2,w,c
  2021  000D18  6EDA               	movwf	fsr2h,c
  2022  000D1A  CFDE F046          	movff	postinc2,btemp+10
  2023  000D1E  CFDD F047          	movff	postdec2,btemp+11
  2024  000D22  90D8               	bcf	status,0,c
  2025  000D24  3446               	rlcf	btemp+10,w,c
  2026  000D26  6E3D               	movwf	btemp+1,c
  2027  000D28  3447               	rlcf	btemp+11,w,c
  2028  000D2A  6E3E               	movwf	btemp+2,c
  2029                           
  2030                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  2031  000D2C  0EFC               	movlw	-4
  2032  000D2E  50E3               	movf	plusw1,w,c
  2033  000D30  263D               	addwf	btemp+1,f,c
  2034  000D32  0EFD               	movlw	-3
  2035  000D34  50E3               	movf	plusw1,w,c
  2036  000D36  223E               	addwfc	btemp+2,f,c
  2037  000D38  0E02               	movlw	2
  2038  000D3A  243D               	addwf	btemp+1,w,c
  2039  000D3C  6ED9               	movwf	fsr2l,c
  2040  000D3E  0E00               	movlw	0
  2041  000D40  203E               	addwfc	btemp+2,w,c
  2042  000D42  6EDA               	movwf	fsr2h,c
  2043  000D44  CFDE F03D          	movff	postinc2,btemp+1
  2044  000D48  CFDD F03E          	movff	postdec2,btemp+2
  2045  000D4C  C03D  FFE6         	movff	btemp+1,postinc1
  2046  000D50  C03E  FFE6         	movff	btemp+2,postinc1
  2047  000D54  EC36  F009         	call	___wmul	;wreg free
  2048  000D58  0EF6               	movlw	low (_F_APTOS+8)
  2049  000D5A  243C               	addwf	btemp,w,c
  2050  000D5C  6ED9               	movwf	fsr2l,c
  2051  000D5E  0E00               	movlw	high (_F_APTOS+8)
  2052  000D60  203D               	addwfc	btemp+1,w,c
  2053  000D62  6EDA               	movwf	fsr2h,c
  2054  000D64  0E01               	movlw	1
  2055  000D66  6EDF               	movwf	indf2,c
  2056                           
  2057                           ;semaphore.c: 39: s->queue.s_queue_pos_out = (s->queue.s_queue_pos_out + 1) % s->queue.s
      +                          _queue_pos_in;
  2058                           ;stkvar	sem_post@s @ sp[(0)+-2]
  2059  000D68  0EFE               	movlw	-2
  2060  000D6A  CFE3 F03D          	movff	plusw1,btemp+1
  2061  000D6E  0EFF               	movlw	-1
  2062  000D70  CFE3 F03E          	movff	plusw1,btemp+2
  2063  000D74  0E0A               	movlw	10
  2064  000D76  243D               	addwf	btemp+1,w,c
  2065  000D78  6ED9               	movwf	fsr2l,c
  2066  000D7A  0E00               	movlw	0
  2067  000D7C  203E               	addwfc	btemp+2,w,c
  2068  000D7E  6EDA               	movwf	fsr2h,c
  2069  000D80  CFDE F03D          	movff	postinc2,btemp+1
  2070  000D84  CFDD F03E          	movff	postdec2,btemp+2
  2071  000D88  C03D  FFE6         	movff	btemp+1,postinc1
  2072  000D8C  C03E  FFE6         	movff	btemp+2,postinc1
  2073                           
  2074                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  2075  000D90  0EFC               	movlw	-4
  2076  000D92  CFE3 F03D          	movff	plusw1,btemp+1
  2077  000D96  0EFD               	movlw	-3
  2078  000D98  CFE3 F03E          	movff	plusw1,btemp+2
  2079  000D9C  0E0C               	movlw	12
  2080  000D9E  243D               	addwf	btemp+1,w,c
  2081  000DA0  6ED9               	movwf	fsr2l,c
  2082  000DA2  0E00               	movlw	0
  2083  000DA4  203E               	addwfc	btemp+2,w,c
  2084  000DA6  6EDA               	movwf	fsr2h,c
  2085  000DA8  CFDE F03D          	movff	postinc2,btemp+1
  2086  000DAC  CFDD F03E          	movff	postdec2,btemp+2
  2087  000DB0  0E01               	movlw	1
  2088  000DB2  263D               	addwf	btemp+1,f,c
  2089  000DB4  0E00               	movlw	0
  2090  000DB6  223E               	addwfc	btemp+2,f,c
  2091  000DB8  C03D  FFE6         	movff	btemp+1,postinc1
  2092  000DBC  C03E  FFE6         	movff	btemp+2,postinc1
  2093  000DC0  EC36  F008         	call	___lwmod	;wreg free
  2094                           
  2095                           ;stkvar	sem_post@s @ sp[(0)+-2]
  2096  000DC4  0EFE               	movlw	-2
  2097  000DC6  CFE3 F046          	movff	plusw1,btemp+10
  2098  000DCA  0EFF               	movlw	-1
  2099  000DCC  CFE3 F047          	movff	plusw1,btemp+11
  2100  000DD0  0E0C               	movlw	12
  2101  000DD2  2446               	addwf	btemp+10,w,c
  2102  000DD4  6ED9               	movwf	fsr2l,c
  2103  000DD6  0E00               	movlw	0
  2104  000DD8  2047               	addwfc	btemp+11,w,c
  2105  000DDA  6EDA               	movwf	fsr2h,c
  2106  000DDC  C03C  FFDE         	movff	btemp,postinc2
  2107  000DE0  C03D  FFDD         	movff	btemp+1,postdec2
  2108                           
  2109                           ;semaphore.c: 40: dispatcher(READY);
  2110  000DE4  0E01               	movlw	1
  2111  000DE6  6EE6               	movwf	postinc1,c
  2112  000DE8  EC0E  F003         	call	_dispatcher	;wreg free
  2113  000DEC                     l1761:
  2114                           
  2115                           ;semaphore.c: 41: }
  2116                           ;semaphore.c: 43: (INTCONbits.GIE = 1);
  2117  000DEC  8EF2               	bsf	intcon,7,c	;volatile
  2118                           
  2119                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  2120  000DEE  52E5               	movf	postdec1,f,c
  2121  000DF0  52E5               	movf	postdec1,f,c
  2122  000DF2  0012               	return		;funcret
  2123  000DF4                     __end_of_sem_post:
  2124                           	opt stack 0
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           intcon	equ	0xFF2
  2132                           postinc0	equ	0xFEE
  2133                           plusw0	equ	0xFEB
  2134                           fsr0h	equ	0xFEA
  2135                           fsr0l	equ	0xFE9
  2136                           wreg	equ	0xFE8
  2137                           postinc1	equ	0xFE6
  2138                           postdec1	equ	0xFE5
  2139                           plusw1	equ	0xFE3
  2140                           fsr1h	equ	0xFE2
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           postdec2	equ	0xFDD
  2145                           plusw2	equ	0xFDB
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _delay *****************
  2151 ;; Defined at:
  2152 ;;		line 60 in file "kernel.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  time_ms         2  [STACK] unsigned int 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1  [STACK] void 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2166 ;;      Params:         0       0       0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0
  2169 ;;      Totals:         0       0       0       0       0       0       0
  2170 ;;Total ram usage:        0 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    7
  2173 ;; This function calls:
  2174 ;;		___wmul
  2175 ;;		_dispatcher
  2176 ;; This function is called by:
  2177 ;;		_aviao1
  2178 ;;		_aviao2
  2179 ;;		_aviao3
  2180 ;;		_Lcd_Write_Char
  2181 ;; This function uses a reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text13
  2185  001616                     __ptext13:
  2186                           	opt stack 0
  2187  001616                     _delay:
  2188                           	opt stack 18
  2189                           
  2190                           ;kernel.c: 62: (INTCONbits.GIE = 0);
  2191                           
  2192                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2193                           ;incstack = 0
  2194  001616  9EF2               	bcf	intcon,7,c	;volatile
  2195                           
  2196                           ;kernel.c: 64: F_APTOS[task_running].delay_time = time_ms;
  2197  001618  0E6E               	movlw	110
  2198  00161A  6EE6               	movwf	postinc1,c
  2199  00161C  0E00               	movlw	0
  2200  00161E  6EE6               	movwf	postinc1,c
  2201  001620  C00F  FFE6         	movff	_task_running,postinc1
  2202  001624  C010  FFE6         	movff	_task_running+1,postinc1
  2203  001628  EC36  F009         	call	___wmul	;wreg free
  2204  00162C  0EF4               	movlw	low (_F_APTOS+6)
  2205  00162E  243C               	addwf	btemp,w,c
  2206  001630  6EE9               	movwf	fsr0l,c
  2207  001632  0E00               	movlw	high (_F_APTOS+6)
  2208  001634  203D               	addwfc	btemp+1,w,c
  2209  001636  6EEA               	movwf	fsr0h,c
  2210                           
  2211                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  2212  001638  50E1               	movf	fsr1l,w,c
  2213  00163A  0FFE               	addlw	-2
  2214  00163C  6ED9               	movwf	fsr2l,c
  2215  00163E  50E2               	movf	fsr1h,w,c
  2216  001640  6EDA               	movwf	fsr2h,c
  2217  001642  0EFF               	movlw	255
  2218  001644  22DA               	addwfc	fsr2h,f,c
  2219  001646  CFDE FFEE          	movff	postinc2,postinc0
  2220  00164A  CFDD FFED          	movff	postdec2,postdec0
  2221                           
  2222                           ;kernel.c: 65: dispatcher(SLEEPING);
  2223  00164E  0E03               	movlw	3
  2224  001650  6EE6               	movwf	postinc1,c
  2225  001652  EC0E  F003         	call	_dispatcher	;wreg free
  2226                           
  2227                           ;kernel.c: 67: (INTCONbits.GIE = 1);
  2228  001656  8EF2               	bsf	intcon,7,c	;volatile
  2229                           
  2230                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  2231  001658  52E5               	movf	postdec1,f,c
  2232  00165A  52E5               	movf	postdec1,f,c
  2233  00165C  0012               	return		;funcret
  2234  00165E                     __end_of_delay:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           prodh	equ	0xFF4
  2241                           prodl	equ	0xFF3
  2242                           intcon	equ	0xFF2
  2243                           postinc0	equ	0xFEE
  2244                           postdec0	equ	0xFED
  2245                           plusw0	equ	0xFEB
  2246                           fsr0h	equ	0xFEA
  2247                           fsr0l	equ	0xFE9
  2248                           wreg	equ	0xFE8
  2249                           postinc1	equ	0xFE6
  2250                           postdec1	equ	0xFE5
  2251                           plusw1	equ	0xFE3
  2252                           fsr1h	equ	0xFE2
  2253                           fsr1l	equ	0xFE1
  2254                           indf2	equ	0xFDF
  2255                           postinc2	equ	0xFDE
  2256                           postdec2	equ	0xFDD
  2257                           plusw2	equ	0xFDB
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _dispatcher *****************
  2263 ;; Defined at:
  2264 ;;		line 35 in file "kernel.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  state           1  [STACK] enum E3007
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1  [STACK] void 
  2271 ;; Registers used:
  2272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2278 ;;      Params:         0       0       0       0       0       0       0
  2279 ;;      Locals:         0       0       0       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0       0       0
  2281 ;;      Totals:         0       0       0       0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    6
  2285 ;; This function calls:
  2286 ;;		___wmul
  2287 ;;		_rr_scheduler
  2288 ;; This function is called by:
  2289 ;;		_delay
  2290 ;;		_int_high
  2291 ;;		_sem_wait
  2292 ;;		_sem_post
  2293 ;;		_write_pipe
  2294 ;;		_read_pipe
  2295 ;; This function uses a reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text14
  2299  00061C                     __ptext14:
  2300                           	opt stack 0
  2301  00061C                     _dispatcher:
  2302                           	opt stack 12
  2303                           
  2304                           ;kernel.c: 37: (INTCONbits.GIE = 0);
  2305                           
  2306                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  2307                           ;incstack = 0
  2308  00061C  9EF2               	bcf	intcon,7,c	;volatile
  2309                           
  2310                           ;kernel.c: 40: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  2311                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  2312  00061E  0E6E               	movlw	110
  2313  000620  6EE6               	movwf	postinc1,c
  2314  000622  0E00               	movlw	0
  2315  000624  6EE6               	movwf	postinc1,c
  2316  000626  C00F  FFE6         	movff	_task_running,postinc1
  2317  00062A  C010  FFE6         	movff	_task_running+1,postinc1
  2318  00062E  EC36  F009         	call	___wmul	;wreg free
  2319  000632  0EF6               	movlw	low (_F_APTOS+8)
  2320  000634  243C               	addwf	btemp,w,c
  2321  000636  6ED9               	movwf	fsr2l,c
  2322  000638  0E00               	movlw	high (_F_APTOS+8)
  2323  00063A  203D               	addwfc	btemp+1,w,c
  2324  00063C  6EDA               	movwf	fsr2h,c
  2325  00063E  0EFF               	movlw	-1
  2326  000640  CFE3 FFDF          	movff	plusw1,indf2
  2327  000644  0E6E               	movlw	110
  2328  000646  6EE6               	movwf	postinc1,c
  2329  000648  0E00               	movlw	0
  2330  00064A  6EE6               	movwf	postinc1,c
  2331  00064C  C00F  FFE6         	movff	_task_running,postinc1
  2332  000650  C010  FFE6         	movff	_task_running+1,postinc1
  2333  000654  EC36  F009         	call	___wmul	;wreg free
  2334  000658  0E59               	movlw	low (_F_APTOS+107)
  2335  00065A  243C               	addwf	btemp,w,c
  2336  00065C  6ED9               	movwf	fsr2l,c
  2337  00065E  0E01               	movlw	high (_F_APTOS+107)
  2338  000660  203D               	addwfc	btemp+1,w,c
  2339  000662  6EDA               	movwf	fsr2h,c
  2340  000664  CFE0 FFDF          	movff	bsr,indf2	;volatile
  2341  000668  0E6E               	movlw	110
  2342  00066A  6EE6               	movwf	postinc1,c
  2343  00066C  0E00               	movlw	0
  2344  00066E  6EE6               	movwf	postinc1,c
  2345  000670  C00F  FFE6         	movff	_task_running,postinc1
  2346  000674  C010  FFE6         	movff	_task_running+1,postinc1
  2347  000678  EC36  F009         	call	___wmul	;wreg free
  2348  00067C  0E5A               	movlw	low (_F_APTOS+108)
  2349  00067E  243C               	addwf	btemp,w,c
  2350  000680  6ED9               	movwf	fsr2l,c
  2351  000682  0E01               	movlw	high (_F_APTOS+108)
  2352  000684  203D               	addwfc	btemp+1,w,c
  2353  000686  6EDA               	movwf	fsr2h,c
  2354  000688  CFD8 FFDF          	movff	status,indf2	;volatile
  2355  00068C  0E6E               	movlw	110
  2356  00068E  6EE6               	movwf	postinc1,c
  2357  000690  0E00               	movlw	0
  2358  000692  6EE6               	movwf	postinc1,c
  2359  000694  C00F  FFE6         	movff	_task_running,postinc1
  2360  000698  C010  FFE6         	movff	_task_running+1,postinc1
  2361  00069C  EC36  F009         	call	___wmul	;wreg free
  2362  0006A0  0E5B               	movlw	low (_F_APTOS+109)
  2363  0006A2  243C               	addwf	btemp,w,c
  2364  0006A4  6ED9               	movwf	fsr2l,c
  2365  0006A6  0E01               	movlw	high (_F_APTOS+109)
  2366  0006A8  203D               	addwfc	btemp+1,w,c
  2367  0006AA  6EDA               	movwf	fsr2h,c
  2368  0006AC  CFE8 FFDF          	movff	wreg,indf2	;volatile
  2369  0006B0  0E6E               	movlw	110
  2370  0006B2  6EE6               	movwf	postinc1,c
  2371  0006B4  0E00               	movlw	0
  2372  0006B6  6EE6               	movwf	postinc1,c
  2373  0006B8  C00F  FFE6         	movff	_task_running,postinc1
  2374  0006BC  C010  FFE6         	movff	_task_running+1,postinc1
  2375  0006C0  EC36  F009         	call	___wmul	;wreg free
  2376  0006C4  0E57               	movlw	low (_F_APTOS+105)
  2377  0006C6  243C               	addwf	btemp,w,c
  2378  0006C8  6ED9               	movwf	fsr2l,c
  2379  0006CA  0E01               	movlw	high (_F_APTOS+105)
  2380  0006CC  203D               	addwfc	btemp+1,w,c
  2381  0006CE  6EDA               	movwf	fsr2h,c
  2382  0006D0  0E00               	movlw	0
  2383  0006D2  6EDE               	movwf	postinc2,c
  2384  0006D4  0E00               	movlw	0
  2385  0006D6  6EDD               	movwf	postdec2,c
  2386  0006D8                     l1681:
  2387  0006D8  0E03               	movlw	3
  2388  0006DA  6EE6               	movwf	postinc1,c
  2389  0006DC  0E00               	movlw	0
  2390  0006DE  6EE6               	movwf	postinc1,c
  2391  0006E0  0E6E               	movlw	110
  2392  0006E2  6EE6               	movwf	postinc1,c
  2393  0006E4  0E00               	movlw	0
  2394  0006E6  6EE6               	movwf	postinc1,c
  2395  0006E8  C00F  FFE6         	movff	_task_running,postinc1
  2396  0006EC  C010  FFE6         	movff	_task_running+1,postinc1
  2397  0006F0  EC36  F009         	call	___wmul	;wreg free
  2398  0006F4  0E57               	movlw	low (_F_APTOS+105)
  2399  0006F6  243C               	addwf	btemp,w,c
  2400  0006F8  6ED9               	movwf	fsr2l,c
  2401  0006FA  0E01               	movlw	high (_F_APTOS+105)
  2402  0006FC  203D               	addwfc	btemp+1,w,c
  2403  0006FE  6EDA               	movwf	fsr2h,c
  2404  000700  CFDE F03D          	movff	postinc2,btemp+1
  2405  000704  CFDD F03E          	movff	postdec2,btemp+2
  2406  000708  C03D  FFE6         	movff	btemp+1,postinc1
  2407  00070C  C03E  FFE6         	movff	btemp+2,postinc1
  2408  000710  EC36  F009         	call	___wmul	;wreg free
  2409  000714  C03C  F044         	movff	btemp,btemp+8
  2410  000718  C03D  F045         	movff	btemp+1,btemp+9
  2411  00071C  0E6E               	movlw	110
  2412  00071E  6EE6               	movwf	postinc1,c
  2413  000720  0E00               	movlw	0
  2414  000722  6EE6               	movwf	postinc1,c
  2415  000724  C00F  FFE6         	movff	_task_running,postinc1
  2416  000728  C010  FFE6         	movff	_task_running+1,postinc1
  2417  00072C  EC36  F009         	call	___wmul	;wreg free
  2418  000730  0EEE               	movlw	low _F_APTOS
  2419  000732  6E46               	movwf	btemp+10,c
  2420  000734  0E00               	movlw	high _F_APTOS
  2421  000736  6E47               	movwf	btemp+11,c
  2422  000738  0E09               	movlw	9
  2423  00073A  2646               	addwf	btemp+10,f,c
  2424  00073C  0E00               	movlw	0
  2425  00073E  2247               	addwfc	btemp+11,f,c
  2426  000740  503C               	movf	btemp,w,c
  2427  000742  2646               	addwf	btemp+10,f,c
  2428  000744  503D               	movf	btemp+1,w,c
  2429  000746  2247               	addwfc	btemp+11,f,c
  2430  000748  5044               	movf	btemp+8,w,c
  2431  00074A  2446               	addwf	btemp+10,w,c
  2432  00074C  6ED9               	movwf	fsr2l,c
  2433  00074E  5045               	movf	btemp+9,w,c
  2434  000750  2047               	addwfc	btemp+11,w,c
  2435  000752  6EDA               	movwf	fsr2h,c
  2436  000754  CFFF FFDF          	movff	tosu,indf2	;volatile
  2437  000758  0E03               	movlw	3
  2438  00075A  6EE6               	movwf	postinc1,c
  2439  00075C  0E00               	movlw	0
  2440  00075E  6EE6               	movwf	postinc1,c
  2441  000760  0E6E               	movlw	110
  2442  000762  6EE6               	movwf	postinc1,c
  2443  000764  0E00               	movlw	0
  2444  000766  6EE6               	movwf	postinc1,c
  2445  000768  C00F  FFE6         	movff	_task_running,postinc1
  2446  00076C  C010  FFE6         	movff	_task_running+1,postinc1
  2447  000770  EC36  F009         	call	___wmul	;wreg free
  2448  000774  0E57               	movlw	low (_F_APTOS+105)
  2449  000776  243C               	addwf	btemp,w,c
  2450  000778  6ED9               	movwf	fsr2l,c
  2451  00077A  0E01               	movlw	high (_F_APTOS+105)
  2452  00077C  203D               	addwfc	btemp+1,w,c
  2453  00077E  6EDA               	movwf	fsr2h,c
  2454  000780  CFDE F03D          	movff	postinc2,btemp+1
  2455  000784  CFDD F03E          	movff	postdec2,btemp+2
  2456  000788  C03D  FFE6         	movff	btemp+1,postinc1
  2457  00078C  C03E  FFE6         	movff	btemp+2,postinc1
  2458  000790  EC36  F009         	call	___wmul	;wreg free
  2459  000794  C03C  F044         	movff	btemp,btemp+8
  2460  000798  C03D  F045         	movff	btemp+1,btemp+9
  2461  00079C  0E6E               	movlw	110
  2462  00079E  6EE6               	movwf	postinc1,c
  2463  0007A0  0E00               	movlw	0
  2464  0007A2  6EE6               	movwf	postinc1,c
  2465  0007A4  C00F  FFE6         	movff	_task_running,postinc1
  2466  0007A8  C010  FFE6         	movff	_task_running+1,postinc1
  2467  0007AC  EC36  F009         	call	___wmul	;wreg free
  2468  0007B0  0EEE               	movlw	low _F_APTOS
  2469  0007B2  6E46               	movwf	btemp+10,c
  2470  0007B4  0E00               	movlw	high _F_APTOS
  2471  0007B6  6E47               	movwf	btemp+11,c
  2472  0007B8  0E0A               	movlw	10
  2473  0007BA  2646               	addwf	btemp+10,f,c
  2474  0007BC  0E00               	movlw	0
  2475  0007BE  2247               	addwfc	btemp+11,f,c
  2476  0007C0  503C               	movf	btemp,w,c
  2477  0007C2  2646               	addwf	btemp+10,f,c
  2478  0007C4  503D               	movf	btemp+1,w,c
  2479  0007C6  2247               	addwfc	btemp+11,f,c
  2480  0007C8  5044               	movf	btemp+8,w,c
  2481  0007CA  2446               	addwf	btemp+10,w,c
  2482  0007CC  6ED9               	movwf	fsr2l,c
  2483  0007CE  5045               	movf	btemp+9,w,c
  2484  0007D0  2047               	addwfc	btemp+11,w,c
  2485  0007D2  6EDA               	movwf	fsr2h,c
  2486  0007D4  CFFD FFDF          	movff	tosl,indf2	;volatile
  2487  0007D8  0E03               	movlw	3
  2488  0007DA  6EE6               	movwf	postinc1,c
  2489  0007DC  0E00               	movlw	0
  2490  0007DE  6EE6               	movwf	postinc1,c
  2491  0007E0  0E6E               	movlw	110
  2492  0007E2  6EE6               	movwf	postinc1,c
  2493  0007E4  0E00               	movlw	0
  2494  0007E6  6EE6               	movwf	postinc1,c
  2495  0007E8  C00F  FFE6         	movff	_task_running,postinc1
  2496  0007EC  C010  FFE6         	movff	_task_running+1,postinc1
  2497  0007F0  EC36  F009         	call	___wmul	;wreg free
  2498  0007F4  0E57               	movlw	low (_F_APTOS+105)
  2499  0007F6  243C               	addwf	btemp,w,c
  2500  0007F8  6ED9               	movwf	fsr2l,c
  2501  0007FA  0E01               	movlw	high (_F_APTOS+105)
  2502  0007FC  203D               	addwfc	btemp+1,w,c
  2503  0007FE  6EDA               	movwf	fsr2h,c
  2504  000800  CFDE F03D          	movff	postinc2,btemp+1
  2505  000804  CFDD F03E          	movff	postdec2,btemp+2
  2506  000808  C03D  FFE6         	movff	btemp+1,postinc1
  2507  00080C  C03E  FFE6         	movff	btemp+2,postinc1
  2508  000810  EC36  F009         	call	___wmul	;wreg free
  2509  000814  C03C  F044         	movff	btemp,btemp+8
  2510  000818  C03D  F045         	movff	btemp+1,btemp+9
  2511  00081C  0E6E               	movlw	110
  2512  00081E  6EE6               	movwf	postinc1,c
  2513  000820  0E00               	movlw	0
  2514  000822  6EE6               	movwf	postinc1,c
  2515  000824  C00F  FFE6         	movff	_task_running,postinc1
  2516  000828  C010  FFE6         	movff	_task_running+1,postinc1
  2517  00082C  EC36  F009         	call	___wmul	;wreg free
  2518  000830  0EEE               	movlw	low _F_APTOS
  2519  000832  6E46               	movwf	btemp+10,c
  2520  000834  0E00               	movlw	high _F_APTOS
  2521  000836  6E47               	movwf	btemp+11,c
  2522  000838  0E0B               	movlw	11
  2523  00083A  2646               	addwf	btemp+10,f,c
  2524  00083C  0E00               	movlw	0
  2525  00083E  2247               	addwfc	btemp+11,f,c
  2526  000840  503C               	movf	btemp,w,c
  2527  000842  2646               	addwf	btemp+10,f,c
  2528  000844  503D               	movf	btemp+1,w,c
  2529  000846  2247               	addwfc	btemp+11,f,c
  2530  000848  5044               	movf	btemp+8,w,c
  2531  00084A  2446               	addwf	btemp+10,w,c
  2532  00084C  6ED9               	movwf	fsr2l,c
  2533  00084E  5045               	movf	btemp+9,w,c
  2534  000850  2047               	addwfc	btemp+11,w,c
  2535  000852  6EDA               	movwf	fsr2h,c
  2536  000854  CFFE FFDF          	movff	tosh,indf2	;volatile
  2537  000858  0E6E               	movlw	110
  2538  00085A  6EE6               	movwf	postinc1,c
  2539  00085C  0E00               	movlw	0
  2540  00085E  6EE6               	movwf	postinc1,c
  2541  000860  C00F  FFE6         	movff	_task_running,postinc1
  2542  000864  C010  FFE6         	movff	_task_running+1,postinc1
  2543  000868  EC36  F009         	call	___wmul	;wreg free
  2544  00086C  0E57               	movlw	low (_F_APTOS+105)
  2545  00086E  243C               	addwf	btemp,w,c
  2546  000870  6ED9               	movwf	fsr2l,c
  2547  000872  0E01               	movlw	high (_F_APTOS+105)
  2548  000874  203D               	addwfc	btemp+1,w,c
  2549  000876  6EDA               	movwf	fsr2h,c
  2550  000878  2ADE               	incf	postinc2,f,c
  2551  00087A  0E00               	movlw	0
  2552  00087C  22DD               	addwfc	postdec2,f,c
  2553  00087E  0006               	pop		;# 
  2554  000880  50FC               	movf	stkptr,w,c	;volatile
  2555  000882  A4D8               	btfss	status,2,c
  2556  000884  D729               	goto	l1681
  2557                           
  2558                           ;kernel.c: 44: task_running = rr_scheduler();
  2559  000886  ECC6  F009         	call	_rr_scheduler	;wreg free
  2560  00088A  C03C  F00F         	movff	btemp,_task_running
  2561  00088E  C03D  F010         	movff	btemp+1,_task_running+1
  2562                           
  2563                           ;kernel.c: 50: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2564  000892  6AFC               	clrf	stkptr,c	;volatile
  2565  000894  0E6E               	movlw	110
  2566  000896  6EE6               	movwf	postinc1,c
  2567  000898  0E00               	movlw	0
  2568  00089A  6EE6               	movwf	postinc1,c
  2569  00089C  C00F  FFE6         	movff	_task_running,postinc1
  2570  0008A0  C010  FFE6         	movff	_task_running+1,postinc1
  2571  0008A4  EC36  F009         	call	___wmul	;wreg free
  2572  0008A8  0E57               	movlw	low (_F_APTOS+105)
  2573  0008AA  243C               	addwf	btemp,w,c
  2574  0008AC  6ED9               	movwf	fsr2l,c
  2575  0008AE  0E01               	movlw	high (_F_APTOS+105)
  2576  0008B0  203D               	addwfc	btemp+1,w,c
  2577  0008B2  6EDA               	movwf	fsr2h,c
  2578  0008B4  50DE               	movf	postinc2,w,c
  2579  0008B6  10DE               	iorwf	postinc2,w,c
  2580  0008B8  A4D8               	btfss	status,2,c
  2581  0008BA  D01B               	goto	l1701
  2582  0008BC  0005               	push		;# 
  2583  0008BE  0E6E               	movlw	110
  2584  0008C0  6EE6               	movwf	postinc1,c
  2585  0008C2  0E00               	movlw	0
  2586  0008C4  6EE6               	movwf	postinc1,c
  2587  0008C6  C00F  FFE6         	movff	_task_running,postinc1
  2588  0008CA  C010  FFE6         	movff	_task_running+1,postinc1
  2589  0008CE  EC36  F009         	call	___wmul	;wreg free
  2590  0008D2  0EF2               	movlw	low (_F_APTOS+4)
  2591  0008D4  243C               	addwf	btemp,w,c
  2592  0008D6  6ED9               	movwf	fsr2l,c
  2593  0008D8  0E00               	movlw	high (_F_APTOS+4)
  2594  0008DA  203D               	addwfc	btemp+1,w,c
  2595  0008DC  6EDA               	movwf	fsr2h,c
  2596  0008DE  CFDE F03D          	movff	postinc2,btemp+1
  2597  0008E2  CFDD F03E          	movff	postdec2,btemp+2
  2598  0008E6  C03D  FFFD         	movff	btemp+1,tosl	;volatile
  2599  0008EA  C03E  FFFE         	movff	btemp+2,tosh	;volatile
  2600  0008EE  6AFF               	clrf	tosu,c	;volatile
  2601  0008F0  D11F               	goto	u59_20
  2602  0008F2                     l1701:
  2603  0008F2  0E6E               	movlw	110
  2604  0008F4  6EE6               	movwf	postinc1,c
  2605  0008F6  0E00               	movlw	0
  2606  0008F8  6EE6               	movwf	postinc1,c
  2607  0008FA  C00F  FFE6         	movff	_task_running,postinc1
  2608  0008FE  C010  FFE6         	movff	_task_running+1,postinc1
  2609  000902  EC36  F009         	call	___wmul	;wreg free
  2610  000906  0E59               	movlw	low (_F_APTOS+107)
  2611  000908  243C               	addwf	btemp,w,c
  2612  00090A  6ED9               	movwf	fsr2l,c
  2613  00090C  0E01               	movlw	high (_F_APTOS+107)
  2614  00090E  203D               	addwfc	btemp+1,w,c
  2615  000910  6EDA               	movwf	fsr2h,c
  2616  000912  50DF               	movf	indf2,w,c
  2617  000914  6EE0               	movwf	bsr,c	;volatile
  2618  000916  0E6E               	movlw	110
  2619  000918  6EE6               	movwf	postinc1,c
  2620  00091A  0E00               	movlw	0
  2621  00091C  6EE6               	movwf	postinc1,c
  2622  00091E  C00F  FFE6         	movff	_task_running,postinc1
  2623  000922  C010  FFE6         	movff	_task_running+1,postinc1
  2624  000926  EC36  F009         	call	___wmul	;wreg free
  2625  00092A  0E5A               	movlw	low (_F_APTOS+108)
  2626  00092C  243C               	addwf	btemp,w,c
  2627  00092E  6ED9               	movwf	fsr2l,c
  2628  000930  0E01               	movlw	high (_F_APTOS+108)
  2629  000932  203D               	addwfc	btemp+1,w,c
  2630  000934  6EDA               	movwf	fsr2h,c
  2631  000936  50DF               	movf	indf2,w,c
  2632  000938  6ED8               	movwf	status,c	;volatile
  2633  00093A  0E6E               	movlw	110
  2634  00093C  6EE6               	movwf	postinc1,c
  2635  00093E  0E00               	movlw	0
  2636  000940  6EE6               	movwf	postinc1,c
  2637  000942  C00F  FFE6         	movff	_task_running,postinc1
  2638  000946  C010  FFE6         	movff	_task_running+1,postinc1
  2639  00094A  EC36  F009         	call	___wmul	;wreg free
  2640  00094E  0E5B               	movlw	low (_F_APTOS+109)
  2641  000950  243C               	addwf	btemp,w,c
  2642  000952  6ED9               	movwf	fsr2l,c
  2643  000954  0E01               	movlw	high (_F_APTOS+109)
  2644  000956  203D               	addwfc	btemp+1,w,c
  2645  000958  6EDA               	movwf	fsr2h,c
  2646  00095A  50DF               	movf	indf2,w,c
  2647  00095C  6E47               	movwf	btemp+11,c
  2648  00095E  5047               	movf	btemp+11,w,c
  2649  000960                     l80:
  2650  000960  0005               	push		;# 
  2651  000962  0E6E               	movlw	110
  2652  000964  6EE6               	movwf	postinc1,c
  2653  000966  0E00               	movlw	0
  2654  000968  6EE6               	movwf	postinc1,c
  2655  00096A  C00F  FFE6         	movff	_task_running,postinc1
  2656  00096E  C010  FFE6         	movff	_task_running+1,postinc1
  2657  000972  EC36  F009         	call	___wmul	;wreg free
  2658  000976  0E57               	movlw	low (_F_APTOS+105)
  2659  000978  243C               	addwf	btemp,w,c
  2660  00097A  6ED9               	movwf	fsr2l,c
  2661  00097C  0E01               	movlw	high (_F_APTOS+105)
  2662  00097E  203D               	addwfc	btemp+1,w,c
  2663  000980  6EDA               	movwf	fsr2h,c
  2664  000982  06DE               	decf	postinc2,f,c
  2665  000984  0E00               	movlw	0
  2666  000986  5ADD               	subwfb	postdec2,f,c
  2667  000988  0E03               	movlw	3
  2668  00098A  6EE6               	movwf	postinc1,c
  2669  00098C  0E00               	movlw	0
  2670  00098E  6EE6               	movwf	postinc1,c
  2671  000990  0E6E               	movlw	110
  2672  000992  6EE6               	movwf	postinc1,c
  2673  000994  0E00               	movlw	0
  2674  000996  6EE6               	movwf	postinc1,c
  2675  000998  C00F  FFE6         	movff	_task_running,postinc1
  2676  00099C  C010  FFE6         	movff	_task_running+1,postinc1
  2677  0009A0  EC36  F009         	call	___wmul	;wreg free
  2678  0009A4  0E57               	movlw	low (_F_APTOS+105)
  2679  0009A6  243C               	addwf	btemp,w,c
  2680  0009A8  6ED9               	movwf	fsr2l,c
  2681  0009AA  0E01               	movlw	high (_F_APTOS+105)
  2682  0009AC  203D               	addwfc	btemp+1,w,c
  2683  0009AE  6EDA               	movwf	fsr2h,c
  2684  0009B0  CFDE F03D          	movff	postinc2,btemp+1
  2685  0009B4  CFDD F03E          	movff	postdec2,btemp+2
  2686  0009B8  C03D  FFE6         	movff	btemp+1,postinc1
  2687  0009BC  C03E  FFE6         	movff	btemp+2,postinc1
  2688  0009C0  EC36  F009         	call	___wmul	;wreg free
  2689  0009C4  C03C  F044         	movff	btemp,btemp+8
  2690  0009C8  C03D  F045         	movff	btemp+1,btemp+9
  2691  0009CC  0E6E               	movlw	110
  2692  0009CE  6EE6               	movwf	postinc1,c
  2693  0009D0  0E00               	movlw	0
  2694  0009D2  6EE6               	movwf	postinc1,c
  2695  0009D4  C00F  FFE6         	movff	_task_running,postinc1
  2696  0009D8  C010  FFE6         	movff	_task_running+1,postinc1
  2697  0009DC  EC36  F009         	call	___wmul	;wreg free
  2698  0009E0  0EEE               	movlw	low _F_APTOS
  2699  0009E2  6E46               	movwf	btemp+10,c
  2700  0009E4  0E00               	movlw	high _F_APTOS
  2701  0009E6  6E47               	movwf	btemp+11,c
  2702  0009E8  0E09               	movlw	9
  2703  0009EA  2646               	addwf	btemp+10,f,c
  2704  0009EC  0E00               	movlw	0
  2705  0009EE  2247               	addwfc	btemp+11,f,c
  2706  0009F0  503C               	movf	btemp,w,c
  2707  0009F2  2646               	addwf	btemp+10,f,c
  2708  0009F4  503D               	movf	btemp+1,w,c
  2709  0009F6  2247               	addwfc	btemp+11,f,c
  2710  0009F8  5044               	movf	btemp+8,w,c
  2711  0009FA  2446               	addwf	btemp+10,w,c
  2712  0009FC  6ED9               	movwf	fsr2l,c
  2713  0009FE  5045               	movf	btemp+9,w,c
  2714  000A00  2047               	addwfc	btemp+11,w,c
  2715  000A02  6EDA               	movwf	fsr2h,c
  2716  000A04  50DF               	movf	indf2,w,c
  2717  000A06  6EFF               	movwf	tosu,c	;volatile
  2718  000A08  0E03               	movlw	3
  2719  000A0A  6EE6               	movwf	postinc1,c
  2720  000A0C  0E00               	movlw	0
  2721  000A0E  6EE6               	movwf	postinc1,c
  2722  000A10  0E6E               	movlw	110
  2723  000A12  6EE6               	movwf	postinc1,c
  2724  000A14  0E00               	movlw	0
  2725  000A16  6EE6               	movwf	postinc1,c
  2726  000A18  C00F  FFE6         	movff	_task_running,postinc1
  2727  000A1C  C010  FFE6         	movff	_task_running+1,postinc1
  2728  000A20  EC36  F009         	call	___wmul	;wreg free
  2729  000A24  0E57               	movlw	low (_F_APTOS+105)
  2730  000A26  243C               	addwf	btemp,w,c
  2731  000A28  6ED9               	movwf	fsr2l,c
  2732  000A2A  0E01               	movlw	high (_F_APTOS+105)
  2733  000A2C  203D               	addwfc	btemp+1,w,c
  2734  000A2E  6EDA               	movwf	fsr2h,c
  2735  000A30  CFDE F03D          	movff	postinc2,btemp+1
  2736  000A34  CFDD F03E          	movff	postdec2,btemp+2
  2737  000A38  C03D  FFE6         	movff	btemp+1,postinc1
  2738  000A3C  C03E  FFE6         	movff	btemp+2,postinc1
  2739  000A40  EC36  F009         	call	___wmul	;wreg free
  2740  000A44  C03C  F044         	movff	btemp,btemp+8
  2741  000A48  C03D  F045         	movff	btemp+1,btemp+9
  2742  000A4C  0E6E               	movlw	110
  2743  000A4E  6EE6               	movwf	postinc1,c
  2744  000A50  0E00               	movlw	0
  2745  000A52  6EE6               	movwf	postinc1,c
  2746  000A54  C00F  FFE6         	movff	_task_running,postinc1
  2747  000A58  C010  FFE6         	movff	_task_running+1,postinc1
  2748  000A5C  EC36  F009         	call	___wmul	;wreg free
  2749  000A60  0EEE               	movlw	low _F_APTOS
  2750  000A62  6E46               	movwf	btemp+10,c
  2751  000A64  0E00               	movlw	high _F_APTOS
  2752  000A66  6E47               	movwf	btemp+11,c
  2753  000A68  0E0A               	movlw	10
  2754  000A6A  2646               	addwf	btemp+10,f,c
  2755  000A6C  0E00               	movlw	0
  2756  000A6E  2247               	addwfc	btemp+11,f,c
  2757  000A70  503C               	movf	btemp,w,c
  2758  000A72  2646               	addwf	btemp+10,f,c
  2759  000A74  503D               	movf	btemp+1,w,c
  2760  000A76  2247               	addwfc	btemp+11,f,c
  2761  000A78  5044               	movf	btemp+8,w,c
  2762  000A7A  2446               	addwf	btemp+10,w,c
  2763  000A7C  6ED9               	movwf	fsr2l,c
  2764  000A7E  5045               	movf	btemp+9,w,c
  2765  000A80  2047               	addwfc	btemp+11,w,c
  2766  000A82  6EDA               	movwf	fsr2h,c
  2767  000A84  50DF               	movf	indf2,w,c
  2768  000A86  6EFD               	movwf	tosl,c	;volatile
  2769  000A88  0E03               	movlw	3
  2770  000A8A  6EE6               	movwf	postinc1,c
  2771  000A8C  0E00               	movlw	0
  2772  000A8E  6EE6               	movwf	postinc1,c
  2773  000A90  0E6E               	movlw	110
  2774  000A92  6EE6               	movwf	postinc1,c
  2775  000A94  0E00               	movlw	0
  2776  000A96  6EE6               	movwf	postinc1,c
  2777  000A98  C00F  FFE6         	movff	_task_running,postinc1
  2778  000A9C  C010  FFE6         	movff	_task_running+1,postinc1
  2779  000AA0  EC36  F009         	call	___wmul	;wreg free
  2780  000AA4  0E57               	movlw	low (_F_APTOS+105)
  2781  000AA6  243C               	addwf	btemp,w,c
  2782  000AA8  6ED9               	movwf	fsr2l,c
  2783  000AAA  0E01               	movlw	high (_F_APTOS+105)
  2784  000AAC  203D               	addwfc	btemp+1,w,c
  2785  000AAE  6EDA               	movwf	fsr2h,c
  2786  000AB0  CFDE F03D          	movff	postinc2,btemp+1
  2787  000AB4  CFDD F03E          	movff	postdec2,btemp+2
  2788  000AB8  C03D  FFE6         	movff	btemp+1,postinc1
  2789  000ABC  C03E  FFE6         	movff	btemp+2,postinc1
  2790  000AC0  EC36  F009         	call	___wmul	;wreg free
  2791  000AC4  C03C  F044         	movff	btemp,btemp+8
  2792  000AC8  C03D  F045         	movff	btemp+1,btemp+9
  2793  000ACC  0E6E               	movlw	110
  2794  000ACE  6EE6               	movwf	postinc1,c
  2795  000AD0  0E00               	movlw	0
  2796  000AD2  6EE6               	movwf	postinc1,c
  2797  000AD4  C00F  FFE6         	movff	_task_running,postinc1
  2798  000AD8  C010  FFE6         	movff	_task_running+1,postinc1
  2799  000ADC  EC36  F009         	call	___wmul	;wreg free
  2800  000AE0  0EEE               	movlw	low _F_APTOS
  2801  000AE2  6E46               	movwf	btemp+10,c
  2802  000AE4  0E00               	movlw	high _F_APTOS
  2803  000AE6  6E47               	movwf	btemp+11,c
  2804  000AE8  0E0B               	movlw	11
  2805  000AEA  2646               	addwf	btemp+10,f,c
  2806  000AEC  0E00               	movlw	0
  2807  000AEE  2247               	addwfc	btemp+11,f,c
  2808  000AF0  503C               	movf	btemp,w,c
  2809  000AF2  2646               	addwf	btemp+10,f,c
  2810  000AF4  503D               	movf	btemp+1,w,c
  2811  000AF6  2247               	addwfc	btemp+11,f,c
  2812  000AF8  5044               	movf	btemp+8,w,c
  2813  000AFA  2446               	addwf	btemp+10,w,c
  2814  000AFC  6ED9               	movwf	fsr2l,c
  2815  000AFE  5045               	movf	btemp+9,w,c
  2816  000B00  2047               	addwfc	btemp+11,w,c
  2817  000B02  6EDA               	movwf	fsr2h,c
  2818  000B04  50DF               	movf	indf2,w,c
  2819  000B06  6EFE               	movwf	tosh,c	;volatile
  2820  000B08  0E6E               	movlw	110
  2821  000B0A  6EE6               	movwf	postinc1,c
  2822  000B0C  0E00               	movlw	0
  2823  000B0E  6EE6               	movwf	postinc1,c
  2824  000B10  C00F  FFE6         	movff	_task_running,postinc1
  2825  000B14  C010  FFE6         	movff	_task_running+1,postinc1
  2826  000B18  EC36  F009         	call	___wmul	;wreg free
  2827  000B1C  0E57               	movlw	low (_F_APTOS+105)
  2828  000B1E  243C               	addwf	btemp,w,c
  2829  000B20  6ED9               	movwf	fsr2l,c
  2830  000B22  0E01               	movlw	high (_F_APTOS+105)
  2831  000B24  203D               	addwfc	btemp+1,w,c
  2832  000B26  6EDA               	movwf	fsr2h,c
  2833  000B28  50DE               	movf	postinc2,w,c
  2834  000B2A  10DE               	iorwf	postinc2,w,c
  2835  000B2C  A4D8               	btfss	status,2,c
  2836  000B2E  D718               	goto	l80
  2837  000B30                     u59_20:
  2838  000B30  0E6E               	movlw	110
  2839  000B32  6EE6               	movwf	postinc1,c
  2840  000B34  0E00               	movlw	0
  2841  000B36  6EE6               	movwf	postinc1,c
  2842  000B38  C00F  FFE6         	movff	_task_running,postinc1
  2843  000B3C  C010  FFE6         	movff	_task_running+1,postinc1
  2844  000B40  EC36  F009         	call	___wmul	;wreg free
  2845  000B44  0EF6               	movlw	low (_F_APTOS+8)
  2846  000B46  243C               	addwf	btemp,w,c
  2847  000B48  6ED9               	movwf	fsr2l,c
  2848  000B4A  0E00               	movlw	high (_F_APTOS+8)
  2849  000B4C  203D               	addwfc	btemp+1,w,c
  2850  000B4E  6EDA               	movwf	fsr2h,c
  2851  000B50  0E02               	movlw	2
  2852  000B52  6EDF               	movwf	indf2,c
  2853  000B54  8EF2               	bsf	intcon,7,c	;volatile
  2854                           
  2855                           ;kernel.c: 52: (INTCONbits.GIE = 1);
  2856  000B56  8EF2               	bsf	intcon,7,c	;volatile
  2857                           
  2858                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2859  000B58  52E5               	movf	postdec1,f,c
  2860  000B5A  0012               	return		;funcret
  2861  000B5C                     __end_of_dispatcher:
  2862                           	opt stack 0
  2863                           tosu	equ	0xFFF
  2864                           tosh	equ	0xFFE
  2865                           tosl	equ	0xFFD
  2866                           stkptr	equ	0xFFC
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           postinc0	equ	0xFEE
  2875                           postdec0	equ	0xFED
  2876                           plusw0	equ	0xFEB
  2877                           fsr0h	equ	0xFEA
  2878                           fsr0l	equ	0xFE9
  2879                           wreg	equ	0xFE8
  2880                           postinc1	equ	0xFE6
  2881                           postdec1	equ	0xFE5
  2882                           plusw1	equ	0xFE3
  2883                           fsr1h	equ	0xFE2
  2884                           fsr1l	equ	0xFE1
  2885                           bsr	equ	0xFE0
  2886                           indf2	equ	0xFDF
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           plusw2	equ	0xFDB
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _rr_scheduler *****************
  2895 ;; Defined at:
  2896 ;;		line 12 in file "scheduler.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  next_task_to    2  [STACK] unsigned int 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  2  [STACK] unsigned int 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    5
  2917 ;; This function calls:
  2918 ;;		___lwmod
  2919 ;;		___wmul
  2920 ;; This function is called by:
  2921 ;;		_dispatcher
  2922 ;; This function uses a reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text15
  2926  00138C                     __ptext15:
  2927                           	opt stack 0
  2928  00138C                     _rr_scheduler:
  2929                           	opt stack 0
  2930                           
  2931                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2932  00138C  52E6               	movf	postinc1,f,c
  2933  00138E  52E6               	movf	postinc1,f,c
  2934                           
  2935                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2936                           
  2937                           ;incstack = 0
  2938  001390  C00F  F03D         	movff	_task_running,btemp+1
  2939  001394  C010  F03E         	movff	_task_running+1,btemp+2
  2940                           
  2941                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2942  001398  0EFE               	movlw	-2
  2943  00139A  C03D  FFE3         	movff	btemp+1,plusw1
  2944  00139E  0EFF               	movlw	-1
  2945  0013A0  C03E  FFE3         	movff	btemp+2,plusw1
  2946  0013A4                     l1597:
  2947                           
  2948                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2949  0013A4  C011  FFE6         	movff	_tasks_installed,postinc1
  2950  0013A8  C012  FFE6         	movff	_tasks_installed+1,postinc1
  2951                           
  2952                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2953  0013AC  0EFC               	movlw	-4
  2954  0013AE  50E3               	movf	plusw1,w,c
  2955  0013B0  0F01               	addlw	1
  2956  0013B2  6E3D               	movwf	btemp+1,c
  2957  0013B4  0EFD               	movlw	-3
  2958  0013B6  CFE3 F03E          	movff	plusw1,btemp+2
  2959  0013BA  0E00               	movlw	0
  2960  0013BC  223E               	addwfc	btemp+2,f,c
  2961  0013BE  C03D  FFE6         	movff	btemp+1,postinc1
  2962  0013C2  C03E  FFE6         	movff	btemp+2,postinc1
  2963  0013C6  EC36  F008         	call	___lwmod	;wreg free
  2964                           
  2965                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2966  0013CA  0EFE               	movlw	-2
  2967  0013CC  C03C  FFE3         	movff	btemp,plusw1
  2968  0013D0  0EFF               	movlw	-1
  2969  0013D2  C03D  FFE3         	movff	btemp+1,plusw1
  2970                           
  2971                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2972  0013D6  0E6E               	movlw	110
  2973  0013D8  6EE6               	movwf	postinc1,c
  2974  0013DA  0E00               	movlw	0
  2975  0013DC  6EE6               	movwf	postinc1,c
  2976                           
  2977                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2978  0013DE  0EFC               	movlw	-4
  2979  0013E0  CFE3 FFE6          	movff	plusw1,postinc1
  2980  0013E4  CFE3 FFE6          	movff	plusw1,postinc1
  2981  0013E8  EC36  F009         	call	___wmul	;wreg free
  2982  0013EC  0EF6               	movlw	low (_F_APTOS+8)
  2983  0013EE  243C               	addwf	btemp,w,c
  2984  0013F0  6ED9               	movwf	fsr2l,c
  2985  0013F2  0E00               	movlw	high (_F_APTOS+8)
  2986  0013F4  203D               	addwfc	btemp+1,w,c
  2987  0013F6  6EDA               	movwf	fsr2h,c
  2988  0013F8  04DE               	decf	postinc2,w,c
  2989  0013FA  A4D8               	btfss	status,2,c
  2990  0013FC  D7D3               	goto	l1597
  2991                           
  2992                           ;scheduler.c: 20: return next_task_to_run;
  2993                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2994  0013FE  0EFE               	movlw	-2
  2995  001400  CFE3 F03C          	movff	plusw1,btemp
  2996  001404  0EFF               	movlw	-1
  2997  001406  CFE3 F03D          	movff	plusw1,btemp+1
  2998                           
  2999                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  3000  00140A  52E5               	movf	postdec1,f,c
  3001  00140C  52E5               	movf	postdec1,f,c
  3002  00140E  0012               	return		;funcret
  3003  001410                     __end_of_rr_scheduler:
  3004                           	opt stack 0
  3005                           tosu	equ	0xFFF
  3006                           tosh	equ	0xFFE
  3007                           tosl	equ	0xFFD
  3008                           stkptr	equ	0xFFC
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           postinc0	equ	0xFEE
  3017                           postdec0	equ	0xFED
  3018                           plusw0	equ	0xFEB
  3019                           fsr0h	equ	0xFEA
  3020                           fsr0l	equ	0xFE9
  3021                           wreg	equ	0xFE8
  3022                           postinc1	equ	0xFE6
  3023                           postdec1	equ	0xFE5
  3024                           plusw1	equ	0xFE3
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           bsr	equ	0xFE0
  3028                           indf2	equ	0xFDF
  3029                           postinc2	equ	0xFDE
  3030                           postdec2	equ	0xFDD
  3031                           plusw2	equ	0xFDB
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function ___lwmod *****************
  3037 ;; Defined at:
  3038 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  dividend        2  [STACK] unsigned int 
  3041 ;;  divisor         2  [STACK] unsigned int 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  counter         1  [STACK] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2  [STACK] unsigned int 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         0       0       0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0
  3056 ;;      Totals:         0       0       0       0       0       0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    4
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_rr_scheduler
  3064 ;;		_sem_post
  3065 ;; This function uses a reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text16
  3069  00106C                     __ptext16:
  3070                           	opt stack 0
  3071  00106C                     ___lwmod:
  3072                           	opt stack 0
  3073                           
  3074                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  3075  00106C  52E6               	movf	postinc1,f,c
  3076                           
  3077                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3078                           
  3079                           ;incstack = 0
  3080  00106E  0EFB               	movlw	-5
  3081  001070  CFE3 F03C          	movff	plusw1,btemp
  3082  001074  0EFC               	movlw	-4
  3083  001076  50E3               	movf	plusw1,w,c
  3084  001078  103C               	iorwf	btemp,w,c
  3085  00107A  B4D8               	btfsc	status,2,c
  3086  00107C  D04A               	goto	u53_20
  3087                           
  3088                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  3089  00107E  0EFF               	movlw	-1
  3090  001080  6AE3               	clrf	plusw1,c
  3091  001082  D010               	goto	L1
  3092  001084                     l1547:
  3093                           
  3094                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3095  001084  0EFB               	movlw	-5
  3096  001086  50E3               	movf	plusw1,w,c
  3097  001088  90D8               	bcf	status,0,c
  3098  00108A  34E8               	rlcf	wreg,w,c
  3099  00108C  6E3C               	movwf	btemp,c
  3100  00108E  0EFB               	movlw	-5
  3101  001090  C03C  FFE3         	movff	btemp,plusw1
  3102  001094  0EFC               	movlw	-4
  3103  001096  50E3               	movf	plusw1,w,c
  3104  001098  34E8               	rlcf	wreg,w,c
  3105  00109A  6E3C               	movwf	btemp,c
  3106  00109C  0EFC               	movlw	-4
  3107  00109E  C03C  FFE3         	movff	btemp,plusw1
  3108                           
  3109                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  3110  0010A2  0EFF               	movlw	-1
  3111  0010A4                     L1:
  3112  0010A4  2AE3               	incf	plusw1,f,c
  3113                           
  3114                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3115  0010A6  0EFC               	movlw	-4
  3116  0010A8  AEE3               	btfss	plusw1,7,c
  3117  0010AA  D7EC               	goto	l1547
  3118  0010AC                     u51_20:
  3119                           
  3120                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3121  0010AC  0EFB               	movlw	-5
  3122  0010AE  CFE3 F03D          	movff	plusw1,btemp+1
  3123  0010B2  0EFC               	movlw	-4
  3124  0010B4  CFE3 F03E          	movff	plusw1,btemp+2
  3125                           
  3126                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3127  0010B8  0EFD               	movlw	-3
  3128  0010BA  CFE3 F046          	movff	plusw1,btemp+10
  3129  0010BE  0EFE               	movlw	-2
  3130  0010C0  CFE3 F047          	movff	plusw1,btemp+11
  3131  0010C4  503D               	movf	btemp+1,w,c
  3132  0010C6  5C46               	subwf	btemp+10,w,c
  3133  0010C8  503E               	movf	btemp+2,w,c
  3134  0010CA  5847               	subwfb	btemp+11,w,c
  3135  0010CC  A0D8               	btfss	status,0,c
  3136  0010CE  D012               	goto	l1557
  3137                           
  3138                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3139                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3140  0010D0  0EFD               	movlw	-3
  3141  0010D2  50E3               	movf	plusw1,w,c
  3142  0010D4  6E3C               	movwf	btemp,c
  3143  0010D6  0EFB               	movlw	-5
  3144  0010D8  50E3               	movf	plusw1,w,c
  3145  0010DA  5E3C               	subwf	btemp,f,c
  3146  0010DC  0EFD               	movlw	-3
  3147  0010DE  C03C  FFE3         	movff	btemp,plusw1
  3148  0010E2  0EFE               	movlw	-2
  3149  0010E4  50E3               	movf	plusw1,w,c
  3150  0010E6  6E3C               	movwf	btemp,c
  3151  0010E8  0EFC               	movlw	-4
  3152  0010EA  50E3               	movf	plusw1,w,c
  3153  0010EC  5A3C               	subwfb	btemp,f,c
  3154  0010EE  0EFE               	movlw	-2
  3155  0010F0  C03C  FFE3         	movff	btemp,plusw1
  3156  0010F4                     l1557:
  3157                           
  3158                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3159  0010F4  90D8               	bcf	status,0,c
  3160  0010F6  0EFC               	movlw	-4
  3161  0010F8  32E3               	rrcf	plusw1,f,c
  3162  0010FA  0EFB               	movlw	-5
  3163  0010FC  32E3               	rrcf	plusw1,f,c
  3164                           
  3165                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  3166  0010FE  0EFF               	movlw	-1
  3167  001100  50E3               	movf	plusw1,w,c
  3168  001102  6E3C               	movwf	btemp,c
  3169  001104  0E01               	movlw	1
  3170  001106  5E3C               	subwf	btemp,f,c
  3171  001108  0EFF               	movlw	-1
  3172  00110A  C03C  FFE3         	movff	btemp,plusw1
  3173  00110E  A4D8               	btfss	status,2,c
  3174  001110  D7CD               	goto	u51_20
  3175  001112                     u53_20:
  3176                           
  3177                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3178  001112  0EFD               	movlw	-3
  3179  001114  CFE3 F03C          	movff	plusw1,btemp
  3180  001118  0EFE               	movlw	-2
  3181  00111A  CFE3 F03D          	movff	plusw1,btemp+1
  3182                           
  3183                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  3184  00111E  0EFB               	movlw	251
  3185  001120  26E1               	addwf	fsr1l,f,c
  3186  001122  0EFF               	movlw	255
  3187  001124  22E2               	addwfc	fsr1h,f,c
  3188  001126  0012               	return		;funcret
  3189  001128                     __end_of___lwmod:
  3190                           	opt stack 0
  3191                           tosu	equ	0xFFF
  3192                           tosh	equ	0xFFE
  3193                           tosl	equ	0xFFD
  3194                           stkptr	equ	0xFFC
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           postinc0	equ	0xFEE
  3203                           postdec0	equ	0xFED
  3204                           plusw0	equ	0xFEB
  3205                           fsr0h	equ	0xFEA
  3206                           fsr0l	equ	0xFE9
  3207                           wreg	equ	0xFE8
  3208                           postinc1	equ	0xFE6
  3209                           postdec1	equ	0xFE5
  3210                           plusw1	equ	0xFE3
  3211                           fsr1h	equ	0xFE2
  3212                           fsr1l	equ	0xFE1
  3213                           bsr	equ	0xFE0
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           plusw2	equ	0xFDB
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _aviao2 *****************
  3223 ;; Defined at:
  3224 ;;		line 124 in file "tasks.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  tempo_v2        2  [STACK] unsigned int 
  3229 ;;  tempo_p2        2  [STACK] unsigned int 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1  [STACK] void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    8
  3246 ;; This function calls:
  3247 ;;		_delay
  3248 ;;		_sem_post
  3249 ;;		_sem_wait
  3250 ;; This function is called by:
  3251 ;;		_main
  3252 ;; This function uses a reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text17
  3256  000FA2                     __ptext17:
  3257                           	opt stack 0
  3258  000FA2                     _aviao2:
  3259                           	opt stack 0
  3260                           
  3261                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3262  000FA2  52E6               	movf	postinc1,f,c
  3263  000FA4  52E6               	movf	postinc1,f,c
  3264  000FA6  52E6               	movf	postinc1,f,c
  3265  000FA8  52E6               	movf	postinc1,f,c
  3266                           
  3267                           ;tasks.c: 130: TRISCbits.RC6 = 0;
  3268                           
  3269                           ;incstack = 0
  3270  000FAA  9C94               	bcf	3988,6,c	;volatile
  3271                           
  3272                           ;tasks.c: 131: PORTCbits.RC6 = 0;
  3273  000FAC  9C82               	bcf	3970,6,c	;volatile
  3274                           
  3275                           ;tasks.c: 136: u_int tempo_p2 = 1000;
  3276  000FAE  0EE8               	movlw	232
  3277  000FB0  6E3D               	movwf	btemp+1,c
  3278  000FB2  0E03               	movlw	3
  3279  000FB4  6E3E               	movwf	btemp+2,c
  3280                           
  3281                           ;stkvar	aviao2@tempo_p2 @ sp[(-4)+2]
  3282  000FB6  0EFE               	movlw	-2
  3283  000FB8  C03D  FFE3         	movff	btemp+1,plusw1
  3284  000FBC  0EFF               	movlw	-1
  3285  000FBE  C03E  FFE3         	movff	btemp+2,plusw1
  3286                           
  3287                           ;tasks.c: 137: u_int tempo_v2 = 6000;
  3288  000FC2  0E70               	movlw	112
  3289  000FC4  6E3D               	movwf	btemp+1,c
  3290  000FC6  0E17               	movlw	23
  3291  000FC8  6E3E               	movwf	btemp+2,c
  3292                           
  3293                           ;stkvar	aviao2@tempo_v2 @ sp[(-4)+0]
  3294  000FCA  0EFC               	movlw	-4
  3295  000FCC  C03D  FFE3         	movff	btemp+1,plusw1
  3296  000FD0  0EFD               	movlw	-3
  3297  000FD2  C03E  FFE3         	movff	btemp+2,plusw1
  3298  000FD6                     l1863:
  3299                           
  3300                           ;tasks.c: 139: PORTCbits.RC6 = 1;
  3301  000FD6  8C82               	bsf	3970,6,c	;volatile
  3302                           
  3303                           ;tasks.c: 141: delay(tempo_v2);
  3304                           ;stkvar	aviao2@tempo_v2 @ sp[(-4)+0]
  3305  000FD8  0EFC               	movlw	-4
  3306  000FDA  CFE3 FFE6          	movff	plusw1,postinc1
  3307  000FDE  CFE3 FFE6          	movff	plusw1,postinc1
  3308  000FE2  EC0B  F00B         	call	_delay	;wreg free
  3309                           
  3310                           ;tasks.c: 142: sem_wait(&spista);
  3311  000FE6  0E13               	movlw	low _spista
  3312  000FE8  6EE6               	movwf	postinc1,c
  3313  000FEA  0E00               	movlw	high _spista
  3314  000FEC  6EE6               	movwf	postinc1,c
  3315  000FEE  EC69  F007         	call	_sem_wait	;wreg free
  3316                           
  3317                           ;tasks.c: 144: PORTCbits.RC6 = 0;
  3318  000FF2  9C82               	bcf	3970,6,c	;volatile
  3319                           
  3320                           ;tasks.c: 146: PORTCbits.RC5 = 1;
  3321  000FF4  8A82               	bsf	3970,5,c	;volatile
  3322                           
  3323                           ;tasks.c: 148: delay(tempo_p2);
  3324                           ;stkvar	aviao2@tempo_p2 @ sp[(-4)+2]
  3325  000FF6  0EFE               	movlw	-2
  3326  000FF8  CFE3 FFE6          	movff	plusw1,postinc1
  3327  000FFC  CFE3 FFE6          	movff	plusw1,postinc1
  3328  001000  EC0B  F00B         	call	_delay	;wreg free
  3329                           
  3330                           ;tasks.c: 151: PORTCbits.RC5 = 0;
  3331  001004  9A82               	bcf	3970,5,c	;volatile
  3332                           
  3333                           ;tasks.c: 152: delay(600);
  3334  001006  0E58               	movlw	88
  3335  001008  6EE6               	movwf	postinc1,c
  3336  00100A  0E02               	movlw	2
  3337  00100C  6EE6               	movwf	postinc1,c
  3338  00100E  EC0B  F00B         	call	_delay	;wreg free
  3339                           
  3340                           ;tasks.c: 154: sem_post(&spista);
  3341  001012  0E13               	movlw	low _spista
  3342  001014  6EE6               	movwf	postinc1,c
  3343  001016  0E00               	movlw	high _spista
  3344  001018  6EE6               	movwf	postinc1,c
  3345  00101A  EC64  F006         	call	_sem_post	;wreg free
  3346                           
  3347                           ;tasks.c: 156: delay(600);
  3348  00101E  0E58               	movlw	88
  3349  001020  6EE6               	movwf	postinc1,c
  3350  001022  0E02               	movlw	2
  3351  001024  6EE6               	movwf	postinc1,c
  3352  001026  EC0B  F00B         	call	_delay	;wreg free
  3353                           
  3354                           ;tasks.c: 157: sem_wait(&spista);
  3355  00102A  0E13               	movlw	low _spista
  3356  00102C  6EE6               	movwf	postinc1,c
  3357  00102E  0E00               	movlw	high _spista
  3358  001030  6EE6               	movwf	postinc1,c
  3359  001032  EC69  F007         	call	_sem_wait	;wreg free
  3360                           
  3361                           ;tasks.c: 159: PORTCbits.RC3 = 1;
  3362  001036  8682               	bsf	3970,3,c	;volatile
  3363                           
  3364                           ;tasks.c: 160: delay(4200);
  3365  001038  0E68               	movlw	104
  3366  00103A  6EE6               	movwf	postinc1,c
  3367  00103C  0E10               	movlw	16
  3368  00103E  6EE6               	movwf	postinc1,c
  3369  001040  EC0B  F00B         	call	_delay	;wreg free
  3370                           
  3371                           ;tasks.c: 162: PORTCbits.RC3 = 0;
  3372  001044  9682               	bcf	3970,3,c	;volatile
  3373                           
  3374                           ;tasks.c: 163: delay(1250);
  3375  001046  0EE2               	movlw	226
  3376  001048  6EE6               	movwf	postinc1,c
  3377  00104A  0E04               	movlw	4
  3378  00104C  6EE6               	movwf	postinc1,c
  3379  00104E  EC0B  F00B         	call	_delay	;wreg free
  3380                           
  3381                           ;tasks.c: 164: sem_post(&spista);
  3382  001052  0E13               	movlw	low _spista
  3383  001054  6EE6               	movwf	postinc1,c
  3384  001056  0E00               	movlw	high _spista
  3385  001058  6EE6               	movwf	postinc1,c
  3386  00105A  EC64  F006         	call	_sem_post	;wreg free
  3387                           
  3388                           ;tasks.c: 165: delay(2300);
  3389  00105E  0EFC               	movlw	252
  3390  001060  6EE6               	movwf	postinc1,c
  3391  001062  0E08               	movlw	8
  3392  001064  6EE6               	movwf	postinc1,c
  3393  001066  EC0B  F00B         	call	_delay	;wreg free
  3394  00106A  D7B5               	goto	l1863
  3395  00106C                     __end_of_aviao2:
  3396                           	opt stack 0
  3397                           tosu	equ	0xFFF
  3398                           tosh	equ	0xFFE
  3399                           tosl	equ	0xFFD
  3400                           stkptr	equ	0xFFC
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon	equ	0xFF2
  3408                           postinc0	equ	0xFEE
  3409                           postdec0	equ	0xFED
  3410                           plusw0	equ	0xFEB
  3411                           fsr0h	equ	0xFEA
  3412                           fsr0l	equ	0xFE9
  3413                           wreg	equ	0xFE8
  3414                           postinc1	equ	0xFE6
  3415                           postdec1	equ	0xFE5
  3416                           plusw1	equ	0xFE3
  3417                           fsr1h	equ	0xFE2
  3418                           fsr1l	equ	0xFE1
  3419                           bsr	equ	0xFE0
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           plusw2	equ	0xFDB
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _testlcd *****************
  3429 ;; Defined at:
  3430 ;;		line 23 in file "tasks.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  c               2    0        int 
  3435 ;;  c               2    0        int 
  3436 ;;  b               2  [STACK] int 
  3437 ;;  b               2  [STACK] int 
  3438 ;;  a               2  [STACK] int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1  [STACK] void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         0       0       0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:   10
  3455 ;; This function calls:
  3456 ;;		_Lcd_Write_String
  3457 ;;		_sem_get_value
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text18
  3464  0011CE                     __ptext18:
  3465                           	opt stack 0
  3466  0011CE                     _testlcd:
  3467                           	opt stack 0
  3468                           
  3469                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3470  0011CE  0E06               	movlw	6
  3471  0011D0  26E1               	addwf	fsr1l,f,c
  3472  0011D2  0E00               	movlw	0
  3473  0011D4  22E2               	addwfc	fsr1h,f,c
  3474                           
  3475                           ;tasks.c: 27: int a ;
  3476                           ;tasks.c: 29: a = sem_get_value(spista);
  3477                           
  3478                           ;incstack = 0
  3479                           ;tasks.c: 25: while(1){
  3480  0011D6  EE20  F013         	lfsr	2,_spista
  3481  0011DA  0E0E               	movlw	14
  3482  0011DC                     u68_21:
  3483  0011DC  CFDE FFE6          	movff	postinc2,postinc1
  3484  0011E0  2CE8               	decfsz	wreg,w,c
  3485  0011E2  D7FC               	goto	u68_21
  3486  0011E4  ECCB  F00B         	call	_sem_get_value	;wreg free
  3487                           
  3488                           ;stkvar	testlcd@a @ sp[(-6)+4]
  3489  0011E8  0EFE               	movlw	-2
  3490  0011EA  C03C  FFE3         	movff	btemp,plusw1
  3491  0011EE  0EFF               	movlw	-1
  3492  0011F0  C03D  FFE3         	movff	btemp+1,plusw1
  3493                           
  3494                           ;tasks.c: 32: if(a== 0){
  3495                           ;stkvar	testlcd@a @ sp[(-6)+4]
  3496  0011F4  0EFE               	movlw	-2
  3497  0011F6  CFE3 F03C          	movff	plusw1,btemp
  3498  0011FA  0EFF               	movlw	-1
  3499  0011FC  50E3               	movf	plusw1,w,c
  3500  0011FE  103C               	iorwf	btemp,w,c
  3501  001200  A4D8               	btfss	status,2,c
  3502  001202  D01A               	goto	l1811
  3503                           
  3504                           ;tasks.c: 35: Lcd_Write_String("Pista OCUPADA");
  3505  001204  0E01               	movlw	low STR_1
  3506  001206  6EE6               	movwf	postinc1,c
  3507  001208  0E06               	movlw	high STR_1
  3508  00120A  6EE6               	movwf	postinc1,c
  3509  00120C  EC81  F009         	call	_Lcd_Write_String	;wreg free
  3510                           
  3511                           ;tasks.c: 44: for(int b=0;b<100000;b++)
  3512                           ;stkvar	testlcd@b @ sp[(-6)+2]
  3513  001210  0EFC               	movlw	-4
  3514  001212  6AE3               	clrf	plusw1,c
  3515  001214  0EFD               	movlw	-3
  3516  001216  6AE3               	clrf	plusw1,c
  3517  001218                     l1809:
  3518                           
  3519                           ;stkvar	testlcd@b @ sp[(-6)+2]
  3520  001218  0EFC               	movlw	-4
  3521  00121A  50E3               	movf	plusw1,w,c
  3522  00121C  0F01               	addlw	1
  3523  00121E  6E3C               	movwf	btemp,c
  3524  001220  0EFC               	movlw	-4
  3525  001222  C03C  FFE3         	movff	btemp,plusw1
  3526  001226  6A3C               	clrf	btemp,c
  3527  001228  0EFD               	movlw	-3
  3528  00122A  50E3               	movf	plusw1,w,c
  3529  00122C  203C               	addwfc	btemp,w,c
  3530  00122E  6E3C               	movwf	btemp,c
  3531  001230  0EFD               	movlw	-3
  3532  001232  C03C  FFE3         	movff	btemp,plusw1
  3533  001236  D7F0               	goto	l1809
  3534  001238                     l1811:
  3535                           
  3536                           ;tasks.c: 50: else{
  3537                           ;tasks.c: 51: Lcd_Write_String("Pista Livre");
  3538  001238  0E0F               	movlw	low STR_2
  3539  00123A  6EE6               	movwf	postinc1,c
  3540  00123C  0E06               	movlw	high STR_2
  3541  00123E  6EE6               	movwf	postinc1,c
  3542  001240  EC81  F009         	call	_Lcd_Write_String	;wreg free
  3543                           
  3544                           ;tasks.c: 61: for(int b=0;b<100000;b++)
  3545                           ;stkvar	testlcd@b_562 @ sp[(-6)+0]
  3546  001244  0EFA               	movlw	-6
  3547  001246  6AE3               	clrf	plusw1,c
  3548  001248  0EFB               	movlw	-5
  3549  00124A  6AE3               	clrf	plusw1,c
  3550  00124C                     l1817:
  3551                           
  3552                           ;stkvar	testlcd@b_562 @ sp[(-6)+0]
  3553  00124C  0EFA               	movlw	-6
  3554  00124E  50E3               	movf	plusw1,w,c
  3555  001250  0F01               	addlw	1
  3556  001252  6E3C               	movwf	btemp,c
  3557  001254  0EFA               	movlw	-6
  3558  001256  C03C  FFE3         	movff	btemp,plusw1
  3559  00125A  6A3C               	clrf	btemp,c
  3560  00125C  0EFB               	movlw	-5
  3561  00125E  50E3               	movf	plusw1,w,c
  3562  001260  203C               	addwfc	btemp,w,c
  3563  001262  6E3C               	movwf	btemp,c
  3564  001264  0EFB               	movlw	-5
  3565  001266  C03C  FFE3         	movff	btemp,plusw1
  3566  00126A  D7F0               	goto	l1817
  3567  00126C                     __end_of_testlcd:
  3568                           	opt stack 0
  3569                           tosu	equ	0xFFF
  3570                           tosh	equ	0xFFE
  3571                           tosl	equ	0xFFD
  3572                           stkptr	equ	0xFFC
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           postinc0	equ	0xFEE
  3581                           postdec0	equ	0xFED
  3582                           plusw0	equ	0xFEB
  3583                           fsr0h	equ	0xFEA
  3584                           fsr0l	equ	0xFE9
  3585                           wreg	equ	0xFE8
  3586                           postinc1	equ	0xFE6
  3587                           postdec1	equ	0xFE5
  3588                           plusw1	equ	0xFE3
  3589                           fsr1h	equ	0xFE2
  3590                           fsr1l	equ	0xFE1
  3591                           bsr	equ	0xFE0
  3592                           indf2	equ	0xFDF
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           plusw2	equ	0xFDB
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _sem_get_value *****************
  3601 ;; Defined at:
  3602 ;;		line 46 in file "semaphore.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  s              14  [STACK] struct sem
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  2  [STACK] int 
  3609 ;; Registers used:
  3610 ;;		wreg, fsr1l, fsr1h, btemp, btemp+1
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3616 ;;      Params:         0       0       0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0
  3619 ;;      Totals:         0       0       0       0       0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    4
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_testlcd
  3627 ;; This function uses a reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text19
  3631  001796                     __ptext19:
  3632                           	opt stack 0
  3633  001796                     _sem_get_value:
  3634                           	opt stack 21
  3635                           
  3636                           ;semaphore.c: 48: return s.contador;
  3637                           ;stkvar	sem_get_value@s @ sp[(0)+-14]
  3638                           
  3639                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 14, argsize = 14 v
      +                          argsize = 0, retsize = 0
  3640                           ;incstack = 0
  3641  001796  0EF2               	movlw	-14
  3642  001798  CFE3 F03C          	movff	plusw1,btemp
  3643  00179C  0EF3               	movlw	-13
  3644  00179E  CFE3 F03D          	movff	plusw1,btemp+1
  3645                           
  3646                           ; _sem_get_value: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 14
      +                          , argsize = 14, vargsize = 0
  3647  0017A2  0EF2               	movlw	242
  3648  0017A4  26E1               	addwf	fsr1l,f,c
  3649  0017A6  0EFF               	movlw	255
  3650  0017A8  22E2               	addwfc	fsr1h,f,c
  3651  0017AA  0012               	return		;funcret
  3652  0017AC                     __end_of_sem_get_value:
  3653                           	opt stack 0
  3654                           tosu	equ	0xFFF
  3655                           tosh	equ	0xFFE
  3656                           tosl	equ	0xFFD
  3657                           stkptr	equ	0xFFC
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           postinc0	equ	0xFEE
  3666                           postdec0	equ	0xFED
  3667                           plusw0	equ	0xFEB
  3668                           fsr0h	equ	0xFEA
  3669                           fsr0l	equ	0xFE9
  3670                           wreg	equ	0xFE8
  3671                           postinc1	equ	0xFE6
  3672                           postdec1	equ	0xFE5
  3673                           plusw1	equ	0xFE3
  3674                           fsr1h	equ	0xFE2
  3675                           fsr1l	equ	0xFE1
  3676                           bsr	equ	0xFE0
  3677                           indf2	equ	0xFDF
  3678                           postinc2	equ	0xFDE
  3679                           postdec2	equ	0xFDD
  3680                           plusw2	equ	0xFDB
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _Lcd_Write_String *****************
  3686 ;; Defined at:
  3687 ;;		line 113 in file "lcd.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  a               2  [STACK] PTR unsigned char 
  3690 ;;		 -> STR_2(12), STR_1(14), 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  i               2  [STACK] int 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1  [STACK] void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3702 ;;      Params:         0       0       0       0       0       0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0       0       0
  3705 ;;      Totals:         0       0       0       0       0       0       0
  3706 ;;Total ram usage:        0 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    9
  3709 ;; This function calls:
  3710 ;;		_Lcd_Write_Char
  3711 ;; This function is called by:
  3712 ;;		_testlcd
  3713 ;; This function uses a reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text20
  3717  001302                     __ptext20:
  3718                           	opt stack 0
  3719  001302                     _Lcd_Write_String:
  3720                           	opt stack 0
  3721                           
  3722                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3723  001302  52E6               	movf	postinc1,f,c
  3724  001304  52E6               	movf	postinc1,f,c
  3725                           
  3726                           ;lcd.c: 115: int i;
  3727                           ;lcd.c: 116: for(i=0;a[i]!='\0';i++)
  3728                           ;stkvar	Lcd_Write_String@i @ sp[(-2)+0]
  3729                           
  3730                           ;incstack = 0
  3731  001306  0EFE               	movlw	-2
  3732  001308  6AE3               	clrf	plusw1,c
  3733  00130A  0EFF               	movlw	-1
  3734  00130C  6AE3               	clrf	plusw1,c
  3735  00130E  D024               	goto	l1735
  3736  001310                     l1731:
  3737                           
  3738                           ;lcd.c: 117: Lcd_Write_Char(a[i]);
  3739                           ;stkvar	Lcd_Write_String@i @ sp[(-2)+0]
  3740                           ;stkvar	Lcd_Write_String@a @ sp[(-2)+-2]
  3741  001310  0EFC               	movlw	-4
  3742  001312  CFE3 F03D          	movff	plusw1,btemp+1
  3743  001316  0EFD               	movlw	-3
  3744  001318  CFE3 F03E          	movff	plusw1,btemp+2
  3745  00131C  0EFE               	movlw	-2
  3746  00131E  50E3               	movf	plusw1,w,c
  3747  001320  263D               	addwf	btemp+1,f,c
  3748  001322  0EFF               	movlw	-1
  3749  001324  50E3               	movf	plusw1,w,c
  3750  001326  223E               	addwfc	btemp+2,f,c
  3751  001328  C03D  FFF6         	movff	btemp+1,tblptrl
  3752  00132C  C03E  FFF7         	movff	btemp+2,tblptrh
  3753  001330                     	if	0	;tblptru may be non-zero
  3754  001330                     	endif
  3755  001330                     	if	0	;tblptru may be non-zero
  3756  001330                     	endif
  3757  001330  0008               	tblrd		*
  3758  001332  50F5               	movf	tablat,w,c
  3759  001334  6EE6               	movwf	postinc1,c
  3760  001336  EC7D  F00A         	call	_Lcd_Write_Char	;wreg free
  3761                           
  3762                           ;stkvar	Lcd_Write_String@i @ sp[(-2)+0]
  3763  00133A  0EFE               	movlw	-2
  3764  00133C  50E3               	movf	plusw1,w,c
  3765  00133E  0F01               	addlw	1
  3766  001340  6E3C               	movwf	btemp,c
  3767  001342  0EFE               	movlw	-2
  3768  001344  C03C  FFE3         	movff	btemp,plusw1
  3769  001348  6A3C               	clrf	btemp,c
  3770  00134A  0EFF               	movlw	-1
  3771  00134C  50E3               	movf	plusw1,w,c
  3772  00134E  203C               	addwfc	btemp,w,c
  3773  001350  6E3C               	movwf	btemp,c
  3774  001352  0EFF               	movlw	-1
  3775  001354  C03C  FFE3         	movff	btemp,plusw1
  3776  001358                     l1735:
  3777                           
  3778                           ;stkvar	Lcd_Write_String@i @ sp[(-2)+0]
  3779                           ;stkvar	Lcd_Write_String@a @ sp[(-2)+-2]
  3780  001358  0EFC               	movlw	-4
  3781  00135A  CFE3 F03D          	movff	plusw1,btemp+1
  3782  00135E  0EFD               	movlw	-3
  3783  001360  CFE3 F03E          	movff	plusw1,btemp+2
  3784  001364  0EFE               	movlw	-2
  3785  001366  50E3               	movf	plusw1,w,c
  3786  001368  263D               	addwf	btemp+1,f,c
  3787  00136A  0EFF               	movlw	-1
  3788  00136C  50E3               	movf	plusw1,w,c
  3789  00136E  223E               	addwfc	btemp+2,f,c
  3790  001370  C03D  FFF6         	movff	btemp+1,tblptrl
  3791  001374  C03E  FFF7         	movff	btemp+2,tblptrh
  3792  001378                     	if	0	;tblptru may be non-zero
  3793  001378                     	endif
  3794  001378                     	if	0	;tblptru may be non-zero
  3795  001378                     	endif
  3796  001378  0008               	tblrd		*
  3797  00137A  50F5               	movf	tablat,w,c
  3798  00137C  0900               	iorlw	0
  3799  00137E  A4D8               	btfss	status,2,c
  3800  001380  D7C7               	goto	l1731
  3801                           
  3802                           ; _Lcd_Write_String: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           2, argsize = 2, vargsize = 0
  3803  001382  52E5               	movf	postdec1,f,c
  3804  001384  52E5               	movf	postdec1,f,c
  3805  001386  52E5               	movf	postdec1,f,c
  3806  001388  52E5               	movf	postdec1,f,c
  3807  00138A  0012               	return		;funcret
  3808  00138C                     __end_of_Lcd_Write_String:
  3809                           	opt stack 0
  3810                           tosu	equ	0xFFF
  3811                           tosh	equ	0xFFE
  3812                           tosl	equ	0xFFD
  3813                           stkptr	equ	0xFFC
  3814                           tblptru	equ	0xFF8
  3815                           tblptrh	equ	0xFF7
  3816                           tblptrl	equ	0xFF6
  3817                           tablat	equ	0xFF5
  3818                           prodh	equ	0xFF4
  3819                           prodl	equ	0xFF3
  3820                           intcon	equ	0xFF2
  3821                           postinc0	equ	0xFEE
  3822                           postdec0	equ	0xFED
  3823                           plusw0	equ	0xFEB
  3824                           fsr0h	equ	0xFEA
  3825                           fsr0l	equ	0xFE9
  3826                           wreg	equ	0xFE8
  3827                           postinc1	equ	0xFE6
  3828                           postdec1	equ	0xFE5
  3829                           plusw1	equ	0xFE3
  3830                           fsr1h	equ	0xFE2
  3831                           fsr1l	equ	0xFE1
  3832                           bsr	equ	0xFE0
  3833                           indf2	equ	0xFDF
  3834                           postinc2	equ	0xFDE
  3835                           postdec2	equ	0xFDD
  3836                           plusw2	equ	0xFDB
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _Lcd_Write_Char *****************
  3842 ;; Defined at:
  3843 ;;		line 97 in file "lcd.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  a               1  [STACK] unsigned char 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  y               1  [STACK] unsigned char 
  3848 ;;  temp            1  [STACK] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1  [STACK] void 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3858 ;;      Params:         0       0       0       0       0       0       0
  3859 ;;      Locals:         0       0       0       0       0       0       0
  3860 ;;      Temps:          0       0       0       0       0       0       0
  3861 ;;      Totals:         0       0       0       0       0       0       0
  3862 ;;Total ram usage:        0 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    8
  3865 ;; This function calls:
  3866 ;;		_Lcd_Port
  3867 ;;		_delay
  3868 ;; This function is called by:
  3869 ;;		_Lcd_Write_String
  3870 ;; This function uses a reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text21
  3874  0014FA                     __ptext21:
  3875                           	opt stack 0
  3876  0014FA                     _Lcd_Write_Char:
  3877                           	opt stack 0
  3878                           
  3879                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  3880  0014FA  52E6               	movf	postinc1,f,c
  3881  0014FC  52E6               	movf	postinc1,f,c
  3882                           
  3883                           ;lcd.c: 99: char temp,y;
  3884                           ;lcd.c: 100: temp = a&0x0F;
  3885                           ;stkvar	Lcd_Write_Char@a @ sp[(-2)+-1]
  3886                           
  3887                           ;incstack = 0
  3888  0014FE  0EFD               	movlw	-3
  3889  001500  CFE3 F047          	movff	plusw1,btemp+11
  3890  001504  0E0F               	movlw	15
  3891  001506  1647               	andwf	btemp+11,f,c
  3892                           
  3893                           ;stkvar	Lcd_Write_Char@temp @ sp[(-2)+1]
  3894  001508  0EFF               	movlw	-1
  3895  00150A  C047  FFE3         	movff	btemp+11,plusw1
  3896                           
  3897                           ;lcd.c: 101: y = a&0xF0;
  3898                           ;stkvar	Lcd_Write_Char@a @ sp[(-2)+-1]
  3899  00150E  0EFD               	movlw	-3
  3900  001510  CFE3 F047          	movff	plusw1,btemp+11
  3901  001514  0EF0               	movlw	240
  3902  001516  1647               	andwf	btemp+11,f,c
  3903                           
  3904                           ;stkvar	Lcd_Write_Char@y @ sp[(-2)+0]
  3905  001518  0EFE               	movlw	-2
  3906  00151A  C047  FFE3         	movff	btemp+11,plusw1
  3907                           
  3908                           ;lcd.c: 102: PORTDbits.RD2 = 1;
  3909  00151E  8483               	bsf	3971,2,c	;volatile
  3910                           
  3911                           ;lcd.c: 103: Lcd_Port(y>>4);
  3912                           ;stkvar	Lcd_Write_Char@y @ sp[(-2)+0]
  3913  001520  0EFE               	movlw	-2
  3914  001522  CFE3 F047          	movff	plusw1,btemp+11
  3915  001526  3847               	swapf	btemp+11,w,c
  3916  001528  0B0F               	andlw	15
  3917  00152A  6EE6               	movwf	postinc1,c
  3918  00152C  EC90  F00B         	call	_Lcd_Port	;wreg free
  3919                           
  3920                           ;lcd.c: 104: PORTDbits.RD3 = 1;
  3921  001530  8683               	bsf	3971,3,c	;volatile
  3922                           
  3923                           ;lcd.c: 105: delay(20);
  3924  001532  0E14               	movlw	20
  3925  001534  6EE6               	movwf	postinc1,c
  3926  001536  0E00               	movlw	0
  3927  001538  6EE6               	movwf	postinc1,c
  3928  00153A  EC0B  F00B         	call	_delay	;wreg free
  3929                           
  3930                           ;lcd.c: 106: PORTDbits.RD3 = 0;
  3931  00153E  9683               	bcf	3971,3,c	;volatile
  3932                           
  3933                           ;lcd.c: 107: Lcd_Port(temp);
  3934                           ;stkvar	Lcd_Write_Char@temp @ sp[(-2)+1]
  3935  001540  0EFF               	movlw	-1
  3936  001542  50E3               	movf	plusw1,w,c
  3937  001544  6EE6               	movwf	postinc1,c
  3938  001546  EC90  F00B         	call	_Lcd_Port	;wreg free
  3939                           
  3940                           ;lcd.c: 108: PORTDbits.RD3 = 1;
  3941  00154A  8683               	bsf	3971,3,c	;volatile
  3942                           
  3943                           ;lcd.c: 109: delay(20);
  3944  00154C  0E14               	movlw	20
  3945  00154E  6EE6               	movwf	postinc1,c
  3946  001550  0E00               	movlw	0
  3947  001552  6EE6               	movwf	postinc1,c
  3948  001554  EC0B  F00B         	call	_delay	;wreg free
  3949                           
  3950                           ;lcd.c: 110: PORTDbits.RD3 = 0;
  3951  001558  9683               	bcf	3971,3,c	;volatile
  3952                           
  3953                           ; _Lcd_Write_Char: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1
      +                          , argsize = 1, vargsize = 0
  3954  00155A  52E5               	movf	postdec1,f,c
  3955  00155C  52E5               	movf	postdec1,f,c
  3956  00155E  52E5               	movf	postdec1,f,c
  3957  001560  0012               	return		;funcret
  3958  001562                     __end_of_Lcd_Write_Char:
  3959                           	opt stack 0
  3960                           tosu	equ	0xFFF
  3961                           tosh	equ	0xFFE
  3962                           tosl	equ	0xFFD
  3963                           stkptr	equ	0xFFC
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           postinc0	equ	0xFEE
  3972                           postdec0	equ	0xFED
  3973                           plusw0	equ	0xFEB
  3974                           fsr0h	equ	0xFEA
  3975                           fsr0l	equ	0xFE9
  3976                           wreg	equ	0xFE8
  3977                           postinc1	equ	0xFE6
  3978                           postdec1	equ	0xFE5
  3979                           plusw1	equ	0xFE3
  3980                           fsr1h	equ	0xFE2
  3981                           fsr1l	equ	0xFE1
  3982                           bsr	equ	0xFE0
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           plusw2	equ	0xFDB
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _task_idle *****************
  3992 ;; Defined at:
  3993 ;;		line 70 in file "kernel.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1  [STACK] void 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0, btemp+11
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4007 ;;      Params:         0       0       0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0
  4010 ;;      Totals:         0       0       0       0       0       0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    4
  4014 ;; This function calls:
  4015 ;;		Nothing
  4016 ;; This function is called by:
  4017 ;;		_setupOS
  4018 ;; This function uses a reentrant model
  4019 ;;
  4020                           
  4021                           	psect	text22
  4022  001776                     __ptext22:
  4023                           	opt stack 0
  4024  001776                     _task_idle:
  4025                           	opt stack 22
  4026                           
  4027                           ;kernel.c: 72: TRISDbits.RD4 = 0;
  4028                           
  4029                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  4030                           ;incstack = 0
  4031  001776  9895               	bcf	3989,4,c	;volatile
  4032  001778                     l1201:
  4033                           
  4034                           ;kernel.c: 75: PORTDbits.RD4 = ~PORTDbits.RD4;
  4035  001778  A883               	btfss	3971,4,c	;volatile
  4036  00177A  D002               	goto	u18_20
  4037  00177C  0E01               	movlw	1
  4038  00177E  D001               	goto	u18_26
  4039  001780                     u18_20:
  4040  001780  0E00               	movlw	0
  4041  001782                     u18_26:
  4042  001782  0AFF               	xorlw	255
  4043  001784  6E47               	movwf	btemp+11,c
  4044  001786  3A47               	swapf	btemp+11,f,c
  4045  001788  5083               	movf	3971,w,c	;volatile
  4046  00178A  1847               	xorwf	btemp+11,w,c
  4047  00178C  0BEF               	andlw	-17
  4048  00178E  1847               	xorwf	btemp+11,w,c
  4049  001790  6E83               	movwf	3971,c	;volatile
  4050                           
  4051                           ;kernel.c: 76: __nop();
  4052  001792  F000               	nop	
  4053  001794  D7F1               	goto	l1201
  4054  001796                     __end_of_task_idle:
  4055                           	opt stack 0
  4056                           tosu	equ	0xFFF
  4057                           tosh	equ	0xFFE
  4058                           tosl	equ	0xFFD
  4059                           stkptr	equ	0xFFC
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           postinc0	equ	0xFEE
  4068                           postdec0	equ	0xFED
  4069                           plusw0	equ	0xFEB
  4070                           fsr0h	equ	0xFEA
  4071                           fsr0l	equ	0xFE9
  4072                           wreg	equ	0xFE8
  4073                           postinc1	equ	0xFE6
  4074                           postdec1	equ	0xFE5
  4075                           plusw1	equ	0xFE3
  4076                           fsr1h	equ	0xFE2
  4077                           fsr1l	equ	0xFE1
  4078                           bsr	equ	0xFE0
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           plusw2	equ	0xFDB
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _aviao3 *****************
  4088 ;; Defined at:
  4089 ;;		line 169 in file "tasks.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  tempo_p         2   19[COMRAM] unsigned int 
  4094 ;;  tempo_v         2   17[COMRAM] unsigned int 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         0       0       0       0       0       0       0
  4105 ;;      Locals:         4       0       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0
  4107 ;;      Totals:         4       0       0       0       0       0       0
  4108 ;;Total ram usage:        4 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    8
  4111 ;; This function calls:
  4112 ;;		_delay
  4113 ;;		_sem_post
  4114 ;;		_sem_wait
  4115 ;; This function is called by:
  4116 ;;		Interrupt level 1
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text23
  4121  001128                     __ptext23:
  4122                           	opt stack 0
  4123  001128                     _aviao3:
  4124                           	opt stack 18
  4125                           
  4126                           ;tasks.c: 174: TRISCbits.RC7 = 0;
  4127                           
  4128                           ;incstack = 0
  4129  001128  9E94               	bcf	3988,7,c	;volatile
  4130                           
  4131                           ;tasks.c: 175: PORTCbits.RC7 = 0;
  4132  00112A  9E82               	bcf	3970,7,c	;volatile
  4133                           
  4134                           ;tasks.c: 181: u_int tempo_v = 7000;
  4135  00112C  0E1B               	movlw	27
  4136  00112E  6E33               	movwf	aviao3@tempo_v+1,c
  4137  001130  0E58               	movlw	88
  4138  001132  6E32               	movwf	aviao3@tempo_v,c
  4139                           
  4140                           ;tasks.c: 182: u_int tempo_p = 1000;
  4141  001134  0E03               	movlw	3
  4142  001136  6E35               	movwf	aviao3@tempo_p+1,c
  4143  001138  0EE8               	movlw	232
  4144  00113A  6E34               	movwf	aviao3@tempo_p,c
  4145  00113C                     
  4146                           ;tasks.c: 186: PORTCbits.RC7 = 1;
  4147  00113C  8E82               	bsf	3970,7,c	;volatile
  4148                           
  4149                           ;tasks.c: 188: delay(tempo_v);
  4150  00113E  C032  FFE6         	movff	aviao3@tempo_v,postinc1
  4151  001142  C033  FFE6         	movff	aviao3@tempo_v+1,postinc1
  4152  001146  EC0B  F00B         	call	_delay	;wreg free
  4153                           
  4154                           ;tasks.c: 189: sem_wait(&spista);
  4155  00114A  0E13               	movlw	low _spista
  4156  00114C  6EE6               	movwf	postinc1,c
  4157  00114E  0E00               	movlw	high _spista
  4158  001150  6EE6               	movwf	postinc1,c
  4159  001152  EC69  F007         	call	_sem_wait	;wreg free
  4160                           
  4161                           ;tasks.c: 191: PORTCbits.RC7 = 0;
  4162  001156  9E82               	bcf	3970,7,c	;volatile
  4163                           
  4164                           ;tasks.c: 193: PORTCbits.RC5 = 1;
  4165  001158  8A82               	bsf	3970,5,c	;volatile
  4166                           
  4167                           ;tasks.c: 194: delay(tempo_p);
  4168  00115A  C034  FFE6         	movff	aviao3@tempo_p,postinc1
  4169  00115E  C035  FFE6         	movff	aviao3@tempo_p+1,postinc1
  4170  001162  EC0B  F00B         	call	_delay	;wreg free
  4171                           
  4172                           ;tasks.c: 197: PORTCbits.RC5 = 0;
  4173  001166  9A82               	bcf	3970,5,c	;volatile
  4174                           
  4175                           ;tasks.c: 198: delay(600);
  4176  001168  0E58               	movlw	88
  4177  00116A  6EE6               	movwf	postinc1,c
  4178  00116C  0E02               	movlw	2
  4179  00116E  6EE6               	movwf	postinc1,c
  4180  001170  EC0B  F00B         	call	_delay	;wreg free
  4181                           
  4182                           ;tasks.c: 199: sem_post(&spista);
  4183  001174  0E13               	movlw	low _spista
  4184  001176  6EE6               	movwf	postinc1,c
  4185  001178  0E00               	movlw	high _spista
  4186  00117A  6EE6               	movwf	postinc1,c
  4187  00117C  EC64  F006         	call	_sem_post	;wreg free
  4188                           
  4189                           ;tasks.c: 202: delay(600);
  4190  001180  0E58               	movlw	88
  4191  001182  6EE6               	movwf	postinc1,c
  4192  001184  0E02               	movlw	2
  4193  001186  6EE6               	movwf	postinc1,c
  4194  001188  EC0B  F00B         	call	_delay	;wreg free
  4195                           
  4196                           ;tasks.c: 203: sem_wait(&spista);
  4197  00118C  0E13               	movlw	low _spista
  4198  00118E  6EE6               	movwf	postinc1,c
  4199  001190  0E00               	movlw	high _spista
  4200  001192  6EE6               	movwf	postinc1,c
  4201  001194  EC69  F007         	call	_sem_wait	;wreg free
  4202                           
  4203                           ;tasks.c: 205: PORTCbits.RC3 = 1;
  4204  001198  8682               	bsf	3970,3,c	;volatile
  4205                           
  4206                           ;tasks.c: 206: delay(7500);
  4207  00119A  0E4C               	movlw	76
  4208  00119C  6EE6               	movwf	postinc1,c
  4209  00119E  0E1D               	movlw	29
  4210  0011A0  6EE6               	movwf	postinc1,c
  4211  0011A2  EC0B  F00B         	call	_delay	;wreg free
  4212                           
  4213                           ;tasks.c: 207: PORTCbits.RC3 = 0;
  4214  0011A6  9682               	bcf	3970,3,c	;volatile
  4215                           
  4216                           ;tasks.c: 208: delay(1500);
  4217  0011A8  0EDC               	movlw	220
  4218  0011AA  6EE6               	movwf	postinc1,c
  4219  0011AC  0E05               	movlw	5
  4220  0011AE  6EE6               	movwf	postinc1,c
  4221  0011B0  EC0B  F00B         	call	_delay	;wreg free
  4222                           
  4223                           ;tasks.c: 209: sem_post(&spista);
  4224  0011B4  0E13               	movlw	low _spista
  4225  0011B6  6EE6               	movwf	postinc1,c
  4226  0011B8  0E00               	movlw	high _spista
  4227  0011BA  6EE6               	movwf	postinc1,c
  4228  0011BC  EC64  F006         	call	_sem_post	;wreg free
  4229                           
  4230                           ;tasks.c: 210: delay(1000);
  4231  0011C0  0EE8               	movlw	232
  4232  0011C2  6EE6               	movwf	postinc1,c
  4233  0011C4  0E03               	movlw	3
  4234  0011C6  6EE6               	movwf	postinc1,c
  4235  0011C8  EC0B  F00B         	call	_delay	;wreg free
  4236  0011CC  D7B7               	goto	l157
  4237  0011CE                     __end_of_aviao3:
  4238                           	opt stack 0
  4239                           tosu	equ	0xFFF
  4240                           tosh	equ	0xFFE
  4241                           tosl	equ	0xFFD
  4242                           stkptr	equ	0xFFC
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           prodh	equ	0xFF4
  4248                           prodl	equ	0xFF3
  4249                           intcon	equ	0xFF2
  4250                           postinc0	equ	0xFEE
  4251                           postdec0	equ	0xFED
  4252                           plusw0	equ	0xFEB
  4253                           fsr0h	equ	0xFEA
  4254                           fsr0l	equ	0xFE9
  4255                           wreg	equ	0xFE8
  4256                           postinc1	equ	0xFE6
  4257                           postdec1	equ	0xFE5
  4258                           plusw1	equ	0xFE3
  4259                           fsr1h	equ	0xFE2
  4260                           fsr1l	equ	0xFE1
  4261                           bsr	equ	0xFE0
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           postdec2	equ	0xFDD
  4265                           plusw2	equ	0xFDB
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function _int_high *****************
  4271 ;; Defined at:
  4272 ;;		line 107 in file "kernel.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  i               2   15[COMRAM] unsigned int 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4286 ;;      Params:         0       0       0       0       0       0       0
  4287 ;;      Locals:         2       0       0       0       0       0       0
  4288 ;;      Temps:         15       0       0       0       0       0       0
  4289 ;;      Totals:        17       0       0       0       0       0       0
  4290 ;;Total ram usage:       17 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    3
  4293 ;; This function calls:
  4294 ;;		___wmul
  4295 ;;		_dispatcher
  4296 ;; This function is called by:
  4297 ;;		Interrupt level 2
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	intcode
  4302  000008                     __pintcode:
  4303                           	opt stack 0
  4304  000008                     _int_high:
  4305                           	opt stack 16
  4306                           
  4307                           ;incstack = 0
  4308  000008  EDAE  F005         	call	int_func,f	;refresh shadow registers
  4309                           tosu	equ	0xFFF
  4310                           tosh	equ	0xFFE
  4311                           tosl	equ	0xFFD
  4312                           stkptr	equ	0xFFC
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           postdec0	equ	0xFED
  4322                           plusw0	equ	0xFEB
  4323                           fsr0h	equ	0xFEA
  4324                           fsr0l	equ	0xFE9
  4325                           wreg	equ	0xFE8
  4326                           postinc1	equ	0xFE6
  4327                           postdec1	equ	0xFE5
  4328                           plusw1	equ	0xFE3
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           bsr	equ	0xFE0
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           plusw2	equ	0xFDB
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340                           	psect	intcode_body
  4341  000B5C                     __pintcode_body:
  4342                           	opt stack 16
  4343  000B5C                     int_func:
  4344                           	opt stack 16
  4345  000B5C  0006               	pop		; remove dummy address from shadow register refresh
  4346  000B5E  CFE1 F023          	movff	fsr1l,??_int_high+2
  4347  000B62  CFE2 F024          	movff	fsr1h,??_int_high+3
  4348  000B66  CFD9 F025          	movff	fsr2l,??_int_high+4
  4349  000B6A  CFDA F026          	movff	fsr2h,??_int_high+5
  4350  000B6E  CFF3 F027          	movff	prodl,??_int_high+6
  4351  000B72  CFF4 F028          	movff	prodh,??_int_high+7
  4352  000B76  C03C  F029         	movff	btemp,??_int_high+8
  4353  000B7A  C03D  F02A         	movff	btemp+1,??_int_high+9
  4354  000B7E  C03E  F02B         	movff	btemp+2,??_int_high+10
  4355  000B82  C044  F02C         	movff	btemp+8,??_int_high+11
  4356  000B86  C045  F02D         	movff	btemp+9,??_int_high+12
  4357  000B8A  C046  F02E         	movff	btemp+10,??_int_high+13
  4358  000B8E  C047  F02F         	movff	btemp+11,??_int_high+14
  4359  000B92  EE15  F01A         	lfsr	1,___inthi_sp
  4360                           
  4361                           ;kernel.c: 109: u_int i;
  4362                           ;kernel.c: 111: if (INTCONbits.TMR0IF) {
  4363  000B96  A4F2               	btfss	intcon,2,c	;volatile
  4364  000B98  D07C               	goto	i2l108
  4365                           
  4366                           ;kernel.c: 112: INTCONbits.TMR0IF = 0;
  4367  000B9A  94F2               	bcf	intcon,2,c	;volatile
  4368                           
  4369                           ;kernel.c: 113: TMR0L = 252;
  4370  000B9C  0EFC               	movlw	252
  4371  000B9E  6ED6               	movwf	4054,c	;volatile
  4372                           
  4373                           ;kernel.c: 115: for (i = 1; i < tasks_installed; i++) {
  4374  000BA0  0E00               	movlw	0
  4375  000BA2  6E31               	movwf	int_high@i+1,c
  4376  000BA4  0E01               	movlw	1
  4377  000BA6  6E30               	movwf	int_high@i,c
  4378  000BA8  D05F               	goto	i2l103
  4379  000BAA                     
  4380                           ;kernel.c: 116: if (F_APTOS[i].task_state == SLEEPING) {
  4381  000BAA  0E6E               	movlw	110
  4382  000BAC  6EE6               	movwf	postinc1,c
  4383  000BAE  0E00               	movlw	0
  4384  000BB0  6EE6               	movwf	postinc1,c
  4385  000BB2  C030  FFE6         	movff	int_high@i,postinc1
  4386  000BB6  C031  FFE6         	movff	int_high@i+1,postinc1
  4387  000BBA  EC36  F009         	call	___wmul	;wreg free
  4388  000BBE  0E08               	movlw	8
  4389  000BC0  263C               	addwf	btemp,f,c
  4390  000BC2  0E00               	movlw	0
  4391  000BC4  223D               	addwfc	btemp+1,f,c
  4392  000BC6  0EEE               	movlw	low _F_APTOS
  4393  000BC8  243C               	addwf	btemp,w,c
  4394  000BCA  6ED9               	movwf	fsr2l,c
  4395  000BCC  0E00               	movlw	high _F_APTOS
  4396  000BCE  203D               	addwfc	btemp+1,w,c
  4397  000BD0  6EDA               	movwf	fsr2h,c
  4398  000BD2  0E03               	movlw	3
  4399  000BD4  18DE               	xorwf	postinc2,w,c
  4400  000BD6  A4D8               	btfss	status,2,c
  4401  000BD8  D045               	goto	i2l106
  4402                           
  4403                           ;kernel.c: 117: F_APTOS[i].delay_time--;
  4404  000BDA  0E6E               	movlw	110
  4405  000BDC  6EE6               	movwf	postinc1,c
  4406  000BDE  0E00               	movlw	0
  4407  000BE0  6EE6               	movwf	postinc1,c
  4408  000BE2  C030  FFE6         	movff	int_high@i,postinc1
  4409  000BE6  C031  FFE6         	movff	int_high@i+1,postinc1
  4410  000BEA  EC36  F009         	call	___wmul	;wreg free
  4411  000BEE  0E06               	movlw	6
  4412  000BF0  263C               	addwf	btemp,f,c
  4413  000BF2  0E00               	movlw	0
  4414  000BF4  223D               	addwfc	btemp+1,f,c
  4415  000BF6  0EEE               	movlw	low _F_APTOS
  4416  000BF8  243C               	addwf	btemp,w,c
  4417  000BFA  6ED9               	movwf	fsr2l,c
  4418  000BFC  0E00               	movlw	high _F_APTOS
  4419  000BFE  203D               	addwfc	btemp+1,w,c
  4420  000C00  6EDA               	movwf	fsr2h,c
  4421  000C02  06DE               	decf	postinc2,f,c
  4422  000C04  0E00               	movlw	0
  4423  000C06  5ADD               	subwfb	postdec2,f,c
  4424                           
  4425                           ;kernel.c: 118: if (F_APTOS[i].delay_time == 0) {
  4426  000C08  0E6E               	movlw	110
  4427  000C0A  6EE6               	movwf	postinc1,c
  4428  000C0C  0E00               	movlw	0
  4429  000C0E  6EE6               	movwf	postinc1,c
  4430  000C10  C030  FFE6         	movff	int_high@i,postinc1
  4431  000C14  C031  FFE6         	movff	int_high@i+1,postinc1
  4432  000C18  EC36  F009         	call	___wmul	;wreg free
  4433  000C1C  0E06               	movlw	6
  4434  000C1E  263C               	addwf	btemp,f,c
  4435  000C20  0E00               	movlw	0
  4436  000C22  223D               	addwfc	btemp+1,f,c
  4437  000C24  0EEE               	movlw	low _F_APTOS
  4438  000C26  243C               	addwf	btemp,w,c
  4439  000C28  6ED9               	movwf	fsr2l,c
  4440  000C2A  0E00               	movlw	high _F_APTOS
  4441  000C2C  203D               	addwfc	btemp+1,w,c
  4442  000C2E  6EDA               	movwf	fsr2h,c
  4443  000C30  50DE               	movf	postinc2,w,c
  4444  000C32  10DE               	iorwf	postinc2,w,c
  4445  000C34  A4D8               	btfss	status,2,c
  4446  000C36  D016               	goto	i2l106
  4447                           
  4448                           ;kernel.c: 119: F_APTOS[i].task_state = READY;
  4449  000C38  0E6E               	movlw	110
  4450  000C3A  6EE6               	movwf	postinc1,c
  4451  000C3C  0E00               	movlw	0
  4452  000C3E  6EE6               	movwf	postinc1,c
  4453  000C40  C030  FFE6         	movff	int_high@i,postinc1
  4454  000C44  C031  FFE6         	movff	int_high@i+1,postinc1
  4455  000C48  EC36  F009         	call	___wmul	;wreg free
  4456  000C4C  0E08               	movlw	8
  4457  000C4E  263C               	addwf	btemp,f,c
  4458  000C50  0E00               	movlw	0
  4459  000C52  223D               	addwfc	btemp+1,f,c
  4460  000C54  0EEE               	movlw	low _F_APTOS
  4461  000C56  243C               	addwf	btemp,w,c
  4462  000C58  6ED9               	movwf	fsr2l,c
  4463  000C5A  0E00               	movlw	high _F_APTOS
  4464  000C5C  203D               	addwfc	btemp+1,w,c
  4465  000C5E  6EDA               	movwf	fsr2h,c
  4466  000C60  0E01               	movlw	1
  4467  000C62  6EDF               	movwf	indf2,c
  4468  000C64                     i2l106:
  4469  000C64  4A30               	infsnz	int_high@i,f,c
  4470  000C66  2A31               	incf	int_high@i+1,f,c
  4471  000C68                     i2l103:
  4472  000C68  5011               	movf	_tasks_installed,w,c
  4473  000C6A  5C30               	subwf	int_high@i,w,c
  4474  000C6C  5012               	movf	_tasks_installed+1,w,c
  4475  000C6E  5831               	subwfb	int_high@i+1,w,c
  4476  000C70  A0D8               	btfss	status,0,c
  4477  000C72  D79B               	goto	i2l104
  4478                           
  4479                           ;kernel.c: 120: }
  4480                           ;kernel.c: 121: }
  4481                           ;kernel.c: 122: }
  4482                           ;kernel.c: 124: quantum--;
  4483  000C74  0648               	decf	_quantum,f,c
  4484  000C76  A0D8               	btfss	status,0,c
  4485  000C78  0649               	decf	_quantum+1,f,c
  4486                           
  4487                           ;kernel.c: 125: if (quantum == 0) {
  4488  000C7A  5048               	movf	_quantum,w,c
  4489  000C7C  1049               	iorwf	_quantum+1,w,c
  4490  000C7E  A4D8               	btfss	status,2,c
  4491  000C80  D008               	goto	i2l108
  4492                           
  4493                           ;kernel.c: 126: quantum = 4;
  4494  000C82  0E00               	movlw	0
  4495  000C84  6E49               	movwf	_quantum+1,c
  4496  000C86  0E04               	movlw	4
  4497  000C88  6E48               	movwf	_quantum,c
  4498                           
  4499                           ;kernel.c: 127: dispatcher(READY);
  4500  000C8A  0E01               	movlw	1
  4501  000C8C  6EE6               	movwf	postinc1,c
  4502  000C8E  EC0E  F003         	call	_dispatcher	;wreg free
  4503  000C92                     i2l108:
  4504  000C92  C02F  F047         	movff	??_int_high+14,btemp+11
  4505  000C96  C02E  F046         	movff	??_int_high+13,btemp+10
  4506  000C9A  C02D  F045         	movff	??_int_high+12,btemp+9
  4507  000C9E  C02C  F044         	movff	??_int_high+11,btemp+8
  4508  000CA2  C02B  F03E         	movff	??_int_high+10,btemp+2
  4509  000CA6  C02A  F03D         	movff	??_int_high+9,btemp+1
  4510  000CAA  C029  F03C         	movff	??_int_high+8,btemp
  4511  000CAE  C028  FFF4         	movff	??_int_high+7,prodh
  4512  000CB2  C027  FFF3         	movff	??_int_high+6,prodl
  4513  000CB6  C026  FFDA         	movff	??_int_high+5,fsr2h
  4514  000CBA  C025  FFD9         	movff	??_int_high+4,fsr2l
  4515  000CBE  C024  FFE2         	movff	??_int_high+3,fsr1h
  4516  000CC2  C023  FFE1         	movff	??_int_high+2,fsr1l
  4517  000CC6  0011               	retfie		f
  4518  000CC8                     __end_of_int_high:
  4519                           	opt stack 0
  4520                           tosu	equ	0xFFF
  4521                           tosh	equ	0xFFE
  4522                           tosl	equ	0xFFD
  4523                           stkptr	equ	0xFFC
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           postinc0	equ	0xFEE
  4532                           postdec0	equ	0xFED
  4533                           plusw0	equ	0xFEB
  4534                           fsr0h	equ	0xFEA
  4535                           fsr0l	equ	0xFE9
  4536                           wreg	equ	0xFE8
  4537                           postinc1	equ	0xFE6
  4538                           postdec1	equ	0xFE5
  4539                           plusw1	equ	0xFE3
  4540                           fsr1h	equ	0xFE2
  4541                           fsr1l	equ	0xFE1
  4542                           bsr	equ	0xFE0
  4543                           indf2	equ	0xFDF
  4544                           postinc2	equ	0xFDE
  4545                           postdec2	equ	0xFDD
  4546                           plusw2	equ	0xFDB
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           tosu	equ	0xFFF
  4551                           tosh	equ	0xFFE
  4552                           tosl	equ	0xFFD
  4553                           stkptr	equ	0xFFC
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           intcon	equ	0xFF2
  4561                           postinc0	equ	0xFEE
  4562                           postdec0	equ	0xFED
  4563                           plusw0	equ	0xFEB
  4564                           fsr0h	equ	0xFEA
  4565                           fsr0l	equ	0xFE9
  4566                           wreg	equ	0xFE8
  4567                           postinc1	equ	0xFE6
  4568                           postdec1	equ	0xFE5
  4569                           plusw1	equ	0xFE3
  4570                           fsr1h	equ	0xFE2
  4571                           fsr1l	equ	0xFE1
  4572                           bsr	equ	0xFE0
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           plusw2	equ	0xFDB
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581                           	psect	rparam
  4582  0000                     tosu	equ	0xFFF
  4583                           tosh	equ	0xFFE
  4584                           tosl	equ	0xFFD
  4585                           stkptr	equ	0xFFC
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           postdec0	equ	0xFED
  4595                           plusw0	equ	0xFEB
  4596                           fsr0h	equ	0xFEA
  4597                           fsr0l	equ	0xFE9
  4598                           wreg	equ	0xFE8
  4599                           postinc1	equ	0xFE6
  4600                           postdec1	equ	0xFE5
  4601                           plusw1	equ	0xFE3
  4602                           fsr1h	equ	0xFE2
  4603                           fsr1l	equ	0xFE1
  4604                           bsr	equ	0xFE0
  4605                           indf2	equ	0xFDF
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           plusw2	equ	0xFDB
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613                           	psect	temp
  4614  00003C                     btemp:
  4615                           	opt stack 0
  4616  00003C                     	ds	12
  4617  0000                     wtemp0	set	btemp
  4618  0000                     wtemp1	set	btemp+2
  4619  0000                     wtemp2	set	btemp+4
  4620  0000                     wtemp3	set	btemp+6
  4621  0000                     wtemp4	set	btemp+8
  4622  0000                     wtemp5	set	btemp+10
  4623  0000                     wtemp6	set	btemp+1
  4624  0000                     ttemp0	set	btemp
  4625  0000                     ttemp1	set	btemp+3
  4626  0000                     ttemp2	set	btemp+6
  4627  0000                     ttemp3	set	btemp+9
  4628  0000                     ltemp0	set	btemp
  4629  0000                     ltemp1	set	btemp+4
  4630  0000                     ltemp2	set	btemp+8
  4631                           tosu	equ	0xFFF
  4632                           tosh	equ	0xFFE
  4633                           tosl	equ	0xFFD
  4634                           stkptr	equ	0xFFC
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           postinc0	equ	0xFEE
  4643                           postdec0	equ	0xFED
  4644                           plusw0	equ	0xFEB
  4645                           fsr0h	equ	0xFEA
  4646                           fsr0l	equ	0xFE9
  4647                           wreg	equ	0xFE8
  4648                           postinc1	equ	0xFE6
  4649                           postdec1	equ	0xFE5
  4650                           plusw1	equ	0xFE3
  4651                           fsr1h	equ	0xFE2
  4652                           fsr1l	equ	0xFE1
  4653                           bsr	equ	0xFE0
  4654                           indf2	equ	0xFDF
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           plusw2	equ	0xFDB
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        2
    BSS         984
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     27      61
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[12]), STR_1(CODE[14]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    sem_post@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    sem_init@s	PTR struct sem size(2) Largest target is 14
		 -> spista(COMRAM[14]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), testlcd(), aviao2(), aviao1(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), testlcd(), aviao2(), aviao1(), 

    S93tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), testlcd(), aviao2(), aviao1(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), testlcd(), aviao2(), aviao1(), 


Critical Paths under _main in COMRAM

    _main->_create_task
    _setupOS->_create_task
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _testlcd in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _testlcd in COMRAM

    None.

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _aviao3 in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _testlcd in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _testlcd in BANK0

    None.

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _aviao3 in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _testlcd in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _testlcd in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _aviao3 in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _testlcd in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _testlcd in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _aviao3 in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _testlcd in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _testlcd in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _aviao3 in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _testlcd in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _testlcd in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _aviao3 in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _testlcd in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _testlcd in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _aviao3 in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5474
                       _SRAMInitHeap
                        _create_task
                           _sem_init
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2716
                           _Lcd_Init
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             21 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     158
                                             21 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     198
                                             23 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     110
                                             21 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (8) _Lcd_Port                                             1     0      1      88
 ---------------------------------------------------------------------------------
 (1) _sem_init                                             4     0      4     240
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _aviao1                                               4     4      0   11988
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (6) _sem_wait                                             2     0      2    3027
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _sem_post                                             2     0      2    4519
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _aviao2                                               4     4      0   11988
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (6) _sem_wait                                             2     0      2    3027
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _sem_post                                             2     0      2    4519
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _testlcd                                             10    10      0    4771
                   _Lcd_Write_String
                      _sem_get_value
 ---------------------------------------------------------------------------------
 (6) _sem_get_value                                       14     0     14      34
 ---------------------------------------------------------------------------------
 (6) _Lcd_Write_String                                     4     2      2    4688
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (7) _Lcd_Write_Char                                       3     2      1    4574
                           _Lcd_Port
                              _delay
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (8) _Lcd_Port                                             1     0      1      88
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _testlcd                                             10    10      0    4771
                   _Lcd_Write_String
                      _sem_get_value
 ---------------------------------------------------------------------------------
 (6) _sem_get_value                                       14     0     14      34
 ---------------------------------------------------------------------------------
 (6) _Lcd_Write_String                                     4     2      2    4688
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (7) _Lcd_Write_Char                                       3     2      1    4574
                           _Lcd_Port
                              _delay
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (8) _Lcd_Port                                             1     0      1      88
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _aviao1                                               4     4      0   11988
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (6) _sem_wait                                             2     0      2    3027
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _sem_post                                             2     0      2    4519
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _aviao2                                               4     4      0   11988
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (6) _sem_wait                                             2     0      2    3027
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _sem_post                                             2     0      2    4519
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _aviao3                                               4     4      0   11988
                                             17 COMRAM     4     4      0
                              _delay
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (6) _sem_wait                                             2     0      2    3027
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _sem_post                                             2     0      2    4519
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (6) _delay                                                2     0      2    4396
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _int_high                                           17    17      0    4198
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (13) _dispatcher                                          1     0      1    2823
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (14) _rr_scheduler                                        2     2      0    1538
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (15) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (15) ___lwmod                                             5     1      4     207
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMInitHeap
   _create_task
     ___wmul
   _sem_init
   _setupOS
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _aviao1 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _testlcd (ROOT)
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
       _delay
         ___wmul
         _dispatcher
           ___wmul
           _rr_scheduler
             ___lwmod
             ___wmul
   _sem_get_value

 _task_idle (ROOT)

 _testlcd (ROOT)
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
       _delay
         ___wmul
         _dispatcher
           ___wmul
           _rr_scheduler
             ___lwmod
             ___wmul
   _sem_get_value

 _aviao1 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao3 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3B8      17       62.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     1B      3D       1       53.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      15        0.0%
DATA                 0      0     467       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Nov 11 18:19:37 2018

                       l23 1484                         l80 0960                        l157 113C  
                      l271 172A                        l247 15CA                        l248 15F8  
                      l273 1736                        l275 1742                        l277 174E  
                      l279 1750                        _BSR 000FE0                        u540 15D6  
                      u551 15AE                        u807 14AA                        u817 14C0  
                      u827 1768                        u797 1494                        _TOS 000FFD  
            create_task@id 0036                        wreg 000FE8          SRAMInitHeap@pHeap 0038  
        SRAMInitHeap@count 0036                       l1201 1778                       l1511 172C  
                     l1515 1738                       l1701 08F2                       l1519 1744  
                     l1731 1310                       l1811 1238                       l1547 1084  
                     l1557 10F4                       l1735 1358                       l1823 0E30  
                     l1817 124C                       l1809 1218                       l1681 06D8  
                     l1761 0DEC                       l1747 0F9A                       l1597 13A4  
                     l1863 0FD6                       STR_1 0601                       STR_2 060F  
                     _TOSH 000FFE                       _TOSL 000FFD                       _WREG 000FE8  
                     _TOSU 000FFF                       _main 1410                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 003C  
                     prodh 000FF4                       prodl 000FF3                       start 000C  
          __end_of_Lcd_Cmd 1776               ___param_bank 000000                      ?_main 0021  
          _tasks_installed 0011                      i2l103 0C68                      i2l104 0BAA  
          __end_of___lwmod 1128                      i2l106 0C64                      i2l108 0C92  
                    _TMR0L 000FD6                      u18_20 1780                      u18_26 1782  
                    u51_20 10AC                      u53_20 1112                      u62_20 0CFA  
                    _TRISD 000F95                      u59_20 0B30                      u68_21 11DC  
                    _delay 1616            create_task@task 0080                      tablat 000FF5  
                    ltemp0 003C                      ltemp1 0040                      ltemp2 0044  
          __end_of_setupOS 16E2            __end_of_testlcd 126C                      plusw0 000FEB  
                    plusw1 000FE3                      plusw2 000FDB                      ttemp0 003C  
                    ttemp1 003F                      ttemp2 0042                      ttemp3 0045  
                    status 000FD8                      wtemp0 003C                      wtemp1 003E  
                    wtemp2 0040                      wtemp3 0042                      wtemp4 0044  
                    wtemp5 0046                      wtemp6 003D           __end_of_Lcd_Init 14FA  
    __end_of_sem_get_value 17AC           __end_of_Lcd_Port 1754            __initialization 165E  
             __end_of_main 1486                     ??_main 003C              __activetblptr 000001  
                ??_Lcd_Cmd 0036    __size_of_Lcd_Write_Char 0068                     _STATUS 000FD8  
                   _STKPTR 000FFC       __size_of_create_task 005A                     ___wmul 126C  
                   _aviao1 0DF4                     _aviao2 0FA2                     _aviao3 1128  
                   clear_0 167E                     clear_1 1690           __end_of_int_high 0CC8  
         create_task@prior 0038                     _spista 0013           __end_of_sem_init 1720  
         __end_of_sem_wait 0FA2           __end_of_sem_post 0DF4               __pdataCOMRAM 0048  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_setupOS 003C           __end_of_start_os 17B0  
               __accesstop 0080    __end_of__initialization 1696              ___rparam_used 000001  
           __pcstackCOMRAM 0021                 ___inthi_sp 051A              __end_of_delay 165E  
                ?_Lcd_Init 0021              __uDynamicHeap 02A6                    ?_aviao3 0021  
__size_of_Lcd_Write_String 008A         __size_of_task_idle 0020                    _F_APTOS 00EE  
               ??_Lcd_Init 0038                 _dispatcher 061C             _Lcd_Write_Char 14FA  
                  _Lcd_Cmd 1754                  ?_int_high 0021                    __Hparam 0000  
                ?_sem_init 0036                    __Lparam 0000            __size_of___wmul 0096  
                  ___lwmod 106C               __psmallconst 0600                  ?_start_os 0021  
          __size_of_aviao1 00DE            __size_of_aviao2 00CA            __size_of_aviao3 00A6  
                  __pcinit 165E                    __ramtop 0600              ?_SRAMInitHeap 0021  
                  __ptext0 1410                    __ptext1 17AC                    __ptext2 16A4  
                  __ptext3 1562                    __ptext4 126C                    __ptext5 15BC  
                  __ptext6 1486                    __ptext7 1754                    __ptext8 1720  
                  __ptext9 16E2                  _T0CONbits 000FD5                    _setupOS 16A4  
        create_task@task_f 003A                    _testlcd 11CE                    _quantum 0048  
   __end_of_Lcd_Write_Char 1562             __pintcode_body 0B5C       end_of_initialization 1696  
        __end_of_task_idle 1796                    int_func 0B5C                 ??_int_high 0021  
               ??_sem_init 003A                    postdec0 000FED                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                 ??_start_os 0036             ??_SRAMInitHeap 0036  
                _PORTCbits 000F82                  _PORTDbits 000F83                  _TRISCbits 000F94  
                _TRISDbits 000F95              sem_init@value 0038     __size_of_sem_get_value 0016  
            ??_create_task 003C             __end_of___wmul 1302           _Lcd_Write_String 1302  
            __pidataCOMRAM 17B0             __end_of_aviao1 0ED2             __end_of_aviao2 106C  
           __end_of_aviao3 11CE        start_initialization 165E          __size_of_Lcd_Init 0074  
        __size_of_Lcd_Port 0034              _sem_get_value 1796        __end_of_create_task 15BC  
      __size_of_dispatcher 0540                   ??_aviao3 0032                __pbssBIGRAM 00EE  
              __pbssCOMRAM 0001              __pcstackBANK0 0080                   ?_Lcd_Cmd 0021  
     __end_of_SRAMInitHeap 1616          __size_of_int_high 0CC0                  __pintcode 0008  
        __size_of_sem_init 003E          __size_of_sem_wait 00D0          __size_of_sem_post 012C  
        __size_of_start_os 0004                __smallconst 0600                   ?_setupOS 0021  
           __size_of_delay 0048       __end_of_rr_scheduler 1410                _create_task 1562  
                _task_idle 1776                  _pipeluzes 0001                   Lcd_Cmd@a 0037  
                 _Lcd_Init 1486                   _Lcd_Port 1720   __end_of_Lcd_Write_String 138C  
         __size_of_Lcd_Cmd 0022                   __Hrparam 0000                   __Lrparam 0000  
             __Lsmallconst 0600                  int_high@i 0030         __end_of_dispatcher 0B5C  
         __size_of___lwmod 00BC      __size_of_SRAMInitHeap 005A                   __ptext10 0DF4  
                 __ptext11 0ED2                   __ptext20 1302                   __ptext12 0CC8  
                 __ptext21 14FA                   __ptext13 1616                   __ptext22 1776  
                 __ptext14 061C                   __ptext23 1128                   __ptext15 138C  
                 __ptext16 106C                   __ptext17 0FA2                   __ptext18 11CE  
                 __ptext19 1796           __size_of_setupOS 003E           __size_of_testlcd 009E  
                sem_init@s 0036              aviao3@tempo_p 0034              aviao3@tempo_v 0032  
            __size_of_main 0076                   _int_high 0008                   _sem_init 16E2  
                 _sem_wait 0ED2                   _sem_post 0CC8               _task_running 000F  
                 _start_os 17AC               _SRAMInitHeap 15BC      __size_of_rr_scheduler 0084  
               _INTCONbits 000FF2                   intlevel1 0000                   intlevel2 0000  
             _rr_scheduler 138C               ?_create_task 0036  
