

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Oct 10 19:03:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4520 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71 ;;___wmul@product	offset	0
    72 ;;___wmul@multiplier	offset=-2 (param)
    73 ;;___wmul@multiplicand	offset=-4 (param)
    74 ;;sem_wait@s	offset=-2 (param)
    75 ;;sem_init@s	offset=-2 (param)
    76 ;;sem_init@value	offset=-4 (param)
    77 ;;delay@time_ms	offset=-2 (param)
    78 ;;dispatcher@state	offset=-1 (param)
    79 ;;rr_scheduler@next_task_to_run	offset	0
    80 ;;___wmul@product	offset	0
    81 ;;___wmul@multiplier	offset=-2 (param)
    82 ;;___wmul@multiplicand	offset=-4 (param)
    83 ;;___lwmod@counter	offset	0
    84 ;;___lwmod@dividend	offset=-2 (param)
    85 ;;___lwmod@divisor	offset=-4 (param)
    86 ;;dispatcher@state	offset=-1 (param)
    87 ;;rr_scheduler@next_task_to_run	offset	0
    88 ;;___wmul@product	offset	0
    89 ;;___wmul@multiplier	offset=-2 (param)
    90 ;;___wmul@multiplicand	offset=-4 (param)
    91 ;;___lwmod@counter	offset	0
    92 ;;___lwmod@dividend	offset=-2 (param)
    93 ;;___lwmod@divisor	offset=-4 (param)
    94                           
    95                           	psect	idataCOMRAM
    96  000E0E                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _quantum
   100  000E0E  0004               	dw	4
   101  0000                     _TOS	set	4093
   102  0000                     _TMR0L	set	4054
   103  0000                     _T0CONbits	set	4053
   104  0000                     _PORTDbits	set	3971
   105  0000                     _TRISDbits	set	3989
   106  0000                     _STKPTR	set	4092
   107  0000                     _TOSH	set	4094
   108  0000                     _TOSL	set	4093
   109  0000                     _TOSU	set	4095
   110  0000                     _WREG	set	4072
   111  0000                     _STATUS	set	4056
   112  0000                     _BSR	set	4064
   113  0000                     _INTCONbits	set	4082
   114                           
   115                           ; #config settings
   116                           
   117                           	psect	cinit
   118  000D1A                     __pcinit:
   119                           	opt stack 0
   120  000D1A                     start_initialization:
   121                           	opt stack 0
   122  000D1A                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to COMRAM (2 bytes)
   126                           ; load TBLPTR registers with __pidataCOMRAM
   127  000D1A  0E0E               	movlw	low __pidataCOMRAM
   128  000D1C  6EF6               	movwf	tblptrl,c
   129  000D1E  0E0E               	movlw	high __pidataCOMRAM
   130  000D20  6EF7               	movwf	tblptrh,c
   131  000D22  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   132  000D24  6EF8               	movwf	tblptru,c
   133  000D26  0009               	tblrd		*+	;fetch initializer
   134  000D28  CFF5 F055          	movff	tablat,__pdataCOMRAM
   135  000D2C  0009               	tblrd		*+	;fetch initializer
   136  000D2E  CFF5 F056          	movff	tablat,__pdataCOMRAM+1
   137                           
   138                           ; Clear objects allocated to BIGRAM (1062 bytes)
   139  000D32  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   140  000D36  EE24 F026          	lfsr	2,1062
   141  000D3A                     clear_0:
   142  000D3A  6AEE               	clrf	postinc0,c
   143  000D3C  50DD               	movf	postdec2,w,c
   144  000D3E  50D9               	movf	fsr2l,w,c
   145  000D40  E1FC               	bnz	clear_0
   146  000D42  50DA               	movf	fsr2h,w,c
   147  000D44  E1FA               	bnz	clear_0
   148                           
   149                           ; Clear objects allocated to COMRAM (34 bytes)
   150  000D46  EE00  F027         	lfsr	0,__pbssCOMRAM
   151  000D4A  0E22               	movlw	34
   152  000D4C                     clear_1:
   153  000D4C  6AEE               	clrf	postinc0,c
   154  000D4E  06E8               	decf	wreg,f,c
   155  000D50  E1FD               	bnz	clear_1
   156  000D52                     end_of_initialization:
   157                           	opt stack 0
   158  000D52                     __end_of__initialization:
   159                           	opt stack 0
   160  000D52  0100               	movlb	0
   161  000D54  EFB4  F005         	goto	_main	;jump to C main() function
   162                           tblptru	equ	0xFF8
   163                           tblptrh	equ	0xFF7
   164                           tblptrl	equ	0xFF6
   165                           tablat	equ	0xFF5
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           postdec2	equ	0xFDD
   169                           fsr2h	equ	0xFDA
   170                           fsr2l	equ	0xFD9
   171                           
   172                           	psect	bssCOMRAM
   173  000027                     __pbssCOMRAM:
   174                           	opt stack 0
   175  000027                     _task_running:
   176                           	opt stack 0
   177  000027                     	ds	2
   178  000029                     _tasks_installed:
   179                           	opt stack 0
   180  000029                     	ds	2
   181  00002B                     _s:
   182                           	opt stack 0
   183  00002B                     	ds	16
   184  00003B                     _pipe:
   185                           	opt stack 0
   186  00003B                     	ds	14
   187                           tblptru	equ	0xFF8
   188                           tblptrh	equ	0xFF7
   189                           tblptrl	equ	0xFF6
   190                           tablat	equ	0xFF5
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           postdec2	equ	0xFDD
   194                           fsr2h	equ	0xFDA
   195                           fsr2l	equ	0xFD9
   196                           
   197                           	psect	dataCOMRAM
   198  000055                     __pdataCOMRAM:
   199                           	opt stack 0
   200  000055                     _quantum:
   201                           	opt stack 0
   202  000055                     	ds	2
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           postdec2	equ	0xFDD
   210                           fsr2h	equ	0xFDA
   211                           fsr2l	equ	0xFD9
   212                           
   213                           	psect	bssBIGRAM
   214  0000EE                     __pbssBIGRAM:
   215                           	opt stack 0
   216  0000EE                     _F_APTOS:
   217                           	opt stack 0
   218  0000EE                     	ds	550
   219  000314                     __uDynamicHeap:
   220                           	opt stack 0
   221  000314                     	ds	512
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec2	equ	0xFDD
   229                           fsr2h	equ	0xFDA
   230                           fsr2l	equ	0xFD9
   231                           
   232                           	psect	cstackBANK0
   233  000080                     __pcstackBANK0:
   234                           	opt stack 0
   235  000080                     create_task@task:
   236                           	opt stack 0
   237                           
   238                           ; 110 bytes @ 0x0
   239  000080                     	ds	110
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           postdec2	equ	0xFDD
   247                           fsr2h	equ	0xFDA
   248                           fsr2l	equ	0xFD9
   249                           
   250                           	psect	cstackCOMRAM
   251  000001                     __pcstackCOMRAM:
   252                           	opt stack 0
   253  000001                     ??_int_high:
   254                           
   255                           ; 1 bytes @ 0x0
   256  000001                     	ds	15
   257  000010                     int_high@i:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0xF
   261  000010                     	ds	2
   262  000012                     create_task@id:
   263                           	opt stack 0
   264  000012                     SRAMInitHeap@count:
   265                           	opt stack 0
   266  000012                     __SRAMmerge@pSegA:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x11
   270  000012                     	ds	2
   271  000014                     ??__SRAMmerge:
   272  000014                     create_task@prior:
   273                           	opt stack 0
   274  000014                     SRAMInitHeap@pHeap:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x13
   278  000014                     	ds	1
   279  000015                     __SRAMmerge@uSum:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x14
   283  000015                     	ds	1
   284  000016                     __SRAMmerge@uSegA:
   285                           	opt stack 0
   286  000016                     create_task@task_f:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x15
   290  000016                     	ds	1
   291  000017                     __SRAMmerge@uSegB:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x16
   295  000017                     	ds	1
   296  000018                     __SRAMmerge@pSegB:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x17
   300  000018                     	ds	2
   301  00001A                     ?_SRAMalloc:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x19
   305  00001A                     	ds	2
   306  00001C                     ??_SRAMalloc:
   307                           
   308                           ; 1 bytes @ 0x1B
   309  00001C                     	ds	2
   310  00001E                     SRAMalloc@segLen:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0x1D
   314  00001E                     	ds	1
   315  00001F                     SRAMalloc@segHeader:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x1E
   319  00001F                     	ds	1
   320  000020                     SRAMalloc@temp:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x1F
   324  000020                     	ds	2
   325  000022                     SRAMalloc@nBytes:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x21
   329  000022                     	ds	1
   330  000023                     SRAMalloc@pHeap:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x22
   334  000023                     	ds	2
   335  000025                     main@mem:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x24
   339  000025                     	ds	2
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           postdec2	equ	0xFDD
   347                           fsr2h	equ	0xFDA
   348                           fsr2l	equ	0xFD9
   349                           
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 13 in file "main.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  mem             2   36[COMRAM] PTR unsigned char 
   360 ;;		 -> _uDynamicHeap(512), NULL(0), 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   370 ;;      Params:         0       0       0       0       0       0       0
   371 ;;      Locals:         2       0       0       0       0       0       0
   372 ;;      Temps:          0       0       0       0       0       0       0
   373 ;;      Totals:         2       0       0       0       0       0       0
   374 ;;Total ram usage:        2 bytes
   375 ;; Hardware stack levels required when called:   12
   376 ;; This function calls:
   377 ;;		_SRAMalloc
   378 ;;		_create_task
   379 ;;		_setupOS
   380 ;;		_start_os
   381 ;; This function is called by:
   382 ;;		Startup code after reset
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text0
   387  000B68                     __ptext0:
   388                           	opt stack 0
   389  000B68                     _main:
   390                           	opt stack 19
   391                           
   392                           ;main.c: 15: setupOS();
   393                           
   394                           ;incstack = 0
   395  000B68  ECAC  F006         	call	_setupOS	;wreg free
   396                           
   397                           ;main.c: 18: create_task(2, 3, &task_one);
   398  000B6C  0E00               	movlw	0
   399  000B6E  6E13               	movwf	create_task@id+1,c
   400  000B70  0E02               	movlw	2
   401  000B72  6E12               	movwf	create_task@id,c
   402  000B74  0E00               	movlw	0
   403  000B76  6E15               	movwf	create_task@prior+1,c
   404  000B78  0E03               	movlw	3
   405  000B7A  6E14               	movwf	create_task@prior,c
   406  000B7C  0E88               	movlw	low _task_one
   407  000B7E  6E16               	movwf	create_task@task_f,c
   408  000B80  0E0C               	movlw	high _task_one
   409  000B82  6E17               	movwf	create_task@task_f+1,c
   410  000B84  ECEA  F005         	call	_create_task	;wreg free
   411                           
   412                           ;main.c: 19: create_task(3, 3, &task_two);
   413  000B88  0E00               	movlw	0
   414  000B8A  6E13               	movwf	create_task@id+1,c
   415  000B8C  0E03               	movlw	3
   416  000B8E  6E12               	movwf	create_task@id,c
   417  000B90  0E00               	movlw	0
   418  000B92  6E15               	movwf	create_task@prior+1,c
   419  000B94  0E03               	movlw	3
   420  000B96  6E14               	movwf	create_task@prior,c
   421  000B98  0EBE               	movlw	low _task_two
   422  000B9A  6E16               	movwf	create_task@task_f,c
   423  000B9C  0E0D               	movlw	high _task_two
   424  000B9E  6E17               	movwf	create_task@task_f+1,c
   425  000BA0  ECEA  F005         	call	_create_task	;wreg free
   426                           
   427                           ;main.c: 20: create_task(4, 3, &task_thre);
   428  000BA4  0E00               	movlw	0
   429  000BA6  6E13               	movwf	create_task@id+1,c
   430  000BA8  0E04               	movlw	4
   431  000BAA  6E12               	movwf	create_task@id,c
   432  000BAC  0E00               	movlw	0
   433  000BAE  6E15               	movwf	create_task@prior+1,c
   434  000BB0  0E03               	movlw	3
   435  000BB2  6E14               	movwf	create_task@prior,c
   436  000BB4  0E8E               	movlw	low _task_thre
   437  000BB6  6E16               	movwf	create_task@task_f,c
   438  000BB8  0E0D               	movlw	high _task_thre
   439  000BBA  6E17               	movwf	create_task@task_f+1,c
   440  000BBC  ECEA  F005         	call	_create_task	;wreg free
   441                           
   442                           ;main.c: 24: start_os();
   443  000BC0  EC05  F007         	call	_start_os	;wreg free
   444                           
   445                           ;main.c: 28: byte *mem = SRAMalloc(100);
   446  000BC4  0E64               	movlw	100
   447  000BC6  EC60  F003         	call	_SRAMalloc
   448  000BCA  C01A  F025         	movff	?_SRAMalloc,main@mem
   449  000BCE  C01B  F026         	movff	?_SRAMalloc+1,main@mem+1
   450  000BD2                     l19:
   451  000BD2  D7FF               	goto	l19
   452  000BD4                     __end_of_main:
   453                           	opt stack 0
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec2	equ	0xFDD
   461                           fsr2h	equ	0xFDA
   462                           fsr2l	equ	0xFD9
   463                           
   464 ;; *************** function _start_os *****************
   465 ;; Defined at:
   466 ;;		line 128 in file "kernel.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		None
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   480 ;;      Params:         0       0       0       0       0       0       0
   481 ;;      Locals:         0       0       0       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0
   483 ;;      Totals:         0       0       0       0       0       0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; Hardware stack levels required when called:    9
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           	psect	text1
   495  000E0A                     __ptext1:
   496                           	opt stack 0
   497  000E0A                     _start_os:
   498                           	opt stack 21
   499                           
   500                           ;kernel.c: 133: T0CONbits.TMR0ON = 1;
   501                           
   502                           ;incstack = 0
   503  000E0A  8ED5               	bsf	4053,7,c	;volatile
   504  000E0C  0012               	return		;funcret
   505  000E0E                     __end_of_start_os:
   506                           	opt stack 0
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec2	equ	0xFDD
   514                           fsr2h	equ	0xFDA
   515                           fsr2l	equ	0xFD9
   516                           
   517 ;; *************** function _setupOS *****************
   518 ;; Defined at:
   519 ;;		line 80 in file "kernel.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   533 ;;      Params:         0       0       0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0       0       0
   535 ;;      Temps:          0       0       0       0       0       0       0
   536 ;;      Totals:         0       0       0       0       0       0       0
   537 ;;Total ram usage:        0 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:   11
   540 ;; This function calls:
   541 ;;		_SRAMInitHeap
   542 ;;		_create_task
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text2
   549  000D58                     __ptext2:
   550                           	opt stack 0
   551  000D58                     _setupOS:
   552                           	opt stack 19
   553                           
   554                           ;kernel.c: 86: T0CONbits.T0CS = 0;
   555                           
   556                           ;incstack = 0
   557  000D58  9AD5               	bcf	4053,5,c	;volatile
   558                           
   559                           ;kernel.c: 87: T0CONbits.PSA = 0;
   560  000D5A  96D5               	bcf	4053,3,c	;volatile
   561                           
   562                           ;kernel.c: 88: T0CONbits.T0PS = 0b111;
   563  000D5C  80D5               	bsf	4053,0,c	;volatile
   564  000D5E  82D5               	bsf	4053,1,c	;volatile
   565  000D60  84D5               	bsf	4053,2,c	;volatile
   566                           
   567                           ;kernel.c: 89: INTCONbits.PEIE = 1;
   568  000D62  8CF2               	bsf	intcon,6,c	;volatile
   569                           
   570                           ;kernel.c: 90: INTCONbits.TMR0IE = 1;
   571  000D64  8AF2               	bsf	intcon,5,c	;volatile
   572                           
   573                           ;kernel.c: 91: TMR0L = 252;
   574  000D66  0EFC               	movlw	252
   575  000D68  6ED6               	movwf	4054,c	;volatile
   576                           
   577                           ;kernel.c: 94: create_task(1,5, &task_idle);
   578  000D6A  0E00               	movlw	0
   579  000D6C  6E13               	movwf	create_task@id+1,c
   580  000D6E  0E01               	movlw	1
   581  000D70  6E12               	movwf	create_task@id,c
   582  000D72  0E00               	movlw	0
   583  000D74  6E15               	movwf	create_task@prior+1,c
   584  000D76  0E05               	movlw	5
   585  000D78  6E14               	movwf	create_task@prior,c
   586  000D7A  0EEA               	movlw	low _task_idle
   587  000D7C  6E16               	movwf	create_task@task_f,c
   588  000D7E  0E0D               	movlw	high _task_idle
   589  000D80  6E17               	movwf	create_task@task_f+1,c
   590  000D82  ECEA  F005         	call	_create_task	;wreg free
   591                           
   592                           ;kernel.c: 98: SRAMInitHeap();
   593  000D86  EC17  F006         	call	_SRAMInitHeap	;wreg free
   594                           
   595                           ;kernel.c: 100: (INTCONbits.GIE = 1);
   596  000D8A  8EF2               	bsf	intcon,7,c	;volatile
   597  000D8C  0012               	return		;funcret
   598  000D8E                     __end_of_setupOS:
   599                           	opt stack 0
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           intcon	equ	0xFF2
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec2	equ	0xFDD
   608                           fsr2h	equ	0xFDA
   609                           fsr2l	equ	0xFD9
   610                           
   611 ;; *************** function _create_task *****************
   612 ;; Defined at:
   613 ;;		line 20 in file "kernel.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  id              2   17[COMRAM] unsigned int 
   616 ;;  prior           2   19[COMRAM] unsigned int 
   617 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   618 ;;		 -> task_idle(1), task_thre(1), task_two(1), task_one(1), 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  task          110    0[BANK0 ] struct tcb
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   630 ;;      Params:         6       0       0       0       0       0       0
   631 ;;      Locals:         0     110       0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0       0       0
   633 ;;      Totals:         6     110       0       0       0       0       0
   634 ;;Total ram usage:      116 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:   10
   637 ;; This function calls:
   638 ;;		___wmul
   639 ;; This function is called by:
   640 ;;		_main
   641 ;;		_setupOS
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text3
   646  000BD4                     __ptext3:
   647                           	opt stack 0
   648  000BD4                     _create_task:
   649                           	opt stack 19
   650                           
   651                           ;kernel.c: 22: tcb_t task;
   652                           ;kernel.c: 24: task.task_id = id;
   653                           
   654                           ;incstack = 0
   655  000BD4  C012  F080         	movff	create_task@id,create_task@task
   656  000BD8  C013  F081         	movff	create_task@id+1,create_task@task+1
   657                           
   658                           ;kernel.c: 25: task.task_prior = prior;
   659  000BDC  C014  F082         	movff	create_task@prior,create_task@task+2
   660  000BE0  C015  F083         	movff	create_task@prior+1,create_task@task+3
   661                           
   662                           ;kernel.c: 26: task.task_f = task_f;
   663  000BE4  C016  F084         	movff	create_task@task_f,create_task@task+4
   664  000BE8  C017  F085         	movff	create_task@task_f+1,create_task@task+5
   665                           
   666                           ;kernel.c: 27: task.task_stack.stack_size = 0;
   667  000BEC  0E00               	movlw	0
   668  000BEE  0100               	movlb	0	; () banked
   669  000BF0  6FEA               	movwf	(create_task@task+106)& (0+255),b
   670  000BF2  0E00               	movlw	0
   671  000BF4  6FE9               	movwf	(create_task@task+105)& (0+255),b
   672                           
   673                           ; BSR set to: 0
   674                           ;kernel.c: 28: task.task_state = READY;
   675  000BF6  0E01               	movlw	1
   676  000BF8  6F88               	movwf	(create_task@task+8)& (0+255),b
   677                           
   678                           ; BSR set to: 0
   679                           ;kernel.c: 30: F_APTOS[tasks_installed] = task;
   680  000BFA  0E6E               	movlw	110
   681  000BFC  6EE6               	movwf	postinc1,c
   682  000BFE  0E00               	movlw	0
   683  000C00  6EE6               	movwf	postinc1,c
   684  000C02  C029  FFE6         	movff	_tasks_installed,postinc1
   685  000C06  C02A  FFE6         	movff	_tasks_installed+1,postinc1
   686  000C0A  ECEF  F004         	call	___wmul	;wreg free
   687  000C0E  0EEE               	movlw	low _F_APTOS
   688  000C10  2449               	addwf	btemp,w,c
   689  000C12  6EE9               	movwf	fsr0l,c
   690  000C14  0E00               	movlw	high _F_APTOS
   691  000C16  204A               	addwfc	btemp+1,w,c
   692  000C18  6EEA               	movwf	fsr0h,c
   693  000C1A  EE20  F080         	lfsr	2,create_task@task
   694  000C1E  0E6D               	movlw	109
   695  000C20                     u421:
   696  000C20  CFDB FFEB          	movff	plusw2,plusw0
   697  000C24  06E8               	decf	wreg,f,c
   698  000C26  E2FC               	bc	u421
   699                           
   700                           ;kernel.c: 31: tasks_installed++;
   701  000C28  4A29               	infsnz	_tasks_installed,f,c
   702  000C2A  2A2A               	incf	_tasks_installed+1,f,c
   703  000C2C  0012               	return		;funcret
   704  000C2E                     __end_of_create_task:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           intcon	equ	0xFF2
   711                           postinc0	equ	0xFEE
   712                           plusw0	equ	0xFEB
   713                           fsr0h	equ	0xFEA
   714                           fsr0l	equ	0xFE9
   715                           wreg	equ	0xFE8
   716                           postinc1	equ	0xFE6
   717                           postdec2	equ	0xFDD
   718                           plusw2	equ	0xFDB
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           
   722 ;; *************** function ___wmul *****************
   723 ;; Defined at:
   724 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  multiplier      2  [STACK] unsigned int 
   727 ;;  multiplicand    2  [STACK] unsigned int 
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  product         2  [STACK] unsigned int 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  2  [STACK] unsigned int 
   732 ;; Registers used:
   733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   739 ;;      Params:         0       0       0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    9
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_create_task
   750 ;;		_dispatcher
   751 ;;		_delay
   752 ;;		_int_high
   753 ;;		_rr_scheduler
   754 ;;		_get_id
   755 ;;		_prior_scheduler
   756 ;;		_sem_post
   757 ;;		_write_pipe
   758 ;;		_read_pipe
   759 ;; This function uses a reentrant model
   760 ;;
   761                           
   762                           	psect	text4
   763  0009DE                     __ptext4:
   764                           	opt stack 0
   765  0009DE                     ___wmul:
   766                           	opt stack 0
   767                           
   768                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   769  0009DE  52E6               	movf	postinc1,f,c
   770  0009E0  52E6               	movf	postinc1,f,c
   771                           
   772                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   773                           
   774                           ;incstack = 0
   775  0009E2  0EFA               	movlw	-6
   776  0009E4  CFE3 F054          	movff	plusw1,btemp+11
   777                           
   778                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   779  0009E8  0EFC               	movlw	-4
   780  0009EA  50E3               	movf	plusw1,w,c
   781  0009EC  0254               	mulwf	btemp+11,c
   782                           
   783                           ;stkvar	___wmul@product @ sp[(-2)+0]
   784  0009EE  0EFE               	movlw	-2
   785  0009F0  CFF3 FFE3          	movff	prodl,plusw1
   786  0009F4  0EFF               	movlw	-1
   787  0009F6  CFF4 FFE3          	movff	prodh,plusw1
   788                           
   789                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   790  0009FA  0EFB               	movlw	251
   791  0009FC  24E1               	addwf	fsr1l,w,c
   792  0009FE  6ED9               	movwf	fsr2l,c
   793  000A00  0EFF               	movlw	255
   794  000A02  20E2               	addwfc	fsr1h,w,c
   795  000A04  6EDA               	movwf	fsr2h,c
   796  000A06  50DF               	movf	indf2,w,c
   797  000A08  6E54               	movwf	btemp+11,c
   798                           
   799                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   800  000A0A  0EFC               	movlw	-4
   801  000A0C  50E3               	movf	plusw1,w,c
   802  000A0E  0254               	mulwf	btemp+11,c
   803  000A10  CFF3 FFF4          	movff	prodl,prodh
   804  000A14  6AF3               	clrf	prodl,c
   805                           
   806                           ;stkvar	___wmul@product @ sp[(-2)+0]
   807  000A16  50E1               	movf	fsr1l,w,c
   808  000A18  0FFE               	addlw	-2
   809  000A1A  6ED9               	movwf	fsr2l,c
   810  000A1C  50E2               	movf	fsr1h,w,c
   811  000A1E  6EDA               	movwf	fsr2h,c
   812  000A20  0EFF               	movlw	255
   813  000A22  22DA               	addwfc	fsr2h,f,c
   814  000A24  50F3               	movf	prodl,w,c
   815  000A26  26DE               	addwf	postinc2,f,c
   816  000A28  50F4               	movf	prodh,w,c
   817  000A2A  22DD               	addwfc	postdec2,f,c
   818                           
   819                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   820  000A2C  0EFA               	movlw	-6
   821  000A2E  CFE3 F054          	movff	plusw1,btemp+11
   822                           
   823                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   824  000A32  0EFD               	movlw	253
   825  000A34  24E1               	addwf	fsr1l,w,c
   826  000A36  6ED9               	movwf	fsr2l,c
   827  000A38  0EFF               	movlw	255
   828  000A3A  20E2               	addwfc	fsr1h,w,c
   829  000A3C  6EDA               	movwf	fsr2h,c
   830  000A3E  50DF               	movf	indf2,w,c
   831  000A40  0254               	mulwf	btemp+11,c
   832  000A42  CFF3 FFF4          	movff	prodl,prodh
   833  000A46  6AF3               	clrf	prodl,c
   834                           
   835                           ;stkvar	___wmul@product @ sp[(-2)+0]
   836  000A48  50E1               	movf	fsr1l,w,c
   837  000A4A  0FFE               	addlw	-2
   838  000A4C  6ED9               	movwf	fsr2l,c
   839  000A4E  50E2               	movf	fsr1h,w,c
   840  000A50  6EDA               	movwf	fsr2h,c
   841  000A52  0EFF               	movlw	255
   842  000A54  22DA               	addwfc	fsr2h,f,c
   843  000A56  50F3               	movf	prodl,w,c
   844  000A58  26DE               	addwf	postinc2,f,c
   845  000A5A  50F4               	movf	prodh,w,c
   846  000A5C  22DD               	addwfc	postdec2,f,c
   847                           
   848                           ;stkvar	___wmul@product @ sp[(-2)+0]
   849  000A5E  0EFE               	movlw	-2
   850  000A60  CFE3 F049          	movff	plusw1,btemp
   851  000A64  0EFF               	movlw	-1
   852  000A66  CFE3 F04A          	movff	plusw1,btemp+1
   853                           
   854                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   855  000A6A  0EFA               	movlw	250
   856  000A6C  26E1               	addwf	fsr1l,f,c
   857  000A6E  0EFF               	movlw	255
   858  000A70  22E2               	addwfc	fsr1h,f,c
   859  000A72  0012               	return		;funcret
   860  000A74                     __end_of___wmul:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodh	equ	0xFF4
   867                           prodl	equ	0xFF3
   868                           intcon	equ	0xFF2
   869                           postinc0	equ	0xFEE
   870                           plusw0	equ	0xFEB
   871                           fsr0h	equ	0xFEA
   872                           fsr0l	equ	0xFE9
   873                           wreg	equ	0xFE8
   874                           postinc1	equ	0xFE6
   875                           plusw1	equ	0xFE3
   876                           fsr1h	equ	0xFE2
   877                           fsr1l	equ	0xFE1
   878                           indf2	equ	0xFDF
   879                           postinc2	equ	0xFDE
   880                           postdec2	equ	0xFDD
   881                           plusw2	equ	0xFDB
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           
   885 ;; *************** function _SRAMInitHeap *****************
   886 ;; Defined at:
   887 ;;		line 303 in file "memory.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  count           2   17[COMRAM] unsigned int 
   892 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   893 ;;		 -> _uDynamicHeap(512), 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   903 ;;      Params:         0       0       0       0       0       0       0
   904 ;;      Locals:         4       0       0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0
   906 ;;      Totals:         4       0       0       0       0       0       0
   907 ;;Total ram usage:        4 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    9
   910 ;; This function calls:
   911 ;;		Nothing
   912 ;; This function is called by:
   913 ;;		_setupOS
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text5
   918  000C2E                     __ptext5:
   919                           	opt stack 0
   920  000C2E                     _SRAMInitHeap:
   921                           	opt stack 20
   922                           
   923                           ;memory.c: 305: unsigned char * near pHeap;
   924                           ;memory.c: 306: near unsigned int count;
   925                           ;memory.c: 308: pHeap = _uDynamicHeap;
   926                           
   927                           ;incstack = 0
   928  000C2E  0E14               	movlw	low __uDynamicHeap
   929  000C30  6E14               	movwf	SRAMInitHeap@pHeap,c
   930  000C32  0E03               	movlw	high __uDynamicHeap
   931  000C34  6E15               	movwf	SRAMInitHeap@pHeap+1,c
   932                           
   933                           ;memory.c: 309: count = 0x200-1;
   934  000C36  0E01               	movlw	1
   935  000C38  6E13               	movwf	SRAMInitHeap@count+1,c
   936  000C3A  6812               	setf	SRAMInitHeap@count,c
   937  000C3C                     
   938                           ;memory.c: 312: {
   939                           ;memory.c: 313: if (count > 0x7F)
   940  000C3C  5013               	movf	SRAMInitHeap@count+1,w,c
   941  000C3E  E104               	bnz	u70
   942  000C40  0E80               	movlw	128
   943  000C42  5C12               	subwf	SRAMInitHeap@count,w,c
   944  000C44  A0D8               	btfss	status,0,c
   945  000C46  D011               	goto	l242
   946  000C48                     u70:
   947                           
   948                           ;memory.c: 314: {
   949                           ;memory.c: 315: *pHeap = 0x7F;
   950  000C48  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   951  000C4C  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   952  000C50  0E7F               	movlw	127
   953  000C52  6EDF               	movwf	indf2,c
   954                           
   955                           ;memory.c: 316: pHeap += 0x7F;
   956  000C54  0E7F               	movlw	127
   957  000C56  2614               	addwf	SRAMInitHeap@pHeap,f,c
   958  000C58  0E00               	movlw	0
   959  000C5A  2215               	addwfc	SRAMInitHeap@pHeap+1,f,c
   960                           
   961                           ;memory.c: 317: count = count - 0x7F;
   962  000C5C  0E81               	movlw	129
   963  000C5E  2412               	addwf	SRAMInitHeap@count,w,c
   964  000C60  6E12               	movwf	SRAMInitHeap@count,c
   965  000C62  0EFF               	movlw	255
   966  000C64  2013               	addwfc	SRAMInitHeap@count+1,w,c
   967  000C66  6E13               	movwf	SRAMInitHeap@count+1,c
   968                           
   969                           ;memory.c: 318: }
   970  000C68  D7E9               	goto	l241
   971  000C6A                     l242:
   972                           
   973                           ;memory.c: 319: else
   974                           ;memory.c: 320: {
   975                           ;memory.c: 321: *pHeap = count;
   976  000C6A  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   977  000C6E  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   978  000C72  C012  FFDF         	movff	SRAMInitHeap@count,indf2
   979                           
   980                           ;memory.c: 322: *(pHeap + count) = 0;
   981  000C76  5012               	movf	SRAMInitHeap@count,w,c
   982  000C78  2414               	addwf	SRAMInitHeap@pHeap,w,c
   983  000C7A  6ED9               	movwf	fsr2l,c
   984  000C7C  5013               	movf	SRAMInitHeap@count+1,w,c
   985  000C7E  2015               	addwfc	SRAMInitHeap@pHeap+1,w,c
   986  000C80  6EDA               	movwf	fsr2h,c
   987  000C82  0E00               	movlw	0
   988  000C84  6EDF               	movwf	indf2,c
   989                           
   990                           ;memory.c: 323: return;
   991  000C86  0012               	return	
   992  000C88                     __end_of_SRAMInitHeap:
   993                           	opt stack 0
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           prodh	equ	0xFF4
   999                           prodl	equ	0xFF3
  1000                           intcon	equ	0xFF2
  1001                           postinc0	equ	0xFEE
  1002                           plusw0	equ	0xFEB
  1003                           fsr0h	equ	0xFEA
  1004                           fsr0l	equ	0xFE9
  1005                           wreg	equ	0xFE8
  1006                           postinc1	equ	0xFE6
  1007                           plusw1	equ	0xFE3
  1008                           fsr1h	equ	0xFE2
  1009                           fsr1l	equ	0xFE1
  1010                           indf2	equ	0xFDF
  1011                           postinc2	equ	0xFDE
  1012                           postdec2	equ	0xFDD
  1013                           plusw2	equ	0xFDB
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _SRAMalloc *****************
  1019 ;; Defined at:
  1020 ;;		line 181 in file "memory.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  nBytes          1    wreg     near unsigned char 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  nBytes          1   33[COMRAM] near unsigned char 
  1025 ;;  pHeap           2   34[COMRAM] near PTR struct _SALLOC
  1026 ;;		 -> _uDynamicHeap(512), 
  1027 ;;  temp            2   31[COMRAM] near PTR struct _SALLOC
  1028 ;;		 -> _uDynamicHeap(512), 
  1029 ;;  segHeader       1   30[COMRAM] struct _SALLOC
  1030 ;;  segLen          1   29[COMRAM] unsigned char 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  2   25[COMRAM] PTR unsigned char 
  1033 ;; Registers used:
  1034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1040 ;;      Params:         2       0       0       0       0       0       0
  1041 ;;      Locals:         7       0       0       0       0       0       0
  1042 ;;      Temps:          2       0       0       0       0       0       0
  1043 ;;      Totals:        11       0       0       0       0       0       0
  1044 ;;Total ram usage:       11 bytes
  1045 ;; Hardware stack levels used:    1
  1046 ;; Hardware stack levels required when called:   10
  1047 ;; This function calls:
  1048 ;;		__SRAMmerge
  1049 ;; This function is called by:
  1050 ;;		_main
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           	psect	text6
  1055  0006C0                     __ptext6:
  1056                           	opt stack 0
  1057  0006C0                     _SRAMalloc:
  1058                           	opt stack 20
  1059                           
  1060                           ;incstack = 0
  1061                           ;SRAMalloc@nBytes stored from wreg
  1062  0006C0  6E22               	movwf	SRAMalloc@nBytes,c
  1063                           
  1064                           ;memory.c: 183: SALLOC * near pHeap;
  1065                           ;memory.c: 184: SALLOC * near temp;
  1066                           ;memory.c: 185: near SALLOC segHeader;
  1067                           ;memory.c: 186: near unsigned char segLen;
  1068                           ;memory.c: 189: if (nBytes > (0x7F - 1)) return (0);
  1069  0006C2  0E7E               	movlw	126
  1070  0006C4  6422               	cpfsgt	SRAMalloc@nBytes,c
  1071  0006C6  D005               	goto	l223
  1072  0006C8  0E00               	movlw	0
  1073  0006CA  6E1A               	movwf	?_SRAMalloc,c
  1074  0006CC  0E00               	movlw	0
  1075  0006CE  6E1B               	movwf	?_SRAMalloc+1,c
  1076  0006D0  0012               	return	
  1077  0006D2                     l223:
  1078                           
  1079                           ;memory.c: 192: pHeap = (SALLOC *)_uDynamicHeap;
  1080  0006D2  0E14               	movlw	low __uDynamicHeap
  1081  0006D4  6E23               	movwf	SRAMalloc@pHeap,c
  1082  0006D6  0E03               	movlw	high __uDynamicHeap
  1083  0006D8  6E24               	movwf	SRAMalloc@pHeap+1,c
  1084  0006DA                     
  1085                           ;memory.c: 195: {
  1086                           ;memory.c: 197: segHeader = *pHeap;
  1087  0006DA  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1088  0006DE  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1089  0006E2  50DF               	movf	indf2,w,c
  1090  0006E4  6E1F               	movwf	SRAMalloc@segHeader,c
  1091                           
  1092                           ;memory.c: 200: segLen = segHeader.bits.count - 1;
  1093  0006E6  501F               	movf	SRAMalloc@segHeader,w,c
  1094  0006E8  0B7F               	andlw	127
  1095  0006EA  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1096  0006EC  041C               	decf	??_SRAMalloc,w,c
  1097  0006EE  6E1E               	movwf	SRAMalloc@segLen,c
  1098                           
  1099                           ;memory.c: 203: if (segHeader.byte == 0) return (0);
  1100  0006F0  501F               	movf	SRAMalloc@segHeader,w,c
  1101  0006F2  A4D8               	btfss	status,2,c
  1102  0006F4  D005               	goto	l226
  1103  0006F6  0E00               	movlw	0
  1104  0006F8  6E1A               	movwf	?_SRAMalloc,c
  1105  0006FA  0E00               	movlw	0
  1106  0006FC  6E1B               	movwf	?_SRAMalloc+1,c
  1107  0006FE  0012               	return	
  1108  000700                     l226:
  1109                           
  1110                           ;memory.c: 206: if (!(segHeader.bits.alloc))
  1111  000700  BE1F               	btfsc	SRAMalloc@segHeader,7,c
  1112  000702  D043               	goto	l227
  1113                           
  1114                           ;memory.c: 207: {
  1115                           ;memory.c: 209: if (nBytes > segLen)
  1116  000704  5022               	movf	SRAMalloc@nBytes,w,c
  1117  000706  5C1E               	subwf	SRAMalloc@segLen,w,c
  1118  000708  B0D8               	btfsc	status,0,c
  1119  00070A  D00A               	goto	l228
  1120                           
  1121                           ;memory.c: 210: {
  1122                           ;memory.c: 212: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  1123  00070C  C023  F012         	movff	SRAMalloc@pHeap,__SRAMmerge@pSegA
  1124  000710  C024  F013         	movff	SRAMalloc@pHeap+1,__SRAMmerge@pSegA+1
  1125  000714  EC9B  F004         	call	__SRAMmerge	;wreg free
  1126  000718  0900               	iorlw	0
  1127  00071A  A4D8               	btfss	status,2,c
  1128  00071C  D7DE               	goto	l225
  1129  00071E  D035               	goto	l227
  1130  000720                     l228:
  1131                           
  1132                           ;memory.c: 214: else
  1133                           ;memory.c: 218: if (nBytes == segLen)
  1134  000720  501E               	movf	SRAMalloc@segLen,w,c
  1135  000722  1822               	xorwf	SRAMalloc@nBytes,w,c
  1136  000724  A4D8               	btfss	status,2,c
  1137  000726  D00C               	goto	l231
  1138                           
  1139                           ;memory.c: 219: {
  1140                           ;memory.c: 221: (*pHeap).bits.alloc = 1;
  1141  000728  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1142  00072C  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1143  000730  8EDF               	bsf	indf2,7,c
  1144                           
  1145                           ;memory.c: 224: return ((unsigned char *)(pHeap + 1));
  1146  000732  0E01               	movlw	1
  1147  000734  2423               	addwf	SRAMalloc@pHeap,w,c
  1148  000736  6E1A               	movwf	?_SRAMalloc,c
  1149  000738  0E00               	movlw	0
  1150  00073A  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1151  00073C  6E1B               	movwf	?_SRAMalloc+1,c
  1152  00073E  0012               	return	
  1153  000740                     l231:
  1154                           
  1155                           ;memory.c: 228: else
  1156                           ;memory.c: 229: {
  1157                           ;memory.c: 231: (*pHeap).byte = nBytes + 0x81;
  1158  000740  5022               	movf	SRAMalloc@nBytes,w,c
  1159  000742  0F81               	addlw	129
  1160  000744  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1161  000748  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1162  00074C  6EDF               	movwf	indf2,c
  1163                           
  1164                           ;memory.c: 234: temp = pHeap + 1;
  1165  00074E  0E01               	movlw	1
  1166  000750  2423               	addwf	SRAMalloc@pHeap,w,c
  1167  000752  6E20               	movwf	SRAMalloc@temp,c
  1168  000754  0E00               	movlw	0
  1169  000756  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1170  000758  6E21               	movwf	SRAMalloc@temp+1,c
  1171                           
  1172                           ;memory.c: 237: pHeap += (nBytes + 1);
  1173  00075A  5022               	movf	SRAMalloc@nBytes,w,c
  1174  00075C  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1175  00075E  6A1D               	clrf	(??_SRAMalloc+1)& (0+255),c
  1176  000760  0E01               	movlw	1
  1177  000762  261C               	addwf	??_SRAMalloc,f,c
  1178  000764  0E00               	movlw	0
  1179  000766  221D               	addwfc	??_SRAMalloc+1,f,c
  1180  000768  501C               	movf	??_SRAMalloc,w,c
  1181  00076A  2623               	addwf	SRAMalloc@pHeap,f,c
  1182  00076C  501D               	movf	??_SRAMalloc+1,w,c
  1183  00076E  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1184                           
  1185                           ;memory.c: 240: (*pHeap).byte = segLen - nBytes;
  1186  000770  5022               	movf	SRAMalloc@nBytes,w,c
  1187  000772  0800               	sublw	0
  1188  000774  241E               	addwf	SRAMalloc@segLen,w,c
  1189  000776  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1190  00077A  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1191  00077E  6EDF               	movwf	indf2,c
  1192                           
  1193                           ;memory.c: 243: return ((unsigned char *) temp);
  1194  000780  C020  F01A         	movff	SRAMalloc@temp,?_SRAMalloc
  1195  000784  C021  F01B         	movff	SRAMalloc@temp+1,?_SRAMalloc+1
  1196  000788  0012               	return	
  1197  00078A                     l227:
  1198                           
  1199                           ;memory.c: 248: else
  1200                           ;memory.c: 249: {
  1201                           ;memory.c: 250: pHeap += segHeader.bits.count;
  1202  00078A  501F               	movf	SRAMalloc@segHeader,w,c
  1203  00078C  0B7F               	andlw	127
  1204  00078E  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1205  000790  501C               	movf	??_SRAMalloc,w,c
  1206  000792  0D01               	mullw	1
  1207  000794  50F3               	movf	prodl,w,c
  1208  000796  2623               	addwf	SRAMalloc@pHeap,f,c
  1209  000798  50F4               	movf	prodh,w,c
  1210  00079A  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1211  00079C  D79E               	goto	l225
  1212  00079E                     __end_of_SRAMalloc:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           prodh	equ	0xFF4
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           postinc0	equ	0xFEE
  1222                           plusw0	equ	0xFEB
  1223                           fsr0h	equ	0xFEA
  1224                           fsr0l	equ	0xFE9
  1225                           wreg	equ	0xFE8
  1226                           postinc1	equ	0xFE6
  1227                           plusw1	equ	0xFE3
  1228                           fsr1h	equ	0xFE2
  1229                           fsr1l	equ	0xFE1
  1230                           indf2	equ	0xFDF
  1231                           postinc2	equ	0xFDE
  1232                           postdec2	equ	0xFDD
  1233                           plusw2	equ	0xFDB
  1234                           fsr2h	equ	0xFDA
  1235                           fsr2l	equ	0xFD9
  1236                           status	equ	0xFD8
  1237                           
  1238 ;; *************** function __SRAMmerge *****************
  1239 ;; Defined at:
  1240 ;;		line 349 in file "memory.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  pSegA           2   17[COMRAM] near PTR struct _SALLOC
  1243 ;;		 -> _uDynamicHeap(512), 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  pSegB           2   23[COMRAM] near PTR struct _SALLOC
  1246 ;;		 -> _uDynamicHeap(512), 
  1247 ;;  uSegB           1   22[COMRAM] struct _SALLOC
  1248 ;;  uSegA           1   21[COMRAM] struct _SALLOC
  1249 ;;  uSum            1   20[COMRAM] struct _SALLOC
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      unsigned char 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1259 ;;      Params:         2       0       0       0       0       0       0
  1260 ;;      Locals:         5       0       0       0       0       0       0
  1261 ;;      Temps:          1       0       0       0       0       0       0
  1262 ;;      Totals:         8       0       0       0       0       0       0
  1263 ;;Total ram usage:        8 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    9
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_SRAMalloc
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text7
  1274  000936                     __ptext7:
  1275                           	opt stack 0
  1276  000936                     __SRAMmerge:
  1277                           	opt stack 20
  1278                           
  1279                           ;memory.c: 351: SALLOC * near pSegB;
  1280                           ;memory.c: 352: near SALLOC uSegA, uSegB, uSum;
  1281                           ;memory.c: 356: pSegB = pSegA + (*pSegA).byte;
  1282                           
  1283                           ;incstack = 0
  1284  000936  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1285  00093A  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1286  00093E  50DF               	movf	indf2,w,c
  1287  000940  6E14               	movwf	??__SRAMmerge& (0+255),c
  1288  000942  5014               	movf	??__SRAMmerge,w,c
  1289  000944  0D01               	mullw	1
  1290  000946  50F3               	movf	prodl,w,c
  1291  000948  2412               	addwf	__SRAMmerge@pSegA,w,c
  1292  00094A  6E18               	movwf	__SRAMmerge@pSegB,c
  1293  00094C  50F4               	movf	prodh,w,c
  1294  00094E  2013               	addwfc	__SRAMmerge@pSegA+1,w,c
  1295  000950  6E19               	movwf	__SRAMmerge@pSegB+1,c
  1296                           
  1297                           ;memory.c: 359: uSegA = *pSegA;
  1298  000952  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1299  000956  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1300  00095A  50DF               	movf	indf2,w,c
  1301  00095C  6E16               	movwf	__SRAMmerge@uSegA,c
  1302                           
  1303                           ;memory.c: 360: uSegB = *pSegB;
  1304  00095E  C018  FFD9         	movff	__SRAMmerge@pSegB,fsr2l
  1305  000962  C019  FFDA         	movff	__SRAMmerge@pSegB+1,fsr2h
  1306  000966  50DF               	movf	indf2,w,c
  1307  000968  6E17               	movwf	__SRAMmerge@uSegB,c
  1308                           
  1309                           ;memory.c: 363: if (uSegB.byte == 0) return (0);
  1310  00096A  5017               	movf	__SRAMmerge@uSegB,w,c
  1311  00096C  A4D8               	btfss	status,2,c
  1312  00096E  D002               	goto	l249
  1313  000970  0E00               	movlw	0
  1314  000972  0012               	return	
  1315  000974                     l249:
  1316                           
  1317                           ;memory.c: 366: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  1318  000974  BE16               	btfsc	__SRAMmerge@uSegA,7,c
  1319  000976  D002               	goto	u460
  1320  000978  AE17               	btfss	__SRAMmerge@uSegB,7,c
  1321  00097A  D002               	goto	l251
  1322  00097C                     u460:
  1323  00097C  0E00               	movlw	0
  1324  00097E  0012               	return	
  1325  000980                     l251:
  1326                           
  1327                           ;memory.c: 369: if (uSegA.bits.count == 0x7F) return (0);
  1328  000980  5016               	movf	__SRAMmerge@uSegA,w,c
  1329  000982  0B7F               	andlw	127
  1330  000984  0A7F               	xorlw	127
  1331  000986  A4D8               	btfss	status,2,c
  1332  000988  D002               	goto	l254
  1333  00098A  0E00               	movlw	0
  1334  00098C  0012               	return	
  1335  00098E                     l254:
  1336                           
  1337                           ;memory.c: 372: uSum.byte = uSegA.byte + uSegB.byte;
  1338  00098E  5016               	movf	__SRAMmerge@uSegA,w,c
  1339  000990  2417               	addwf	__SRAMmerge@uSegB,w,c
  1340  000992  6E15               	movwf	__SRAMmerge@uSum,c
  1341                           
  1342                           ;memory.c: 378: if ((uSum.byte) > 0x7F)
  1343  000994  0E7F               	movlw	127
  1344  000996  6415               	cpfsgt	__SRAMmerge@uSum,c
  1345  000998  D01A               	goto	l255
  1346                           
  1347                           ;memory.c: 379: {
  1348                           ;memory.c: 380: (*pSegA).byte = 0x7F;
  1349  00099A  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1350  00099E  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1351  0009A2  0E7F               	movlw	127
  1352  0009A4  6EDF               	movwf	indf2,c
  1353                           
  1354                           ;memory.c: 381: pSegA += 0x7F;
  1355  0009A6  0E7F               	movlw	127
  1356  0009A8  2612               	addwf	__SRAMmerge@pSegA,f,c
  1357  0009AA  0E00               	movlw	0
  1358  0009AC  2213               	addwfc	__SRAMmerge@pSegA+1,f,c
  1359                           
  1360                           ;memory.c: 382: pSegB += uSegB.byte;
  1361  0009AE  5017               	movf	__SRAMmerge@uSegB,w,c
  1362  0009B0  0D01               	mullw	1
  1363  0009B2  50F3               	movf	prodl,w,c
  1364  0009B4  2618               	addwf	__SRAMmerge@pSegB,f,c
  1365  0009B6  50F4               	movf	prodh,w,c
  1366  0009B8  2219               	addwfc	__SRAMmerge@pSegB+1,f,c
  1367                           
  1368                           ;memory.c: 383: (*pSegA).byte = pSegB - pSegA;
  1369  0009BA  5012               	movf	__SRAMmerge@pSegA,w,c
  1370  0009BC  0800               	sublw	0
  1371  0009BE  2418               	addwf	__SRAMmerge@pSegB,w,c
  1372  0009C0  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1373  0009C4  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1374  0009C8  6EDF               	movwf	indf2,c
  1375                           
  1376                           ;memory.c: 385: return (0x7F);
  1377  0009CA  0E7F               	movlw	127
  1378                           
  1379                           ;memory.c: 386: }
  1380  0009CC  0012               	return	
  1381  0009CE                     l255:
  1382                           
  1383                           ;memory.c: 389: else
  1384                           ;memory.c: 390: {
  1385                           ;memory.c: 391: return ((*pSegA).byte = uSum.byte);
  1386  0009CE  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1387  0009D2  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1388  0009D6  C015  FFDF         	movff	__SRAMmerge@uSum,indf2
  1389  0009DA  50DF               	movf	indf2,w,c
  1390  0009DC  0012               	return	
  1391  0009DE                     __end_of__SRAMmerge:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           plusw0	equ	0xFEB
  1402                           fsr0h	equ	0xFEA
  1403                           fsr0l	equ	0xFE9
  1404                           wreg	equ	0xFE8
  1405                           postinc1	equ	0xFE6
  1406                           plusw1	equ	0xFE3
  1407                           fsr1h	equ	0xFE2
  1408                           fsr1l	equ	0xFE1
  1409                           indf2	equ	0xFDF
  1410                           postinc2	equ	0xFDE
  1411                           postdec2	equ	0xFDD
  1412                           plusw2	equ	0xFDB
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _task_one *****************
  1418 ;; Defined at:
  1419 ;;		line 15 in file "tasks.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1  [STACK] void 
  1426 ;; Registers used:
  1427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1433 ;;      Params:         0       0       0       0       0       0       0
  1434 ;;      Locals:         0       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0
  1436 ;;      Totals:         0       0       0       0       0       0       0
  1437 ;;Total ram usage:        0 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    8
  1440 ;; This function calls:
  1441 ;;		_delay
  1442 ;;		_sem_init
  1443 ;;		_sem_wait
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text8
  1450  000C88                     __ptext8:
  1451                           	opt stack 0
  1452  000C88                     _task_one:
  1453                           	opt stack 19
  1454                           
  1455                           ;tasks.c: 17: TRISDbits.RD0 = 0;
  1456                           
  1457                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1458                           ;incstack = 0
  1459  000C88  9095               	bcf	3989,0,c	;volatile
  1460                           
  1461                           ;tasks.c: 18: PORTDbits.RD0 = 0;
  1462  000C8A  9083               	bcf	3971,0,c	;volatile
  1463                           
  1464                           ;tasks.c: 20: sem_init(&s, 1);
  1465  000C8C  0E01               	movlw	1
  1466  000C8E  6EE6               	movwf	postinc1,c
  1467  000C90  0E00               	movlw	0
  1468  000C92  6EE6               	movwf	postinc1,c
  1469  000C94  0E2B               	movlw	low _s
  1470  000C96  6EE6               	movwf	postinc1,c
  1471  000C98  0E00               	movlw	high _s
  1472  000C9A  6EE6               	movwf	postinc1,c
  1473  000C9C  EC7C  F005         	call	_sem_init	;wreg free
  1474  000CA0                     l1508:
  1475                           
  1476                           ;tasks.c: 23: sem_wait(&s);
  1477  000CA0  0E2B               	movlw	low _s
  1478  000CA2  6EE6               	movwf	postinc1,c
  1479  000CA4  0E00               	movlw	high _s
  1480  000CA6  6EE6               	movwf	postinc1,c
  1481  000CA8  ECCF  F003         	call	_sem_wait	;wreg free
  1482                           
  1483                           ;tasks.c: 24: PORTDbits.RD0 = ~PORTDbits.RD0;
  1484  000CAC  A083               	btfss	3971,0,c	;volatile
  1485  000CAE  D002               	goto	u64_20
  1486  000CB0  0E01               	movlw	1
  1487  000CB2  D001               	goto	u64_26
  1488  000CB4                     u64_20:
  1489  000CB4  0E00               	movlw	0
  1490  000CB6                     u64_26:
  1491  000CB6  0AFF               	xorlw	255
  1492  000CB8  6E54               	movwf	btemp+11,c
  1493  000CBA  5083               	movf	3971,w,c	;volatile
  1494  000CBC  1854               	xorwf	btemp+11,w,c
  1495  000CBE  0BFE               	andlw	-2
  1496  000CC0  1854               	xorwf	btemp+11,w,c
  1497  000CC2  6E83               	movwf	3971,c	;volatile
  1498                           
  1499                           ;tasks.c: 26: delay(100);
  1500  000CC4  0E64               	movlw	100
  1501  000CC6  6EE6               	movwf	postinc1,c
  1502  000CC8  0E00               	movlw	0
  1503  000CCA  6EE6               	movwf	postinc1,c
  1504  000CCC  EC69  F006         	call	_delay	;wreg free
  1505  000CD0  D7E7               	goto	l1508
  1506  000CD2                     __end_of_task_one:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           prodh	equ	0xFF4
  1513                           prodl	equ	0xFF3
  1514                           intcon	equ	0xFF2
  1515                           postinc0	equ	0xFEE
  1516                           plusw0	equ	0xFEB
  1517                           fsr0h	equ	0xFEA
  1518                           fsr0l	equ	0xFE9
  1519                           wreg	equ	0xFE8
  1520                           postinc1	equ	0xFE6
  1521                           plusw1	equ	0xFE3
  1522                           fsr1h	equ	0xFE2
  1523                           fsr1l	equ	0xFE1
  1524                           indf2	equ	0xFDF
  1525                           postinc2	equ	0xFDE
  1526                           postdec2	equ	0xFDD
  1527                           plusw2	equ	0xFDB
  1528                           fsr2h	equ	0xFDA
  1529                           fsr2l	equ	0xFD9
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _sem_wait *****************
  1533 ;; Defined at:
  1534 ;;		line 17 in file "semaphore.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  s               2  [STACK] PTR struct sem
  1537 ;;		 -> s(16), 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1  [STACK] void 
  1542 ;; Registers used:
  1543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    7
  1556 ;; This function calls:
  1557 ;;		___lwmod
  1558 ;;		_dispatcher
  1559 ;; This function is called by:
  1560 ;;		_task_one
  1561 ;; This function uses a reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text9
  1565  00079E                     __ptext9:
  1566                           	opt stack 0
  1567  00079E                     _sem_wait:
  1568                           	opt stack 19
  1569                           
  1570                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  1571                           
  1572                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1573                           ;incstack = 0
  1574  00079E  9EF2               	bcf	intcon,7,c	;volatile
  1575                           
  1576                           ;semaphore.c: 22: s->contador--;
  1577                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1578  0007A0  0EFE               	movlw	-2
  1579  0007A2  CFE3 FFD9          	movff	plusw1,fsr2l
  1580  0007A6  0EFF               	movlw	-1
  1581  0007A8  CFE3 FFDA          	movff	plusw1,fsr2h
  1582  0007AC  06DE               	decf	postinc2,f,c
  1583  0007AE  0E00               	movlw	0
  1584  0007B0  5ADD               	subwfb	postdec2,f,c
  1585                           
  1586                           ;semaphore.c: 23: if (s->contador < 0) {
  1587                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1588  0007B2  0EFE               	movlw	-2
  1589  0007B4  CFE3 FFD9          	movff	plusw1,fsr2l
  1590  0007B8  0EFF               	movlw	-1
  1591  0007BA  CFE3 FFDA          	movff	plusw1,fsr2h
  1592  0007BE  0E01               	movlw	1
  1593  0007C0  AEDB               	btfss	plusw2,7,c
  1594  0007C2  D057               	goto	l1468
  1595                           
  1596                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  1597                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1598  0007C4  0EFE               	movlw	-2
  1599  0007C6  CFE3 F04A          	movff	plusw1,btemp+1
  1600  0007CA  0EFF               	movlw	-1
  1601  0007CC  CFE3 F04B          	movff	plusw1,btemp+2
  1602  0007D0  0E0C               	movlw	12
  1603  0007D2  244A               	addwf	btemp+1,w,c
  1604  0007D4  6ED9               	movwf	fsr2l,c
  1605  0007D6  0E00               	movlw	0
  1606  0007D8  204B               	addwfc	btemp+2,w,c
  1607  0007DA  6EDA               	movwf	fsr2h,c
  1608  0007DC  CFDE F053          	movff	postinc2,btemp+10
  1609  0007E0  CFDD F054          	movff	postdec2,btemp+11
  1610  0007E4  90D8               	bcf	status,0,c
  1611  0007E6  3453               	rlcf	btemp+10,w,c
  1612  0007E8  6E4A               	movwf	btemp+1,c
  1613  0007EA  3454               	rlcf	btemp+11,w,c
  1614  0007EC  6E4B               	movwf	btemp+2,c
  1615                           
  1616                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1617  0007EE  0EFE               	movlw	-2
  1618  0007F0  50E3               	movf	plusw1,w,c
  1619  0007F2  264A               	addwf	btemp+1,f,c
  1620  0007F4  0EFF               	movlw	-1
  1621  0007F6  50E3               	movf	plusw1,w,c
  1622  0007F8  224B               	addwfc	btemp+2,f,c
  1623  0007FA  0E02               	movlw	2
  1624  0007FC  244A               	addwf	btemp+1,w,c
  1625  0007FE  6ED9               	movwf	fsr2l,c
  1626  000800  0E00               	movlw	0
  1627  000802  204B               	addwfc	btemp+2,w,c
  1628  000804  6EDA               	movwf	fsr2h,c
  1629  000806  C027  FFDE         	movff	_task_running,postinc2
  1630  00080A  C028  FFDD         	movff	_task_running+1,postdec2
  1631                           
  1632                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 5;
  1633  00080E  0E05               	movlw	5
  1634  000810  6EE6               	movwf	postinc1,c
  1635  000812  0E00               	movlw	0
  1636  000814  6EE6               	movwf	postinc1,c
  1637                           
  1638                           ;stkvar	sem_wait@s @ sp[(-2)+-2]
  1639  000816  0EFC               	movlw	-4
  1640  000818  CFE3 F04A          	movff	plusw1,btemp+1
  1641  00081C  0EFD               	movlw	-3
  1642  00081E  CFE3 F04B          	movff	plusw1,btemp+2
  1643  000822  0E0C               	movlw	12
  1644  000824  244A               	addwf	btemp+1,w,c
  1645  000826  6ED9               	movwf	fsr2l,c
  1646  000828  0E00               	movlw	0
  1647  00082A  204B               	addwfc	btemp+2,w,c
  1648  00082C  6EDA               	movwf	fsr2h,c
  1649  00082E  CFDE F04A          	movff	postinc2,btemp+1
  1650  000832  CFDD F04B          	movff	postdec2,btemp+2
  1651  000836  0E01               	movlw	1
  1652  000838  264A               	addwf	btemp+1,f,c
  1653  00083A  0E00               	movlw	0
  1654  00083C  224B               	addwfc	btemp+2,f,c
  1655  00083E  C04A  FFE6         	movff	btemp+1,postinc1
  1656  000842  C04B  FFE6         	movff	btemp+2,postinc1
  1657  000846  EC3D  F004         	call	___lwmod	;wreg free
  1658                           
  1659                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  1660  00084A  0EFE               	movlw	-2
  1661  00084C  CFE3 F053          	movff	plusw1,btemp+10
  1662  000850  0EFF               	movlw	-1
  1663  000852  CFE3 F054          	movff	plusw1,btemp+11
  1664  000856  0E0C               	movlw	12
  1665  000858  2453               	addwf	btemp+10,w,c
  1666  00085A  6ED9               	movwf	fsr2l,c
  1667  00085C  0E00               	movlw	0
  1668  00085E  2054               	addwfc	btemp+11,w,c
  1669  000860  6EDA               	movwf	fsr2h,c
  1670  000862  C049  FFDE         	movff	btemp,postinc2
  1671  000866  C04A  FFDD         	movff	btemp+1,postdec2
  1672                           
  1673                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  1674  00086A  0E05               	movlw	5
  1675  00086C  6EE6               	movwf	postinc1,c
  1676  00086E  EC0A  F000         	call	_dispatcher	;wreg free
  1677  000872                     l1468:
  1678                           
  1679                           ;semaphore.c: 27: }
  1680                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  1681  000872  8EF2               	bsf	intcon,7,c	;volatile
  1682                           
  1683                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  1684  000874  52E5               	movf	postdec1,f,c
  1685  000876  52E5               	movf	postdec1,f,c
  1686  000878  0012               	return		;funcret
  1687  00087A                     __end_of_sem_wait:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           prodh	equ	0xFF4
  1694                           prodl	equ	0xFF3
  1695                           intcon	equ	0xFF2
  1696                           postinc0	equ	0xFEE
  1697                           plusw0	equ	0xFEB
  1698                           fsr0h	equ	0xFEA
  1699                           fsr0l	equ	0xFE9
  1700                           wreg	equ	0xFE8
  1701                           postinc1	equ	0xFE6
  1702                           postdec1	equ	0xFE5
  1703                           plusw1	equ	0xFE3
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           indf2	equ	0xFDF
  1707                           postinc2	equ	0xFDE
  1708                           postdec2	equ	0xFDD
  1709                           plusw2	equ	0xFDB
  1710                           fsr2h	equ	0xFDA
  1711                           fsr2l	equ	0xFD9
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _sem_init *****************
  1715 ;; Defined at:
  1716 ;;		line 6 in file "semaphore.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;  s               2  [STACK] PTR struct sem
  1719 ;;		 -> s(16), 
  1720 ;;  value           2  [STACK] int 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1  [STACK] void 
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1732 ;;      Params:         0       0       0       0       0       0       0
  1733 ;;      Locals:         0       0       0       0       0       0       0
  1734 ;;      Temps:          0       0       0       0       0       0       0
  1735 ;;      Totals:         0       0       0       0       0       0       0
  1736 ;;Total ram usage:        0 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    4
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_task_one
  1743 ;; This function uses a reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text10
  1747  000AF8                     __ptext10:
  1748                           	opt stack 0
  1749  000AF8                     _sem_init:
  1750                           	opt stack 22
  1751                           
  1752                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1753                           
  1754                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  1755                           ;incstack = 0
  1756  000AF8  9EF2               	bcf	intcon,7,c	;volatile
  1757                           
  1758                           ;semaphore.c: 10: s->contador = value;
  1759                           ;stkvar	sem_init@value @ sp[(0)+-4]
  1760  000AFA  50E1               	movf	fsr1l,w,c
  1761  000AFC  0FFC               	addlw	-4
  1762  000AFE  6ED9               	movwf	fsr2l,c
  1763  000B00  50E2               	movf	fsr1h,w,c
  1764  000B02  6EDA               	movwf	fsr2h,c
  1765  000B04  0EFF               	movlw	255
  1766  000B06  22DA               	addwfc	fsr2h,f,c
  1767                           
  1768                           ;stkvar	sem_init@s @ sp[(0)+-2]
  1769  000B08  0EFE               	movlw	-2
  1770  000B0A  CFE3 FFE9          	movff	plusw1,fsr0l
  1771  000B0E  0EFF               	movlw	-1
  1772  000B10  CFE3 FFEA          	movff	plusw1,fsr0h
  1773  000B14  CFDE FFEE          	movff	postinc2,postinc0
  1774  000B18  CFDD FFED          	movff	postdec2,postdec0
  1775                           
  1776                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1777                           ;stkvar	sem_init@s @ sp[(0)+-2]
  1778  000B1C  0EFE               	movlw	-2
  1779  000B1E  CFE3 F04A          	movff	plusw1,btemp+1
  1780  000B22  0EFF               	movlw	-1
  1781  000B24  CFE3 F04B          	movff	plusw1,btemp+2
  1782  000B28  0E0C               	movlw	12
  1783  000B2A  244A               	addwf	btemp+1,w,c
  1784  000B2C  6ED9               	movwf	fsr2l,c
  1785  000B2E  0E00               	movlw	0
  1786  000B30  204B               	addwfc	btemp+2,w,c
  1787  000B32  6EDA               	movwf	fsr2h,c
  1788  000B34  0E00               	movlw	0
  1789  000B36  6EDE               	movwf	postinc2,c
  1790  000B38  0E00               	movlw	0
  1791  000B3A  6EDD               	movwf	postdec2,c
  1792                           
  1793                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1794                           ;stkvar	sem_init@s @ sp[(0)+-2]
  1795  000B3C  0EFE               	movlw	-2
  1796  000B3E  CFE3 F04A          	movff	plusw1,btemp+1
  1797  000B42  0EFF               	movlw	-1
  1798  000B44  CFE3 F04B          	movff	plusw1,btemp+2
  1799  000B48  0E0E               	movlw	14
  1800  000B4A  244A               	addwf	btemp+1,w,c
  1801  000B4C  6ED9               	movwf	fsr2l,c
  1802  000B4E  0E00               	movlw	0
  1803  000B50  204B               	addwfc	btemp+2,w,c
  1804  000B52  6EDA               	movwf	fsr2h,c
  1805  000B54  0E00               	movlw	0
  1806  000B56  6EDE               	movwf	postinc2,c
  1807  000B58  0E00               	movlw	0
  1808  000B5A  6EDD               	movwf	postdec2,c
  1809                           
  1810                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1811  000B5C  8EF2               	bsf	intcon,7,c	;volatile
  1812                           
  1813                           ; _sem_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, args
      +                          ize = 4, vargsize = 0
  1814  000B5E  52E5               	movf	postdec1,f,c
  1815  000B60  52E5               	movf	postdec1,f,c
  1816  000B62  52E5               	movf	postdec1,f,c
  1817  000B64  52E5               	movf	postdec1,f,c
  1818  000B66  0012               	return		;funcret
  1819  000B68                     __end_of_sem_init:
  1820                           	opt stack 0
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           postinc0	equ	0xFEE
  1829                           postdec0	equ	0xFED
  1830                           plusw0	equ	0xFEB
  1831                           fsr0h	equ	0xFEA
  1832                           fsr0l	equ	0xFE9
  1833                           wreg	equ	0xFE8
  1834                           postinc1	equ	0xFE6
  1835                           postdec1	equ	0xFE5
  1836                           plusw1	equ	0xFE3
  1837                           fsr1h	equ	0xFE2
  1838                           fsr1l	equ	0xFE1
  1839                           indf2	equ	0xFDF
  1840                           postinc2	equ	0xFDE
  1841                           postdec2	equ	0xFDD
  1842                           plusw2	equ	0xFDB
  1843                           fsr2h	equ	0xFDA
  1844                           fsr2l	equ	0xFD9
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _delay *****************
  1848 ;; Defined at:
  1849 ;;		line 59 in file "kernel.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  time_ms         2  [STACK] unsigned int 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1  [STACK] void 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1863 ;;      Params:         0       0       0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    7
  1870 ;; This function calls:
  1871 ;;		___wmul
  1872 ;;		_dispatcher
  1873 ;; This function is called by:
  1874 ;;		_task_one
  1875 ;;		_task_two
  1876 ;;		_task_thre
  1877 ;;		_task_one_pipe
  1878 ;;		_task_one_read
  1879 ;; This function uses a reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text11
  1883  000CD2                     __ptext11:
  1884                           	opt stack 0
  1885  000CD2                     _delay:
  1886                           	opt stack 19
  1887                           
  1888                           ;kernel.c: 61: (INTCONbits.GIE = 0);
  1889                           
  1890                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1891                           ;incstack = 0
  1892  000CD2  9EF2               	bcf	intcon,7,c	;volatile
  1893                           
  1894                           ;kernel.c: 63: F_APTOS[task_running].delay_time = time_ms;
  1895  000CD4  0E6E               	movlw	110
  1896  000CD6  6EE6               	movwf	postinc1,c
  1897  000CD8  0E00               	movlw	0
  1898  000CDA  6EE6               	movwf	postinc1,c
  1899  000CDC  C027  FFE6         	movff	_task_running,postinc1
  1900  000CE0  C028  FFE6         	movff	_task_running+1,postinc1
  1901  000CE4  ECEF  F004         	call	___wmul	;wreg free
  1902  000CE8  0EF4               	movlw	low (_F_APTOS+6)
  1903  000CEA  2449               	addwf	btemp,w,c
  1904  000CEC  6EE9               	movwf	fsr0l,c
  1905  000CEE  0E00               	movlw	high (_F_APTOS+6)
  1906  000CF0  204A               	addwfc	btemp+1,w,c
  1907  000CF2  6EEA               	movwf	fsr0h,c
  1908                           
  1909                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  1910  000CF4  50E1               	movf	fsr1l,w,c
  1911  000CF6  0FFE               	addlw	-2
  1912  000CF8  6ED9               	movwf	fsr2l,c
  1913  000CFA  50E2               	movf	fsr1h,w,c
  1914  000CFC  6EDA               	movwf	fsr2h,c
  1915  000CFE  0EFF               	movlw	255
  1916  000D00  22DA               	addwfc	fsr2h,f,c
  1917  000D02  CFDE FFEE          	movff	postinc2,postinc0
  1918  000D06  CFDD FFED          	movff	postdec2,postdec0
  1919                           
  1920                           ;kernel.c: 64: dispatcher(SLEEPING);
  1921  000D0A  0E03               	movlw	3
  1922  000D0C  6EE6               	movwf	postinc1,c
  1923  000D0E  EC0A  F000         	call	_dispatcher	;wreg free
  1924                           
  1925                           ;kernel.c: 66: (INTCONbits.GIE = 1);
  1926  000D12  8EF2               	bsf	intcon,7,c	;volatile
  1927                           
  1928                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  1929  000D14  52E5               	movf	postdec1,f,c
  1930  000D16  52E5               	movf	postdec1,f,c
  1931  000D18  0012               	return		;funcret
  1932  000D1A                     __end_of_delay:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           postdec0	equ	0xFED
  1943                           plusw0	equ	0xFEB
  1944                           fsr0h	equ	0xFEA
  1945                           fsr0l	equ	0xFE9
  1946                           wreg	equ	0xFE8
  1947                           postinc1	equ	0xFE6
  1948                           postdec1	equ	0xFE5
  1949                           plusw1	equ	0xFE3
  1950                           fsr1h	equ	0xFE2
  1951                           fsr1l	equ	0xFE1
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           plusw2	equ	0xFDB
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _dispatcher *****************
  1961 ;; Defined at:
  1962 ;;		line 34 in file "kernel.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  state           1  [STACK] enum E3007
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1  [STACK] void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1976 ;;      Params:         0       0       0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    6
  1983 ;; This function calls:
  1984 ;;		___wmul
  1985 ;;		_rr_scheduler
  1986 ;; This function is called by:
  1987 ;;		_delay
  1988 ;;		_int_high
  1989 ;;		_sem_wait
  1990 ;;		_sem_post
  1991 ;;		_write_pipe
  1992 ;;		_read_pipe
  1993 ;; This function uses a reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text12
  1997  000014                     __ptext12:
  1998                           	opt stack 0
  1999  000014                     _dispatcher:
  2000                           	opt stack 15
  2001                           
  2002                           ;kernel.c: 36: (INTCONbits.GIE = 0);
  2003                           
  2004                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  2005                           ;incstack = 0
  2006  000014  9EF2               	bcf	intcon,7,c	;volatile
  2007                           
  2008                           ;kernel.c: 39: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  2009                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  2010  000016  0E6E               	movlw	110
  2011  000018  6EE6               	movwf	postinc1,c
  2012  00001A  0E00               	movlw	0
  2013  00001C  6EE6               	movwf	postinc1,c
  2014  00001E  C027  FFE6         	movff	_task_running,postinc1
  2015  000022  C028  FFE6         	movff	_task_running+1,postinc1
  2016  000026  ECEF  F004         	call	___wmul	;wreg free
  2017  00002A  0EF6               	movlw	low (_F_APTOS+8)
  2018  00002C  2449               	addwf	btemp,w,c
  2019  00002E  6ED9               	movwf	fsr2l,c
  2020  000030  0E00               	movlw	high (_F_APTOS+8)
  2021  000032  204A               	addwfc	btemp+1,w,c
  2022  000034  6EDA               	movwf	fsr2h,c
  2023  000036  0EFF               	movlw	-1
  2024  000038  CFE3 FFDF          	movff	plusw1,indf2
  2025  00003C  0E6E               	movlw	110
  2026  00003E  6EE6               	movwf	postinc1,c
  2027  000040  0E00               	movlw	0
  2028  000042  6EE6               	movwf	postinc1,c
  2029  000044  C027  FFE6         	movff	_task_running,postinc1
  2030  000048  C028  FFE6         	movff	_task_running+1,postinc1
  2031  00004C  ECEF  F004         	call	___wmul	;wreg free
  2032  000050  0E59               	movlw	low (_F_APTOS+107)
  2033  000052  2449               	addwf	btemp,w,c
  2034  000054  6ED9               	movwf	fsr2l,c
  2035  000056  0E01               	movlw	high (_F_APTOS+107)
  2036  000058  204A               	addwfc	btemp+1,w,c
  2037  00005A  6EDA               	movwf	fsr2h,c
  2038  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  2039  000060  0E6E               	movlw	110
  2040  000062  6EE6               	movwf	postinc1,c
  2041  000064  0E00               	movlw	0
  2042  000066  6EE6               	movwf	postinc1,c
  2043  000068  C027  FFE6         	movff	_task_running,postinc1
  2044  00006C  C028  FFE6         	movff	_task_running+1,postinc1
  2045  000070  ECEF  F004         	call	___wmul	;wreg free
  2046  000074  0E5A               	movlw	low (_F_APTOS+108)
  2047  000076  2449               	addwf	btemp,w,c
  2048  000078  6ED9               	movwf	fsr2l,c
  2049  00007A  0E01               	movlw	high (_F_APTOS+108)
  2050  00007C  204A               	addwfc	btemp+1,w,c
  2051  00007E  6EDA               	movwf	fsr2h,c
  2052  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  2053  000084  0E6E               	movlw	110
  2054  000086  6EE6               	movwf	postinc1,c
  2055  000088  0E00               	movlw	0
  2056  00008A  6EE6               	movwf	postinc1,c
  2057  00008C  C027  FFE6         	movff	_task_running,postinc1
  2058  000090  C028  FFE6         	movff	_task_running+1,postinc1
  2059  000094  ECEF  F004         	call	___wmul	;wreg free
  2060  000098  0E5B               	movlw	low (_F_APTOS+109)
  2061  00009A  2449               	addwf	btemp,w,c
  2062  00009C  6ED9               	movwf	fsr2l,c
  2063  00009E  0E01               	movlw	high (_F_APTOS+109)
  2064  0000A0  204A               	addwfc	btemp+1,w,c
  2065  0000A2  6EDA               	movwf	fsr2h,c
  2066  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  2067  0000A8  0E6E               	movlw	110
  2068  0000AA  6EE6               	movwf	postinc1,c
  2069  0000AC  0E00               	movlw	0
  2070  0000AE  6EE6               	movwf	postinc1,c
  2071  0000B0  C027  FFE6         	movff	_task_running,postinc1
  2072  0000B4  C028  FFE6         	movff	_task_running+1,postinc1
  2073  0000B8  ECEF  F004         	call	___wmul	;wreg free
  2074  0000BC  0E57               	movlw	low (_F_APTOS+105)
  2075  0000BE  2449               	addwf	btemp,w,c
  2076  0000C0  6ED9               	movwf	fsr2l,c
  2077  0000C2  0E01               	movlw	high (_F_APTOS+105)
  2078  0000C4  204A               	addwfc	btemp+1,w,c
  2079  0000C6  6EDA               	movwf	fsr2h,c
  2080  0000C8  0E00               	movlw	0
  2081  0000CA  6EDE               	movwf	postinc2,c
  2082  0000CC  0E00               	movlw	0
  2083  0000CE  6EDD               	movwf	postdec2,c
  2084  0000D0                     l1412:
  2085  0000D0  0E03               	movlw	3
  2086  0000D2  6EE6               	movwf	postinc1,c
  2087  0000D4  0E00               	movlw	0
  2088  0000D6  6EE6               	movwf	postinc1,c
  2089  0000D8  0E6E               	movlw	110
  2090  0000DA  6EE6               	movwf	postinc1,c
  2091  0000DC  0E00               	movlw	0
  2092  0000DE  6EE6               	movwf	postinc1,c
  2093  0000E0  C027  FFE6         	movff	_task_running,postinc1
  2094  0000E4  C028  FFE6         	movff	_task_running+1,postinc1
  2095  0000E8  ECEF  F004         	call	___wmul	;wreg free
  2096  0000EC  0E57               	movlw	low (_F_APTOS+105)
  2097  0000EE  2449               	addwf	btemp,w,c
  2098  0000F0  6ED9               	movwf	fsr2l,c
  2099  0000F2  0E01               	movlw	high (_F_APTOS+105)
  2100  0000F4  204A               	addwfc	btemp+1,w,c
  2101  0000F6  6EDA               	movwf	fsr2h,c
  2102  0000F8  CFDE F04A          	movff	postinc2,btemp+1
  2103  0000FC  CFDD F04B          	movff	postdec2,btemp+2
  2104  000100  C04A  FFE6         	movff	btemp+1,postinc1
  2105  000104  C04B  FFE6         	movff	btemp+2,postinc1
  2106  000108  ECEF  F004         	call	___wmul	;wreg free
  2107  00010C  C049  F051         	movff	btemp,btemp+8
  2108  000110  C04A  F052         	movff	btemp+1,btemp+9
  2109  000114  0E6E               	movlw	110
  2110  000116  6EE6               	movwf	postinc1,c
  2111  000118  0E00               	movlw	0
  2112  00011A  6EE6               	movwf	postinc1,c
  2113  00011C  C027  FFE6         	movff	_task_running,postinc1
  2114  000120  C028  FFE6         	movff	_task_running+1,postinc1
  2115  000124  ECEF  F004         	call	___wmul	;wreg free
  2116  000128  0EEE               	movlw	low _F_APTOS
  2117  00012A  6E53               	movwf	btemp+10,c
  2118  00012C  0E00               	movlw	high _F_APTOS
  2119  00012E  6E54               	movwf	btemp+11,c
  2120  000130  0E09               	movlw	9
  2121  000132  2653               	addwf	btemp+10,f,c
  2122  000134  0E00               	movlw	0
  2123  000136  2254               	addwfc	btemp+11,f,c
  2124  000138  5049               	movf	btemp,w,c
  2125  00013A  2653               	addwf	btemp+10,f,c
  2126  00013C  504A               	movf	btemp+1,w,c
  2127  00013E  2254               	addwfc	btemp+11,f,c
  2128  000140  5051               	movf	btemp+8,w,c
  2129  000142  2453               	addwf	btemp+10,w,c
  2130  000144  6ED9               	movwf	fsr2l,c
  2131  000146  5052               	movf	btemp+9,w,c
  2132  000148  2054               	addwfc	btemp+11,w,c
  2133  00014A  6EDA               	movwf	fsr2h,c
  2134  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  2135  000150  0E03               	movlw	3
  2136  000152  6EE6               	movwf	postinc1,c
  2137  000154  0E00               	movlw	0
  2138  000156  6EE6               	movwf	postinc1,c
  2139  000158  0E6E               	movlw	110
  2140  00015A  6EE6               	movwf	postinc1,c
  2141  00015C  0E00               	movlw	0
  2142  00015E  6EE6               	movwf	postinc1,c
  2143  000160  C027  FFE6         	movff	_task_running,postinc1
  2144  000164  C028  FFE6         	movff	_task_running+1,postinc1
  2145  000168  ECEF  F004         	call	___wmul	;wreg free
  2146  00016C  0E57               	movlw	low (_F_APTOS+105)
  2147  00016E  2449               	addwf	btemp,w,c
  2148  000170  6ED9               	movwf	fsr2l,c
  2149  000172  0E01               	movlw	high (_F_APTOS+105)
  2150  000174  204A               	addwfc	btemp+1,w,c
  2151  000176  6EDA               	movwf	fsr2h,c
  2152  000178  CFDE F04A          	movff	postinc2,btemp+1
  2153  00017C  CFDD F04B          	movff	postdec2,btemp+2
  2154  000180  C04A  FFE6         	movff	btemp+1,postinc1
  2155  000184  C04B  FFE6         	movff	btemp+2,postinc1
  2156  000188  ECEF  F004         	call	___wmul	;wreg free
  2157  00018C  C049  F051         	movff	btemp,btemp+8
  2158  000190  C04A  F052         	movff	btemp+1,btemp+9
  2159  000194  0E6E               	movlw	110
  2160  000196  6EE6               	movwf	postinc1,c
  2161  000198  0E00               	movlw	0
  2162  00019A  6EE6               	movwf	postinc1,c
  2163  00019C  C027  FFE6         	movff	_task_running,postinc1
  2164  0001A0  C028  FFE6         	movff	_task_running+1,postinc1
  2165  0001A4  ECEF  F004         	call	___wmul	;wreg free
  2166  0001A8  0EEE               	movlw	low _F_APTOS
  2167  0001AA  6E53               	movwf	btemp+10,c
  2168  0001AC  0E00               	movlw	high _F_APTOS
  2169  0001AE  6E54               	movwf	btemp+11,c
  2170  0001B0  0E0A               	movlw	10
  2171  0001B2  2653               	addwf	btemp+10,f,c
  2172  0001B4  0E00               	movlw	0
  2173  0001B6  2254               	addwfc	btemp+11,f,c
  2174  0001B8  5049               	movf	btemp,w,c
  2175  0001BA  2653               	addwf	btemp+10,f,c
  2176  0001BC  504A               	movf	btemp+1,w,c
  2177  0001BE  2254               	addwfc	btemp+11,f,c
  2178  0001C0  5051               	movf	btemp+8,w,c
  2179  0001C2  2453               	addwf	btemp+10,w,c
  2180  0001C4  6ED9               	movwf	fsr2l,c
  2181  0001C6  5052               	movf	btemp+9,w,c
  2182  0001C8  2054               	addwfc	btemp+11,w,c
  2183  0001CA  6EDA               	movwf	fsr2h,c
  2184  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2185  0001D0  0E03               	movlw	3
  2186  0001D2  6EE6               	movwf	postinc1,c
  2187  0001D4  0E00               	movlw	0
  2188  0001D6  6EE6               	movwf	postinc1,c
  2189  0001D8  0E6E               	movlw	110
  2190  0001DA  6EE6               	movwf	postinc1,c
  2191  0001DC  0E00               	movlw	0
  2192  0001DE  6EE6               	movwf	postinc1,c
  2193  0001E0  C027  FFE6         	movff	_task_running,postinc1
  2194  0001E4  C028  FFE6         	movff	_task_running+1,postinc1
  2195  0001E8  ECEF  F004         	call	___wmul	;wreg free
  2196  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2197  0001EE  2449               	addwf	btemp,w,c
  2198  0001F0  6ED9               	movwf	fsr2l,c
  2199  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2200  0001F4  204A               	addwfc	btemp+1,w,c
  2201  0001F6  6EDA               	movwf	fsr2h,c
  2202  0001F8  CFDE F04A          	movff	postinc2,btemp+1
  2203  0001FC  CFDD F04B          	movff	postdec2,btemp+2
  2204  000200  C04A  FFE6         	movff	btemp+1,postinc1
  2205  000204  C04B  FFE6         	movff	btemp+2,postinc1
  2206  000208  ECEF  F004         	call	___wmul	;wreg free
  2207  00020C  C049  F051         	movff	btemp,btemp+8
  2208  000210  C04A  F052         	movff	btemp+1,btemp+9
  2209  000214  0E6E               	movlw	110
  2210  000216  6EE6               	movwf	postinc1,c
  2211  000218  0E00               	movlw	0
  2212  00021A  6EE6               	movwf	postinc1,c
  2213  00021C  C027  FFE6         	movff	_task_running,postinc1
  2214  000220  C028  FFE6         	movff	_task_running+1,postinc1
  2215  000224  ECEF  F004         	call	___wmul	;wreg free
  2216  000228  0EEE               	movlw	low _F_APTOS
  2217  00022A  6E53               	movwf	btemp+10,c
  2218  00022C  0E00               	movlw	high _F_APTOS
  2219  00022E  6E54               	movwf	btemp+11,c
  2220  000230  0E0B               	movlw	11
  2221  000232  2653               	addwf	btemp+10,f,c
  2222  000234  0E00               	movlw	0
  2223  000236  2254               	addwfc	btemp+11,f,c
  2224  000238  5049               	movf	btemp,w,c
  2225  00023A  2653               	addwf	btemp+10,f,c
  2226  00023C  504A               	movf	btemp+1,w,c
  2227  00023E  2254               	addwfc	btemp+11,f,c
  2228  000240  5051               	movf	btemp+8,w,c
  2229  000242  2453               	addwf	btemp+10,w,c
  2230  000244  6ED9               	movwf	fsr2l,c
  2231  000246  5052               	movf	btemp+9,w,c
  2232  000248  2054               	addwfc	btemp+11,w,c
  2233  00024A  6EDA               	movwf	fsr2h,c
  2234  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2235  000250  0E6E               	movlw	110
  2236  000252  6EE6               	movwf	postinc1,c
  2237  000254  0E00               	movlw	0
  2238  000256  6EE6               	movwf	postinc1,c
  2239  000258  C027  FFE6         	movff	_task_running,postinc1
  2240  00025C  C028  FFE6         	movff	_task_running+1,postinc1
  2241  000260  ECEF  F004         	call	___wmul	;wreg free
  2242  000264  0E57               	movlw	low (_F_APTOS+105)
  2243  000266  2449               	addwf	btemp,w,c
  2244  000268  6ED9               	movwf	fsr2l,c
  2245  00026A  0E01               	movlw	high (_F_APTOS+105)
  2246  00026C  204A               	addwfc	btemp+1,w,c
  2247  00026E  6EDA               	movwf	fsr2h,c
  2248  000270  2ADE               	incf	postinc2,f,c
  2249  000272  0E00               	movlw	0
  2250  000274  22DD               	addwfc	postdec2,f,c
  2251  000276  0006               	pop		;# 
  2252  000278  50FC               	movf	stkptr,w,c	;volatile
  2253  00027A  A4D8               	btfss	status,2,c
  2254  00027C  D729               	goto	l1412
  2255                           
  2256                           ;kernel.c: 43: task_running = rr_scheduler();
  2257  00027E  EC3A  F005         	call	_rr_scheduler	;wreg free
  2258  000282  C049  F027         	movff	btemp,_task_running
  2259  000286  C04A  F028         	movff	btemp+1,_task_running+1
  2260                           
  2261                           ;kernel.c: 49: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2262  00028A  6AFC               	clrf	stkptr,c	;volatile
  2263  00028C  0E6E               	movlw	110
  2264  00028E  6EE6               	movwf	postinc1,c
  2265  000290  0E00               	movlw	0
  2266  000292  6EE6               	movwf	postinc1,c
  2267  000294  C027  FFE6         	movff	_task_running,postinc1
  2268  000298  C028  FFE6         	movff	_task_running+1,postinc1
  2269  00029C  ECEF  F004         	call	___wmul	;wreg free
  2270  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2271  0002A2  2449               	addwf	btemp,w,c
  2272  0002A4  6ED9               	movwf	fsr2l,c
  2273  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2274  0002A8  204A               	addwfc	btemp+1,w,c
  2275  0002AA  6EDA               	movwf	fsr2h,c
  2276  0002AC  50DE               	movf	postinc2,w,c
  2277  0002AE  10DE               	iorwf	postinc2,w,c
  2278  0002B0  A4D8               	btfss	status,2,c
  2279  0002B2  D01B               	goto	l1432
  2280  0002B4  0005               	push		;# 
  2281  0002B6  0E6E               	movlw	110
  2282  0002B8  6EE6               	movwf	postinc1,c
  2283  0002BA  0E00               	movlw	0
  2284  0002BC  6EE6               	movwf	postinc1,c
  2285  0002BE  C027  FFE6         	movff	_task_running,postinc1
  2286  0002C2  C028  FFE6         	movff	_task_running+1,postinc1
  2287  0002C6  ECEF  F004         	call	___wmul	;wreg free
  2288  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2289  0002CC  2449               	addwf	btemp,w,c
  2290  0002CE  6ED9               	movwf	fsr2l,c
  2291  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2292  0002D2  204A               	addwfc	btemp+1,w,c
  2293  0002D4  6EDA               	movwf	fsr2h,c
  2294  0002D6  CFDE F04A          	movff	postinc2,btemp+1
  2295  0002DA  CFDD F04B          	movff	postdec2,btemp+2
  2296  0002DE  C04A  FFFD         	movff	btemp+1,tosl	;volatile
  2297  0002E2  C04B  FFFE         	movff	btemp+2,tosh	;volatile
  2298  0002E6  6AFF               	clrf	tosu,c	;volatile
  2299  0002E8  D11F               	goto	u57_20
  2300  0002EA                     l1432:
  2301  0002EA  0E6E               	movlw	110
  2302  0002EC  6EE6               	movwf	postinc1,c
  2303  0002EE  0E00               	movlw	0
  2304  0002F0  6EE6               	movwf	postinc1,c
  2305  0002F2  C027  FFE6         	movff	_task_running,postinc1
  2306  0002F6  C028  FFE6         	movff	_task_running+1,postinc1
  2307  0002FA  ECEF  F004         	call	___wmul	;wreg free
  2308  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2309  000300  2449               	addwf	btemp,w,c
  2310  000302  6ED9               	movwf	fsr2l,c
  2311  000304  0E01               	movlw	high (_F_APTOS+107)
  2312  000306  204A               	addwfc	btemp+1,w,c
  2313  000308  6EDA               	movwf	fsr2h,c
  2314  00030A  50DF               	movf	indf2,w,c
  2315  00030C  6EE0               	movwf	bsr,c	;volatile
  2316  00030E  0E6E               	movlw	110
  2317  000310  6EE6               	movwf	postinc1,c
  2318  000312  0E00               	movlw	0
  2319  000314  6EE6               	movwf	postinc1,c
  2320  000316  C027  FFE6         	movff	_task_running,postinc1
  2321  00031A  C028  FFE6         	movff	_task_running+1,postinc1
  2322  00031E  ECEF  F004         	call	___wmul	;wreg free
  2323  000322  0E5A               	movlw	low (_F_APTOS+108)
  2324  000324  2449               	addwf	btemp,w,c
  2325  000326  6ED9               	movwf	fsr2l,c
  2326  000328  0E01               	movlw	high (_F_APTOS+108)
  2327  00032A  204A               	addwfc	btemp+1,w,c
  2328  00032C  6EDA               	movwf	fsr2h,c
  2329  00032E  50DF               	movf	indf2,w,c
  2330  000330  6ED8               	movwf	status,c	;volatile
  2331  000332  0E6E               	movlw	110
  2332  000334  6EE6               	movwf	postinc1,c
  2333  000336  0E00               	movlw	0
  2334  000338  6EE6               	movwf	postinc1,c
  2335  00033A  C027  FFE6         	movff	_task_running,postinc1
  2336  00033E  C028  FFE6         	movff	_task_running+1,postinc1
  2337  000342  ECEF  F004         	call	___wmul	;wreg free
  2338  000346  0E5B               	movlw	low (_F_APTOS+109)
  2339  000348  2449               	addwf	btemp,w,c
  2340  00034A  6ED9               	movwf	fsr2l,c
  2341  00034C  0E01               	movlw	high (_F_APTOS+109)
  2342  00034E  204A               	addwfc	btemp+1,w,c
  2343  000350  6EDA               	movwf	fsr2h,c
  2344  000352  50DF               	movf	indf2,w,c
  2345  000354  6E54               	movwf	btemp+11,c
  2346  000356  5054               	movf	btemp+11,w,c
  2347  000358                     l72:
  2348  000358  0005               	push		;# 
  2349  00035A  0E6E               	movlw	110
  2350  00035C  6EE6               	movwf	postinc1,c
  2351  00035E  0E00               	movlw	0
  2352  000360  6EE6               	movwf	postinc1,c
  2353  000362  C027  FFE6         	movff	_task_running,postinc1
  2354  000366  C028  FFE6         	movff	_task_running+1,postinc1
  2355  00036A  ECEF  F004         	call	___wmul	;wreg free
  2356  00036E  0E57               	movlw	low (_F_APTOS+105)
  2357  000370  2449               	addwf	btemp,w,c
  2358  000372  6ED9               	movwf	fsr2l,c
  2359  000374  0E01               	movlw	high (_F_APTOS+105)
  2360  000376  204A               	addwfc	btemp+1,w,c
  2361  000378  6EDA               	movwf	fsr2h,c
  2362  00037A  06DE               	decf	postinc2,f,c
  2363  00037C  0E00               	movlw	0
  2364  00037E  5ADD               	subwfb	postdec2,f,c
  2365  000380  0E03               	movlw	3
  2366  000382  6EE6               	movwf	postinc1,c
  2367  000384  0E00               	movlw	0
  2368  000386  6EE6               	movwf	postinc1,c
  2369  000388  0E6E               	movlw	110
  2370  00038A  6EE6               	movwf	postinc1,c
  2371  00038C  0E00               	movlw	0
  2372  00038E  6EE6               	movwf	postinc1,c
  2373  000390  C027  FFE6         	movff	_task_running,postinc1
  2374  000394  C028  FFE6         	movff	_task_running+1,postinc1
  2375  000398  ECEF  F004         	call	___wmul	;wreg free
  2376  00039C  0E57               	movlw	low (_F_APTOS+105)
  2377  00039E  2449               	addwf	btemp,w,c
  2378  0003A0  6ED9               	movwf	fsr2l,c
  2379  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2380  0003A4  204A               	addwfc	btemp+1,w,c
  2381  0003A6  6EDA               	movwf	fsr2h,c
  2382  0003A8  CFDE F04A          	movff	postinc2,btemp+1
  2383  0003AC  CFDD F04B          	movff	postdec2,btemp+2
  2384  0003B0  C04A  FFE6         	movff	btemp+1,postinc1
  2385  0003B4  C04B  FFE6         	movff	btemp+2,postinc1
  2386  0003B8  ECEF  F004         	call	___wmul	;wreg free
  2387  0003BC  C049  F051         	movff	btemp,btemp+8
  2388  0003C0  C04A  F052         	movff	btemp+1,btemp+9
  2389  0003C4  0E6E               	movlw	110
  2390  0003C6  6EE6               	movwf	postinc1,c
  2391  0003C8  0E00               	movlw	0
  2392  0003CA  6EE6               	movwf	postinc1,c
  2393  0003CC  C027  FFE6         	movff	_task_running,postinc1
  2394  0003D0  C028  FFE6         	movff	_task_running+1,postinc1
  2395  0003D4  ECEF  F004         	call	___wmul	;wreg free
  2396  0003D8  0EEE               	movlw	low _F_APTOS
  2397  0003DA  6E53               	movwf	btemp+10,c
  2398  0003DC  0E00               	movlw	high _F_APTOS
  2399  0003DE  6E54               	movwf	btemp+11,c
  2400  0003E0  0E09               	movlw	9
  2401  0003E2  2653               	addwf	btemp+10,f,c
  2402  0003E4  0E00               	movlw	0
  2403  0003E6  2254               	addwfc	btemp+11,f,c
  2404  0003E8  5049               	movf	btemp,w,c
  2405  0003EA  2653               	addwf	btemp+10,f,c
  2406  0003EC  504A               	movf	btemp+1,w,c
  2407  0003EE  2254               	addwfc	btemp+11,f,c
  2408  0003F0  5051               	movf	btemp+8,w,c
  2409  0003F2  2453               	addwf	btemp+10,w,c
  2410  0003F4  6ED9               	movwf	fsr2l,c
  2411  0003F6  5052               	movf	btemp+9,w,c
  2412  0003F8  2054               	addwfc	btemp+11,w,c
  2413  0003FA  6EDA               	movwf	fsr2h,c
  2414  0003FC  50DF               	movf	indf2,w,c
  2415  0003FE  6EFF               	movwf	tosu,c	;volatile
  2416  000400  0E03               	movlw	3
  2417  000402  6EE6               	movwf	postinc1,c
  2418  000404  0E00               	movlw	0
  2419  000406  6EE6               	movwf	postinc1,c
  2420  000408  0E6E               	movlw	110
  2421  00040A  6EE6               	movwf	postinc1,c
  2422  00040C  0E00               	movlw	0
  2423  00040E  6EE6               	movwf	postinc1,c
  2424  000410  C027  FFE6         	movff	_task_running,postinc1
  2425  000414  C028  FFE6         	movff	_task_running+1,postinc1
  2426  000418  ECEF  F004         	call	___wmul	;wreg free
  2427  00041C  0E57               	movlw	low (_F_APTOS+105)
  2428  00041E  2449               	addwf	btemp,w,c
  2429  000420  6ED9               	movwf	fsr2l,c
  2430  000422  0E01               	movlw	high (_F_APTOS+105)
  2431  000424  204A               	addwfc	btemp+1,w,c
  2432  000426  6EDA               	movwf	fsr2h,c
  2433  000428  CFDE F04A          	movff	postinc2,btemp+1
  2434  00042C  CFDD F04B          	movff	postdec2,btemp+2
  2435  000430  C04A  FFE6         	movff	btemp+1,postinc1
  2436  000434  C04B  FFE6         	movff	btemp+2,postinc1
  2437  000438  ECEF  F004         	call	___wmul	;wreg free
  2438  00043C  C049  F051         	movff	btemp,btemp+8
  2439  000440  C04A  F052         	movff	btemp+1,btemp+9
  2440  000444  0E6E               	movlw	110
  2441  000446  6EE6               	movwf	postinc1,c
  2442  000448  0E00               	movlw	0
  2443  00044A  6EE6               	movwf	postinc1,c
  2444  00044C  C027  FFE6         	movff	_task_running,postinc1
  2445  000450  C028  FFE6         	movff	_task_running+1,postinc1
  2446  000454  ECEF  F004         	call	___wmul	;wreg free
  2447  000458  0EEE               	movlw	low _F_APTOS
  2448  00045A  6E53               	movwf	btemp+10,c
  2449  00045C  0E00               	movlw	high _F_APTOS
  2450  00045E  6E54               	movwf	btemp+11,c
  2451  000460  0E0A               	movlw	10
  2452  000462  2653               	addwf	btemp+10,f,c
  2453  000464  0E00               	movlw	0
  2454  000466  2254               	addwfc	btemp+11,f,c
  2455  000468  5049               	movf	btemp,w,c
  2456  00046A  2653               	addwf	btemp+10,f,c
  2457  00046C  504A               	movf	btemp+1,w,c
  2458  00046E  2254               	addwfc	btemp+11,f,c
  2459  000470  5051               	movf	btemp+8,w,c
  2460  000472  2453               	addwf	btemp+10,w,c
  2461  000474  6ED9               	movwf	fsr2l,c
  2462  000476  5052               	movf	btemp+9,w,c
  2463  000478  2054               	addwfc	btemp+11,w,c
  2464  00047A  6EDA               	movwf	fsr2h,c
  2465  00047C  50DF               	movf	indf2,w,c
  2466  00047E  6EFD               	movwf	tosl,c	;volatile
  2467  000480  0E03               	movlw	3
  2468  000482  6EE6               	movwf	postinc1,c
  2469  000484  0E00               	movlw	0
  2470  000486  6EE6               	movwf	postinc1,c
  2471  000488  0E6E               	movlw	110
  2472  00048A  6EE6               	movwf	postinc1,c
  2473  00048C  0E00               	movlw	0
  2474  00048E  6EE6               	movwf	postinc1,c
  2475  000490  C027  FFE6         	movff	_task_running,postinc1
  2476  000494  C028  FFE6         	movff	_task_running+1,postinc1
  2477  000498  ECEF  F004         	call	___wmul	;wreg free
  2478  00049C  0E57               	movlw	low (_F_APTOS+105)
  2479  00049E  2449               	addwf	btemp,w,c
  2480  0004A0  6ED9               	movwf	fsr2l,c
  2481  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2482  0004A4  204A               	addwfc	btemp+1,w,c
  2483  0004A6  6EDA               	movwf	fsr2h,c
  2484  0004A8  CFDE F04A          	movff	postinc2,btemp+1
  2485  0004AC  CFDD F04B          	movff	postdec2,btemp+2
  2486  0004B0  C04A  FFE6         	movff	btemp+1,postinc1
  2487  0004B4  C04B  FFE6         	movff	btemp+2,postinc1
  2488  0004B8  ECEF  F004         	call	___wmul	;wreg free
  2489  0004BC  C049  F051         	movff	btemp,btemp+8
  2490  0004C0  C04A  F052         	movff	btemp+1,btemp+9
  2491  0004C4  0E6E               	movlw	110
  2492  0004C6  6EE6               	movwf	postinc1,c
  2493  0004C8  0E00               	movlw	0
  2494  0004CA  6EE6               	movwf	postinc1,c
  2495  0004CC  C027  FFE6         	movff	_task_running,postinc1
  2496  0004D0  C028  FFE6         	movff	_task_running+1,postinc1
  2497  0004D4  ECEF  F004         	call	___wmul	;wreg free
  2498  0004D8  0EEE               	movlw	low _F_APTOS
  2499  0004DA  6E53               	movwf	btemp+10,c
  2500  0004DC  0E00               	movlw	high _F_APTOS
  2501  0004DE  6E54               	movwf	btemp+11,c
  2502  0004E0  0E0B               	movlw	11
  2503  0004E2  2653               	addwf	btemp+10,f,c
  2504  0004E4  0E00               	movlw	0
  2505  0004E6  2254               	addwfc	btemp+11,f,c
  2506  0004E8  5049               	movf	btemp,w,c
  2507  0004EA  2653               	addwf	btemp+10,f,c
  2508  0004EC  504A               	movf	btemp+1,w,c
  2509  0004EE  2254               	addwfc	btemp+11,f,c
  2510  0004F0  5051               	movf	btemp+8,w,c
  2511  0004F2  2453               	addwf	btemp+10,w,c
  2512  0004F4  6ED9               	movwf	fsr2l,c
  2513  0004F6  5052               	movf	btemp+9,w,c
  2514  0004F8  2054               	addwfc	btemp+11,w,c
  2515  0004FA  6EDA               	movwf	fsr2h,c
  2516  0004FC  50DF               	movf	indf2,w,c
  2517  0004FE  6EFE               	movwf	tosh,c	;volatile
  2518  000500  0E6E               	movlw	110
  2519  000502  6EE6               	movwf	postinc1,c
  2520  000504  0E00               	movlw	0
  2521  000506  6EE6               	movwf	postinc1,c
  2522  000508  C027  FFE6         	movff	_task_running,postinc1
  2523  00050C  C028  FFE6         	movff	_task_running+1,postinc1
  2524  000510  ECEF  F004         	call	___wmul	;wreg free
  2525  000514  0E57               	movlw	low (_F_APTOS+105)
  2526  000516  2449               	addwf	btemp,w,c
  2527  000518  6ED9               	movwf	fsr2l,c
  2528  00051A  0E01               	movlw	high (_F_APTOS+105)
  2529  00051C  204A               	addwfc	btemp+1,w,c
  2530  00051E  6EDA               	movwf	fsr2h,c
  2531  000520  50DE               	movf	postinc2,w,c
  2532  000522  10DE               	iorwf	postinc2,w,c
  2533  000524  A4D8               	btfss	status,2,c
  2534  000526  D718               	goto	l72
  2535  000528                     u57_20:
  2536  000528  0E6E               	movlw	110
  2537  00052A  6EE6               	movwf	postinc1,c
  2538  00052C  0E00               	movlw	0
  2539  00052E  6EE6               	movwf	postinc1,c
  2540  000530  C027  FFE6         	movff	_task_running,postinc1
  2541  000534  C028  FFE6         	movff	_task_running+1,postinc1
  2542  000538  ECEF  F004         	call	___wmul	;wreg free
  2543  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2544  00053E  2449               	addwf	btemp,w,c
  2545  000540  6ED9               	movwf	fsr2l,c
  2546  000542  0E00               	movlw	high (_F_APTOS+8)
  2547  000544  204A               	addwfc	btemp+1,w,c
  2548  000546  6EDA               	movwf	fsr2h,c
  2549  000548  0E02               	movlw	2
  2550  00054A  6EDF               	movwf	indf2,c
  2551  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2552                           
  2553                           ;kernel.c: 51: (INTCONbits.GIE = 1);
  2554  00054E  8EF2               	bsf	intcon,7,c	;volatile
  2555                           
  2556                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2557  000550  52E5               	movf	postdec1,f,c
  2558  000552  0012               	return		;funcret
  2559  000554                     __end_of_dispatcher:
  2560                           	opt stack 0
  2561                           tosu	equ	0xFFF
  2562                           tosh	equ	0xFFE
  2563                           tosl	equ	0xFFD
  2564                           stkptr	equ	0xFFC
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           intcon	equ	0xFF2
  2572                           postinc0	equ	0xFEE
  2573                           postdec0	equ	0xFED
  2574                           plusw0	equ	0xFEB
  2575                           fsr0h	equ	0xFEA
  2576                           fsr0l	equ	0xFE9
  2577                           wreg	equ	0xFE8
  2578                           postinc1	equ	0xFE6
  2579                           postdec1	equ	0xFE5
  2580                           plusw1	equ	0xFE3
  2581                           fsr1h	equ	0xFE2
  2582                           fsr1l	equ	0xFE1
  2583                           bsr	equ	0xFE0
  2584                           indf2	equ	0xFDF
  2585                           postinc2	equ	0xFDE
  2586                           postdec2	equ	0xFDD
  2587                           plusw2	equ	0xFDB
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function _rr_scheduler *****************
  2593 ;; Defined at:
  2594 ;;		line 12 in file "scheduler.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  next_task_to    2  [STACK] unsigned int 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  2  [STACK] unsigned int 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2608 ;;      Params:         0       0       0       0       0       0       0
  2609 ;;      Locals:         0       0       0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0
  2611 ;;      Totals:         0       0       0       0       0       0       0
  2612 ;;Total ram usage:        0 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    5
  2615 ;; This function calls:
  2616 ;;		___lwmod
  2617 ;;		___wmul
  2618 ;; This function is called by:
  2619 ;;		_dispatcher
  2620 ;; This function uses a reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text13
  2624  000A74                     __ptext13:
  2625                           	opt stack 0
  2626  000A74                     _rr_scheduler:
  2627                           	opt stack 0
  2628                           
  2629                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2630  000A74  52E6               	movf	postinc1,f,c
  2631  000A76  52E6               	movf	postinc1,f,c
  2632                           
  2633                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2634                           
  2635                           ;incstack = 0
  2636  000A78  C027  F04A         	movff	_task_running,btemp+1
  2637  000A7C  C028  F04B         	movff	_task_running+1,btemp+2
  2638                           
  2639                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2640  000A80  0EFE               	movlw	-2
  2641  000A82  C04A  FFE3         	movff	btemp+1,plusw1
  2642  000A86  0EFF               	movlw	-1
  2643  000A88  C04B  FFE3         	movff	btemp+2,plusw1
  2644  000A8C                     l1300:
  2645                           
  2646                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2647  000A8C  C029  FFE6         	movff	_tasks_installed,postinc1
  2648  000A90  C02A  FFE6         	movff	_tasks_installed+1,postinc1
  2649                           
  2650                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2651  000A94  0EFC               	movlw	-4
  2652  000A96  50E3               	movf	plusw1,w,c
  2653  000A98  0F01               	addlw	1
  2654  000A9A  6E4A               	movwf	btemp+1,c
  2655  000A9C  0EFD               	movlw	-3
  2656  000A9E  CFE3 F04B          	movff	plusw1,btemp+2
  2657  000AA2  0E00               	movlw	0
  2658  000AA4  224B               	addwfc	btemp+2,f,c
  2659  000AA6  C04A  FFE6         	movff	btemp+1,postinc1
  2660  000AAA  C04B  FFE6         	movff	btemp+2,postinc1
  2661  000AAE  EC3D  F004         	call	___lwmod	;wreg free
  2662                           
  2663                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2664  000AB2  0EFE               	movlw	-2
  2665  000AB4  C049  FFE3         	movff	btemp,plusw1
  2666  000AB8  0EFF               	movlw	-1
  2667  000ABA  C04A  FFE3         	movff	btemp+1,plusw1
  2668                           
  2669                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2670  000ABE  0E6E               	movlw	110
  2671  000AC0  6EE6               	movwf	postinc1,c
  2672  000AC2  0E00               	movlw	0
  2673  000AC4  6EE6               	movwf	postinc1,c
  2674                           
  2675                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2676  000AC6  0EFC               	movlw	-4
  2677  000AC8  CFE3 FFE6          	movff	plusw1,postinc1
  2678  000ACC  CFE3 FFE6          	movff	plusw1,postinc1
  2679  000AD0  ECEF  F004         	call	___wmul	;wreg free
  2680  000AD4  0EF6               	movlw	low (_F_APTOS+8)
  2681  000AD6  2449               	addwf	btemp,w,c
  2682  000AD8  6ED9               	movwf	fsr2l,c
  2683  000ADA  0E00               	movlw	high (_F_APTOS+8)
  2684  000ADC  204A               	addwfc	btemp+1,w,c
  2685  000ADE  6EDA               	movwf	fsr2h,c
  2686  000AE0  04DE               	decf	postinc2,w,c
  2687  000AE2  A4D8               	btfss	status,2,c
  2688  000AE4  D7D3               	goto	l1300
  2689                           
  2690                           ;scheduler.c: 20: return next_task_to_run;
  2691                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2692  000AE6  0EFE               	movlw	-2
  2693  000AE8  CFE3 F049          	movff	plusw1,btemp
  2694  000AEC  0EFF               	movlw	-1
  2695  000AEE  CFE3 F04A          	movff	plusw1,btemp+1
  2696                           
  2697                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2698  000AF2  52E5               	movf	postdec1,f,c
  2699  000AF4  52E5               	movf	postdec1,f,c
  2700  000AF6  0012               	return		;funcret
  2701  000AF8                     __end_of_rr_scheduler:
  2702                           	opt stack 0
  2703                           tosu	equ	0xFFF
  2704                           tosh	equ	0xFFE
  2705                           tosl	equ	0xFFD
  2706                           stkptr	equ	0xFFC
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           postinc0	equ	0xFEE
  2715                           postdec0	equ	0xFED
  2716                           plusw0	equ	0xFEB
  2717                           fsr0h	equ	0xFEA
  2718                           fsr0l	equ	0xFE9
  2719                           wreg	equ	0xFE8
  2720                           postinc1	equ	0xFE6
  2721                           postdec1	equ	0xFE5
  2722                           plusw1	equ	0xFE3
  2723                           fsr1h	equ	0xFE2
  2724                           fsr1l	equ	0xFE1
  2725                           bsr	equ	0xFE0
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           plusw2	equ	0xFDB
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function ___lwmod *****************
  2735 ;; Defined at:
  2736 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  dividend        2  [STACK] unsigned int 
  2739 ;;  divisor         2  [STACK] unsigned int 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  counter         1  [STACK] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  2  [STACK] unsigned int 
  2744 ;; Registers used:
  2745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2751 ;;      Params:         0       0       0       0       0       0       0
  2752 ;;      Locals:         0       0       0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0       0
  2754 ;;      Totals:         0       0       0       0       0       0       0
  2755 ;;Total ram usage:        0 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    4
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_rr_scheduler
  2762 ;;		_sem_wait
  2763 ;;		_sem_post
  2764 ;; This function uses a reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text14
  2768  00087A                     __ptext14:
  2769                           	opt stack 0
  2770  00087A                     ___lwmod:
  2771                           	opt stack 0
  2772                           
  2773                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2774  00087A  52E6               	movf	postinc1,f,c
  2775                           
  2776                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2777                           
  2778                           ;incstack = 0
  2779  00087C  0EFB               	movlw	-5
  2780  00087E  CFE3 F049          	movff	plusw1,btemp
  2781  000882  0EFC               	movlw	-4
  2782  000884  50E3               	movf	plusw1,w,c
  2783  000886  1049               	iorwf	btemp,w,c
  2784  000888  B4D8               	btfsc	status,2,c
  2785  00088A  D04A               	goto	u4_20
  2786                           
  2787                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2788  00088C  0EFF               	movlw	-1
  2789  00088E  6AE3               	clrf	plusw1,c
  2790  000890  D010               	goto	L1
  2791  000892                     l892:
  2792                           
  2793                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2794  000892  0EFB               	movlw	-5
  2795  000894  50E3               	movf	plusw1,w,c
  2796  000896  90D8               	bcf	status,0,c
  2797  000898  34E8               	rlcf	wreg,w,c
  2798  00089A  6E49               	movwf	btemp,c
  2799  00089C  0EFB               	movlw	-5
  2800  00089E  C049  FFE3         	movff	btemp,plusw1
  2801  0008A2  0EFC               	movlw	-4
  2802  0008A4  50E3               	movf	plusw1,w,c
  2803  0008A6  34E8               	rlcf	wreg,w,c
  2804  0008A8  6E49               	movwf	btemp,c
  2805  0008AA  0EFC               	movlw	-4
  2806  0008AC  C049  FFE3         	movff	btemp,plusw1
  2807                           
  2808                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2809  0008B0  0EFF               	movlw	-1
  2810  0008B2                     L1:
  2811  0008B2  2AE3               	incf	plusw1,f,c
  2812                           
  2813                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2814  0008B4  0EFC               	movlw	-4
  2815  0008B6  AEE3               	btfss	plusw1,7,c
  2816  0008B8  D7EC               	goto	l892
  2817  0008BA                     u2_20:
  2818                           
  2819                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2820  0008BA  0EFB               	movlw	-5
  2821  0008BC  CFE3 F04A          	movff	plusw1,btemp+1
  2822  0008C0  0EFC               	movlw	-4
  2823  0008C2  CFE3 F04B          	movff	plusw1,btemp+2
  2824                           
  2825                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2826  0008C6  0EFD               	movlw	-3
  2827  0008C8  CFE3 F053          	movff	plusw1,btemp+10
  2828  0008CC  0EFE               	movlw	-2
  2829  0008CE  CFE3 F054          	movff	plusw1,btemp+11
  2830  0008D2  504A               	movf	btemp+1,w,c
  2831  0008D4  5C53               	subwf	btemp+10,w,c
  2832  0008D6  504B               	movf	btemp+2,w,c
  2833  0008D8  5854               	subwfb	btemp+11,w,c
  2834  0008DA  A0D8               	btfss	status,0,c
  2835  0008DC  D012               	goto	l902
  2836                           
  2837                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2838                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2839  0008DE  0EFD               	movlw	-3
  2840  0008E0  50E3               	movf	plusw1,w,c
  2841  0008E2  6E49               	movwf	btemp,c
  2842  0008E4  0EFB               	movlw	-5
  2843  0008E6  50E3               	movf	plusw1,w,c
  2844  0008E8  5E49               	subwf	btemp,f,c
  2845  0008EA  0EFD               	movlw	-3
  2846  0008EC  C049  FFE3         	movff	btemp,plusw1
  2847  0008F0  0EFE               	movlw	-2
  2848  0008F2  50E3               	movf	plusw1,w,c
  2849  0008F4  6E49               	movwf	btemp,c
  2850  0008F6  0EFC               	movlw	-4
  2851  0008F8  50E3               	movf	plusw1,w,c
  2852  0008FA  5A49               	subwfb	btemp,f,c
  2853  0008FC  0EFE               	movlw	-2
  2854  0008FE  C049  FFE3         	movff	btemp,plusw1
  2855  000902                     l902:
  2856                           
  2857                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2858  000902  90D8               	bcf	status,0,c
  2859  000904  0EFC               	movlw	-4
  2860  000906  32E3               	rrcf	plusw1,f,c
  2861  000908  0EFB               	movlw	-5
  2862  00090A  32E3               	rrcf	plusw1,f,c
  2863                           
  2864                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2865  00090C  0EFF               	movlw	-1
  2866  00090E  50E3               	movf	plusw1,w,c
  2867  000910  6E49               	movwf	btemp,c
  2868  000912  0E01               	movlw	1
  2869  000914  5E49               	subwf	btemp,f,c
  2870  000916  0EFF               	movlw	-1
  2871  000918  C049  FFE3         	movff	btemp,plusw1
  2872  00091C  A4D8               	btfss	status,2,c
  2873  00091E  D7CD               	goto	u2_20
  2874  000920                     u4_20:
  2875                           
  2876                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2877  000920  0EFD               	movlw	-3
  2878  000922  CFE3 F049          	movff	plusw1,btemp
  2879  000926  0EFE               	movlw	-2
  2880  000928  CFE3 F04A          	movff	plusw1,btemp+1
  2881                           
  2882                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  2883  00092C  0EFB               	movlw	251
  2884  00092E  26E1               	addwf	fsr1l,f,c
  2885  000930  0EFF               	movlw	255
  2886  000932  22E2               	addwfc	fsr1h,f,c
  2887  000934  0012               	return		;funcret
  2888  000936                     __end_of___lwmod:
  2889                           	opt stack 0
  2890                           tosu	equ	0xFFF
  2891                           tosh	equ	0xFFE
  2892                           tosl	equ	0xFFD
  2893                           stkptr	equ	0xFFC
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           postinc0	equ	0xFEE
  2902                           postdec0	equ	0xFED
  2903                           plusw0	equ	0xFEB
  2904                           fsr0h	equ	0xFEA
  2905                           fsr0l	equ	0xFE9
  2906                           wreg	equ	0xFE8
  2907                           postinc1	equ	0xFE6
  2908                           postdec1	equ	0xFE5
  2909                           plusw1	equ	0xFE3
  2910                           fsr1h	equ	0xFE2
  2911                           fsr1l	equ	0xFE1
  2912                           bsr	equ	0xFE0
  2913                           indf2	equ	0xFDF
  2914                           postinc2	equ	0xFDE
  2915                           postdec2	equ	0xFDD
  2916                           plusw2	equ	0xFDB
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _task_two *****************
  2922 ;; Defined at:
  2923 ;;		line 30 in file "tasks.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;		None
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1  [STACK] void 
  2930 ;; Registers used:
  2931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2937 ;;      Params:         0       0       0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0
  2940 ;;      Totals:         0       0       0       0       0       0       0
  2941 ;;Total ram usage:        0 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    8
  2944 ;; This function calls:
  2945 ;;		_delay
  2946 ;; This function is called by:
  2947 ;;		_main
  2948 ;; This function uses a reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text15
  2952  000DBE                     __ptext15:
  2953                           	opt stack 0
  2954  000DBE                     _task_two:
  2955                           	opt stack 19
  2956                           
  2957                           ;tasks.c: 32: TRISDbits.RD1 = 0;
  2958                           
  2959                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2960                           ;incstack = 0
  2961  000DBE  9295               	bcf	3989,1,c	;volatile
  2962                           
  2963                           ;tasks.c: 33: PORTDbits.RD1 = 0;
  2964  000DC0  9283               	bcf	3971,1,c	;volatile
  2965  000DC2                     l1516:
  2966                           
  2967                           ;tasks.c: 37: PORTDbits.RD1 = ~PORTDbits.RD1;
  2968  000DC2  A283               	btfss	3971,1,c	;volatile
  2969  000DC4  D002               	goto	u65_20
  2970  000DC6  0E01               	movlw	1
  2971  000DC8  D001               	goto	u65_26
  2972  000DCA                     u65_20:
  2973  000DCA  0E00               	movlw	0
  2974  000DCC                     u65_26:
  2975  000DCC  0AFF               	xorlw	255
  2976  000DCE  6E54               	movwf	btemp+11,c
  2977  000DD0  4654               	rlncf	btemp+11,f,c
  2978  000DD2  5083               	movf	3971,w,c	;volatile
  2979  000DD4  1854               	xorwf	btemp+11,w,c
  2980  000DD6  0BFD               	andlw	-3
  2981  000DD8  1854               	xorwf	btemp+11,w,c
  2982  000DDA  6E83               	movwf	3971,c	;volatile
  2983                           
  2984                           ;tasks.c: 38: delay(100);
  2985  000DDC  0E64               	movlw	100
  2986  000DDE  6EE6               	movwf	postinc1,c
  2987  000DE0  0E00               	movlw	0
  2988  000DE2  6EE6               	movwf	postinc1,c
  2989  000DE4  EC69  F006         	call	_delay	;wreg free
  2990  000DE8  D7EC               	goto	l1516
  2991  000DEA                     __end_of_task_two:
  2992                           	opt stack 0
  2993                           tosu	equ	0xFFF
  2994                           tosh	equ	0xFFE
  2995                           tosl	equ	0xFFD
  2996                           stkptr	equ	0xFFC
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           postinc0	equ	0xFEE
  3005                           postdec0	equ	0xFED
  3006                           plusw0	equ	0xFEB
  3007                           fsr0h	equ	0xFEA
  3008                           fsr0l	equ	0xFE9
  3009                           wreg	equ	0xFE8
  3010                           postinc1	equ	0xFE6
  3011                           postdec1	equ	0xFE5
  3012                           plusw1	equ	0xFE3
  3013                           fsr1h	equ	0xFE2
  3014                           fsr1l	equ	0xFE1
  3015                           bsr	equ	0xFE0
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           plusw2	equ	0xFDB
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _task_thre *****************
  3025 ;; Defined at:
  3026 ;;		line 43 in file "tasks.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1  [STACK] void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3040 ;;      Params:         0       0       0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0
  3043 ;;      Totals:         0       0       0       0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    8
  3047 ;; This function calls:
  3048 ;;		_delay
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text16
  3055  000D8E                     __ptext16:
  3056                           	opt stack 0
  3057  000D8E                     _task_thre:
  3058                           	opt stack 19
  3059                           
  3060                           ;tasks.c: 45: TRISDbits.RD3 = 0;
  3061                           
  3062                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3063                           ;incstack = 0
  3064  000D8E  9695               	bcf	3989,3,c	;volatile
  3065                           
  3066                           ;tasks.c: 46: PORTDbits.RD3 = 0;
  3067  000D90  9683               	bcf	3971,3,c	;volatile
  3068  000D92                     l1522:
  3069                           
  3070                           ;tasks.c: 49: PORTDbits.RD3 = ~PORTDbits.RD3;
  3071  000D92  A683               	btfss	3971,3,c	;volatile
  3072  000D94  D002               	goto	u66_20
  3073  000D96  0E01               	movlw	1
  3074  000D98  D001               	goto	u66_26
  3075  000D9A                     u66_20:
  3076  000D9A  0E00               	movlw	0
  3077  000D9C                     u66_26:
  3078  000D9C  0AFF               	xorlw	255
  3079  000D9E  6E54               	movwf	btemp+11,c
  3080  000DA0  4654               	rlncf	btemp+11,f,c
  3081  000DA2  4654               	rlncf	btemp+11,f,c
  3082  000DA4  4654               	rlncf	btemp+11,f,c
  3083  000DA6  5083               	movf	3971,w,c	;volatile
  3084  000DA8  1854               	xorwf	btemp+11,w,c
  3085  000DAA  0BF7               	andlw	-9
  3086  000DAC  1854               	xorwf	btemp+11,w,c
  3087  000DAE  6E83               	movwf	3971,c	;volatile
  3088                           
  3089                           ;tasks.c: 50: delay(100);
  3090  000DB0  0E64               	movlw	100
  3091  000DB2  6EE6               	movwf	postinc1,c
  3092  000DB4  0E00               	movlw	0
  3093  000DB6  6EE6               	movwf	postinc1,c
  3094  000DB8  EC69  F006         	call	_delay	;wreg free
  3095  000DBC  D7EA               	goto	l1522
  3096  000DBE                     __end_of_task_thre:
  3097                           	opt stack 0
  3098                           tosu	equ	0xFFF
  3099                           tosh	equ	0xFFE
  3100                           tosl	equ	0xFFD
  3101                           stkptr	equ	0xFFC
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           postinc0	equ	0xFEE
  3110                           postdec0	equ	0xFED
  3111                           plusw0	equ	0xFEB
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           postinc1	equ	0xFE6
  3116                           postdec1	equ	0xFE5
  3117                           plusw1	equ	0xFE3
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           bsr	equ	0xFE0
  3121                           indf2	equ	0xFDF
  3122                           postinc2	equ	0xFDE
  3123                           postdec2	equ	0xFDD
  3124                           plusw2	equ	0xFDB
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _task_idle *****************
  3130 ;; Defined at:
  3131 ;;		line 69 in file "kernel.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1  [STACK] void 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, btemp+11
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3145 ;;      Params:         0       0       0       0       0       0       0
  3146 ;;      Locals:         0       0       0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0
  3148 ;;      Totals:         0       0       0       0       0       0       0
  3149 ;;Total ram usage:        0 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    4
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_setupOS
  3156 ;; This function uses a reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text17
  3160  000DEA                     __ptext17:
  3161                           	opt stack 0
  3162  000DEA                     _task_idle:
  3163                           	opt stack 23
  3164                           
  3165                           ;kernel.c: 71: TRISDbits.RD4 = 0;
  3166                           
  3167                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3168                           ;incstack = 0
  3169  000DEA  9895               	bcf	3989,4,c	;volatile
  3170  000DEC                     l1136:
  3171                           
  3172                           ;kernel.c: 74: PORTDbits.RD4 = ~PORTDbits.RD4;
  3173  000DEC  A883               	btfss	3971,4,c	;volatile
  3174  000DEE  D002               	goto	u23_20
  3175  000DF0  0E01               	movlw	1
  3176  000DF2  D001               	goto	u23_26
  3177  000DF4                     u23_20:
  3178  000DF4  0E00               	movlw	0
  3179  000DF6                     u23_26:
  3180  000DF6  0AFF               	xorlw	255
  3181  000DF8  6E54               	movwf	btemp+11,c
  3182  000DFA  3A54               	swapf	btemp+11,f,c
  3183  000DFC  5083               	movf	3971,w,c	;volatile
  3184  000DFE  1854               	xorwf	btemp+11,w,c
  3185  000E00  0BEF               	andlw	-17
  3186  000E02  1854               	xorwf	btemp+11,w,c
  3187  000E04  6E83               	movwf	3971,c	;volatile
  3188                           
  3189                           ;kernel.c: 75: __nop();
  3190  000E06  F000               	nop	
  3191  000E08  D7F1               	goto	l1136
  3192  000E0A                     __end_of_task_idle:
  3193                           	opt stack 0
  3194                           tosu	equ	0xFFF
  3195                           tosh	equ	0xFFE
  3196                           tosl	equ	0xFFD
  3197                           stkptr	equ	0xFFC
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           intcon	equ	0xFF2
  3205                           postinc0	equ	0xFEE
  3206                           postdec0	equ	0xFED
  3207                           plusw0	equ	0xFEB
  3208                           fsr0h	equ	0xFEA
  3209                           fsr0l	equ	0xFE9
  3210                           wreg	equ	0xFE8
  3211                           postinc1	equ	0xFE6
  3212                           postdec1	equ	0xFE5
  3213                           plusw1	equ	0xFE3
  3214                           fsr1h	equ	0xFE2
  3215                           fsr1l	equ	0xFE1
  3216                           bsr	equ	0xFE0
  3217                           indf2	equ	0xFDF
  3218                           postinc2	equ	0xFDE
  3219                           postdec2	equ	0xFDD
  3220                           plusw2	equ	0xFDB
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function _int_high *****************
  3226 ;; Defined at:
  3227 ;;		line 103 in file "kernel.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  i               2   15[COMRAM] unsigned int 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3241 ;;      Params:         0       0       0       0       0       0       0
  3242 ;;      Locals:         2       0       0       0       0       0       0
  3243 ;;      Temps:         15       0       0       0       0       0       0
  3244 ;;      Totals:        17       0       0       0       0       0       0
  3245 ;;Total ram usage:       17 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    3
  3248 ;; This function calls:
  3249 ;;		___wmul
  3250 ;;		_dispatcher
  3251 ;; This function is called by:
  3252 ;;		Interrupt level 2
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	intcode
  3257  000008                     __pintcode:
  3258                           	opt stack 0
  3259  000008                     _int_high:
  3260                           	opt stack 19
  3261                           
  3262                           ;incstack = 0
  3263  000008  EDAA  F002         	call	int_func,f	;refresh shadow registers
  3264                           tosu	equ	0xFFF
  3265                           tosh	equ	0xFFE
  3266                           tosl	equ	0xFFD
  3267                           stkptr	equ	0xFFC
  3268                           tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           intcon	equ	0xFF2
  3275                           postinc0	equ	0xFEE
  3276                           postdec0	equ	0xFED
  3277                           plusw0	equ	0xFEB
  3278                           fsr0h	equ	0xFEA
  3279                           fsr0l	equ	0xFE9
  3280                           wreg	equ	0xFE8
  3281                           postinc1	equ	0xFE6
  3282                           postdec1	equ	0xFE5
  3283                           plusw1	equ	0xFE3
  3284                           fsr1h	equ	0xFE2
  3285                           fsr1l	equ	0xFE1
  3286                           bsr	equ	0xFE0
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           plusw2	equ	0xFDB
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295                           	psect	intcode_body
  3296  000554                     __pintcode_body:
  3297                           	opt stack 19
  3298  000554                     int_func:
  3299                           	opt stack 19
  3300  000554  0006               	pop		; remove dummy address from shadow register refresh
  3301  000556  CFE1 F003          	movff	fsr1l,??_int_high+2
  3302  00055A  CFE2 F004          	movff	fsr1h,??_int_high+3
  3303  00055E  CFD9 F005          	movff	fsr2l,??_int_high+4
  3304  000562  CFDA F006          	movff	fsr2h,??_int_high+5
  3305  000566  CFF3 F007          	movff	prodl,??_int_high+6
  3306  00056A  CFF4 F008          	movff	prodh,??_int_high+7
  3307  00056E  C049  F009         	movff	btemp,??_int_high+8
  3308  000572  C04A  F00A         	movff	btemp+1,??_int_high+9
  3309  000576  C04B  F00B         	movff	btemp+2,??_int_high+10
  3310  00057A  C051  F00C         	movff	btemp+8,??_int_high+11
  3311  00057E  C052  F00D         	movff	btemp+9,??_int_high+12
  3312  000582  C053  F00E         	movff	btemp+10,??_int_high+13
  3313  000586  C054  F00F         	movff	btemp+11,??_int_high+14
  3314  00058A  EE15  F064         	lfsr	1,___inthi_sp
  3315                           
  3316                           ;kernel.c: 105: u_int i;
  3317                           ;kernel.c: 107: if (INTCONbits.TMR0IF) {
  3318  00058E  A4F2               	btfss	intcon,2,c	;volatile
  3319  000590  D07C               	goto	i2l100
  3320                           
  3321                           ;kernel.c: 108: INTCONbits.TMR0IF = 0;
  3322  000592  94F2               	bcf	intcon,2,c	;volatile
  3323                           
  3324                           ;kernel.c: 109: TMR0L = 252;
  3325  000594  0EFC               	movlw	252
  3326  000596  6ED6               	movwf	4054,c	;volatile
  3327                           
  3328                           ;kernel.c: 111: for (i = 1; i < tasks_installed; i++) {
  3329  000598  0E00               	movlw	0
  3330  00059A  6E11               	movwf	int_high@i+1,c
  3331  00059C  0E01               	movlw	1
  3332  00059E  6E10               	movwf	int_high@i,c
  3333  0005A0  D05F               	goto	i2l95
  3334  0005A2                     
  3335                           ;kernel.c: 112: if (F_APTOS[i].task_state == SLEEPING) {
  3336  0005A2  0E6E               	movlw	110
  3337  0005A4  6EE6               	movwf	postinc1,c
  3338  0005A6  0E00               	movlw	0
  3339  0005A8  6EE6               	movwf	postinc1,c
  3340  0005AA  C010  FFE6         	movff	int_high@i,postinc1
  3341  0005AE  C011  FFE6         	movff	int_high@i+1,postinc1
  3342  0005B2  ECEF  F004         	call	___wmul	;wreg free
  3343  0005B6  0E08               	movlw	8
  3344  0005B8  2649               	addwf	btemp,f,c
  3345  0005BA  0E00               	movlw	0
  3346  0005BC  224A               	addwfc	btemp+1,f,c
  3347  0005BE  0EEE               	movlw	low _F_APTOS
  3348  0005C0  2449               	addwf	btemp,w,c
  3349  0005C2  6ED9               	movwf	fsr2l,c
  3350  0005C4  0E00               	movlw	high _F_APTOS
  3351  0005C6  204A               	addwfc	btemp+1,w,c
  3352  0005C8  6EDA               	movwf	fsr2h,c
  3353  0005CA  0E03               	movlw	3
  3354  0005CC  18DE               	xorwf	postinc2,w,c
  3355  0005CE  A4D8               	btfss	status,2,c
  3356  0005D0  D045               	goto	i2l98
  3357                           
  3358                           ;kernel.c: 113: F_APTOS[i].delay_time--;
  3359  0005D2  0E6E               	movlw	110
  3360  0005D4  6EE6               	movwf	postinc1,c
  3361  0005D6  0E00               	movlw	0
  3362  0005D8  6EE6               	movwf	postinc1,c
  3363  0005DA  C010  FFE6         	movff	int_high@i,postinc1
  3364  0005DE  C011  FFE6         	movff	int_high@i+1,postinc1
  3365  0005E2  ECEF  F004         	call	___wmul	;wreg free
  3366  0005E6  0E06               	movlw	6
  3367  0005E8  2649               	addwf	btemp,f,c
  3368  0005EA  0E00               	movlw	0
  3369  0005EC  224A               	addwfc	btemp+1,f,c
  3370  0005EE  0EEE               	movlw	low _F_APTOS
  3371  0005F0  2449               	addwf	btemp,w,c
  3372  0005F2  6ED9               	movwf	fsr2l,c
  3373  0005F4  0E00               	movlw	high _F_APTOS
  3374  0005F6  204A               	addwfc	btemp+1,w,c
  3375  0005F8  6EDA               	movwf	fsr2h,c
  3376  0005FA  06DE               	decf	postinc2,f,c
  3377  0005FC  0E00               	movlw	0
  3378  0005FE  5ADD               	subwfb	postdec2,f,c
  3379                           
  3380                           ;kernel.c: 114: if (F_APTOS[i].delay_time == 0) {
  3381  000600  0E6E               	movlw	110
  3382  000602  6EE6               	movwf	postinc1,c
  3383  000604  0E00               	movlw	0
  3384  000606  6EE6               	movwf	postinc1,c
  3385  000608  C010  FFE6         	movff	int_high@i,postinc1
  3386  00060C  C011  FFE6         	movff	int_high@i+1,postinc1
  3387  000610  ECEF  F004         	call	___wmul	;wreg free
  3388  000614  0E06               	movlw	6
  3389  000616  2649               	addwf	btemp,f,c
  3390  000618  0E00               	movlw	0
  3391  00061A  224A               	addwfc	btemp+1,f,c
  3392  00061C  0EEE               	movlw	low _F_APTOS
  3393  00061E  2449               	addwf	btemp,w,c
  3394  000620  6ED9               	movwf	fsr2l,c
  3395  000622  0E00               	movlw	high _F_APTOS
  3396  000624  204A               	addwfc	btemp+1,w,c
  3397  000626  6EDA               	movwf	fsr2h,c
  3398  000628  50DE               	movf	postinc2,w,c
  3399  00062A  10DE               	iorwf	postinc2,w,c
  3400  00062C  A4D8               	btfss	status,2,c
  3401  00062E  D016               	goto	i2l98
  3402                           
  3403                           ;kernel.c: 115: F_APTOS[i].task_state = READY;
  3404  000630  0E6E               	movlw	110
  3405  000632  6EE6               	movwf	postinc1,c
  3406  000634  0E00               	movlw	0
  3407  000636  6EE6               	movwf	postinc1,c
  3408  000638  C010  FFE6         	movff	int_high@i,postinc1
  3409  00063C  C011  FFE6         	movff	int_high@i+1,postinc1
  3410  000640  ECEF  F004         	call	___wmul	;wreg free
  3411  000644  0E08               	movlw	8
  3412  000646  2649               	addwf	btemp,f,c
  3413  000648  0E00               	movlw	0
  3414  00064A  224A               	addwfc	btemp+1,f,c
  3415  00064C  0EEE               	movlw	low _F_APTOS
  3416  00064E  2449               	addwf	btemp,w,c
  3417  000650  6ED9               	movwf	fsr2l,c
  3418  000652  0E00               	movlw	high _F_APTOS
  3419  000654  204A               	addwfc	btemp+1,w,c
  3420  000656  6EDA               	movwf	fsr2h,c
  3421  000658  0E01               	movlw	1
  3422  00065A  6EDF               	movwf	indf2,c
  3423  00065C                     i2l98:
  3424  00065C  4A10               	infsnz	int_high@i,f,c
  3425  00065E  2A11               	incf	int_high@i+1,f,c
  3426  000660                     i2l95:
  3427  000660  5029               	movf	_tasks_installed,w,c
  3428  000662  5C10               	subwf	int_high@i,w,c
  3429  000664  502A               	movf	_tasks_installed+1,w,c
  3430  000666  5811               	subwfb	int_high@i+1,w,c
  3431  000668  A0D8               	btfss	status,0,c
  3432  00066A  D79B               	goto	i2l96
  3433                           
  3434                           ;kernel.c: 116: }
  3435                           ;kernel.c: 117: }
  3436                           ;kernel.c: 118: }
  3437                           ;kernel.c: 120: quantum--;
  3438  00066C  0655               	decf	_quantum,f,c
  3439  00066E  A0D8               	btfss	status,0,c
  3440  000670  0656               	decf	_quantum+1,f,c
  3441                           
  3442                           ;kernel.c: 121: if (quantum == 0) {
  3443  000672  5055               	movf	_quantum,w,c
  3444  000674  1056               	iorwf	_quantum+1,w,c
  3445  000676  A4D8               	btfss	status,2,c
  3446  000678  D008               	goto	i2l100
  3447                           
  3448                           ;kernel.c: 122: quantum = 4;
  3449  00067A  0E00               	movlw	0
  3450  00067C  6E56               	movwf	_quantum+1,c
  3451  00067E  0E04               	movlw	4
  3452  000680  6E55               	movwf	_quantum,c
  3453                           
  3454                           ;kernel.c: 123: dispatcher(READY);
  3455  000682  0E01               	movlw	1
  3456  000684  6EE6               	movwf	postinc1,c
  3457  000686  EC0A  F000         	call	_dispatcher	;wreg free
  3458  00068A                     i2l100:
  3459  00068A  C00F  F054         	movff	??_int_high+14,btemp+11
  3460  00068E  C00E  F053         	movff	??_int_high+13,btemp+10
  3461  000692  C00D  F052         	movff	??_int_high+12,btemp+9
  3462  000696  C00C  F051         	movff	??_int_high+11,btemp+8
  3463  00069A  C00B  F04B         	movff	??_int_high+10,btemp+2
  3464  00069E  C00A  F04A         	movff	??_int_high+9,btemp+1
  3465  0006A2  C009  F049         	movff	??_int_high+8,btemp
  3466  0006A6  C008  FFF4         	movff	??_int_high+7,prodh
  3467  0006AA  C007  FFF3         	movff	??_int_high+6,prodl
  3468  0006AE  C006  FFDA         	movff	??_int_high+5,fsr2h
  3469  0006B2  C005  FFD9         	movff	??_int_high+4,fsr2l
  3470  0006B6  C004  FFE2         	movff	??_int_high+3,fsr1h
  3471  0006BA  C003  FFE1         	movff	??_int_high+2,fsr1l
  3472  0006BE  0011               	retfie		f
  3473  0006C0                     __end_of_int_high:
  3474                           	opt stack 0
  3475  0000                     tosu	equ	0xFFF
  3476                           tosh	equ	0xFFE
  3477                           tosl	equ	0xFFD
  3478                           stkptr	equ	0xFFC
  3479                           tblptru	equ	0xFF8
  3480                           tblptrh	equ	0xFF7
  3481                           tblptrl	equ	0xFF6
  3482                           tablat	equ	0xFF5
  3483                           prodh	equ	0xFF4
  3484                           prodl	equ	0xFF3
  3485                           intcon	equ	0xFF2
  3486                           postinc0	equ	0xFEE
  3487                           postdec0	equ	0xFED
  3488                           plusw0	equ	0xFEB
  3489                           fsr0h	equ	0xFEA
  3490                           fsr0l	equ	0xFE9
  3491                           wreg	equ	0xFE8
  3492                           postinc1	equ	0xFE6
  3493                           postdec1	equ	0xFE5
  3494                           plusw1	equ	0xFE3
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           bsr	equ	0xFE0
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           plusw2	equ	0xFDB
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           tosu	equ	0xFFF
  3506                           tosh	equ	0xFFE
  3507                           tosl	equ	0xFFD
  3508                           stkptr	equ	0xFFC
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           postinc0	equ	0xFEE
  3517                           postdec0	equ	0xFED
  3518                           plusw0	equ	0xFEB
  3519                           fsr0h	equ	0xFEA
  3520                           fsr0l	equ	0xFE9
  3521                           wreg	equ	0xFE8
  3522                           postinc1	equ	0xFE6
  3523                           postdec1	equ	0xFE5
  3524                           plusw1	equ	0xFE3
  3525                           fsr1h	equ	0xFE2
  3526                           fsr1l	equ	0xFE1
  3527                           bsr	equ	0xFE0
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           plusw2	equ	0xFDB
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536                           	psect	rparam
  3537  0000                     tosu	equ	0xFFF
  3538                           tosh	equ	0xFFE
  3539                           tosl	equ	0xFFD
  3540                           stkptr	equ	0xFFC
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           postinc0	equ	0xFEE
  3549                           postdec0	equ	0xFED
  3550                           plusw0	equ	0xFEB
  3551                           fsr0h	equ	0xFEA
  3552                           fsr0l	equ	0xFE9
  3553                           wreg	equ	0xFE8
  3554                           postinc1	equ	0xFE6
  3555                           postdec1	equ	0xFE5
  3556                           plusw1	equ	0xFE3
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           bsr	equ	0xFE0
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           plusw2	equ	0xFDB
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568                           	psect	temp
  3569  000049                     btemp:
  3570                           	opt stack 0
  3571  000049                     	ds	12
  3572  0000                     wtemp0	set	btemp
  3573  0000                     wtemp1	set	btemp+2
  3574  0000                     wtemp2	set	btemp+4
  3575  0000                     wtemp3	set	btemp+6
  3576  0000                     wtemp4	set	btemp+8
  3577  0000                     wtemp5	set	btemp+10
  3578  0000                     wtemp6	set	btemp+1
  3579  0000                     ttemp0	set	btemp
  3580  0000                     ttemp1	set	btemp+3
  3581  0000                     ttemp2	set	btemp+6
  3582  0000                     ttemp3	set	btemp+9
  3583  0000                     ltemp0	set	btemp
  3584  0000                     ltemp1	set	btemp+4
  3585  0000                     ltemp2	set	btemp+8
  3586                           tosu	equ	0xFFF
  3587                           tosh	equ	0xFFE
  3588                           tosl	equ	0xFFD
  3589                           stkptr	equ	0xFFC
  3590                           tblptru	equ	0xFF8
  3591                           tblptrh	equ	0xFF7
  3592                           tblptrl	equ	0xFF6
  3593                           tablat	equ	0xFF5
  3594                           prodh	equ	0xFF4
  3595                           prodl	equ	0xFF3
  3596                           intcon	equ	0xFF2
  3597                           postinc0	equ	0xFEE
  3598                           postdec0	equ	0xFED
  3599                           plusw0	equ	0xFEB
  3600                           fsr0h	equ	0xFEA
  3601                           fsr0l	equ	0xFE9
  3602                           wreg	equ	0xFE8
  3603                           postinc1	equ	0xFE6
  3604                           postdec1	equ	0xFE5
  3605                           plusw1	equ	0xFE3
  3606                           fsr1h	equ	0xFE2
  3607                           fsr1l	equ	0xFE1
  3608                           bsr	equ	0xFE0
  3609                           indf2	equ	0xFDF
  3610                           postinc2	equ	0xFDE
  3611                           postdec2	equ	0xFDD
  3612                           plusw2	equ	0xFDB
  3613                           fsr2h	equ	0xFDA
  3614                           fsr2l	equ	0xFD9
  3615                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1096
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     38      74
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 16
		 -> s(COMRAM[16]), 

    sem_init@s	PTR struct sem size(2) Largest target is 16
		 -> s(COMRAM[16]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    S77tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    main@mem	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_SRAMalloc
    _setupOS->_create_task
    _SRAMalloc->__SRAMmerge

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _task_one in BANK0

    None.

Critical Paths under _task_two in BANK0

    None.

Critical Paths under _task_thre in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _task_one in BANK0

    None.

Critical Paths under _task_two in BANK0

    None.

Critical Paths under _task_thre in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _task_one in BANK1

    None.

Critical Paths under _task_two in BANK1

    None.

Critical Paths under _task_thre in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _task_one in BANK1

    None.

Critical Paths under _task_two in BANK1

    None.

Critical Paths under _task_thre in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5795
                                             36 COMRAM     2     2      0
                          _SRAMalloc
                        _create_task
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2465
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     105
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SRAMalloc                                           11     9      2     969
                                             25 COMRAM    11     9      2
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (2) __SRAMmerge                                           8     6      2     478
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             0     0      0    7316
                              _delay
                           _sem_init
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3102
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_init                                             4     0      4      82
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             0     0      0    4132
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            0     0      0    4132
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             0     0      0    7316
                              _delay
                           _sem_init
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3102
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_init                                             4     0      4      82
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             0     0      0    4132
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            0     0      0    4132
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4132
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4162
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMalloc
     __SRAMmerge
   _create_task
     ___wmul
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _task_one (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_init
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_two (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_thre (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _task_one (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_init
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_two (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_thre (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     426      17       69.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     26      4A       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      15        0.0%
DATA                 0      0     4E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Oct 10 19:03:19 2018

                      _s 002B                       l19 0BD2                       l72 0358  
                     u70 0C48            SRAMalloc@temp 0020                      l231 0740  
                    l223 06D2                      l225 06DA                      l241 0C3C  
                    l226 0700                      l242 0C6A                      l251 0980  
                    l227 078A                      l228 0720                      l254 098E  
                    l255 09CE                      l249 0974                      l902 0902  
                    l892 0892                      _BSR 000FE0                      u421 0C20  
                    u460 097C                      _TOS 000FFD            create_task@id 0012  
                    wreg 000FE8           SRAMalloc@pHeap 0023        SRAMInitHeap@pHeap 0014  
      SRAMInitHeap@count 0012                     l1300 0A8C                     l1136 0DEC  
                   l1412 00D0                     l1432 02EA                     l1522 0D92  
                   l1516 0DC2                     l1508 0CA0                     l1468 0872  
                   i2l95 0660                     i2l96 05A2                     i2l98 065C  
                   _TOSH 000FFE                     _TOSL 000FFD                     _WREG 000FE8  
                   _TOSU 000FFF                     u2_20 08BA                     u4_20 0920  
                   _main 0B68                     _pipe 003B                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0049                     prodh 000FF4                     prodl 000FF3  
                   start 000C          SRAMalloc@nBytes 0022             ___param_bank 000000  
        SRAMalloc@segLen 001E                    ?_main 0001          _tasks_installed 0029  
                  i2l100 068A          __end_of___lwmod 0936                    u23_20 0DF4  
                  u23_26 0DF6                    _TMR0L 000FD6                    u64_20 0CB4  
                  u64_26 0CB6                    u65_20 0DCA                    u57_20 0528  
                  u65_26 0DCC                    u66_20 0D9A                    u66_26 0D9C  
             __SRAMmerge 0936                    _delay 0CD2          create_task@task 0080  
     __size_of_SRAMalloc 00DE                    tablat 000FF5                    ltemp0 0049  
                  ltemp1 004D                    ltemp2 0051          __end_of_setupOS 0D8E  
                  plusw0 000FEB                    plusw1 000FE3                    plusw2 000FDB  
                  ttemp0 0049                    ttemp1 004C                    ttemp2 004F  
                  ttemp3 0052                    status 000FD8                    wtemp0 0049  
                  wtemp1 004B                    wtemp2 004D                    wtemp3 004F  
                  wtemp4 0051                    wtemp5 0053                    wtemp6 004A  
        __initialization 0D1A             __end_of_main 0BD4                   ??_main 0025  
          __activetblptr 000000                   _STATUS 000FD8                   _STKPTR 000FFC  
   __size_of_create_task 005A                   ___wmul 09DE        __end_of_SRAMalloc 079E  
                 clear_0 0D3A                   clear_1 0D4C         __end_of_int_high 06C0  
       create_task@prior 0014         __end_of_sem_init 0B68         __end_of_sem_wait 087A  
       __end_of_task_one 0CD2             __pdataCOMRAM 0055         __end_of_task_two 0DEA  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_setupOS 0018              ?__SRAMmerge 0012         __end_of_start_os 0E0E  
             __accesstop 0080  __end_of__initialization 0D52            ___rparam_used 000001  
         __pcstackCOMRAM 0001               ___inthi_sp 0564            __end_of_delay 0D1A  
        __SRAMmerge@uSum 0015            __uDynamicHeap 0314      __size_of__SRAMmerge 00A8  
     __size_of_task_idle 0020       __size_of_task_thre 0030                  _F_APTOS 00EE  
             _dispatcher 0014                ?_int_high 0001                  __Hparam 0000  
                __Lparam 0000          __size_of___wmul 0096                  ___lwmod 087A  
              ?_start_os 0001                  __pcinit 0D1A                  __ramtop 0600  
          ?_SRAMInitHeap 0001                  __ptext0 0B68                  __ptext1 0E0A  
                __ptext2 0D58                  __ptext3 0BD4                  __ptext4 09DE  
                __ptext5 0C2E                  __ptext6 06C0                  __ptext7 0936  
                __ptext8 0C88                  __ptext9 079E                _T0CONbits 000FD5  
                _setupOS 0D58        create_task@task_f 0016                  _quantum 0055  
                main@mem 0025           __pintcode_body 0554     end_of_initialization 0D52  
      __end_of_task_idle 0E0A                  int_func 0554        __end_of_task_thre 0DBE  
             ??_int_high 0001                  postdec0 000FED                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_start_os 0012           ??_SRAMInitHeap 0012  
              _PORTDbits 000F83                _SRAMalloc 06C0                _TRISDbits 000F95  
           ??__SRAMmerge 0014            ??_create_task 0018       __end_of__SRAMmerge 09DE  
         __end_of___wmul 0A74            __pidataCOMRAM 0E0E               ?_SRAMalloc 001A  
    start_initialization 0D1A       SRAMalloc@segHeader 001F         __SRAMmerge@pSegA 0012  
       __SRAMmerge@pSegB 0018         __SRAMmerge@uSegA 0016         __SRAMmerge@uSegB 0017  
    __end_of_create_task 0C2E      __size_of_dispatcher 0540              __pbssBIGRAM 00EE  
            __pbssCOMRAM 0027            __pcstackBANK0 0080     __end_of_SRAMInitHeap 0C88  
      __size_of_int_high 06B8                __pintcode 0008        __size_of_sem_init 0070  
      __size_of_sem_wait 00DC        __size_of_task_one 004A        __size_of_task_two 002C  
      __size_of_start_os 0004              ??_SRAMalloc 001C                 ?_setupOS 0001  
         __size_of_delay 0048     __end_of_rr_scheduler 0AF8              _create_task 0BD4  
              _task_idle 0DEA                _task_thre 0D8E                 __Hrparam 0000  
               __Lrparam 0000                int_high@i 0010       __end_of_dispatcher 0554  
       __size_of___lwmod 00BC    __size_of_SRAMInitHeap 005A                 __ptext10 0AF8  
               __ptext11 0CD2                 __ptext12 0014                 __ptext13 0A74  
               __ptext14 087A                 __ptext15 0DBE                 __ptext16 0D8E  
               __ptext17 0DEA         __size_of_setupOS 0036            __size_of_main 006C  
               _int_high 0008                 _sem_init 0AF8                 _sem_wait 079E  
               _task_one 0C88                 _task_two 0DBE             _task_running 0027  
               _start_os 0E0A             _SRAMInitHeap 0C2E    __size_of_rr_scheduler 0084  
             _INTCONbits 000FF2                 intlevel1 0000                 intlevel2 0000  
           _rr_scheduler 0A74             ?_create_task 0012  
