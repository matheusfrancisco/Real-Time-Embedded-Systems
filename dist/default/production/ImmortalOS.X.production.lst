

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Oct 15 17:43:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4520 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72 ;;___wmul@product	offset	0
    73 ;;___wmul@multiplier	offset=-2 (param)
    74 ;;___wmul@multiplicand	offset=-4 (param)
    75 ;;write_pipe@pipe	offset=-2 (param)
    76 ;;write_pipe@data	offset=-3 (param)
    77 ;;delay@time_ms	offset=-2 (param)
    78 ;;dispatcher@state	offset=-1 (param)
    79 ;;rr_scheduler@next_task_to_run	offset	0
    80 ;;___wmul@product	offset	0
    81 ;;___wmul@multiplier	offset=-2 (param)
    82 ;;___wmul@multiplicand	offset=-4 (param)
    83 ;;___lwmod@counter	offset	0
    84 ;;___lwmod@dividend	offset=-2 (param)
    85 ;;___lwmod@divisor	offset=-4 (param)
    86 ;;create_pipe@pipe	offset=-2 (param)
    87 ;;read_pipe@dado	offset	0
    88 ;;read_pipe@pipe	offset=-2 (param)
    89 ;;dispatcher@state	offset=-1 (param)
    90 ;;rr_scheduler@next_task_to_run	offset	0
    91 ;;___wmul@product	offset	0
    92 ;;___wmul@multiplier	offset=-2 (param)
    93 ;;___wmul@multiplicand	offset=-4 (param)
    94 ;;___lwmod@counter	offset	0
    95 ;;___lwmod@dividend	offset=-2 (param)
    96 ;;___lwmod@divisor	offset=-4 (param)
    97                           
    98                           	psect	idataCOMRAM
    99  001082                     __pidataCOMRAM:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _quantum
   103  001082  0004               	dw	4
   104  0000                     _TOS	set	4093
   105  0000                     _TMR0L	set	4054
   106  0000                     _T0CONbits	set	4053
   107  0000                     _PORTDbits	set	3971
   108  0000                     _TRISDbits	set	3989
   109  0000                     _STKPTR	set	4092
   110  0000                     _TOSH	set	4094
   111  0000                     _TOSL	set	4093
   112  0000                     _TOSU	set	4095
   113  0000                     _WREG	set	4072
   114  0000                     _STATUS	set	4056
   115  0000                     _BSR	set	4064
   116  0000                     _INTCONbits	set	4082
   117                           
   118                           ; #config settings
   119                           
   120                           	psect	cinit
   121  000F82                     __pcinit:
   122                           	opt stack 0
   123  000F82                     start_initialization:
   124                           	opt stack 0
   125  000F82                     __initialization:
   126                           	opt stack 0
   127                           
   128                           ; Initialize objects allocated to COMRAM (2 bytes)
   129                           ; load TBLPTR registers with __pidataCOMRAM
   130  000F82  0E82               	movlw	low __pidataCOMRAM
   131  000F84  6EF6               	movwf	tblptrl,c
   132  000F86  0E10               	movlw	high __pidataCOMRAM
   133  000F88  6EF7               	movwf	tblptrh,c
   134  000F8A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   135  000F8C  6EF8               	movwf	tblptru,c
   136  000F8E  0009               	tblrd		*+	;fetch initializer
   137  000F90  CFF5 F055          	movff	tablat,__pdataCOMRAM
   138  000F94  0009               	tblrd		*+	;fetch initializer
   139  000F96  CFF5 F056          	movff	tablat,__pdataCOMRAM+1
   140                           
   141                           ; Clear objects allocated to BIGRAM (1062 bytes)
   142  000F9A  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   143  000F9E  EE24 F026          	lfsr	2,1062
   144  000FA2                     clear_0:
   145  000FA2  6AEE               	clrf	postinc0,c
   146  000FA4  50DD               	movf	postdec2,w,c
   147  000FA6  50D9               	movf	fsr2l,w,c
   148  000FA8  E1FC               	bnz	clear_0
   149  000FAA  50DA               	movf	fsr2h,w,c
   150  000FAC  E1FA               	bnz	clear_0
   151                           
   152                           ; Clear objects allocated to COMRAM (34 bytes)
   153  000FAE  EE00  F027         	lfsr	0,__pbssCOMRAM
   154  000FB2  0E22               	movlw	34
   155  000FB4                     clear_1:
   156  000FB4  6AEE               	clrf	postinc0,c
   157  000FB6  06E8               	decf	wreg,f,c
   158  000FB8  E1FD               	bnz	clear_1
   159  000FBA                     end_of_initialization:
   160                           	opt stack 0
   161  000FBA                     __end_of__initialization:
   162                           	opt stack 0
   163  000FBA  0100               	movlb	0
   164  000FBC  EFEA  F006         	goto	_main	;jump to C main() function
   165                           tblptru	equ	0xFF8
   166                           tblptrh	equ	0xFF7
   167                           tblptrl	equ	0xFF6
   168                           tablat	equ	0xFF5
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           postdec2	equ	0xFDD
   172                           fsr2h	equ	0xFDA
   173                           fsr2l	equ	0xFD9
   174                           
   175                           	psect	bssCOMRAM
   176  000027                     __pbssCOMRAM:
   177                           	opt stack 0
   178  000027                     _s:
   179                           	opt stack 0
   180  000027                     	ds	16
   181  000037                     _task_running:
   182                           	opt stack 0
   183  000037                     	ds	2
   184  000039                     _tasks_installed:
   185                           	opt stack 0
   186  000039                     	ds	2
   187  00003B                     _pipe:
   188                           	opt stack 0
   189  00003B                     	ds	14
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           postdec2	equ	0xFDD
   197                           fsr2h	equ	0xFDA
   198                           fsr2l	equ	0xFD9
   199                           
   200                           	psect	dataCOMRAM
   201  000055                     __pdataCOMRAM:
   202                           	opt stack 0
   203  000055                     _quantum:
   204                           	opt stack 0
   205  000055                     	ds	2
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           postdec2	equ	0xFDD
   213                           fsr2h	equ	0xFDA
   214                           fsr2l	equ	0xFD9
   215                           
   216                           	psect	bssBIGRAM
   217  0000EE                     __pbssBIGRAM:
   218                           	opt stack 0
   219  0000EE                     _F_APTOS:
   220                           	opt stack 0
   221  0000EE                     	ds	550
   222  000314                     __uDynamicHeap:
   223                           	opt stack 0
   224  000314                     	ds	512
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           postdec2	equ	0xFDD
   232                           fsr2h	equ	0xFDA
   233                           fsr2l	equ	0xFD9
   234                           
   235                           	psect	cstackBANK0
   236  000080                     __pcstackBANK0:
   237                           	opt stack 0
   238  000080                     create_task@task:
   239                           	opt stack 0
   240                           
   241                           ; 110 bytes @ 0x0
   242  000080                     	ds	110
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec2	equ	0xFDD
   250                           fsr2h	equ	0xFDA
   251                           fsr2l	equ	0xFD9
   252                           
   253                           	psect	cstackCOMRAM
   254  000001                     __pcstackCOMRAM:
   255                           	opt stack 0
   256  000001                     ??_int_high:
   257                           
   258                           ; 1 bytes @ 0x0
   259  000001                     	ds	15
   260  000010                     int_high@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0xF
   264  000010                     	ds	2
   265  000012                     create_task@id:
   266                           	opt stack 0
   267  000012                     SRAMInitHeap@count:
   268                           	opt stack 0
   269  000012                     __SRAMmerge@pSegA:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x11
   273  000012                     	ds	2
   274  000014                     ??__SRAMmerge:
   275  000014                     create_task@prior:
   276                           	opt stack 0
   277  000014                     SRAMInitHeap@pHeap:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x13
   281  000014                     	ds	1
   282  000015                     __SRAMmerge@uSum:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x14
   286  000015                     	ds	1
   287  000016                     __SRAMmerge@uSegA:
   288                           	opt stack 0
   289  000016                     create_task@task_f:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x15
   293  000016                     	ds	1
   294  000017                     __SRAMmerge@uSegB:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x16
   298  000017                     	ds	1
   299  000018                     __SRAMmerge@pSegB:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x17
   303  000018                     	ds	2
   304  00001A                     ?_SRAMalloc:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x19
   308  00001A                     	ds	2
   309  00001C                     ??_SRAMalloc:
   310                           
   311                           ; 1 bytes @ 0x1B
   312  00001C                     	ds	2
   313  00001E                     SRAMalloc@segLen:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x1D
   317  00001E                     	ds	1
   318  00001F                     SRAMalloc@segHeader:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x1E
   322  00001F                     	ds	1
   323  000020                     SRAMalloc@temp:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x1F
   327  000020                     	ds	2
   328  000022                     SRAMalloc@nBytes:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x21
   332  000022                     	ds	1
   333  000023                     SRAMalloc@pHeap:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x22
   337  000023                     	ds	2
   338  000025                     main@mem:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x24
   342  000025                     	ds	2
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec2	equ	0xFDD
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           
   353 ;;
   354 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   355 ;;
   356 ;; *************** function _main *****************
   357 ;; Defined at:
   358 ;;		line 13 in file "main.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  mem             2   36[COMRAM] PTR unsigned char 
   363 ;;		 -> _uDynamicHeap(512), NULL(0), 
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   373 ;;      Params:         0       0       0       0       0       0       0
   374 ;;      Locals:         2       0       0       0       0       0       0
   375 ;;      Temps:          0       0       0       0       0       0       0
   376 ;;      Totals:         2       0       0       0       0       0       0
   377 ;;Total ram usage:        2 bytes
   378 ;; Hardware stack levels required when called:   12
   379 ;; This function calls:
   380 ;;		_SRAMalloc
   381 ;;		_create_task
   382 ;;		_setupOS
   383 ;;		_start_os
   384 ;; This function is called by:
   385 ;;		Startup code after reset
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           	psect	text0
   390  000DD4                     __ptext0:
   391                           	opt stack 0
   392  000DD4                     _main:
   393                           	opt stack 19
   394                           
   395                           ;main.c: 15: setupOS();
   396                           
   397                           ;incstack = 0
   398  000DD4  ECFC  F007         	call	_setupOS	;wreg free
   399                           
   400                           ;main.c: 18: create_task(2, 3, &task_one);
   401  000DD8  0E00               	movlw	0
   402  000DDA  6E13               	movwf	create_task@id+1,c
   403  000DDC  0E02               	movlw	2
   404  000DDE  6E12               	movwf	create_task@id,c
   405  000DE0  0E00               	movlw	0
   406  000DE2  6E15               	movwf	create_task@prior+1,c
   407  000DE4  0E03               	movlw	3
   408  000DE6  6E14               	movwf	create_task@prior,c
   409  000DE8  0E3C               	movlw	low _task_one
   410  000DEA  6E16               	movwf	create_task@task_f,c
   411  000DEC  0E0F               	movlw	high _task_one
   412  000DEE  6E17               	movwf	create_task@task_f+1,c
   413  000DF0  EC20  F007         	call	_create_task	;wreg free
   414                           
   415                           ;main.c: 19: create_task(3, 3, &task_two);
   416  000DF4  0E00               	movlw	0
   417  000DF6  6E13               	movwf	create_task@id+1,c
   418  000DF8  0E03               	movlw	3
   419  000DFA  6E12               	movwf	create_task@id,c
   420  000DFC  0E00               	movlw	0
   421  000DFE  6E15               	movwf	create_task@prior+1,c
   422  000E00  0E03               	movlw	3
   423  000E02  6E14               	movwf	create_task@prior,c
   424  000E04  0EC0               	movlw	low _task_two
   425  000E06  6E16               	movwf	create_task@task_f,c
   426  000E08  0E0F               	movlw	high _task_two
   427  000E0A  6E17               	movwf	create_task@task_f+1,c
   428  000E0C  EC20  F007         	call	_create_task	;wreg free
   429                           
   430                           ;main.c: 20: create_task(4, 3, &task_thre);
   431  000E10  0E00               	movlw	0
   432  000E12  6E13               	movwf	create_task@id+1,c
   433  000E14  0E04               	movlw	4
   434  000E16  6E12               	movwf	create_task@id,c
   435  000E18  0E00               	movlw	0
   436  000E1A  6E15               	movwf	create_task@prior+1,c
   437  000E1C  0E03               	movlw	3
   438  000E1E  6E14               	movwf	create_task@prior,c
   439  000E20  0E2E               	movlw	low _task_thre
   440  000E22  6E16               	movwf	create_task@task_f,c
   441  000E24  0E10               	movlw	high _task_thre
   442  000E26  6E17               	movwf	create_task@task_f+1,c
   443  000E28  EC20  F007         	call	_create_task	;wreg free
   444                           
   445                           ;main.c: 24: start_os();
   446  000E2C  EC3F  F008         	call	_start_os	;wreg free
   447                           
   448                           ;main.c: 28: byte *mem = SRAMalloc(100);
   449  000E30  0E64               	movlw	100
   450  000E32  ECE9  F004         	call	_SRAMalloc
   451  000E36  C01A  F025         	movff	?_SRAMalloc,main@mem
   452  000E3A  C01B  F026         	movff	?_SRAMalloc+1,main@mem+1
   453  000E3E                     l19:
   454  000E3E  D7FF               	goto	l19
   455  000E40                     __end_of_main:
   456                           	opt stack 0
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec2	equ	0xFDD
   464                           fsr2h	equ	0xFDA
   465                           fsr2l	equ	0xFD9
   466                           
   467 ;; *************** function _start_os *****************
   468 ;; Defined at:
   469 ;;		line 127 in file "kernel.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		None
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   483 ;;      Params:         0       0       0       0       0       0       0
   484 ;;      Locals:         0       0       0       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0       0       0
   486 ;;      Totals:         0       0       0       0       0       0       0
   487 ;;Total ram usage:        0 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; Hardware stack levels required when called:    9
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           	psect	text1
   498  00107E                     __ptext1:
   499                           	opt stack 0
   500  00107E                     _start_os:
   501                           	opt stack 21
   502                           
   503                           ;kernel.c: 132: T0CONbits.TMR0ON = 1;
   504                           
   505                           ;incstack = 0
   506  00107E  8ED5               	bsf	4053,7,c	;volatile
   507  001080  0012               	return		;funcret
   508  001082                     __end_of_start_os:
   509                           	opt stack 0
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec2	equ	0xFDD
   517                           fsr2h	equ	0xFDA
   518                           fsr2l	equ	0xFD9
   519                           
   520 ;; *************** function _setupOS *****************
   521 ;; Defined at:
   522 ;;		line 79 in file "kernel.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   536 ;;      Params:         0       0       0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; Hardware stack levels required when called:   11
   543 ;; This function calls:
   544 ;;		_SRAMInitHeap
   545 ;;		_create_task
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text2
   552  000FF8                     __ptext2:
   553                           	opt stack 0
   554  000FF8                     _setupOS:
   555                           	opt stack 19
   556                           
   557                           ;kernel.c: 85: T0CONbits.T0CS = 0;
   558                           
   559                           ;incstack = 0
   560  000FF8  9AD5               	bcf	4053,5,c	;volatile
   561                           
   562                           ;kernel.c: 86: T0CONbits.PSA = 0;
   563  000FFA  96D5               	bcf	4053,3,c	;volatile
   564                           
   565                           ;kernel.c: 87: T0CONbits.T0PS = 0b111;
   566  000FFC  80D5               	bsf	4053,0,c	;volatile
   567  000FFE  82D5               	bsf	4053,1,c	;volatile
   568  001000  84D5               	bsf	4053,2,c	;volatile
   569                           
   570                           ;kernel.c: 88: INTCONbits.PEIE = 1;
   571  001002  8CF2               	bsf	intcon,6,c	;volatile
   572                           
   573                           ;kernel.c: 89: INTCONbits.TMR0IE = 1;
   574  001004  8AF2               	bsf	intcon,5,c	;volatile
   575                           
   576                           ;kernel.c: 90: TMR0L = 252;
   577  001006  0EFC               	movlw	252
   578  001008  6ED6               	movwf	4054,c	;volatile
   579                           
   580                           ;kernel.c: 93: create_task(1,5, &task_idle);
   581  00100A  0E00               	movlw	0
   582  00100C  6E13               	movwf	create_task@id+1,c
   583  00100E  0E01               	movlw	1
   584  001010  6E12               	movwf	create_task@id,c
   585  001012  0E00               	movlw	0
   586  001014  6E15               	movwf	create_task@prior+1,c
   587  001016  0E05               	movlw	5
   588  001018  6E14               	movwf	create_task@prior,c
   589  00101A  0E5E               	movlw	low _task_idle
   590  00101C  6E16               	movwf	create_task@task_f,c
   591  00101E  0E10               	movlw	high _task_idle
   592  001020  6E17               	movwf	create_task@task_f+1,c
   593  001022  EC20  F007         	call	_create_task	;wreg free
   594                           
   595                           ;kernel.c: 97: SRAMInitHeap();
   596  001026  EC4D  F007         	call	_SRAMInitHeap	;wreg free
   597                           
   598                           ;kernel.c: 99: (INTCONbits.GIE = 1);
   599  00102A  8EF2               	bsf	intcon,7,c	;volatile
   600  00102C  0012               	return		;funcret
   601  00102E                     __end_of_setupOS:
   602                           	opt stack 0
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           intcon	equ	0xFF2
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           postdec2	equ	0xFDD
   611                           fsr2h	equ	0xFDA
   612                           fsr2l	equ	0xFD9
   613                           
   614 ;; *************** function _create_task *****************
   615 ;; Defined at:
   616 ;;		line 19 in file "kernel.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  id              2   17[COMRAM] unsigned int 
   619 ;;  prior           2   19[COMRAM] unsigned int 
   620 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   621 ;;		 -> task_idle(1), task_thre(1), task_two(1), task_one(1), 
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  task          110    0[BANK0 ] struct tcb
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   633 ;;      Params:         6       0       0       0       0       0       0
   634 ;;      Locals:         0     110       0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0
   636 ;;      Totals:         6     110       0       0       0       0       0
   637 ;;Total ram usage:      116 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:   10
   640 ;; This function calls:
   641 ;;		___wmul
   642 ;; This function is called by:
   643 ;;		_main
   644 ;;		_setupOS
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text3
   649  000E40                     __ptext3:
   650                           	opt stack 0
   651  000E40                     _create_task:
   652                           	opt stack 19
   653                           
   654                           ;kernel.c: 21: tcb_t task;
   655                           ;kernel.c: 23: task.task_id = id;
   656                           
   657                           ;incstack = 0
   658  000E40  C012  F080         	movff	create_task@id,create_task@task
   659  000E44  C013  F081         	movff	create_task@id+1,create_task@task+1
   660                           
   661                           ;kernel.c: 24: task.task_prior = prior;
   662  000E48  C014  F082         	movff	create_task@prior,create_task@task+2
   663  000E4C  C015  F083         	movff	create_task@prior+1,create_task@task+3
   664                           
   665                           ;kernel.c: 25: task.task_f = task_f;
   666  000E50  C016  F084         	movff	create_task@task_f,create_task@task+4
   667  000E54  C017  F085         	movff	create_task@task_f+1,create_task@task+5
   668                           
   669                           ;kernel.c: 26: task.task_stack.stack_size = 0;
   670  000E58  0E00               	movlw	0
   671  000E5A  0100               	movlb	0	; () banked
   672  000E5C  6FEA               	movwf	(create_task@task+106)& (0+255),b
   673  000E5E  0E00               	movlw	0
   674  000E60  6FE9               	movwf	(create_task@task+105)& (0+255),b
   675                           
   676                           ; BSR set to: 0
   677                           ;kernel.c: 27: task.task_state = READY;
   678  000E62  0E01               	movlw	1
   679  000E64  6F88               	movwf	(create_task@task+8)& (0+255),b
   680                           
   681                           ; BSR set to: 0
   682                           ;kernel.c: 29: F_APTOS[tasks_installed] = task;
   683  000E66  0E6E               	movlw	110
   684  000E68  6EE6               	movwf	postinc1,c
   685  000E6A  0E00               	movlw	0
   686  000E6C  6EE6               	movwf	postinc1,c
   687  000E6E  C039  FFE6         	movff	_tasks_installed,postinc1
   688  000E72  C03A  FFE6         	movff	_tasks_installed+1,postinc1
   689  000E76  EC5D  F006         	call	___wmul	;wreg free
   690  000E7A  0EEE               	movlw	low _F_APTOS
   691  000E7C  2449               	addwf	btemp,w,c
   692  000E7E  6EE9               	movwf	fsr0l,c
   693  000E80  0E00               	movlw	high _F_APTOS
   694  000E82  204A               	addwfc	btemp+1,w,c
   695  000E84  6EEA               	movwf	fsr0h,c
   696  000E86  EE20  F080         	lfsr	2,create_task@task
   697  000E8A  0E6D               	movlw	109
   698  000E8C                     u401:
   699  000E8C  CFDB FFEB          	movff	plusw2,plusw0
   700  000E90  06E8               	decf	wreg,f,c
   701  000E92  E2FC               	bc	u401
   702                           
   703                           ;kernel.c: 30: tasks_installed++;
   704  000E94  4A39               	infsnz	_tasks_installed,f,c
   705  000E96  2A3A               	incf	_tasks_installed+1,f,c
   706  000E98  0012               	return		;funcret
   707  000E9A                     __end_of_create_task:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           intcon	equ	0xFF2
   714                           postinc0	equ	0xFEE
   715                           plusw0	equ	0xFEB
   716                           fsr0h	equ	0xFEA
   717                           fsr0l	equ	0xFE9
   718                           wreg	equ	0xFE8
   719                           postinc1	equ	0xFE6
   720                           postdec2	equ	0xFDD
   721                           plusw2	equ	0xFDB
   722                           fsr2h	equ	0xFDA
   723                           fsr2l	equ	0xFD9
   724                           
   725 ;; *************** function ___wmul *****************
   726 ;; Defined at:
   727 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;  multiplier      2  [STACK] unsigned int 
   730 ;;  multiplicand    2  [STACK] unsigned int 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  product         2  [STACK] unsigned int 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  2  [STACK] unsigned int 
   735 ;; Registers used:
   736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   742 ;;      Params:         0       0       0       0       0       0       0
   743 ;;      Locals:         0       0       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0
   745 ;;      Totals:         0       0       0       0       0       0       0
   746 ;;Total ram usage:        0 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    9
   749 ;; This function calls:
   750 ;;		Nothing
   751 ;; This function is called by:
   752 ;;		_create_task
   753 ;;		_dispatcher
   754 ;;		_delay
   755 ;;		_int_high
   756 ;;		_rr_scheduler
   757 ;;		_write_pipe
   758 ;;		_read_pipe
   759 ;;		_get_id
   760 ;;		_prior_scheduler
   761 ;;		_sem_post
   762 ;; This function uses a reentrant model
   763 ;;
   764                           
   765                           	psect	text4
   766  000CBA                     __ptext4:
   767                           	opt stack 0
   768  000CBA                     ___wmul:
   769                           	opt stack 0
   770                           
   771                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   772  000CBA  52E6               	movf	postinc1,f,c
   773  000CBC  52E6               	movf	postinc1,f,c
   774                           
   775                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   776                           
   777                           ;incstack = 0
   778  000CBE  0EFA               	movlw	-6
   779  000CC0  CFE3 F054          	movff	plusw1,btemp+11
   780                           
   781                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   782  000CC4  0EFC               	movlw	-4
   783  000CC6  50E3               	movf	plusw1,w,c
   784  000CC8  0254               	mulwf	btemp+11,c
   785                           
   786                           ;stkvar	___wmul@product @ sp[(-2)+0]
   787  000CCA  0EFE               	movlw	-2
   788  000CCC  CFF3 FFE3          	movff	prodl,plusw1
   789  000CD0  0EFF               	movlw	-1
   790  000CD2  CFF4 FFE3          	movff	prodh,plusw1
   791                           
   792                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   793  000CD6  0EFB               	movlw	251
   794  000CD8  24E1               	addwf	fsr1l,w,c
   795  000CDA  6ED9               	movwf	fsr2l,c
   796  000CDC  0EFF               	movlw	255
   797  000CDE  20E2               	addwfc	fsr1h,w,c
   798  000CE0  6EDA               	movwf	fsr2h,c
   799  000CE2  50DF               	movf	indf2,w,c
   800  000CE4  6E54               	movwf	btemp+11,c
   801                           
   802                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   803  000CE6  0EFC               	movlw	-4
   804  000CE8  50E3               	movf	plusw1,w,c
   805  000CEA  0254               	mulwf	btemp+11,c
   806  000CEC  CFF3 FFF4          	movff	prodl,prodh
   807  000CF0  6AF3               	clrf	prodl,c
   808                           
   809                           ;stkvar	___wmul@product @ sp[(-2)+0]
   810  000CF2  50E1               	movf	fsr1l,w,c
   811  000CF4  0FFE               	addlw	-2
   812  000CF6  6ED9               	movwf	fsr2l,c
   813  000CF8  50E2               	movf	fsr1h,w,c
   814  000CFA  6EDA               	movwf	fsr2h,c
   815  000CFC  0EFF               	movlw	255
   816  000CFE  22DA               	addwfc	fsr2h,f,c
   817  000D00  50F3               	movf	prodl,w,c
   818  000D02  26DE               	addwf	postinc2,f,c
   819  000D04  50F4               	movf	prodh,w,c
   820  000D06  22DD               	addwfc	postdec2,f,c
   821                           
   822                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   823  000D08  0EFA               	movlw	-6
   824  000D0A  CFE3 F054          	movff	plusw1,btemp+11
   825                           
   826                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   827  000D0E  0EFD               	movlw	253
   828  000D10  24E1               	addwf	fsr1l,w,c
   829  000D12  6ED9               	movwf	fsr2l,c
   830  000D14  0EFF               	movlw	255
   831  000D16  20E2               	addwfc	fsr1h,w,c
   832  000D18  6EDA               	movwf	fsr2h,c
   833  000D1A  50DF               	movf	indf2,w,c
   834  000D1C  0254               	mulwf	btemp+11,c
   835  000D1E  CFF3 FFF4          	movff	prodl,prodh
   836  000D22  6AF3               	clrf	prodl,c
   837                           
   838                           ;stkvar	___wmul@product @ sp[(-2)+0]
   839  000D24  50E1               	movf	fsr1l,w,c
   840  000D26  0FFE               	addlw	-2
   841  000D28  6ED9               	movwf	fsr2l,c
   842  000D2A  50E2               	movf	fsr1h,w,c
   843  000D2C  6EDA               	movwf	fsr2h,c
   844  000D2E  0EFF               	movlw	255
   845  000D30  22DA               	addwfc	fsr2h,f,c
   846  000D32  50F3               	movf	prodl,w,c
   847  000D34  26DE               	addwf	postinc2,f,c
   848  000D36  50F4               	movf	prodh,w,c
   849  000D38  22DD               	addwfc	postdec2,f,c
   850                           
   851                           ;stkvar	___wmul@product @ sp[(-2)+0]
   852  000D3A  0EFE               	movlw	-2
   853  000D3C  CFE3 F049          	movff	plusw1,btemp
   854  000D40  0EFF               	movlw	-1
   855  000D42  CFE3 F04A          	movff	plusw1,btemp+1
   856                           
   857                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   858  000D46  0EFA               	movlw	250
   859  000D48  26E1               	addwf	fsr1l,f,c
   860  000D4A  0EFF               	movlw	255
   861  000D4C  22E2               	addwfc	fsr1h,f,c
   862  000D4E  0012               	return		;funcret
   863  000D50                     __end_of___wmul:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           prodh	equ	0xFF4
   870                           prodl	equ	0xFF3
   871                           intcon	equ	0xFF2
   872                           postinc0	equ	0xFEE
   873                           plusw0	equ	0xFEB
   874                           fsr0h	equ	0xFEA
   875                           fsr0l	equ	0xFE9
   876                           wreg	equ	0xFE8
   877                           postinc1	equ	0xFE6
   878                           plusw1	equ	0xFE3
   879                           fsr1h	equ	0xFE2
   880                           fsr1l	equ	0xFE1
   881                           indf2	equ	0xFDF
   882                           postinc2	equ	0xFDE
   883                           postdec2	equ	0xFDD
   884                           plusw2	equ	0xFDB
   885                           fsr2h	equ	0xFDA
   886                           fsr2l	equ	0xFD9
   887                           
   888 ;; *************** function _SRAMInitHeap *****************
   889 ;; Defined at:
   890 ;;		line 300 in file "memory.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  count           2   17[COMRAM] unsigned int 
   895 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   896 ;;		 -> _uDynamicHeap(512), 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   906 ;;      Params:         0       0       0       0       0       0       0
   907 ;;      Locals:         4       0       0       0       0       0       0
   908 ;;      Temps:          0       0       0       0       0       0       0
   909 ;;      Totals:         4       0       0       0       0       0       0
   910 ;;Total ram usage:        4 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    9
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_setupOS
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text5
   921  000E9A                     __ptext5:
   922                           	opt stack 0
   923  000E9A                     _SRAMInitHeap:
   924                           	opt stack 20
   925                           
   926                           ;memory.c: 302: unsigned char * near pHeap;
   927                           ;memory.c: 303: near unsigned int count;
   928                           ;memory.c: 305: pHeap = _uDynamicHeap;
   929                           
   930                           ;incstack = 0
   931  000E9A  0E14               	movlw	low __uDynamicHeap
   932  000E9C  6E14               	movwf	SRAMInitHeap@pHeap,c
   933  000E9E  0E03               	movlw	high __uDynamicHeap
   934  000EA0  6E15               	movwf	SRAMInitHeap@pHeap+1,c
   935                           
   936                           ;memory.c: 306: count = 0x200-1;
   937  000EA2  0E01               	movlw	1
   938  000EA4  6E13               	movwf	SRAMInitHeap@count+1,c
   939  000EA6  6812               	setf	SRAMInitHeap@count,c
   940  000EA8                     
   941                           ;memory.c: 309: {
   942                           ;memory.c: 310: if (count > 0x7F)
   943  000EA8  5013               	movf	SRAMInitHeap@count+1,w,c
   944  000EAA  E104               	bnz	u70
   945  000EAC  0E80               	movlw	128
   946  000EAE  5C12               	subwf	SRAMInitHeap@count,w,c
   947  000EB0  A0D8               	btfss	status,0,c
   948  000EB2  D011               	goto	l226
   949  000EB4                     u70:
   950                           
   951                           ;memory.c: 311: {
   952                           ;memory.c: 312: *pHeap = 0x7F;
   953  000EB4  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   954  000EB8  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   955  000EBC  0E7F               	movlw	127
   956  000EBE  6EDF               	movwf	indf2,c
   957                           
   958                           ;memory.c: 313: pHeap += 0x7F;
   959  000EC0  0E7F               	movlw	127
   960  000EC2  2614               	addwf	SRAMInitHeap@pHeap,f,c
   961  000EC4  0E00               	movlw	0
   962  000EC6  2215               	addwfc	SRAMInitHeap@pHeap+1,f,c
   963                           
   964                           ;memory.c: 314: count = count - 0x7F;
   965  000EC8  0E81               	movlw	129
   966  000ECA  2412               	addwf	SRAMInitHeap@count,w,c
   967  000ECC  6E12               	movwf	SRAMInitHeap@count,c
   968  000ECE  0EFF               	movlw	255
   969  000ED0  2013               	addwfc	SRAMInitHeap@count+1,w,c
   970  000ED2  6E13               	movwf	SRAMInitHeap@count+1,c
   971                           
   972                           ;memory.c: 315: }
   973  000ED4  D7E9               	goto	l225
   974  000ED6                     l226:
   975                           
   976                           ;memory.c: 316: else
   977                           ;memory.c: 317: {
   978                           ;memory.c: 318: *pHeap = count;
   979  000ED6  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   980  000EDA  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   981  000EDE  C012  FFDF         	movff	SRAMInitHeap@count,indf2
   982                           
   983                           ;memory.c: 319: *(pHeap + count) = 0;
   984  000EE2  5012               	movf	SRAMInitHeap@count,w,c
   985  000EE4  2414               	addwf	SRAMInitHeap@pHeap,w,c
   986  000EE6  6ED9               	movwf	fsr2l,c
   987  000EE8  5013               	movf	SRAMInitHeap@count+1,w,c
   988  000EEA  2015               	addwfc	SRAMInitHeap@pHeap+1,w,c
   989  000EEC  6EDA               	movwf	fsr2h,c
   990  000EEE  0E00               	movlw	0
   991  000EF0  6EDF               	movwf	indf2,c
   992                           
   993                           ;memory.c: 320: return;
   994  000EF2  0012               	return	
   995  000EF4                     __end_of_SRAMInitHeap:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           prodh	equ	0xFF4
  1002                           prodl	equ	0xFF3
  1003                           intcon	equ	0xFF2
  1004                           postinc0	equ	0xFEE
  1005                           plusw0	equ	0xFEB
  1006                           fsr0h	equ	0xFEA
  1007                           fsr0l	equ	0xFE9
  1008                           wreg	equ	0xFE8
  1009                           postinc1	equ	0xFE6
  1010                           plusw1	equ	0xFE3
  1011                           fsr1h	equ	0xFE2
  1012                           fsr1l	equ	0xFE1
  1013                           indf2	equ	0xFDF
  1014                           postinc2	equ	0xFDE
  1015                           postdec2	equ	0xFDD
  1016                           plusw2	equ	0xFDB
  1017                           fsr2h	equ	0xFDA
  1018                           fsr2l	equ	0xFD9
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function _SRAMalloc *****************
  1022 ;; Defined at:
  1023 ;;		line 178 in file "memory.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  nBytes          1    wreg     near unsigned char 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  nBytes          1   33[COMRAM] near unsigned char 
  1028 ;;  pHeap           2   34[COMRAM] near PTR struct _SALLOC
  1029 ;;		 -> _uDynamicHeap(512), 
  1030 ;;  temp            2   31[COMRAM] near PTR struct _SALLOC
  1031 ;;		 -> _uDynamicHeap(512), 
  1032 ;;  segHeader       1   30[COMRAM] struct _SALLOC
  1033 ;;  segLen          1   29[COMRAM] unsigned char 
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  2   25[COMRAM] PTR unsigned char 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1043 ;;      Params:         2       0       0       0       0       0       0
  1044 ;;      Locals:         7       0       0       0       0       0       0
  1045 ;;      Temps:          2       0       0       0       0       0       0
  1046 ;;      Totals:        11       0       0       0       0       0       0
  1047 ;;Total ram usage:       11 bytes
  1048 ;; Hardware stack levels used:    1
  1049 ;; Hardware stack levels required when called:   10
  1050 ;; This function calls:
  1051 ;;		__SRAMmerge
  1052 ;; This function is called by:
  1053 ;;		_main
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text6
  1058  0009D2                     __ptext6:
  1059                           	opt stack 0
  1060  0009D2                     _SRAMalloc:
  1061                           	opt stack 20
  1062                           
  1063                           ;incstack = 0
  1064                           ;SRAMalloc@nBytes stored from wreg
  1065  0009D2  6E22               	movwf	SRAMalloc@nBytes,c
  1066                           
  1067                           ;memory.c: 180: SALLOC * near pHeap;
  1068                           ;memory.c: 181: SALLOC * near temp;
  1069                           ;memory.c: 182: near SALLOC segHeader;
  1070                           ;memory.c: 183: near unsigned char segLen;
  1071                           ;memory.c: 186: if (nBytes > (0x7F - 1)) return (0);
  1072  0009D4  0E7E               	movlw	126
  1073  0009D6  6422               	cpfsgt	SRAMalloc@nBytes,c
  1074  0009D8  D005               	goto	l207
  1075  0009DA  0E00               	movlw	0
  1076  0009DC  6E1A               	movwf	?_SRAMalloc,c
  1077  0009DE  0E00               	movlw	0
  1078  0009E0  6E1B               	movwf	?_SRAMalloc+1,c
  1079  0009E2  0012               	return	
  1080  0009E4                     l207:
  1081                           
  1082                           ;memory.c: 189: pHeap = (SALLOC *)_uDynamicHeap;
  1083  0009E4  0E14               	movlw	low __uDynamicHeap
  1084  0009E6  6E23               	movwf	SRAMalloc@pHeap,c
  1085  0009E8  0E03               	movlw	high __uDynamicHeap
  1086  0009EA  6E24               	movwf	SRAMalloc@pHeap+1,c
  1087  0009EC                     
  1088                           ;memory.c: 192: {
  1089                           ;memory.c: 194: segHeader = *pHeap;
  1090  0009EC  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1091  0009F0  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1092  0009F4  50DF               	movf	indf2,w,c
  1093  0009F6  6E1F               	movwf	SRAMalloc@segHeader,c
  1094                           
  1095                           ;memory.c: 197: segLen = segHeader.bits.count - 1;
  1096  0009F8  501F               	movf	SRAMalloc@segHeader,w,c
  1097  0009FA  0B7F               	andlw	127
  1098  0009FC  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1099  0009FE  041C               	decf	??_SRAMalloc,w,c
  1100  000A00  6E1E               	movwf	SRAMalloc@segLen,c
  1101                           
  1102                           ;memory.c: 200: if (segHeader.byte == 0) return (0);
  1103  000A02  501F               	movf	SRAMalloc@segHeader,w,c
  1104  000A04  A4D8               	btfss	status,2,c
  1105  000A06  D005               	goto	l210
  1106  000A08  0E00               	movlw	0
  1107  000A0A  6E1A               	movwf	?_SRAMalloc,c
  1108  000A0C  0E00               	movlw	0
  1109  000A0E  6E1B               	movwf	?_SRAMalloc+1,c
  1110  000A10  0012               	return	
  1111  000A12                     l210:
  1112                           
  1113                           ;memory.c: 203: if (!(segHeader.bits.alloc))
  1114  000A12  BE1F               	btfsc	SRAMalloc@segHeader,7,c
  1115  000A14  D043               	goto	l211
  1116                           
  1117                           ;memory.c: 204: {
  1118                           ;memory.c: 206: if (nBytes > segLen)
  1119  000A16  5022               	movf	SRAMalloc@nBytes,w,c
  1120  000A18  5C1E               	subwf	SRAMalloc@segLen,w,c
  1121  000A1A  B0D8               	btfsc	status,0,c
  1122  000A1C  D00A               	goto	l212
  1123                           
  1124                           ;memory.c: 207: {
  1125                           ;memory.c: 209: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  1126  000A1E  C023  F012         	movff	SRAMalloc@pHeap,__SRAMmerge@pSegA
  1127  000A22  C024  F013         	movff	SRAMalloc@pHeap+1,__SRAMmerge@pSegA+1
  1128  000A26  ECB6  F005         	call	__SRAMmerge	;wreg free
  1129  000A2A  0900               	iorlw	0
  1130  000A2C  A4D8               	btfss	status,2,c
  1131  000A2E  D7DE               	goto	l209
  1132  000A30  D035               	goto	l211
  1133  000A32                     l212:
  1134                           
  1135                           ;memory.c: 211: else
  1136                           ;memory.c: 215: if (nBytes == segLen)
  1137  000A32  501E               	movf	SRAMalloc@segLen,w,c
  1138  000A34  1822               	xorwf	SRAMalloc@nBytes,w,c
  1139  000A36  A4D8               	btfss	status,2,c
  1140  000A38  D00C               	goto	l215
  1141                           
  1142                           ;memory.c: 216: {
  1143                           ;memory.c: 218: (*pHeap).bits.alloc = 1;
  1144  000A3A  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1145  000A3E  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1146  000A42  8EDF               	bsf	indf2,7,c
  1147                           
  1148                           ;memory.c: 221: return ((unsigned char *)(pHeap + 1));
  1149  000A44  0E01               	movlw	1
  1150  000A46  2423               	addwf	SRAMalloc@pHeap,w,c
  1151  000A48  6E1A               	movwf	?_SRAMalloc,c
  1152  000A4A  0E00               	movlw	0
  1153  000A4C  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1154  000A4E  6E1B               	movwf	?_SRAMalloc+1,c
  1155  000A50  0012               	return	
  1156  000A52                     l215:
  1157                           
  1158                           ;memory.c: 225: else
  1159                           ;memory.c: 226: {
  1160                           ;memory.c: 228: (*pHeap).byte = nBytes + 0x81;
  1161  000A52  5022               	movf	SRAMalloc@nBytes,w,c
  1162  000A54  0F81               	addlw	129
  1163  000A56  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1164  000A5A  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1165  000A5E  6EDF               	movwf	indf2,c
  1166                           
  1167                           ;memory.c: 231: temp = pHeap + 1;
  1168  000A60  0E01               	movlw	1
  1169  000A62  2423               	addwf	SRAMalloc@pHeap,w,c
  1170  000A64  6E20               	movwf	SRAMalloc@temp,c
  1171  000A66  0E00               	movlw	0
  1172  000A68  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1173  000A6A  6E21               	movwf	SRAMalloc@temp+1,c
  1174                           
  1175                           ;memory.c: 234: pHeap += (nBytes + 1);
  1176  000A6C  5022               	movf	SRAMalloc@nBytes,w,c
  1177  000A6E  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1178  000A70  6A1D               	clrf	(??_SRAMalloc+1)& (0+255),c
  1179  000A72  0E01               	movlw	1
  1180  000A74  261C               	addwf	??_SRAMalloc,f,c
  1181  000A76  0E00               	movlw	0
  1182  000A78  221D               	addwfc	??_SRAMalloc+1,f,c
  1183  000A7A  501C               	movf	??_SRAMalloc,w,c
  1184  000A7C  2623               	addwf	SRAMalloc@pHeap,f,c
  1185  000A7E  501D               	movf	??_SRAMalloc+1,w,c
  1186  000A80  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1187                           
  1188                           ;memory.c: 237: (*pHeap).byte = segLen - nBytes;
  1189  000A82  5022               	movf	SRAMalloc@nBytes,w,c
  1190  000A84  0800               	sublw	0
  1191  000A86  241E               	addwf	SRAMalloc@segLen,w,c
  1192  000A88  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1193  000A8C  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1194  000A90  6EDF               	movwf	indf2,c
  1195                           
  1196                           ;memory.c: 240: return ((unsigned char *) temp);
  1197  000A92  C020  F01A         	movff	SRAMalloc@temp,?_SRAMalloc
  1198  000A96  C021  F01B         	movff	SRAMalloc@temp+1,?_SRAMalloc+1
  1199  000A9A  0012               	return	
  1200  000A9C                     l211:
  1201                           
  1202                           ;memory.c: 245: else
  1203                           ;memory.c: 246: {
  1204                           ;memory.c: 247: pHeap += segHeader.bits.count;
  1205  000A9C  501F               	movf	SRAMalloc@segHeader,w,c
  1206  000A9E  0B7F               	andlw	127
  1207  000AA0  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1208  000AA2  501C               	movf	??_SRAMalloc,w,c
  1209  000AA4  0D01               	mullw	1
  1210  000AA6  50F3               	movf	prodl,w,c
  1211  000AA8  2623               	addwf	SRAMalloc@pHeap,f,c
  1212  000AAA  50F4               	movf	prodh,w,c
  1213  000AAC  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1214  000AAE  D79E               	goto	l209
  1215  000AB0                     __end_of_SRAMalloc:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           prodh	equ	0xFF4
  1222                           prodl	equ	0xFF3
  1223                           intcon	equ	0xFF2
  1224                           postinc0	equ	0xFEE
  1225                           plusw0	equ	0xFEB
  1226                           fsr0h	equ	0xFEA
  1227                           fsr0l	equ	0xFE9
  1228                           wreg	equ	0xFE8
  1229                           postinc1	equ	0xFE6
  1230                           plusw1	equ	0xFE3
  1231                           fsr1h	equ	0xFE2
  1232                           fsr1l	equ	0xFE1
  1233                           indf2	equ	0xFDF
  1234                           postinc2	equ	0xFDE
  1235                           postdec2	equ	0xFDD
  1236                           plusw2	equ	0xFDB
  1237                           fsr2h	equ	0xFDA
  1238                           fsr2l	equ	0xFD9
  1239                           status	equ	0xFD8
  1240                           
  1241 ;; *************** function __SRAMmerge *****************
  1242 ;; Defined at:
  1243 ;;		line 346 in file "memory.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  pSegA           2   17[COMRAM] near PTR struct _SALLOC
  1246 ;;		 -> _uDynamicHeap(512), 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  pSegB           2   23[COMRAM] near PTR struct _SALLOC
  1249 ;;		 -> _uDynamicHeap(512), 
  1250 ;;  uSegB           1   22[COMRAM] struct _SALLOC
  1251 ;;  uSegA           1   21[COMRAM] struct _SALLOC
  1252 ;;  uSum            1   20[COMRAM] struct _SALLOC
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      unsigned char 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1262 ;;      Params:         2       0       0       0       0       0       0
  1263 ;;      Locals:         5       0       0       0       0       0       0
  1264 ;;      Temps:          1       0       0       0       0       0       0
  1265 ;;      Totals:         8       0       0       0       0       0       0
  1266 ;;Total ram usage:        8 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    9
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_SRAMalloc
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text7
  1277  000B6C                     __ptext7:
  1278                           	opt stack 0
  1279  000B6C                     __SRAMmerge:
  1280                           	opt stack 20
  1281                           
  1282                           ;memory.c: 348: SALLOC * near pSegB;
  1283                           ;memory.c: 349: near SALLOC uSegA, uSegB, uSum;
  1284                           ;memory.c: 353: pSegB = pSegA + (*pSegA).byte;
  1285                           
  1286                           ;incstack = 0
  1287  000B6C  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1288  000B70  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1289  000B74  50DF               	movf	indf2,w,c
  1290  000B76  6E14               	movwf	??__SRAMmerge& (0+255),c
  1291  000B78  5014               	movf	??__SRAMmerge,w,c
  1292  000B7A  0D01               	mullw	1
  1293  000B7C  50F3               	movf	prodl,w,c
  1294  000B7E  2412               	addwf	__SRAMmerge@pSegA,w,c
  1295  000B80  6E18               	movwf	__SRAMmerge@pSegB,c
  1296  000B82  50F4               	movf	prodh,w,c
  1297  000B84  2013               	addwfc	__SRAMmerge@pSegA+1,w,c
  1298  000B86  6E19               	movwf	__SRAMmerge@pSegB+1,c
  1299                           
  1300                           ;memory.c: 356: uSegA = *pSegA;
  1301  000B88  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1302  000B8C  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1303  000B90  50DF               	movf	indf2,w,c
  1304  000B92  6E16               	movwf	__SRAMmerge@uSegA,c
  1305                           
  1306                           ;memory.c: 357: uSegB = *pSegB;
  1307  000B94  C018  FFD9         	movff	__SRAMmerge@pSegB,fsr2l
  1308  000B98  C019  FFDA         	movff	__SRAMmerge@pSegB+1,fsr2h
  1309  000B9C  50DF               	movf	indf2,w,c
  1310  000B9E  6E17               	movwf	__SRAMmerge@uSegB,c
  1311                           
  1312                           ;memory.c: 360: if (uSegB.byte == 0) return (0);
  1313  000BA0  5017               	movf	__SRAMmerge@uSegB,w,c
  1314  000BA2  A4D8               	btfss	status,2,c
  1315  000BA4  D002               	goto	l233
  1316  000BA6  0E00               	movlw	0
  1317  000BA8  0012               	return	
  1318  000BAA                     l233:
  1319                           
  1320                           ;memory.c: 363: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  1321  000BAA  BE16               	btfsc	__SRAMmerge@uSegA,7,c
  1322  000BAC  D002               	goto	u440
  1323  000BAE  AE17               	btfss	__SRAMmerge@uSegB,7,c
  1324  000BB0  D002               	goto	l235
  1325  000BB2                     u440:
  1326  000BB2  0E00               	movlw	0
  1327  000BB4  0012               	return	
  1328  000BB6                     l235:
  1329                           
  1330                           ;memory.c: 366: if (uSegA.bits.count == 0x7F) return (0);
  1331  000BB6  5016               	movf	__SRAMmerge@uSegA,w,c
  1332  000BB8  0B7F               	andlw	127
  1333  000BBA  0A7F               	xorlw	127
  1334  000BBC  A4D8               	btfss	status,2,c
  1335  000BBE  D002               	goto	l238
  1336  000BC0  0E00               	movlw	0
  1337  000BC2  0012               	return	
  1338  000BC4                     l238:
  1339                           
  1340                           ;memory.c: 369: uSum.byte = uSegA.byte + uSegB.byte;
  1341  000BC4  5016               	movf	__SRAMmerge@uSegA,w,c
  1342  000BC6  2417               	addwf	__SRAMmerge@uSegB,w,c
  1343  000BC8  6E15               	movwf	__SRAMmerge@uSum,c
  1344                           
  1345                           ;memory.c: 375: if ((uSum.byte) > 0x7F)
  1346  000BCA  0E7F               	movlw	127
  1347  000BCC  6415               	cpfsgt	__SRAMmerge@uSum,c
  1348  000BCE  D01A               	goto	l239
  1349                           
  1350                           ;memory.c: 376: {
  1351                           ;memory.c: 377: (*pSegA).byte = 0x7F;
  1352  000BD0  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1353  000BD4  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1354  000BD8  0E7F               	movlw	127
  1355  000BDA  6EDF               	movwf	indf2,c
  1356                           
  1357                           ;memory.c: 378: pSegA += 0x7F;
  1358  000BDC  0E7F               	movlw	127
  1359  000BDE  2612               	addwf	__SRAMmerge@pSegA,f,c
  1360  000BE0  0E00               	movlw	0
  1361  000BE2  2213               	addwfc	__SRAMmerge@pSegA+1,f,c
  1362                           
  1363                           ;memory.c: 379: pSegB += uSegB.byte;
  1364  000BE4  5017               	movf	__SRAMmerge@uSegB,w,c
  1365  000BE6  0D01               	mullw	1
  1366  000BE8  50F3               	movf	prodl,w,c
  1367  000BEA  2618               	addwf	__SRAMmerge@pSegB,f,c
  1368  000BEC  50F4               	movf	prodh,w,c
  1369  000BEE  2219               	addwfc	__SRAMmerge@pSegB+1,f,c
  1370                           
  1371                           ;memory.c: 380: (*pSegA).byte = pSegB - pSegA;
  1372  000BF0  5012               	movf	__SRAMmerge@pSegA,w,c
  1373  000BF2  0800               	sublw	0
  1374  000BF4  2418               	addwf	__SRAMmerge@pSegB,w,c
  1375  000BF6  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1376  000BFA  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1377  000BFE  6EDF               	movwf	indf2,c
  1378                           
  1379                           ;memory.c: 382: return (0x7F);
  1380  000C00  0E7F               	movlw	127
  1381                           
  1382                           ;memory.c: 383: }
  1383  000C02  0012               	return	
  1384  000C04                     l239:
  1385                           
  1386                           ;memory.c: 386: else
  1387                           ;memory.c: 387: {
  1388                           ;memory.c: 388: return ((*pSegA).byte = uSum.byte);
  1389  000C04  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1390  000C08  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1391  000C0C  C015  FFDF         	movff	__SRAMmerge@uSum,indf2
  1392  000C10  50DF               	movf	indf2,w,c
  1393  000C12  0012               	return	
  1394  000C14                     __end_of__SRAMmerge:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodh	equ	0xFF4
  1401                           prodl	equ	0xFF3
  1402                           intcon	equ	0xFF2
  1403                           postinc0	equ	0xFEE
  1404                           plusw0	equ	0xFEB
  1405                           fsr0h	equ	0xFEA
  1406                           fsr0l	equ	0xFE9
  1407                           wreg	equ	0xFE8
  1408                           postinc1	equ	0xFE6
  1409                           plusw1	equ	0xFE3
  1410                           fsr1h	equ	0xFE2
  1411                           fsr1l	equ	0xFE1
  1412                           indf2	equ	0xFDF
  1413                           postinc2	equ	0xFDE
  1414                           postdec2	equ	0xFDD
  1415                           plusw2	equ	0xFDB
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _task_one *****************
  1421 ;; Defined at:
  1422 ;;		line 16 in file "tasks.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1  [STACK] void 
  1429 ;; Registers used:
  1430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1436 ;;      Params:         0       0       0       0       0       0       0
  1437 ;;      Locals:         0       0       0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0
  1439 ;;      Totals:         0       0       0       0       0       0       0
  1440 ;;Total ram usage:        0 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:    8
  1443 ;; This function calls:
  1444 ;;		_create_pipe
  1445 ;;		_delay
  1446 ;;		_write_pipe
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text8
  1453  000F3C                     __ptext8:
  1454                           	opt stack 0
  1455  000F3C                     _task_one:
  1456                           	opt stack 19
  1457                           
  1458                           ;tasks.c: 18: TRISDbits.RD0 = 0;
  1459                           
  1460                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1461                           ;incstack = 0
  1462  000F3C  9095               	bcf	3989,0,c	;volatile
  1463                           
  1464                           ;tasks.c: 19: PORTDbits.RD0 = 0;
  1465  000F3E  9083               	bcf	3971,0,c	;volatile
  1466                           
  1467                           ;tasks.c: 22: create_pipe(&pipe);
  1468  000F40  0E3B               	movlw	low _pipe
  1469  000F42  6EE6               	movwf	postinc1,c
  1470  000F44  0E00               	movlw	high _pipe
  1471  000F46  6EE6               	movwf	postinc1,c
  1472  000F48  EC0A  F006         	call	_create_pipe	;wreg free
  1473  000F4C                     l1496:
  1474                           
  1475                           ;tasks.c: 26: write_pipe(&pipe, 'a');
  1476  000F4C  0E61               	movlw	97
  1477  000F4E  6EE6               	movwf	postinc1,c
  1478  000F50  0E3B               	movlw	low _pipe
  1479  000F52  6EE6               	movwf	postinc1,c
  1480  000F54  0E00               	movlw	high _pipe
  1481  000F56  6EE6               	movwf	postinc1,c
  1482  000F58  EC70  F003         	call	_write_pipe	;wreg free
  1483                           
  1484                           ;tasks.c: 27: PORTDbits.RD0 = ~PORTDbits.RD0;
  1485  000F5C  A083               	btfss	3971,0,c	;volatile
  1486  000F5E  D002               	goto	u65_20
  1487  000F60  0E01               	movlw	1
  1488  000F62  D001               	goto	u65_26
  1489  000F64                     u65_20:
  1490  000F64  0E00               	movlw	0
  1491  000F66                     u65_26:
  1492  000F66  0AFF               	xorlw	255
  1493  000F68  6E54               	movwf	btemp+11,c
  1494  000F6A  5083               	movf	3971,w,c	;volatile
  1495  000F6C  1854               	xorwf	btemp+11,w,c
  1496  000F6E  0BFE               	andlw	-2
  1497  000F70  1854               	xorwf	btemp+11,w,c
  1498  000F72  6E83               	movwf	3971,c	;volatile
  1499                           
  1500                           ;tasks.c: 29: delay(100);
  1501  000F74  0E64               	movlw	100
  1502  000F76  6EE6               	movwf	postinc1,c
  1503  000F78  0E00               	movlw	0
  1504  000F7A  6EE6               	movwf	postinc1,c
  1505  000F7C  EC7A  F007         	call	_delay	;wreg free
  1506  000F80  D7E5               	goto	l1496
  1507  000F82                     __end_of_task_one:
  1508                           	opt stack 0
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           prodh	equ	0xFF4
  1514                           prodl	equ	0xFF3
  1515                           intcon	equ	0xFF2
  1516                           postinc0	equ	0xFEE
  1517                           plusw0	equ	0xFEB
  1518                           fsr0h	equ	0xFEA
  1519                           fsr0l	equ	0xFE9
  1520                           wreg	equ	0xFE8
  1521                           postinc1	equ	0xFE6
  1522                           plusw1	equ	0xFE3
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           plusw2	equ	0xFDB
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _write_pipe *****************
  1534 ;; Defined at:
  1535 ;;		line 21 in file "pipe.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  pipe            2  [STACK] PTR struct pipe
  1538 ;;		 -> pipe(14), 
  1539 ;;  data            1  [STACK] unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1  [STACK] void 
  1544 ;; Registers used:
  1545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1551 ;;      Params:         0       0       0       0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0
  1554 ;;      Totals:         0       0       0       0       0       0       0
  1555 ;;Total ram usage:        0 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    7
  1558 ;; This function calls:
  1559 ;;		___wmul
  1560 ;;		_dispatcher
  1561 ;; This function is called by:
  1562 ;;		_task_one
  1563 ;; This function uses a reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text9
  1567  0006E0                     __ptext9:
  1568                           	opt stack 0
  1569  0006E0                     _write_pipe:
  1570                           	opt stack 19
  1571                           
  1572                           ;pipe.c: 23: (INTCONbits.GIE = 0);
  1573                           
  1574                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  1575                           ;incstack = 0
  1576  0006E0  9EF2               	bcf	intcon,7,c	;volatile
  1577                           
  1578                           ;pipe.c: 26: if (pipe->pipe_itens == 4) {
  1579                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1580  0006E2  0EFE               	movlw	-2
  1581  0006E4  CFE3 F04A          	movff	plusw1,btemp+1
  1582  0006E8  0EFF               	movlw	-1
  1583  0006EA  CFE3 F04B          	movff	plusw1,btemp+2
  1584  0006EE  0E08               	movlw	8
  1585  0006F0  244A               	addwf	btemp+1,w,c
  1586  0006F2  6ED9               	movwf	fsr2l,c
  1587  0006F4  0E00               	movlw	0
  1588  0006F6  204B               	addwfc	btemp+2,w,c
  1589  0006F8  6EDA               	movwf	fsr2h,c
  1590  0006FA  0E04               	movlw	4
  1591  0006FC  18DE               	xorwf	postinc2,w,c
  1592  0006FE  10DE               	iorwf	postinc2,w,c
  1593  000700  A4D8               	btfss	status,2,c
  1594  000702  D014               	goto	l1422
  1595                           
  1596                           ;pipe.c: 28: pipe->pos_bloqued_write = task_running;
  1597                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1598  000704  0EFE               	movlw	-2
  1599  000706  CFE3 F04A          	movff	plusw1,btemp+1
  1600  00070A  0EFF               	movlw	-1
  1601  00070C  CFE3 F04B          	movff	plusw1,btemp+2
  1602  000710  0E0C               	movlw	12
  1603  000712  244A               	addwf	btemp+1,w,c
  1604  000714  6ED9               	movwf	fsr2l,c
  1605  000716  0E00               	movlw	0
  1606  000718  204B               	addwfc	btemp+2,w,c
  1607  00071A  6EDA               	movwf	fsr2h,c
  1608  00071C  C037  FFDE         	movff	_task_running,postinc2
  1609  000720  C038  FFDD         	movff	_task_running+1,postdec2
  1610                           
  1611                           ;pipe.c: 30: dispatcher(WAITING_PIPE);
  1612  000724  0E06               	movlw	6
  1613  000726  6EE6               	movwf	postinc1,c
  1614  000728  EC0A  F000         	call	_dispatcher	;wreg free
  1615  00072C                     l1422:
  1616                           
  1617                           ;pipe.c: 31: }
  1618                           ;pipe.c: 33: pipe->pipe_queue[pipe->pos_write_pipe] = data;
  1619                           ;stkvar	write_pipe@data @ sp[(0)+-3]
  1620                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1621  00072C  0EFE               	movlw	-2
  1622  00072E  CFE3 F04A          	movff	plusw1,btemp+1
  1623  000732  0EFF               	movlw	-1
  1624  000734  CFE3 F04B          	movff	plusw1,btemp+2
  1625  000738  0E06               	movlw	6
  1626  00073A  244A               	addwf	btemp+1,w,c
  1627  00073C  6ED9               	movwf	fsr2l,c
  1628  00073E  0E00               	movlw	0
  1629  000740  204B               	addwfc	btemp+2,w,c
  1630  000742  6EDA               	movwf	fsr2h,c
  1631  000744  CFDE F04A          	movff	postinc2,btemp+1
  1632  000748  CFDD F04B          	movff	postdec2,btemp+2
  1633                           
  1634                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1635  00074C  0EFE               	movlw	-2
  1636  00074E  CFE3 F053          	movff	plusw1,btemp+10
  1637  000752  0EFF               	movlw	-1
  1638  000754  CFE3 F054          	movff	plusw1,btemp+11
  1639  000758  504A               	movf	btemp+1,w,c
  1640  00075A  2453               	addwf	btemp+10,w,c
  1641  00075C  6ED9               	movwf	fsr2l,c
  1642  00075E  504B               	movf	btemp+2,w,c
  1643  000760  2054               	addwfc	btemp+11,w,c
  1644  000762  6EDA               	movwf	fsr2h,c
  1645  000764  0EFD               	movlw	-3
  1646  000766  CFE3 FFDF          	movff	plusw1,indf2
  1647                           
  1648                           ;pipe.c: 34: pipe->pos_write_pipe = (pipe->pos_write_pipe + 1) % 4;
  1649                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1650  00076A  0EFE               	movlw	-2
  1651  00076C  CFE3 F04A          	movff	plusw1,btemp+1
  1652  000770  0EFF               	movlw	-1
  1653  000772  CFE3 F04B          	movff	plusw1,btemp+2
  1654  000776  0E06               	movlw	6
  1655  000778  244A               	addwf	btemp+1,w,c
  1656  00077A  6ED9               	movwf	fsr2l,c
  1657  00077C  0E00               	movlw	0
  1658  00077E  204B               	addwfc	btemp+2,w,c
  1659  000780  6EDA               	movwf	fsr2h,c
  1660  000782  CFDE F04A          	movff	postinc2,btemp+1
  1661  000786  CFDD F04B          	movff	postdec2,btemp+2
  1662  00078A  0E01               	movlw	1
  1663  00078C  264A               	addwf	btemp+1,f,c
  1664  00078E  0E00               	movlw	0
  1665  000790  224B               	addwfc	btemp+2,f,c
  1666  000792  0E03               	movlw	3
  1667  000794  164A               	andwf	btemp+1,f,c
  1668  000796  0E00               	movlw	0
  1669  000798  164B               	andwf	btemp+2,f,c
  1670                           
  1671                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1672  00079A  0EFE               	movlw	-2
  1673  00079C  CFE3 F053          	movff	plusw1,btemp+10
  1674  0007A0  0EFF               	movlw	-1
  1675  0007A2  CFE3 F054          	movff	plusw1,btemp+11
  1676  0007A6  0E06               	movlw	6
  1677  0007A8  2453               	addwf	btemp+10,w,c
  1678  0007AA  6ED9               	movwf	fsr2l,c
  1679  0007AC  0E00               	movlw	0
  1680  0007AE  2054               	addwfc	btemp+11,w,c
  1681  0007B0  6EDA               	movwf	fsr2h,c
  1682  0007B2  C04A  FFDE         	movff	btemp+1,postinc2
  1683  0007B6  C04B  FFDD         	movff	btemp+2,postdec2
  1684                           
  1685                           ;pipe.c: 35: pipe->pipe_itens++;
  1686                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1687  0007BA  0EFE               	movlw	-2
  1688  0007BC  CFE3 F04A          	movff	plusw1,btemp+1
  1689  0007C0  0EFF               	movlw	-1
  1690  0007C2  CFE3 F04B          	movff	plusw1,btemp+2
  1691  0007C6  0E08               	movlw	8
  1692  0007C8  244A               	addwf	btemp+1,w,c
  1693  0007CA  6ED9               	movwf	fsr2l,c
  1694  0007CC  0E00               	movlw	0
  1695  0007CE  204B               	addwfc	btemp+2,w,c
  1696  0007D0  6EDA               	movwf	fsr2h,c
  1697  0007D2  2ADE               	incf	postinc2,f,c
  1698  0007D4  0E00               	movlw	0
  1699  0007D6  22DD               	addwfc	postdec2,f,c
  1700                           
  1701                           ;pipe.c: 38: if (pipe->pos_bloqued_read > 0) {
  1702                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1703  0007D8  0EFE               	movlw	-2
  1704  0007DA  CFE3 F04A          	movff	plusw1,btemp+1
  1705  0007DE  0EFF               	movlw	-1
  1706  0007E0  CFE3 F04B          	movff	plusw1,btemp+2
  1707  0007E4  0E0A               	movlw	10
  1708  0007E6  244A               	addwf	btemp+1,w,c
  1709  0007E8  6ED9               	movwf	fsr2l,c
  1710  0007EA  0E00               	movlw	0
  1711  0007EC  204B               	addwfc	btemp+2,w,c
  1712  0007EE  6EDA               	movwf	fsr2h,c
  1713  0007F0  50DE               	movf	postinc2,w,c
  1714  0007F2  10DE               	iorwf	postinc2,w,c
  1715  0007F4  B4D8               	btfsc	status,2,c
  1716  0007F6  D032               	goto	l1434
  1717                           
  1718                           ;pipe.c: 39: F_APTOS[pipe->pos_bloqued_read].task_state = READY;
  1719  0007F8  0E6E               	movlw	110
  1720  0007FA  6EE6               	movwf	postinc1,c
  1721  0007FC  0E00               	movlw	0
  1722  0007FE  6EE6               	movwf	postinc1,c
  1723                           
  1724                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  1725  000800  0EFC               	movlw	-4
  1726  000802  CFE3 F04A          	movff	plusw1,btemp+1
  1727  000806  0EFD               	movlw	-3
  1728  000808  CFE3 F04B          	movff	plusw1,btemp+2
  1729  00080C  0E0A               	movlw	10
  1730  00080E  244A               	addwf	btemp+1,w,c
  1731  000810  6ED9               	movwf	fsr2l,c
  1732  000812  0E00               	movlw	0
  1733  000814  204B               	addwfc	btemp+2,w,c
  1734  000816  6EDA               	movwf	fsr2h,c
  1735  000818  CFDE F04A          	movff	postinc2,btemp+1
  1736  00081C  CFDD F04B          	movff	postdec2,btemp+2
  1737  000820  C04A  FFE6         	movff	btemp+1,postinc1
  1738  000824  C04B  FFE6         	movff	btemp+2,postinc1
  1739  000828  EC5D  F006         	call	___wmul	;wreg free
  1740  00082C  0EF6               	movlw	low (_F_APTOS+8)
  1741  00082E  2449               	addwf	btemp,w,c
  1742  000830  6ED9               	movwf	fsr2l,c
  1743  000832  0E00               	movlw	high (_F_APTOS+8)
  1744  000834  204A               	addwfc	btemp+1,w,c
  1745  000836  6EDA               	movwf	fsr2h,c
  1746  000838  0E01               	movlw	1
  1747  00083A  6EDF               	movwf	indf2,c
  1748                           
  1749                           ;pipe.c: 40: pipe->pos_bloqued_read = 0;
  1750                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1751  00083C  0EFE               	movlw	-2
  1752  00083E  CFE3 F04A          	movff	plusw1,btemp+1
  1753  000842  0EFF               	movlw	-1
  1754  000844  CFE3 F04B          	movff	plusw1,btemp+2
  1755  000848  0E0A               	movlw	10
  1756  00084A  244A               	addwf	btemp+1,w,c
  1757  00084C  6ED9               	movwf	fsr2l,c
  1758  00084E  0E00               	movlw	0
  1759  000850  204B               	addwfc	btemp+2,w,c
  1760  000852  6EDA               	movwf	fsr2h,c
  1761  000854  0E00               	movlw	0
  1762  000856  6EDE               	movwf	postinc2,c
  1763  000858  0E00               	movlw	0
  1764  00085A  6EDD               	movwf	postdec2,c
  1765  00085C                     l1434:
  1766                           
  1767                           ;pipe.c: 44: }
  1768                           ;pipe.c: 47: (INTCONbits.GIE = 1);
  1769  00085C  8EF2               	bsf	intcon,7,c	;volatile
  1770                           
  1771                           ; _write_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
  1772  00085E  52E5               	movf	postdec1,f,c
  1773  000860  52E5               	movf	postdec1,f,c
  1774  000862  52E5               	movf	postdec1,f,c
  1775  000864  0012               	return		;funcret
  1776  000866                     __end_of_write_pipe:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           plusw0	equ	0xFEB
  1787                           fsr0h	equ	0xFEA
  1788                           fsr0l	equ	0xFE9
  1789                           wreg	equ	0xFE8
  1790                           postinc1	equ	0xFE6
  1791                           postdec1	equ	0xFE5
  1792                           plusw1	equ	0xFE3
  1793                           fsr1h	equ	0xFE2
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           plusw2	equ	0xFDB
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _delay *****************
  1804 ;; Defined at:
  1805 ;;		line 58 in file "kernel.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  time_ms         2  [STACK] unsigned int 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1  [STACK] void 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1819 ;;      Params:         0       0       0       0       0       0       0
  1820 ;;      Locals:         0       0       0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0
  1822 ;;      Totals:         0       0       0       0       0       0       0
  1823 ;;Total ram usage:        0 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    7
  1826 ;; This function calls:
  1827 ;;		___wmul
  1828 ;;		_dispatcher
  1829 ;; This function is called by:
  1830 ;;		_task_one
  1831 ;;		_task_two
  1832 ;;		_task_thre
  1833 ;; This function uses a reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text10
  1837  000EF4                     __ptext10:
  1838                           	opt stack 0
  1839  000EF4                     _delay:
  1840                           	opt stack 19
  1841                           
  1842                           ;kernel.c: 60: (INTCONbits.GIE = 0);
  1843                           
  1844                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1845                           ;incstack = 0
  1846  000EF4  9EF2               	bcf	intcon,7,c	;volatile
  1847                           
  1848                           ;kernel.c: 62: F_APTOS[task_running].delay_time = time_ms;
  1849  000EF6  0E6E               	movlw	110
  1850  000EF8  6EE6               	movwf	postinc1,c
  1851  000EFA  0E00               	movlw	0
  1852  000EFC  6EE6               	movwf	postinc1,c
  1853  000EFE  C037  FFE6         	movff	_task_running,postinc1
  1854  000F02  C038  FFE6         	movff	_task_running+1,postinc1
  1855  000F06  EC5D  F006         	call	___wmul	;wreg free
  1856  000F0A  0EF4               	movlw	low (_F_APTOS+6)
  1857  000F0C  2449               	addwf	btemp,w,c
  1858  000F0E  6EE9               	movwf	fsr0l,c
  1859  000F10  0E00               	movlw	high (_F_APTOS+6)
  1860  000F12  204A               	addwfc	btemp+1,w,c
  1861  000F14  6EEA               	movwf	fsr0h,c
  1862                           
  1863                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  1864  000F16  50E1               	movf	fsr1l,w,c
  1865  000F18  0FFE               	addlw	-2
  1866  000F1A  6ED9               	movwf	fsr2l,c
  1867  000F1C  50E2               	movf	fsr1h,w,c
  1868  000F1E  6EDA               	movwf	fsr2h,c
  1869  000F20  0EFF               	movlw	255
  1870  000F22  22DA               	addwfc	fsr2h,f,c
  1871  000F24  CFDE FFEE          	movff	postinc2,postinc0
  1872  000F28  CFDD FFED          	movff	postdec2,postdec0
  1873                           
  1874                           ;kernel.c: 63: dispatcher(SLEEPING);
  1875  000F2C  0E03               	movlw	3
  1876  000F2E  6EE6               	movwf	postinc1,c
  1877  000F30  EC0A  F000         	call	_dispatcher	;wreg free
  1878                           
  1879                           ;kernel.c: 65: (INTCONbits.GIE = 1);
  1880  000F34  8EF2               	bsf	intcon,7,c	;volatile
  1881                           
  1882                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  1883  000F36  52E5               	movf	postdec1,f,c
  1884  000F38  52E5               	movf	postdec1,f,c
  1885  000F3A  0012               	return		;funcret
  1886  000F3C                     __end_of_delay:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           prodh	equ	0xFF4
  1893                           prodl	equ	0xFF3
  1894                           intcon	equ	0xFF2
  1895                           postinc0	equ	0xFEE
  1896                           postdec0	equ	0xFED
  1897                           plusw0	equ	0xFEB
  1898                           fsr0h	equ	0xFEA
  1899                           fsr0l	equ	0xFE9
  1900                           wreg	equ	0xFE8
  1901                           postinc1	equ	0xFE6
  1902                           postdec1	equ	0xFE5
  1903                           plusw1	equ	0xFE3
  1904                           fsr1h	equ	0xFE2
  1905                           fsr1l	equ	0xFE1
  1906                           indf2	equ	0xFDF
  1907                           postinc2	equ	0xFDE
  1908                           postdec2	equ	0xFDD
  1909                           plusw2	equ	0xFDB
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _dispatcher *****************
  1915 ;; Defined at:
  1916 ;;		line 33 in file "kernel.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  state           1  [STACK] enum E3007
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1  [STACK] void 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0
  1933 ;;      Totals:         0       0       0       0       0       0       0
  1934 ;;Total ram usage:        0 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    6
  1937 ;; This function calls:
  1938 ;;		___wmul
  1939 ;;		_rr_scheduler
  1940 ;; This function is called by:
  1941 ;;		_delay
  1942 ;;		_int_high
  1943 ;;		_write_pipe
  1944 ;;		_read_pipe
  1945 ;;		_sem_wait
  1946 ;;		_sem_post
  1947 ;; This function uses a reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text11
  1951  000014                     __ptext11:
  1952                           	opt stack 0
  1953  000014                     _dispatcher:
  1954                           	opt stack 15
  1955                           
  1956                           ;kernel.c: 35: (INTCONbits.GIE = 0);
  1957                           
  1958                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1959                           ;incstack = 0
  1960  000014  9EF2               	bcf	intcon,7,c	;volatile
  1961                           
  1962                           ;kernel.c: 38: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  1963                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  1964  000016  0E6E               	movlw	110
  1965  000018  6EE6               	movwf	postinc1,c
  1966  00001A  0E00               	movlw	0
  1967  00001C  6EE6               	movwf	postinc1,c
  1968  00001E  C037  FFE6         	movff	_task_running,postinc1
  1969  000022  C038  FFE6         	movff	_task_running+1,postinc1
  1970  000026  EC5D  F006         	call	___wmul	;wreg free
  1971  00002A  0EF6               	movlw	low (_F_APTOS+8)
  1972  00002C  2449               	addwf	btemp,w,c
  1973  00002E  6ED9               	movwf	fsr2l,c
  1974  000030  0E00               	movlw	high (_F_APTOS+8)
  1975  000032  204A               	addwfc	btemp+1,w,c
  1976  000034  6EDA               	movwf	fsr2h,c
  1977  000036  0EFF               	movlw	-1
  1978  000038  CFE3 FFDF          	movff	plusw1,indf2
  1979  00003C  0E6E               	movlw	110
  1980  00003E  6EE6               	movwf	postinc1,c
  1981  000040  0E00               	movlw	0
  1982  000042  6EE6               	movwf	postinc1,c
  1983  000044  C037  FFE6         	movff	_task_running,postinc1
  1984  000048  C038  FFE6         	movff	_task_running+1,postinc1
  1985  00004C  EC5D  F006         	call	___wmul	;wreg free
  1986  000050  0E59               	movlw	low (_F_APTOS+107)
  1987  000052  2449               	addwf	btemp,w,c
  1988  000054  6ED9               	movwf	fsr2l,c
  1989  000056  0E01               	movlw	high (_F_APTOS+107)
  1990  000058  204A               	addwfc	btemp+1,w,c
  1991  00005A  6EDA               	movwf	fsr2h,c
  1992  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  1993  000060  0E6E               	movlw	110
  1994  000062  6EE6               	movwf	postinc1,c
  1995  000064  0E00               	movlw	0
  1996  000066  6EE6               	movwf	postinc1,c
  1997  000068  C037  FFE6         	movff	_task_running,postinc1
  1998  00006C  C038  FFE6         	movff	_task_running+1,postinc1
  1999  000070  EC5D  F006         	call	___wmul	;wreg free
  2000  000074  0E5A               	movlw	low (_F_APTOS+108)
  2001  000076  2449               	addwf	btemp,w,c
  2002  000078  6ED9               	movwf	fsr2l,c
  2003  00007A  0E01               	movlw	high (_F_APTOS+108)
  2004  00007C  204A               	addwfc	btemp+1,w,c
  2005  00007E  6EDA               	movwf	fsr2h,c
  2006  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  2007  000084  0E6E               	movlw	110
  2008  000086  6EE6               	movwf	postinc1,c
  2009  000088  0E00               	movlw	0
  2010  00008A  6EE6               	movwf	postinc1,c
  2011  00008C  C037  FFE6         	movff	_task_running,postinc1
  2012  000090  C038  FFE6         	movff	_task_running+1,postinc1
  2013  000094  EC5D  F006         	call	___wmul	;wreg free
  2014  000098  0E5B               	movlw	low (_F_APTOS+109)
  2015  00009A  2449               	addwf	btemp,w,c
  2016  00009C  6ED9               	movwf	fsr2l,c
  2017  00009E  0E01               	movlw	high (_F_APTOS+109)
  2018  0000A0  204A               	addwfc	btemp+1,w,c
  2019  0000A2  6EDA               	movwf	fsr2h,c
  2020  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  2021  0000A8  0E6E               	movlw	110
  2022  0000AA  6EE6               	movwf	postinc1,c
  2023  0000AC  0E00               	movlw	0
  2024  0000AE  6EE6               	movwf	postinc1,c
  2025  0000B0  C037  FFE6         	movff	_task_running,postinc1
  2026  0000B4  C038  FFE6         	movff	_task_running+1,postinc1
  2027  0000B8  EC5D  F006         	call	___wmul	;wreg free
  2028  0000BC  0E57               	movlw	low (_F_APTOS+105)
  2029  0000BE  2449               	addwf	btemp,w,c
  2030  0000C0  6ED9               	movwf	fsr2l,c
  2031  0000C2  0E01               	movlw	high (_F_APTOS+105)
  2032  0000C4  204A               	addwfc	btemp+1,w,c
  2033  0000C6  6EDA               	movwf	fsr2h,c
  2034  0000C8  0E00               	movlw	0
  2035  0000CA  6EDE               	movwf	postinc2,c
  2036  0000CC  0E00               	movlw	0
  2037  0000CE  6EDD               	movwf	postdec2,c
  2038  0000D0                     l1370:
  2039  0000D0  0E03               	movlw	3
  2040  0000D2  6EE6               	movwf	postinc1,c
  2041  0000D4  0E00               	movlw	0
  2042  0000D6  6EE6               	movwf	postinc1,c
  2043  0000D8  0E6E               	movlw	110
  2044  0000DA  6EE6               	movwf	postinc1,c
  2045  0000DC  0E00               	movlw	0
  2046  0000DE  6EE6               	movwf	postinc1,c
  2047  0000E0  C037  FFE6         	movff	_task_running,postinc1
  2048  0000E4  C038  FFE6         	movff	_task_running+1,postinc1
  2049  0000E8  EC5D  F006         	call	___wmul	;wreg free
  2050  0000EC  0E57               	movlw	low (_F_APTOS+105)
  2051  0000EE  2449               	addwf	btemp,w,c
  2052  0000F0  6ED9               	movwf	fsr2l,c
  2053  0000F2  0E01               	movlw	high (_F_APTOS+105)
  2054  0000F4  204A               	addwfc	btemp+1,w,c
  2055  0000F6  6EDA               	movwf	fsr2h,c
  2056  0000F8  CFDE F04A          	movff	postinc2,btemp+1
  2057  0000FC  CFDD F04B          	movff	postdec2,btemp+2
  2058  000100  C04A  FFE6         	movff	btemp+1,postinc1
  2059  000104  C04B  FFE6         	movff	btemp+2,postinc1
  2060  000108  EC5D  F006         	call	___wmul	;wreg free
  2061  00010C  C049  F051         	movff	btemp,btemp+8
  2062  000110  C04A  F052         	movff	btemp+1,btemp+9
  2063  000114  0E6E               	movlw	110
  2064  000116  6EE6               	movwf	postinc1,c
  2065  000118  0E00               	movlw	0
  2066  00011A  6EE6               	movwf	postinc1,c
  2067  00011C  C037  FFE6         	movff	_task_running,postinc1
  2068  000120  C038  FFE6         	movff	_task_running+1,postinc1
  2069  000124  EC5D  F006         	call	___wmul	;wreg free
  2070  000128  0EEE               	movlw	low _F_APTOS
  2071  00012A  6E53               	movwf	btemp+10,c
  2072  00012C  0E00               	movlw	high _F_APTOS
  2073  00012E  6E54               	movwf	btemp+11,c
  2074  000130  0E09               	movlw	9
  2075  000132  2653               	addwf	btemp+10,f,c
  2076  000134  0E00               	movlw	0
  2077  000136  2254               	addwfc	btemp+11,f,c
  2078  000138  5049               	movf	btemp,w,c
  2079  00013A  2653               	addwf	btemp+10,f,c
  2080  00013C  504A               	movf	btemp+1,w,c
  2081  00013E  2254               	addwfc	btemp+11,f,c
  2082  000140  5051               	movf	btemp+8,w,c
  2083  000142  2453               	addwf	btemp+10,w,c
  2084  000144  6ED9               	movwf	fsr2l,c
  2085  000146  5052               	movf	btemp+9,w,c
  2086  000148  2054               	addwfc	btemp+11,w,c
  2087  00014A  6EDA               	movwf	fsr2h,c
  2088  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  2089  000150  0E03               	movlw	3
  2090  000152  6EE6               	movwf	postinc1,c
  2091  000154  0E00               	movlw	0
  2092  000156  6EE6               	movwf	postinc1,c
  2093  000158  0E6E               	movlw	110
  2094  00015A  6EE6               	movwf	postinc1,c
  2095  00015C  0E00               	movlw	0
  2096  00015E  6EE6               	movwf	postinc1,c
  2097  000160  C037  FFE6         	movff	_task_running,postinc1
  2098  000164  C038  FFE6         	movff	_task_running+1,postinc1
  2099  000168  EC5D  F006         	call	___wmul	;wreg free
  2100  00016C  0E57               	movlw	low (_F_APTOS+105)
  2101  00016E  2449               	addwf	btemp,w,c
  2102  000170  6ED9               	movwf	fsr2l,c
  2103  000172  0E01               	movlw	high (_F_APTOS+105)
  2104  000174  204A               	addwfc	btemp+1,w,c
  2105  000176  6EDA               	movwf	fsr2h,c
  2106  000178  CFDE F04A          	movff	postinc2,btemp+1
  2107  00017C  CFDD F04B          	movff	postdec2,btemp+2
  2108  000180  C04A  FFE6         	movff	btemp+1,postinc1
  2109  000184  C04B  FFE6         	movff	btemp+2,postinc1
  2110  000188  EC5D  F006         	call	___wmul	;wreg free
  2111  00018C  C049  F051         	movff	btemp,btemp+8
  2112  000190  C04A  F052         	movff	btemp+1,btemp+9
  2113  000194  0E6E               	movlw	110
  2114  000196  6EE6               	movwf	postinc1,c
  2115  000198  0E00               	movlw	0
  2116  00019A  6EE6               	movwf	postinc1,c
  2117  00019C  C037  FFE6         	movff	_task_running,postinc1
  2118  0001A0  C038  FFE6         	movff	_task_running+1,postinc1
  2119  0001A4  EC5D  F006         	call	___wmul	;wreg free
  2120  0001A8  0EEE               	movlw	low _F_APTOS
  2121  0001AA  6E53               	movwf	btemp+10,c
  2122  0001AC  0E00               	movlw	high _F_APTOS
  2123  0001AE  6E54               	movwf	btemp+11,c
  2124  0001B0  0E0A               	movlw	10
  2125  0001B2  2653               	addwf	btemp+10,f,c
  2126  0001B4  0E00               	movlw	0
  2127  0001B6  2254               	addwfc	btemp+11,f,c
  2128  0001B8  5049               	movf	btemp,w,c
  2129  0001BA  2653               	addwf	btemp+10,f,c
  2130  0001BC  504A               	movf	btemp+1,w,c
  2131  0001BE  2254               	addwfc	btemp+11,f,c
  2132  0001C0  5051               	movf	btemp+8,w,c
  2133  0001C2  2453               	addwf	btemp+10,w,c
  2134  0001C4  6ED9               	movwf	fsr2l,c
  2135  0001C6  5052               	movf	btemp+9,w,c
  2136  0001C8  2054               	addwfc	btemp+11,w,c
  2137  0001CA  6EDA               	movwf	fsr2h,c
  2138  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2139  0001D0  0E03               	movlw	3
  2140  0001D2  6EE6               	movwf	postinc1,c
  2141  0001D4  0E00               	movlw	0
  2142  0001D6  6EE6               	movwf	postinc1,c
  2143  0001D8  0E6E               	movlw	110
  2144  0001DA  6EE6               	movwf	postinc1,c
  2145  0001DC  0E00               	movlw	0
  2146  0001DE  6EE6               	movwf	postinc1,c
  2147  0001E0  C037  FFE6         	movff	_task_running,postinc1
  2148  0001E4  C038  FFE6         	movff	_task_running+1,postinc1
  2149  0001E8  EC5D  F006         	call	___wmul	;wreg free
  2150  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2151  0001EE  2449               	addwf	btemp,w,c
  2152  0001F0  6ED9               	movwf	fsr2l,c
  2153  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2154  0001F4  204A               	addwfc	btemp+1,w,c
  2155  0001F6  6EDA               	movwf	fsr2h,c
  2156  0001F8  CFDE F04A          	movff	postinc2,btemp+1
  2157  0001FC  CFDD F04B          	movff	postdec2,btemp+2
  2158  000200  C04A  FFE6         	movff	btemp+1,postinc1
  2159  000204  C04B  FFE6         	movff	btemp+2,postinc1
  2160  000208  EC5D  F006         	call	___wmul	;wreg free
  2161  00020C  C049  F051         	movff	btemp,btemp+8
  2162  000210  C04A  F052         	movff	btemp+1,btemp+9
  2163  000214  0E6E               	movlw	110
  2164  000216  6EE6               	movwf	postinc1,c
  2165  000218  0E00               	movlw	0
  2166  00021A  6EE6               	movwf	postinc1,c
  2167  00021C  C037  FFE6         	movff	_task_running,postinc1
  2168  000220  C038  FFE6         	movff	_task_running+1,postinc1
  2169  000224  EC5D  F006         	call	___wmul	;wreg free
  2170  000228  0EEE               	movlw	low _F_APTOS
  2171  00022A  6E53               	movwf	btemp+10,c
  2172  00022C  0E00               	movlw	high _F_APTOS
  2173  00022E  6E54               	movwf	btemp+11,c
  2174  000230  0E0B               	movlw	11
  2175  000232  2653               	addwf	btemp+10,f,c
  2176  000234  0E00               	movlw	0
  2177  000236  2254               	addwfc	btemp+11,f,c
  2178  000238  5049               	movf	btemp,w,c
  2179  00023A  2653               	addwf	btemp+10,f,c
  2180  00023C  504A               	movf	btemp+1,w,c
  2181  00023E  2254               	addwfc	btemp+11,f,c
  2182  000240  5051               	movf	btemp+8,w,c
  2183  000242  2453               	addwf	btemp+10,w,c
  2184  000244  6ED9               	movwf	fsr2l,c
  2185  000246  5052               	movf	btemp+9,w,c
  2186  000248  2054               	addwfc	btemp+11,w,c
  2187  00024A  6EDA               	movwf	fsr2h,c
  2188  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2189  000250  0E6E               	movlw	110
  2190  000252  6EE6               	movwf	postinc1,c
  2191  000254  0E00               	movlw	0
  2192  000256  6EE6               	movwf	postinc1,c
  2193  000258  C037  FFE6         	movff	_task_running,postinc1
  2194  00025C  C038  FFE6         	movff	_task_running+1,postinc1
  2195  000260  EC5D  F006         	call	___wmul	;wreg free
  2196  000264  0E57               	movlw	low (_F_APTOS+105)
  2197  000266  2449               	addwf	btemp,w,c
  2198  000268  6ED9               	movwf	fsr2l,c
  2199  00026A  0E01               	movlw	high (_F_APTOS+105)
  2200  00026C  204A               	addwfc	btemp+1,w,c
  2201  00026E  6EDA               	movwf	fsr2h,c
  2202  000270  2ADE               	incf	postinc2,f,c
  2203  000272  0E00               	movlw	0
  2204  000274  22DD               	addwfc	postdec2,f,c
  2205  000276  0006               	pop		;# 
  2206  000278  50FC               	movf	stkptr,w,c	;volatile
  2207  00027A  A4D8               	btfss	status,2,c
  2208  00027C  D729               	goto	l1370
  2209                           
  2210                           ;kernel.c: 42: task_running = rr_scheduler();
  2211  00027E  ECA8  F006         	call	_rr_scheduler	;wreg free
  2212  000282  C049  F037         	movff	btemp,_task_running
  2213  000286  C04A  F038         	movff	btemp+1,_task_running+1
  2214                           
  2215                           ;kernel.c: 48: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2216  00028A  6AFC               	clrf	stkptr,c	;volatile
  2217  00028C  0E6E               	movlw	110
  2218  00028E  6EE6               	movwf	postinc1,c
  2219  000290  0E00               	movlw	0
  2220  000292  6EE6               	movwf	postinc1,c
  2221  000294  C037  FFE6         	movff	_task_running,postinc1
  2222  000298  C038  FFE6         	movff	_task_running+1,postinc1
  2223  00029C  EC5D  F006         	call	___wmul	;wreg free
  2224  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2225  0002A2  2449               	addwf	btemp,w,c
  2226  0002A4  6ED9               	movwf	fsr2l,c
  2227  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2228  0002A8  204A               	addwfc	btemp+1,w,c
  2229  0002AA  6EDA               	movwf	fsr2h,c
  2230  0002AC  50DE               	movf	postinc2,w,c
  2231  0002AE  10DE               	iorwf	postinc2,w,c
  2232  0002B0  A4D8               	btfss	status,2,c
  2233  0002B2  D01B               	goto	l1390
  2234  0002B4  0005               	push		;# 
  2235  0002B6  0E6E               	movlw	110
  2236  0002B8  6EE6               	movwf	postinc1,c
  2237  0002BA  0E00               	movlw	0
  2238  0002BC  6EE6               	movwf	postinc1,c
  2239  0002BE  C037  FFE6         	movff	_task_running,postinc1
  2240  0002C2  C038  FFE6         	movff	_task_running+1,postinc1
  2241  0002C6  EC5D  F006         	call	___wmul	;wreg free
  2242  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2243  0002CC  2449               	addwf	btemp,w,c
  2244  0002CE  6ED9               	movwf	fsr2l,c
  2245  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2246  0002D2  204A               	addwfc	btemp+1,w,c
  2247  0002D4  6EDA               	movwf	fsr2h,c
  2248  0002D6  CFDE F04A          	movff	postinc2,btemp+1
  2249  0002DA  CFDD F04B          	movff	postdec2,btemp+2
  2250  0002DE  C04A  FFFD         	movff	btemp+1,tosl	;volatile
  2251  0002E2  C04B  FFFE         	movff	btemp+2,tosh	;volatile
  2252  0002E6  6AFF               	clrf	tosu,c	;volatile
  2253  0002E8  D11F               	goto	u55_20
  2254  0002EA                     l1390:
  2255  0002EA  0E6E               	movlw	110
  2256  0002EC  6EE6               	movwf	postinc1,c
  2257  0002EE  0E00               	movlw	0
  2258  0002F0  6EE6               	movwf	postinc1,c
  2259  0002F2  C037  FFE6         	movff	_task_running,postinc1
  2260  0002F6  C038  FFE6         	movff	_task_running+1,postinc1
  2261  0002FA  EC5D  F006         	call	___wmul	;wreg free
  2262  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2263  000300  2449               	addwf	btemp,w,c
  2264  000302  6ED9               	movwf	fsr2l,c
  2265  000304  0E01               	movlw	high (_F_APTOS+107)
  2266  000306  204A               	addwfc	btemp+1,w,c
  2267  000308  6EDA               	movwf	fsr2h,c
  2268  00030A  50DF               	movf	indf2,w,c
  2269  00030C  6EE0               	movwf	bsr,c	;volatile
  2270  00030E  0E6E               	movlw	110
  2271  000310  6EE6               	movwf	postinc1,c
  2272  000312  0E00               	movlw	0
  2273  000314  6EE6               	movwf	postinc1,c
  2274  000316  C037  FFE6         	movff	_task_running,postinc1
  2275  00031A  C038  FFE6         	movff	_task_running+1,postinc1
  2276  00031E  EC5D  F006         	call	___wmul	;wreg free
  2277  000322  0E5A               	movlw	low (_F_APTOS+108)
  2278  000324  2449               	addwf	btemp,w,c
  2279  000326  6ED9               	movwf	fsr2l,c
  2280  000328  0E01               	movlw	high (_F_APTOS+108)
  2281  00032A  204A               	addwfc	btemp+1,w,c
  2282  00032C  6EDA               	movwf	fsr2h,c
  2283  00032E  50DF               	movf	indf2,w,c
  2284  000330  6ED8               	movwf	status,c	;volatile
  2285  000332  0E6E               	movlw	110
  2286  000334  6EE6               	movwf	postinc1,c
  2287  000336  0E00               	movlw	0
  2288  000338  6EE6               	movwf	postinc1,c
  2289  00033A  C037  FFE6         	movff	_task_running,postinc1
  2290  00033E  C038  FFE6         	movff	_task_running+1,postinc1
  2291  000342  EC5D  F006         	call	___wmul	;wreg free
  2292  000346  0E5B               	movlw	low (_F_APTOS+109)
  2293  000348  2449               	addwf	btemp,w,c
  2294  00034A  6ED9               	movwf	fsr2l,c
  2295  00034C  0E01               	movlw	high (_F_APTOS+109)
  2296  00034E  204A               	addwfc	btemp+1,w,c
  2297  000350  6EDA               	movwf	fsr2h,c
  2298  000352  50DF               	movf	indf2,w,c
  2299  000354  6E54               	movwf	btemp+11,c
  2300  000356  5054               	movf	btemp+11,w,c
  2301  000358                     l72:
  2302  000358  0005               	push		;# 
  2303  00035A  0E6E               	movlw	110
  2304  00035C  6EE6               	movwf	postinc1,c
  2305  00035E  0E00               	movlw	0
  2306  000360  6EE6               	movwf	postinc1,c
  2307  000362  C037  FFE6         	movff	_task_running,postinc1
  2308  000366  C038  FFE6         	movff	_task_running+1,postinc1
  2309  00036A  EC5D  F006         	call	___wmul	;wreg free
  2310  00036E  0E57               	movlw	low (_F_APTOS+105)
  2311  000370  2449               	addwf	btemp,w,c
  2312  000372  6ED9               	movwf	fsr2l,c
  2313  000374  0E01               	movlw	high (_F_APTOS+105)
  2314  000376  204A               	addwfc	btemp+1,w,c
  2315  000378  6EDA               	movwf	fsr2h,c
  2316  00037A  06DE               	decf	postinc2,f,c
  2317  00037C  0E00               	movlw	0
  2318  00037E  5ADD               	subwfb	postdec2,f,c
  2319  000380  0E03               	movlw	3
  2320  000382  6EE6               	movwf	postinc1,c
  2321  000384  0E00               	movlw	0
  2322  000386  6EE6               	movwf	postinc1,c
  2323  000388  0E6E               	movlw	110
  2324  00038A  6EE6               	movwf	postinc1,c
  2325  00038C  0E00               	movlw	0
  2326  00038E  6EE6               	movwf	postinc1,c
  2327  000390  C037  FFE6         	movff	_task_running,postinc1
  2328  000394  C038  FFE6         	movff	_task_running+1,postinc1
  2329  000398  EC5D  F006         	call	___wmul	;wreg free
  2330  00039C  0E57               	movlw	low (_F_APTOS+105)
  2331  00039E  2449               	addwf	btemp,w,c
  2332  0003A0  6ED9               	movwf	fsr2l,c
  2333  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2334  0003A4  204A               	addwfc	btemp+1,w,c
  2335  0003A6  6EDA               	movwf	fsr2h,c
  2336  0003A8  CFDE F04A          	movff	postinc2,btemp+1
  2337  0003AC  CFDD F04B          	movff	postdec2,btemp+2
  2338  0003B0  C04A  FFE6         	movff	btemp+1,postinc1
  2339  0003B4  C04B  FFE6         	movff	btemp+2,postinc1
  2340  0003B8  EC5D  F006         	call	___wmul	;wreg free
  2341  0003BC  C049  F051         	movff	btemp,btemp+8
  2342  0003C0  C04A  F052         	movff	btemp+1,btemp+9
  2343  0003C4  0E6E               	movlw	110
  2344  0003C6  6EE6               	movwf	postinc1,c
  2345  0003C8  0E00               	movlw	0
  2346  0003CA  6EE6               	movwf	postinc1,c
  2347  0003CC  C037  FFE6         	movff	_task_running,postinc1
  2348  0003D0  C038  FFE6         	movff	_task_running+1,postinc1
  2349  0003D4  EC5D  F006         	call	___wmul	;wreg free
  2350  0003D8  0EEE               	movlw	low _F_APTOS
  2351  0003DA  6E53               	movwf	btemp+10,c
  2352  0003DC  0E00               	movlw	high _F_APTOS
  2353  0003DE  6E54               	movwf	btemp+11,c
  2354  0003E0  0E09               	movlw	9
  2355  0003E2  2653               	addwf	btemp+10,f,c
  2356  0003E4  0E00               	movlw	0
  2357  0003E6  2254               	addwfc	btemp+11,f,c
  2358  0003E8  5049               	movf	btemp,w,c
  2359  0003EA  2653               	addwf	btemp+10,f,c
  2360  0003EC  504A               	movf	btemp+1,w,c
  2361  0003EE  2254               	addwfc	btemp+11,f,c
  2362  0003F0  5051               	movf	btemp+8,w,c
  2363  0003F2  2453               	addwf	btemp+10,w,c
  2364  0003F4  6ED9               	movwf	fsr2l,c
  2365  0003F6  5052               	movf	btemp+9,w,c
  2366  0003F8  2054               	addwfc	btemp+11,w,c
  2367  0003FA  6EDA               	movwf	fsr2h,c
  2368  0003FC  50DF               	movf	indf2,w,c
  2369  0003FE  6EFF               	movwf	tosu,c	;volatile
  2370  000400  0E03               	movlw	3
  2371  000402  6EE6               	movwf	postinc1,c
  2372  000404  0E00               	movlw	0
  2373  000406  6EE6               	movwf	postinc1,c
  2374  000408  0E6E               	movlw	110
  2375  00040A  6EE6               	movwf	postinc1,c
  2376  00040C  0E00               	movlw	0
  2377  00040E  6EE6               	movwf	postinc1,c
  2378  000410  C037  FFE6         	movff	_task_running,postinc1
  2379  000414  C038  FFE6         	movff	_task_running+1,postinc1
  2380  000418  EC5D  F006         	call	___wmul	;wreg free
  2381  00041C  0E57               	movlw	low (_F_APTOS+105)
  2382  00041E  2449               	addwf	btemp,w,c
  2383  000420  6ED9               	movwf	fsr2l,c
  2384  000422  0E01               	movlw	high (_F_APTOS+105)
  2385  000424  204A               	addwfc	btemp+1,w,c
  2386  000426  6EDA               	movwf	fsr2h,c
  2387  000428  CFDE F04A          	movff	postinc2,btemp+1
  2388  00042C  CFDD F04B          	movff	postdec2,btemp+2
  2389  000430  C04A  FFE6         	movff	btemp+1,postinc1
  2390  000434  C04B  FFE6         	movff	btemp+2,postinc1
  2391  000438  EC5D  F006         	call	___wmul	;wreg free
  2392  00043C  C049  F051         	movff	btemp,btemp+8
  2393  000440  C04A  F052         	movff	btemp+1,btemp+9
  2394  000444  0E6E               	movlw	110
  2395  000446  6EE6               	movwf	postinc1,c
  2396  000448  0E00               	movlw	0
  2397  00044A  6EE6               	movwf	postinc1,c
  2398  00044C  C037  FFE6         	movff	_task_running,postinc1
  2399  000450  C038  FFE6         	movff	_task_running+1,postinc1
  2400  000454  EC5D  F006         	call	___wmul	;wreg free
  2401  000458  0EEE               	movlw	low _F_APTOS
  2402  00045A  6E53               	movwf	btemp+10,c
  2403  00045C  0E00               	movlw	high _F_APTOS
  2404  00045E  6E54               	movwf	btemp+11,c
  2405  000460  0E0A               	movlw	10
  2406  000462  2653               	addwf	btemp+10,f,c
  2407  000464  0E00               	movlw	0
  2408  000466  2254               	addwfc	btemp+11,f,c
  2409  000468  5049               	movf	btemp,w,c
  2410  00046A  2653               	addwf	btemp+10,f,c
  2411  00046C  504A               	movf	btemp+1,w,c
  2412  00046E  2254               	addwfc	btemp+11,f,c
  2413  000470  5051               	movf	btemp+8,w,c
  2414  000472  2453               	addwf	btemp+10,w,c
  2415  000474  6ED9               	movwf	fsr2l,c
  2416  000476  5052               	movf	btemp+9,w,c
  2417  000478  2054               	addwfc	btemp+11,w,c
  2418  00047A  6EDA               	movwf	fsr2h,c
  2419  00047C  50DF               	movf	indf2,w,c
  2420  00047E  6EFD               	movwf	tosl,c	;volatile
  2421  000480  0E03               	movlw	3
  2422  000482  6EE6               	movwf	postinc1,c
  2423  000484  0E00               	movlw	0
  2424  000486  6EE6               	movwf	postinc1,c
  2425  000488  0E6E               	movlw	110
  2426  00048A  6EE6               	movwf	postinc1,c
  2427  00048C  0E00               	movlw	0
  2428  00048E  6EE6               	movwf	postinc1,c
  2429  000490  C037  FFE6         	movff	_task_running,postinc1
  2430  000494  C038  FFE6         	movff	_task_running+1,postinc1
  2431  000498  EC5D  F006         	call	___wmul	;wreg free
  2432  00049C  0E57               	movlw	low (_F_APTOS+105)
  2433  00049E  2449               	addwf	btemp,w,c
  2434  0004A0  6ED9               	movwf	fsr2l,c
  2435  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2436  0004A4  204A               	addwfc	btemp+1,w,c
  2437  0004A6  6EDA               	movwf	fsr2h,c
  2438  0004A8  CFDE F04A          	movff	postinc2,btemp+1
  2439  0004AC  CFDD F04B          	movff	postdec2,btemp+2
  2440  0004B0  C04A  FFE6         	movff	btemp+1,postinc1
  2441  0004B4  C04B  FFE6         	movff	btemp+2,postinc1
  2442  0004B8  EC5D  F006         	call	___wmul	;wreg free
  2443  0004BC  C049  F051         	movff	btemp,btemp+8
  2444  0004C0  C04A  F052         	movff	btemp+1,btemp+9
  2445  0004C4  0E6E               	movlw	110
  2446  0004C6  6EE6               	movwf	postinc1,c
  2447  0004C8  0E00               	movlw	0
  2448  0004CA  6EE6               	movwf	postinc1,c
  2449  0004CC  C037  FFE6         	movff	_task_running,postinc1
  2450  0004D0  C038  FFE6         	movff	_task_running+1,postinc1
  2451  0004D4  EC5D  F006         	call	___wmul	;wreg free
  2452  0004D8  0EEE               	movlw	low _F_APTOS
  2453  0004DA  6E53               	movwf	btemp+10,c
  2454  0004DC  0E00               	movlw	high _F_APTOS
  2455  0004DE  6E54               	movwf	btemp+11,c
  2456  0004E0  0E0B               	movlw	11
  2457  0004E2  2653               	addwf	btemp+10,f,c
  2458  0004E4  0E00               	movlw	0
  2459  0004E6  2254               	addwfc	btemp+11,f,c
  2460  0004E8  5049               	movf	btemp,w,c
  2461  0004EA  2653               	addwf	btemp+10,f,c
  2462  0004EC  504A               	movf	btemp+1,w,c
  2463  0004EE  2254               	addwfc	btemp+11,f,c
  2464  0004F0  5051               	movf	btemp+8,w,c
  2465  0004F2  2453               	addwf	btemp+10,w,c
  2466  0004F4  6ED9               	movwf	fsr2l,c
  2467  0004F6  5052               	movf	btemp+9,w,c
  2468  0004F8  2054               	addwfc	btemp+11,w,c
  2469  0004FA  6EDA               	movwf	fsr2h,c
  2470  0004FC  50DF               	movf	indf2,w,c
  2471  0004FE  6EFE               	movwf	tosh,c	;volatile
  2472  000500  0E6E               	movlw	110
  2473  000502  6EE6               	movwf	postinc1,c
  2474  000504  0E00               	movlw	0
  2475  000506  6EE6               	movwf	postinc1,c
  2476  000508  C037  FFE6         	movff	_task_running,postinc1
  2477  00050C  C038  FFE6         	movff	_task_running+1,postinc1
  2478  000510  EC5D  F006         	call	___wmul	;wreg free
  2479  000514  0E57               	movlw	low (_F_APTOS+105)
  2480  000516  2449               	addwf	btemp,w,c
  2481  000518  6ED9               	movwf	fsr2l,c
  2482  00051A  0E01               	movlw	high (_F_APTOS+105)
  2483  00051C  204A               	addwfc	btemp+1,w,c
  2484  00051E  6EDA               	movwf	fsr2h,c
  2485  000520  50DE               	movf	postinc2,w,c
  2486  000522  10DE               	iorwf	postinc2,w,c
  2487  000524  A4D8               	btfss	status,2,c
  2488  000526  D718               	goto	l72
  2489  000528                     u55_20:
  2490  000528  0E6E               	movlw	110
  2491  00052A  6EE6               	movwf	postinc1,c
  2492  00052C  0E00               	movlw	0
  2493  00052E  6EE6               	movwf	postinc1,c
  2494  000530  C037  FFE6         	movff	_task_running,postinc1
  2495  000534  C038  FFE6         	movff	_task_running+1,postinc1
  2496  000538  EC5D  F006         	call	___wmul	;wreg free
  2497  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2498  00053E  2449               	addwf	btemp,w,c
  2499  000540  6ED9               	movwf	fsr2l,c
  2500  000542  0E00               	movlw	high (_F_APTOS+8)
  2501  000544  204A               	addwfc	btemp+1,w,c
  2502  000546  6EDA               	movwf	fsr2h,c
  2503  000548  0E02               	movlw	2
  2504  00054A  6EDF               	movwf	indf2,c
  2505  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2506                           
  2507                           ;kernel.c: 50: (INTCONbits.GIE = 1);
  2508  00054E  8EF2               	bsf	intcon,7,c	;volatile
  2509                           
  2510                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2511  000550  52E5               	movf	postdec1,f,c
  2512  000552  0012               	return		;funcret
  2513  000554                     __end_of_dispatcher:
  2514                           	opt stack 0
  2515                           tosu	equ	0xFFF
  2516                           tosh	equ	0xFFE
  2517                           tosl	equ	0xFFD
  2518                           stkptr	equ	0xFFC
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           prodh	equ	0xFF4
  2524                           prodl	equ	0xFF3
  2525                           intcon	equ	0xFF2
  2526                           postinc0	equ	0xFEE
  2527                           postdec0	equ	0xFED
  2528                           plusw0	equ	0xFEB
  2529                           fsr0h	equ	0xFEA
  2530                           fsr0l	equ	0xFE9
  2531                           wreg	equ	0xFE8
  2532                           postinc1	equ	0xFE6
  2533                           postdec1	equ	0xFE5
  2534                           plusw1	equ	0xFE3
  2535                           fsr1h	equ	0xFE2
  2536                           fsr1l	equ	0xFE1
  2537                           bsr	equ	0xFE0
  2538                           indf2	equ	0xFDF
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           plusw2	equ	0xFDB
  2542                           fsr2h	equ	0xFDA
  2543                           fsr2l	equ	0xFD9
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function _rr_scheduler *****************
  2547 ;; Defined at:
  2548 ;;		line 12 in file "scheduler.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  next_task_to    2  [STACK] unsigned int 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  2  [STACK] unsigned int 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         0       0       0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0
  2565 ;;      Totals:         0       0       0       0       0       0       0
  2566 ;;Total ram usage:        0 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    5
  2569 ;; This function calls:
  2570 ;;		___lwmod
  2571 ;;		___wmul
  2572 ;; This function is called by:
  2573 ;;		_dispatcher
  2574 ;; This function uses a reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text12
  2578  000D50                     __ptext12:
  2579                           	opt stack 0
  2580  000D50                     _rr_scheduler:
  2581                           	opt stack 0
  2582                           
  2583                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2584  000D50  52E6               	movf	postinc1,f,c
  2585  000D52  52E6               	movf	postinc1,f,c
  2586                           
  2587                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2588                           
  2589                           ;incstack = 0
  2590  000D54  C037  F04A         	movff	_task_running,btemp+1
  2591  000D58  C038  F04B         	movff	_task_running+1,btemp+2
  2592                           
  2593                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2594  000D5C  0EFE               	movlw	-2
  2595  000D5E  C04A  FFE3         	movff	btemp+1,plusw1
  2596  000D62  0EFF               	movlw	-1
  2597  000D64  C04B  FFE3         	movff	btemp+2,plusw1
  2598  000D68                     l1258:
  2599                           
  2600                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2601  000D68  C039  FFE6         	movff	_tasks_installed,postinc1
  2602  000D6C  C03A  FFE6         	movff	_tasks_installed+1,postinc1
  2603                           
  2604                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2605  000D70  0EFC               	movlw	-4
  2606  000D72  50E3               	movf	plusw1,w,c
  2607  000D74  0F01               	addlw	1
  2608  000D76  6E4A               	movwf	btemp+1,c
  2609  000D78  0EFD               	movlw	-3
  2610  000D7A  CFE3 F04B          	movff	plusw1,btemp+2
  2611  000D7E  0E00               	movlw	0
  2612  000D80  224B               	addwfc	btemp+2,f,c
  2613  000D82  C04A  FFE6         	movff	btemp+1,postinc1
  2614  000D86  C04B  FFE6         	movff	btemp+2,postinc1
  2615  000D8A  EC58  F005         	call	___lwmod	;wreg free
  2616                           
  2617                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2618  000D8E  0EFE               	movlw	-2
  2619  000D90  C049  FFE3         	movff	btemp,plusw1
  2620  000D94  0EFF               	movlw	-1
  2621  000D96  C04A  FFE3         	movff	btemp+1,plusw1
  2622                           
  2623                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2624  000D9A  0E6E               	movlw	110
  2625  000D9C  6EE6               	movwf	postinc1,c
  2626  000D9E  0E00               	movlw	0
  2627  000DA0  6EE6               	movwf	postinc1,c
  2628                           
  2629                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2630  000DA2  0EFC               	movlw	-4
  2631  000DA4  CFE3 FFE6          	movff	plusw1,postinc1
  2632  000DA8  CFE3 FFE6          	movff	plusw1,postinc1
  2633  000DAC  EC5D  F006         	call	___wmul	;wreg free
  2634  000DB0  0EF6               	movlw	low (_F_APTOS+8)
  2635  000DB2  2449               	addwf	btemp,w,c
  2636  000DB4  6ED9               	movwf	fsr2l,c
  2637  000DB6  0E00               	movlw	high (_F_APTOS+8)
  2638  000DB8  204A               	addwfc	btemp+1,w,c
  2639  000DBA  6EDA               	movwf	fsr2h,c
  2640  000DBC  04DE               	decf	postinc2,w,c
  2641  000DBE  A4D8               	btfss	status,2,c
  2642  000DC0  D7D3               	goto	l1258
  2643                           
  2644                           ;scheduler.c: 20: return next_task_to_run;
  2645                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2646  000DC2  0EFE               	movlw	-2
  2647  000DC4  CFE3 F049          	movff	plusw1,btemp
  2648  000DC8  0EFF               	movlw	-1
  2649  000DCA  CFE3 F04A          	movff	plusw1,btemp+1
  2650                           
  2651                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2652  000DCE  52E5               	movf	postdec1,f,c
  2653  000DD0  52E5               	movf	postdec1,f,c
  2654  000DD2  0012               	return		;funcret
  2655  000DD4                     __end_of_rr_scheduler:
  2656                           	opt stack 0
  2657                           tosu	equ	0xFFF
  2658                           tosh	equ	0xFFE
  2659                           tosl	equ	0xFFD
  2660                           stkptr	equ	0xFFC
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           prodh	equ	0xFF4
  2666                           prodl	equ	0xFF3
  2667                           intcon	equ	0xFF2
  2668                           postinc0	equ	0xFEE
  2669                           postdec0	equ	0xFED
  2670                           plusw0	equ	0xFEB
  2671                           fsr0h	equ	0xFEA
  2672                           fsr0l	equ	0xFE9
  2673                           wreg	equ	0xFE8
  2674                           postinc1	equ	0xFE6
  2675                           postdec1	equ	0xFE5
  2676                           plusw1	equ	0xFE3
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           bsr	equ	0xFE0
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           plusw2	equ	0xFDB
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function ___lwmod *****************
  2689 ;; Defined at:
  2690 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  dividend        2  [STACK] unsigned int 
  2693 ;;  divisor         2  [STACK] unsigned int 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  counter         1  [STACK] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  2  [STACK] unsigned int 
  2698 ;; Registers used:
  2699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2705 ;;      Params:         0       0       0       0       0       0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0
  2708 ;;      Totals:         0       0       0       0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    4
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_rr_scheduler
  2716 ;;		_sem_wait
  2717 ;;		_sem_post
  2718 ;; This function uses a reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text13
  2722  000AB0                     __ptext13:
  2723                           	opt stack 0
  2724  000AB0                     ___lwmod:
  2725                           	opt stack 0
  2726                           
  2727                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2728  000AB0  52E6               	movf	postinc1,f,c
  2729                           
  2730                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2731                           
  2732                           ;incstack = 0
  2733  000AB2  0EFB               	movlw	-5
  2734  000AB4  CFE3 F049          	movff	plusw1,btemp
  2735  000AB8  0EFC               	movlw	-4
  2736  000ABA  50E3               	movf	plusw1,w,c
  2737  000ABC  1049               	iorwf	btemp,w,c
  2738  000ABE  B4D8               	btfsc	status,2,c
  2739  000AC0  D04A               	goto	u4_20
  2740                           
  2741                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2742  000AC2  0EFF               	movlw	-1
  2743  000AC4  6AE3               	clrf	plusw1,c
  2744  000AC6  D010               	goto	L1
  2745  000AC8                     l876:
  2746                           
  2747                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2748  000AC8  0EFB               	movlw	-5
  2749  000ACA  50E3               	movf	plusw1,w,c
  2750  000ACC  90D8               	bcf	status,0,c
  2751  000ACE  34E8               	rlcf	wreg,w,c
  2752  000AD0  6E49               	movwf	btemp,c
  2753  000AD2  0EFB               	movlw	-5
  2754  000AD4  C049  FFE3         	movff	btemp,plusw1
  2755  000AD8  0EFC               	movlw	-4
  2756  000ADA  50E3               	movf	plusw1,w,c
  2757  000ADC  34E8               	rlcf	wreg,w,c
  2758  000ADE  6E49               	movwf	btemp,c
  2759  000AE0  0EFC               	movlw	-4
  2760  000AE2  C049  FFE3         	movff	btemp,plusw1
  2761                           
  2762                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2763  000AE6  0EFF               	movlw	-1
  2764  000AE8                     L1:
  2765  000AE8  2AE3               	incf	plusw1,f,c
  2766                           
  2767                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2768  000AEA  0EFC               	movlw	-4
  2769  000AEC  AEE3               	btfss	plusw1,7,c
  2770  000AEE  D7EC               	goto	l876
  2771  000AF0                     u2_20:
  2772                           
  2773                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2774  000AF0  0EFB               	movlw	-5
  2775  000AF2  CFE3 F04A          	movff	plusw1,btemp+1
  2776  000AF6  0EFC               	movlw	-4
  2777  000AF8  CFE3 F04B          	movff	plusw1,btemp+2
  2778                           
  2779                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2780  000AFC  0EFD               	movlw	-3
  2781  000AFE  CFE3 F053          	movff	plusw1,btemp+10
  2782  000B02  0EFE               	movlw	-2
  2783  000B04  CFE3 F054          	movff	plusw1,btemp+11
  2784  000B08  504A               	movf	btemp+1,w,c
  2785  000B0A  5C53               	subwf	btemp+10,w,c
  2786  000B0C  504B               	movf	btemp+2,w,c
  2787  000B0E  5854               	subwfb	btemp+11,w,c
  2788  000B10  A0D8               	btfss	status,0,c
  2789  000B12  D012               	goto	l886
  2790                           
  2791                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2792                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2793  000B14  0EFD               	movlw	-3
  2794  000B16  50E3               	movf	plusw1,w,c
  2795  000B18  6E49               	movwf	btemp,c
  2796  000B1A  0EFB               	movlw	-5
  2797  000B1C  50E3               	movf	plusw1,w,c
  2798  000B1E  5E49               	subwf	btemp,f,c
  2799  000B20  0EFD               	movlw	-3
  2800  000B22  C049  FFE3         	movff	btemp,plusw1
  2801  000B26  0EFE               	movlw	-2
  2802  000B28  50E3               	movf	plusw1,w,c
  2803  000B2A  6E49               	movwf	btemp,c
  2804  000B2C  0EFC               	movlw	-4
  2805  000B2E  50E3               	movf	plusw1,w,c
  2806  000B30  5A49               	subwfb	btemp,f,c
  2807  000B32  0EFE               	movlw	-2
  2808  000B34  C049  FFE3         	movff	btemp,plusw1
  2809  000B38                     l886:
  2810                           
  2811                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2812  000B38  90D8               	bcf	status,0,c
  2813  000B3A  0EFC               	movlw	-4
  2814  000B3C  32E3               	rrcf	plusw1,f,c
  2815  000B3E  0EFB               	movlw	-5
  2816  000B40  32E3               	rrcf	plusw1,f,c
  2817                           
  2818                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2819  000B42  0EFF               	movlw	-1
  2820  000B44  50E3               	movf	plusw1,w,c
  2821  000B46  6E49               	movwf	btemp,c
  2822  000B48  0E01               	movlw	1
  2823  000B4A  5E49               	subwf	btemp,f,c
  2824  000B4C  0EFF               	movlw	-1
  2825  000B4E  C049  FFE3         	movff	btemp,plusw1
  2826  000B52  A4D8               	btfss	status,2,c
  2827  000B54  D7CD               	goto	u2_20
  2828  000B56                     u4_20:
  2829                           
  2830                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2831  000B56  0EFD               	movlw	-3
  2832  000B58  CFE3 F049          	movff	plusw1,btemp
  2833  000B5C  0EFE               	movlw	-2
  2834  000B5E  CFE3 F04A          	movff	plusw1,btemp+1
  2835                           
  2836                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  2837  000B62  0EFB               	movlw	251
  2838  000B64  26E1               	addwf	fsr1l,f,c
  2839  000B66  0EFF               	movlw	255
  2840  000B68  22E2               	addwfc	fsr1h,f,c
  2841  000B6A  0012               	return		;funcret
  2842  000B6C                     __end_of___lwmod:
  2843                           	opt stack 0
  2844                           tosu	equ	0xFFF
  2845                           tosh	equ	0xFFE
  2846                           tosl	equ	0xFFD
  2847                           stkptr	equ	0xFFC
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           intcon	equ	0xFF2
  2855                           postinc0	equ	0xFEE
  2856                           postdec0	equ	0xFED
  2857                           plusw0	equ	0xFEB
  2858                           fsr0h	equ	0xFEA
  2859                           fsr0l	equ	0xFE9
  2860                           wreg	equ	0xFE8
  2861                           postinc1	equ	0xFE6
  2862                           postdec1	equ	0xFE5
  2863                           plusw1	equ	0xFE3
  2864                           fsr1h	equ	0xFE2
  2865                           fsr1l	equ	0xFE1
  2866                           bsr	equ	0xFE0
  2867                           indf2	equ	0xFDF
  2868                           postinc2	equ	0xFDE
  2869                           postdec2	equ	0xFDD
  2870                           plusw2	equ	0xFDB
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _create_pipe *****************
  2876 ;; Defined at:
  2877 ;;		line 10 in file "pipe.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  pipe            2  [STACK] PTR struct pipe
  2880 ;;		 -> pipe(14), 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1  [STACK] void 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2892 ;;      Params:         0       0       0       0       0       0       0
  2893 ;;      Locals:         0       0       0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0
  2895 ;;      Totals:         0       0       0       0       0       0       0
  2896 ;;Total ram usage:        0 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    4
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_task_one
  2903 ;; This function uses a reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text14
  2907  000C14                     __ptext14:
  2908                           	opt stack 0
  2909  000C14                     _create_pipe:
  2910                           	opt stack 22
  2911                           
  2912                           ;pipe.c: 12: pipe->pos_read_pipe = 0;
  2913                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2914                           
  2915                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2916                           ;incstack = 0
  2917  000C14  0EFE               	movlw	-2
  2918  000C16  CFE3 F04A          	movff	plusw1,btemp+1
  2919  000C1A  0EFF               	movlw	-1
  2920  000C1C  CFE3 F04B          	movff	plusw1,btemp+2
  2921  000C20  0E04               	movlw	4
  2922  000C22  244A               	addwf	btemp+1,w,c
  2923  000C24  6ED9               	movwf	fsr2l,c
  2924  000C26  0E00               	movlw	0
  2925  000C28  204B               	addwfc	btemp+2,w,c
  2926  000C2A  6EDA               	movwf	fsr2h,c
  2927  000C2C  0E00               	movlw	0
  2928  000C2E  6EDE               	movwf	postinc2,c
  2929  000C30  0E00               	movlw	0
  2930  000C32  6EDD               	movwf	postdec2,c
  2931                           
  2932                           ;pipe.c: 13: pipe->pos_write_pipe = 0;
  2933                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2934  000C34  0EFE               	movlw	-2
  2935  000C36  CFE3 F04A          	movff	plusw1,btemp+1
  2936  000C3A  0EFF               	movlw	-1
  2937  000C3C  CFE3 F04B          	movff	plusw1,btemp+2
  2938  000C40  0E06               	movlw	6
  2939  000C42  244A               	addwf	btemp+1,w,c
  2940  000C44  6ED9               	movwf	fsr2l,c
  2941  000C46  0E00               	movlw	0
  2942  000C48  204B               	addwfc	btemp+2,w,c
  2943  000C4A  6EDA               	movwf	fsr2h,c
  2944  000C4C  0E00               	movlw	0
  2945  000C4E  6EDE               	movwf	postinc2,c
  2946  000C50  0E00               	movlw	0
  2947  000C52  6EDD               	movwf	postdec2,c
  2948                           
  2949                           ;pipe.c: 14: pipe->pipe_itens = 0;
  2950                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2951  000C54  0EFE               	movlw	-2
  2952  000C56  CFE3 F04A          	movff	plusw1,btemp+1
  2953  000C5A  0EFF               	movlw	-1
  2954  000C5C  CFE3 F04B          	movff	plusw1,btemp+2
  2955  000C60  0E08               	movlw	8
  2956  000C62  244A               	addwf	btemp+1,w,c
  2957  000C64  6ED9               	movwf	fsr2l,c
  2958  000C66  0E00               	movlw	0
  2959  000C68  204B               	addwfc	btemp+2,w,c
  2960  000C6A  6EDA               	movwf	fsr2h,c
  2961  000C6C  0E00               	movlw	0
  2962  000C6E  6EDE               	movwf	postinc2,c
  2963  000C70  0E00               	movlw	0
  2964  000C72  6EDD               	movwf	postdec2,c
  2965                           
  2966                           ;pipe.c: 17: pipe->pos_bloqued_read = 0;
  2967                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2968  000C74  0EFE               	movlw	-2
  2969  000C76  CFE3 F04A          	movff	plusw1,btemp+1
  2970  000C7A  0EFF               	movlw	-1
  2971  000C7C  CFE3 F04B          	movff	plusw1,btemp+2
  2972  000C80  0E0A               	movlw	10
  2973  000C82  244A               	addwf	btemp+1,w,c
  2974  000C84  6ED9               	movwf	fsr2l,c
  2975  000C86  0E00               	movlw	0
  2976  000C88  204B               	addwfc	btemp+2,w,c
  2977  000C8A  6EDA               	movwf	fsr2h,c
  2978  000C8C  0E00               	movlw	0
  2979  000C8E  6EDE               	movwf	postinc2,c
  2980  000C90  0E00               	movlw	0
  2981  000C92  6EDD               	movwf	postdec2,c
  2982                           
  2983                           ;pipe.c: 18: pipe->pos_bloqued_write = 0;
  2984                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2985  000C94  0EFE               	movlw	-2
  2986  000C96  CFE3 F04A          	movff	plusw1,btemp+1
  2987  000C9A  0EFF               	movlw	-1
  2988  000C9C  CFE3 F04B          	movff	plusw1,btemp+2
  2989  000CA0  0E0C               	movlw	12
  2990  000CA2  244A               	addwf	btemp+1,w,c
  2991  000CA4  6ED9               	movwf	fsr2l,c
  2992  000CA6  0E00               	movlw	0
  2993  000CA8  204B               	addwfc	btemp+2,w,c
  2994  000CAA  6EDA               	movwf	fsr2h,c
  2995  000CAC  0E00               	movlw	0
  2996  000CAE  6EDE               	movwf	postinc2,c
  2997  000CB0  0E00               	movlw	0
  2998  000CB2  6EDD               	movwf	postdec2,c
  2999                           
  3000                           ; _create_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, a
      +                          rgsize = 2, vargsize = 0
  3001  000CB4  52E5               	movf	postdec1,f,c
  3002  000CB6  52E5               	movf	postdec1,f,c
  3003  000CB8  0012               	return		;funcret
  3004  000CBA                     __end_of_create_pipe:
  3005                           	opt stack 0
  3006                           tosu	equ	0xFFF
  3007                           tosh	equ	0xFFE
  3008                           tosl	equ	0xFFD
  3009                           stkptr	equ	0xFFC
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           postdec0	equ	0xFED
  3019                           plusw0	equ	0xFEB
  3020                           fsr0h	equ	0xFEA
  3021                           fsr0l	equ	0xFE9
  3022                           wreg	equ	0xFE8
  3023                           postinc1	equ	0xFE6
  3024                           postdec1	equ	0xFE5
  3025                           plusw1	equ	0xFE3
  3026                           fsr1h	equ	0xFE2
  3027                           fsr1l	equ	0xFE1
  3028                           bsr	equ	0xFE0
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           plusw2	equ	0xFDB
  3033                           fsr2h	equ	0xFDA
  3034                           fsr2l	equ	0xFD9
  3035                           status	equ	0xFD8
  3036                           
  3037 ;; *************** function _task_two *****************
  3038 ;; Defined at:
  3039 ;;		line 33 in file "tasks.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  dado            1    0        unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1  [STACK] void 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         0       0       0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0
  3056 ;;      Totals:         0       0       0       0       0       0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    8
  3060 ;; This function calls:
  3061 ;;		_delay
  3062 ;;		_read_pipe
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text15
  3069  000FC0                     __ptext15:
  3070                           	opt stack 0
  3071  000FC0                     _task_two:
  3072                           	opt stack 19
  3073                           
  3074                           ;tasks.c: 35: byte dado;
  3075                           ;tasks.c: 37: TRISDbits.RD1 = 0;
  3076                           
  3077                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3078                           ;incstack = 0
  3079  000FC0  9295               	bcf	3989,1,c	;volatile
  3080                           
  3081                           ;tasks.c: 38: PORTDbits.RD1 = 0;
  3082  000FC2  9283               	bcf	3971,1,c	;volatile
  3083  000FC4                     l1504:
  3084                           
  3085                           ;tasks.c: 42: dado = read_pipe(&pipe);
  3086  000FC4  0E3B               	movlw	low _pipe
  3087  000FC6  6EE6               	movwf	postinc1,c
  3088  000FC8  0E00               	movlw	high _pipe
  3089  000FCA  6EE6               	movwf	postinc1,c
  3090  000FCC  ECAA  F002         	call	_read_pipe	;wreg free
  3091                           
  3092                           ;tasks.c: 43: PORTDbits.RD1 = ~PORTDbits.RD1;
  3093  000FD0  A283               	btfss	3971,1,c	;volatile
  3094  000FD2  D002               	goto	u66_20
  3095  000FD4  0E01               	movlw	1
  3096  000FD6  D001               	goto	u66_26
  3097  000FD8                     u66_20:
  3098  000FD8  0E00               	movlw	0
  3099  000FDA                     u66_26:
  3100  000FDA  0AFF               	xorlw	255
  3101  000FDC  6E54               	movwf	btemp+11,c
  3102  000FDE  4654               	rlncf	btemp+11,f,c
  3103  000FE0  5083               	movf	3971,w,c	;volatile
  3104  000FE2  1854               	xorwf	btemp+11,w,c
  3105  000FE4  0BFD               	andlw	-3
  3106  000FE6  1854               	xorwf	btemp+11,w,c
  3107  000FE8  6E83               	movwf	3971,c	;volatile
  3108                           
  3109                           ;tasks.c: 44: delay(100);
  3110  000FEA  0E64               	movlw	100
  3111  000FEC  6EE6               	movwf	postinc1,c
  3112  000FEE  0E00               	movlw	0
  3113  000FF0  6EE6               	movwf	postinc1,c
  3114  000FF2  EC7A  F007         	call	_delay	;wreg free
  3115  000FF6  D7E6               	goto	l1504
  3116  000FF8                     __end_of_task_two:
  3117                           	opt stack 0
  3118                           tosu	equ	0xFFF
  3119                           tosh	equ	0xFFE
  3120                           tosl	equ	0xFFD
  3121                           stkptr	equ	0xFFC
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           postinc0	equ	0xFEE
  3130                           postdec0	equ	0xFED
  3131                           plusw0	equ	0xFEB
  3132                           fsr0h	equ	0xFEA
  3133                           fsr0l	equ	0xFE9
  3134                           wreg	equ	0xFE8
  3135                           postinc1	equ	0xFE6
  3136                           postdec1	equ	0xFE5
  3137                           plusw1	equ	0xFE3
  3138                           fsr1h	equ	0xFE2
  3139                           fsr1l	equ	0xFE1
  3140                           bsr	equ	0xFE0
  3141                           indf2	equ	0xFDF
  3142                           postinc2	equ	0xFDE
  3143                           postdec2	equ	0xFDD
  3144                           plusw2	equ	0xFDB
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _read_pipe *****************
  3150 ;; Defined at:
  3151 ;;		line 50 in file "pipe.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  pipe            2  [STACK] PTR struct pipe
  3154 ;;		 -> pipe(14), 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  dado            1  [STACK] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1  [STACK] unsigned char 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3166 ;;      Params:         0       0       0       0       0       0       0
  3167 ;;      Locals:         0       0       0       0       0       0       0
  3168 ;;      Temps:          0       0       0       0       0       0       0
  3169 ;;      Totals:         0       0       0       0       0       0       0
  3170 ;;Total ram usage:        0 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    7
  3173 ;; This function calls:
  3174 ;;		___wmul
  3175 ;;		_dispatcher
  3176 ;; This function is called by:
  3177 ;;		_task_two
  3178 ;; This function uses a reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text16
  3182  000554                     __ptext16:
  3183                           	opt stack 0
  3184  000554                     _read_pipe:
  3185                           	opt stack 0
  3186                           
  3187                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3188  000554  52E6               	movf	postinc1,f,c
  3189                           
  3190                           ;pipe.c: 52: byte dado;
  3191                           ;pipe.c: 55: if (pipe->pipe_itens == 0) {
  3192                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3193                           
  3194                           ;incstack = 0
  3195  000556  0EFD               	movlw	-3
  3196  000558  CFE3 F04A          	movff	plusw1,btemp+1
  3197  00055C  0EFE               	movlw	-2
  3198  00055E  CFE3 F04B          	movff	plusw1,btemp+2
  3199  000562  0E08               	movlw	8
  3200  000564  244A               	addwf	btemp+1,w,c
  3201  000566  6ED9               	movwf	fsr2l,c
  3202  000568  0E00               	movlw	0
  3203  00056A  204B               	addwfc	btemp+2,w,c
  3204  00056C  6EDA               	movwf	fsr2h,c
  3205  00056E  50DE               	movf	postinc2,w,c
  3206  000570  10DE               	iorwf	postinc2,w,c
  3207  000572  A4D8               	btfss	status,2,c
  3208  000574  D014               	goto	l1442
  3209                           
  3210                           ;pipe.c: 58: pipe->pos_bloqued_read = task_running;
  3211                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3212  000576  0EFD               	movlw	-3
  3213  000578  CFE3 F04A          	movff	plusw1,btemp+1
  3214  00057C  0EFE               	movlw	-2
  3215  00057E  CFE3 F04B          	movff	plusw1,btemp+2
  3216  000582  0E0A               	movlw	10
  3217  000584  244A               	addwf	btemp+1,w,c
  3218  000586  6ED9               	movwf	fsr2l,c
  3219  000588  0E00               	movlw	0
  3220  00058A  204B               	addwfc	btemp+2,w,c
  3221  00058C  6EDA               	movwf	fsr2h,c
  3222  00058E  C037  FFDE         	movff	_task_running,postinc2
  3223  000592  C038  FFDD         	movff	_task_running+1,postdec2
  3224                           
  3225                           ;pipe.c: 59: dispatcher(WAITING_PIPE);
  3226  000596  0E06               	movlw	6
  3227  000598  6EE6               	movwf	postinc1,c
  3228  00059A  EC0A  F000         	call	_dispatcher	;wreg free
  3229  00059E                     l1442:
  3230                           
  3231                           ;pipe.c: 60: }
  3232                           ;pipe.c: 62: dado = pipe->pipe_queue[pipe->pos_read_pipe];
  3233                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3234  00059E  0EFD               	movlw	-3
  3235  0005A0  CFE3 F04A          	movff	plusw1,btemp+1
  3236  0005A4  0EFE               	movlw	-2
  3237  0005A6  CFE3 F04B          	movff	plusw1,btemp+2
  3238  0005AA  0E04               	movlw	4
  3239  0005AC  244A               	addwf	btemp+1,w,c
  3240  0005AE  6ED9               	movwf	fsr2l,c
  3241  0005B0  0E00               	movlw	0
  3242  0005B2  204B               	addwfc	btemp+2,w,c
  3243  0005B4  6EDA               	movwf	fsr2h,c
  3244  0005B6  CFDE F04A          	movff	postinc2,btemp+1
  3245  0005BA  CFDD F04B          	movff	postdec2,btemp+2
  3246                           
  3247                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3248  0005BE  0EFD               	movlw	-3
  3249  0005C0  CFE3 F053          	movff	plusw1,btemp+10
  3250  0005C4  0EFE               	movlw	-2
  3251  0005C6  CFE3 F054          	movff	plusw1,btemp+11
  3252  0005CA  504A               	movf	btemp+1,w,c
  3253  0005CC  2453               	addwf	btemp+10,w,c
  3254  0005CE  6ED9               	movwf	fsr2l,c
  3255  0005D0  504B               	movf	btemp+2,w,c
  3256  0005D2  2054               	addwfc	btemp+11,w,c
  3257  0005D4  6EDA               	movwf	fsr2h,c
  3258  0005D6  50DF               	movf	indf2,w,c
  3259  0005D8  6E54               	movwf	btemp+11,c
  3260                           
  3261                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3262  0005DA  0EFF               	movlw	-1
  3263  0005DC  C054  FFE3         	movff	btemp+11,plusw1
  3264                           
  3265                           ;pipe.c: 63: pipe->pos_read_pipe = (pipe->pos_read_pipe + 1) % 4;
  3266                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3267  0005E0  0EFD               	movlw	-3
  3268  0005E2  CFE3 F04A          	movff	plusw1,btemp+1
  3269  0005E6  0EFE               	movlw	-2
  3270  0005E8  CFE3 F04B          	movff	plusw1,btemp+2
  3271  0005EC  0E04               	movlw	4
  3272  0005EE  244A               	addwf	btemp+1,w,c
  3273  0005F0  6ED9               	movwf	fsr2l,c
  3274  0005F2  0E00               	movlw	0
  3275  0005F4  204B               	addwfc	btemp+2,w,c
  3276  0005F6  6EDA               	movwf	fsr2h,c
  3277  0005F8  CFDE F04A          	movff	postinc2,btemp+1
  3278  0005FC  CFDD F04B          	movff	postdec2,btemp+2
  3279  000600  0E01               	movlw	1
  3280  000602  264A               	addwf	btemp+1,f,c
  3281  000604  0E00               	movlw	0
  3282  000606  224B               	addwfc	btemp+2,f,c
  3283  000608  0E03               	movlw	3
  3284  00060A  164A               	andwf	btemp+1,f,c
  3285  00060C  0E00               	movlw	0
  3286  00060E  164B               	andwf	btemp+2,f,c
  3287                           
  3288                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3289  000610  0EFD               	movlw	-3
  3290  000612  CFE3 F053          	movff	plusw1,btemp+10
  3291  000616  0EFE               	movlw	-2
  3292  000618  CFE3 F054          	movff	plusw1,btemp+11
  3293  00061C  0E04               	movlw	4
  3294  00061E  2453               	addwf	btemp+10,w,c
  3295  000620  6ED9               	movwf	fsr2l,c
  3296  000622  0E00               	movlw	0
  3297  000624  2054               	addwfc	btemp+11,w,c
  3298  000626  6EDA               	movwf	fsr2h,c
  3299  000628  C04A  FFDE         	movff	btemp+1,postinc2
  3300  00062C  C04B  FFDD         	movff	btemp+2,postdec2
  3301                           
  3302                           ;pipe.c: 64: pipe->pipe_itens--;
  3303                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3304  000630  0EFD               	movlw	-3
  3305  000632  CFE3 F04A          	movff	plusw1,btemp+1
  3306  000636  0EFE               	movlw	-2
  3307  000638  CFE3 F04B          	movff	plusw1,btemp+2
  3308  00063C  0E08               	movlw	8
  3309  00063E  244A               	addwf	btemp+1,w,c
  3310  000640  6ED9               	movwf	fsr2l,c
  3311  000642  0E00               	movlw	0
  3312  000644  204B               	addwfc	btemp+2,w,c
  3313  000646  6EDA               	movwf	fsr2h,c
  3314  000648  06DE               	decf	postinc2,f,c
  3315  00064A  0E00               	movlw	0
  3316  00064C  5ADD               	subwfb	postdec2,f,c
  3317                           
  3318                           ;pipe.c: 67: if (pipe->pos_bloqued_write > 0) {
  3319                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3320  00064E  0EFD               	movlw	-3
  3321  000650  CFE3 F04A          	movff	plusw1,btemp+1
  3322  000654  0EFE               	movlw	-2
  3323  000656  CFE3 F04B          	movff	plusw1,btemp+2
  3324  00065A  0E0C               	movlw	12
  3325  00065C  244A               	addwf	btemp+1,w,c
  3326  00065E  6ED9               	movwf	fsr2l,c
  3327  000660  0E00               	movlw	0
  3328  000662  204B               	addwfc	btemp+2,w,c
  3329  000664  6EDA               	movwf	fsr2h,c
  3330  000666  50DE               	movf	postinc2,w,c
  3331  000668  10DE               	iorwf	postinc2,w,c
  3332  00066A  B4D8               	btfsc	status,2,c
  3333  00066C  D032               	goto	l1454
  3334                           
  3335                           ;pipe.c: 68: F_APTOS[pipe->pos_bloqued_write].task_state = READY;
  3336  00066E  0E6E               	movlw	110
  3337  000670  6EE6               	movwf	postinc1,c
  3338  000672  0E00               	movlw	0
  3339  000674  6EE6               	movwf	postinc1,c
  3340                           
  3341                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  3342  000676  0EFB               	movlw	-5
  3343  000678  CFE3 F04A          	movff	plusw1,btemp+1
  3344  00067C  0EFC               	movlw	-4
  3345  00067E  CFE3 F04B          	movff	plusw1,btemp+2
  3346  000682  0E0C               	movlw	12
  3347  000684  244A               	addwf	btemp+1,w,c
  3348  000686  6ED9               	movwf	fsr2l,c
  3349  000688  0E00               	movlw	0
  3350  00068A  204B               	addwfc	btemp+2,w,c
  3351  00068C  6EDA               	movwf	fsr2h,c
  3352  00068E  CFDE F04A          	movff	postinc2,btemp+1
  3353  000692  CFDD F04B          	movff	postdec2,btemp+2
  3354  000696  C04A  FFE6         	movff	btemp+1,postinc1
  3355  00069A  C04B  FFE6         	movff	btemp+2,postinc1
  3356  00069E  EC5D  F006         	call	___wmul	;wreg free
  3357  0006A2  0EF6               	movlw	low (_F_APTOS+8)
  3358  0006A4  2449               	addwf	btemp,w,c
  3359  0006A6  6ED9               	movwf	fsr2l,c
  3360  0006A8  0E00               	movlw	high (_F_APTOS+8)
  3361  0006AA  204A               	addwfc	btemp+1,w,c
  3362  0006AC  6EDA               	movwf	fsr2h,c
  3363  0006AE  0E01               	movlw	1
  3364  0006B0  6EDF               	movwf	indf2,c
  3365                           
  3366                           ;pipe.c: 69: pipe->pos_bloqued_write = 0;
  3367                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3368  0006B2  0EFD               	movlw	-3
  3369  0006B4  CFE3 F04A          	movff	plusw1,btemp+1
  3370  0006B8  0EFE               	movlw	-2
  3371  0006BA  CFE3 F04B          	movff	plusw1,btemp+2
  3372  0006BE  0E0C               	movlw	12
  3373  0006C0  244A               	addwf	btemp+1,w,c
  3374  0006C2  6ED9               	movwf	fsr2l,c
  3375  0006C4  0E00               	movlw	0
  3376  0006C6  204B               	addwfc	btemp+2,w,c
  3377  0006C8  6EDA               	movwf	fsr2h,c
  3378  0006CA  0E00               	movlw	0
  3379  0006CC  6EDE               	movwf	postinc2,c
  3380  0006CE  0E00               	movlw	0
  3381  0006D0  6EDD               	movwf	postdec2,c
  3382  0006D2                     l1454:
  3383                           
  3384                           ;pipe.c: 73: }
  3385                           ;pipe.c: 75: return dado;
  3386                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3387  0006D2  0EFF               	movlw	-1
  3388  0006D4  CFE3 F049          	movff	plusw1,btemp
  3389                           
  3390                           ; _read_pipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  3391  0006D8  52E5               	movf	postdec1,f,c
  3392  0006DA  52E5               	movf	postdec1,f,c
  3393  0006DC  52E5               	movf	postdec1,f,c
  3394  0006DE  0012               	return		;funcret
  3395  0006E0                     __end_of_read_pipe:
  3396                           	opt stack 0
  3397                           tosu	equ	0xFFF
  3398                           tosh	equ	0xFFE
  3399                           tosl	equ	0xFFD
  3400                           stkptr	equ	0xFFC
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon	equ	0xFF2
  3408                           postinc0	equ	0xFEE
  3409                           postdec0	equ	0xFED
  3410                           plusw0	equ	0xFEB
  3411                           fsr0h	equ	0xFEA
  3412                           fsr0l	equ	0xFE9
  3413                           wreg	equ	0xFE8
  3414                           postinc1	equ	0xFE6
  3415                           postdec1	equ	0xFE5
  3416                           plusw1	equ	0xFE3
  3417                           fsr1h	equ	0xFE2
  3418                           fsr1l	equ	0xFE1
  3419                           bsr	equ	0xFE0
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           plusw2	equ	0xFDB
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _task_thre *****************
  3429 ;; Defined at:
  3430 ;;		line 49 in file "tasks.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1  [STACK] void 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3444 ;;      Params:         0       0       0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0
  3447 ;;      Totals:         0       0       0       0       0       0       0
  3448 ;;Total ram usage:        0 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    8
  3451 ;; This function calls:
  3452 ;;		_delay
  3453 ;; This function is called by:
  3454 ;;		_main
  3455 ;; This function uses a reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text17
  3459  00102E                     __ptext17:
  3460                           	opt stack 0
  3461  00102E                     _task_thre:
  3462                           	opt stack 19
  3463                           
  3464                           ;tasks.c: 51: TRISDbits.RD3 = 0;
  3465                           
  3466                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3467                           ;incstack = 0
  3468  00102E  9695               	bcf	3989,3,c	;volatile
  3469                           
  3470                           ;tasks.c: 52: PORTDbits.RD3 = 0;
  3471  001030  9683               	bcf	3971,3,c	;volatile
  3472  001032                     l1512:
  3473                           
  3474                           ;tasks.c: 55: PORTDbits.RD3 = ~PORTDbits.RD3;
  3475  001032  A683               	btfss	3971,3,c	;volatile
  3476  001034  D002               	goto	u67_20
  3477  001036  0E01               	movlw	1
  3478  001038  D001               	goto	u67_26
  3479  00103A                     u67_20:
  3480  00103A  0E00               	movlw	0
  3481  00103C                     u67_26:
  3482  00103C  0AFF               	xorlw	255
  3483  00103E  6E54               	movwf	btemp+11,c
  3484  001040  4654               	rlncf	btemp+11,f,c
  3485  001042  4654               	rlncf	btemp+11,f,c
  3486  001044  4654               	rlncf	btemp+11,f,c
  3487  001046  5083               	movf	3971,w,c	;volatile
  3488  001048  1854               	xorwf	btemp+11,w,c
  3489  00104A  0BF7               	andlw	-9
  3490  00104C  1854               	xorwf	btemp+11,w,c
  3491  00104E  6E83               	movwf	3971,c	;volatile
  3492                           
  3493                           ;tasks.c: 56: delay(100);
  3494  001050  0E64               	movlw	100
  3495  001052  6EE6               	movwf	postinc1,c
  3496  001054  0E00               	movlw	0
  3497  001056  6EE6               	movwf	postinc1,c
  3498  001058  EC7A  F007         	call	_delay	;wreg free
  3499  00105C  D7EA               	goto	l1512
  3500  00105E                     __end_of_task_thre:
  3501                           	opt stack 0
  3502                           tosu	equ	0xFFF
  3503                           tosh	equ	0xFFE
  3504                           tosl	equ	0xFFD
  3505                           stkptr	equ	0xFFC
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           postinc0	equ	0xFEE
  3514                           postdec0	equ	0xFED
  3515                           plusw0	equ	0xFEB
  3516                           fsr0h	equ	0xFEA
  3517                           fsr0l	equ	0xFE9
  3518                           wreg	equ	0xFE8
  3519                           postinc1	equ	0xFE6
  3520                           postdec1	equ	0xFE5
  3521                           plusw1	equ	0xFE3
  3522                           fsr1h	equ	0xFE2
  3523                           fsr1l	equ	0xFE1
  3524                           bsr	equ	0xFE0
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           plusw2	equ	0xFDB
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _task_idle *****************
  3534 ;; Defined at:
  3535 ;;		line 68 in file "kernel.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1  [STACK] void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, btemp+11
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         0       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0
  3552 ;;      Totals:         0       0       0       0       0       0       0
  3553 ;;Total ram usage:        0 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    4
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_setupOS
  3560 ;; This function uses a reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text18
  3564  00105E                     __ptext18:
  3565                           	opt stack 0
  3566  00105E                     _task_idle:
  3567                           	opt stack 23
  3568                           
  3569                           ;kernel.c: 70: TRISDbits.RD4 = 0;
  3570                           
  3571                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3572                           ;incstack = 0
  3573  00105E  9895               	bcf	3989,4,c	;volatile
  3574  001060                     l1142:
  3575                           
  3576                           ;kernel.c: 73: PORTDbits.RD4 = ~PORTDbits.RD4;
  3577  001060  A883               	btfss	3971,4,c	;volatile
  3578  001062  D002               	goto	u26_20
  3579  001064  0E01               	movlw	1
  3580  001066  D001               	goto	u26_26
  3581  001068                     u26_20:
  3582  001068  0E00               	movlw	0
  3583  00106A                     u26_26:
  3584  00106A  0AFF               	xorlw	255
  3585  00106C  6E54               	movwf	btemp+11,c
  3586  00106E  3A54               	swapf	btemp+11,f,c
  3587  001070  5083               	movf	3971,w,c	;volatile
  3588  001072  1854               	xorwf	btemp+11,w,c
  3589  001074  0BEF               	andlw	-17
  3590  001076  1854               	xorwf	btemp+11,w,c
  3591  001078  6E83               	movwf	3971,c	;volatile
  3592                           
  3593                           ;kernel.c: 74: __nop();
  3594  00107A  F000               	nop	
  3595  00107C  D7F1               	goto	l1142
  3596  00107E                     __end_of_task_idle:
  3597                           	opt stack 0
  3598                           tosu	equ	0xFFF
  3599                           tosh	equ	0xFFE
  3600                           tosl	equ	0xFFD
  3601                           stkptr	equ	0xFFC
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           postdec0	equ	0xFED
  3611                           plusw0	equ	0xFEB
  3612                           fsr0h	equ	0xFEA
  3613                           fsr0l	equ	0xFE9
  3614                           wreg	equ	0xFE8
  3615                           postinc1	equ	0xFE6
  3616                           postdec1	equ	0xFE5
  3617                           plusw1	equ	0xFE3
  3618                           fsr1h	equ	0xFE2
  3619                           fsr1l	equ	0xFE1
  3620                           bsr	equ	0xFE0
  3621                           indf2	equ	0xFDF
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           plusw2	equ	0xFDB
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _int_high *****************
  3630 ;; Defined at:
  3631 ;;		line 102 in file "kernel.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  i               2   15[COMRAM] unsigned int 
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         0       0       0       0       0       0       0
  3646 ;;      Locals:         2       0       0       0       0       0       0
  3647 ;;      Temps:         15       0       0       0       0       0       0
  3648 ;;      Totals:        17       0       0       0       0       0       0
  3649 ;;Total ram usage:       17 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    3
  3652 ;; This function calls:
  3653 ;;		___wmul
  3654 ;;		_dispatcher
  3655 ;; This function is called by:
  3656 ;;		Interrupt level 2
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	intcode
  3661  000008                     __pintcode:
  3662                           	opt stack 0
  3663  000008                     _int_high:
  3664                           	opt stack 19
  3665                           
  3666                           ;incstack = 0
  3667  000008  ED33  F004         	call	int_func,f	;refresh shadow registers
  3668                           tosu	equ	0xFFF
  3669                           tosh	equ	0xFFE
  3670                           tosl	equ	0xFFD
  3671                           stkptr	equ	0xFFC
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           intcon	equ	0xFF2
  3679                           postinc0	equ	0xFEE
  3680                           postdec0	equ	0xFED
  3681                           plusw0	equ	0xFEB
  3682                           fsr0h	equ	0xFEA
  3683                           fsr0l	equ	0xFE9
  3684                           wreg	equ	0xFE8
  3685                           postinc1	equ	0xFE6
  3686                           postdec1	equ	0xFE5
  3687                           plusw1	equ	0xFE3
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           bsr	equ	0xFE0
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           plusw2	equ	0xFDB
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699                           	psect	intcode_body
  3700  000866                     __pintcode_body:
  3701                           	opt stack 19
  3702  000866                     int_func:
  3703                           	opt stack 19
  3704  000866  0006               	pop		; remove dummy address from shadow register refresh
  3705  000868  CFE1 F003          	movff	fsr1l,??_int_high+2
  3706  00086C  CFE2 F004          	movff	fsr1h,??_int_high+3
  3707  000870  CFD9 F005          	movff	fsr2l,??_int_high+4
  3708  000874  CFDA F006          	movff	fsr2h,??_int_high+5
  3709  000878  CFF3 F007          	movff	prodl,??_int_high+6
  3710  00087C  CFF4 F008          	movff	prodh,??_int_high+7
  3711  000880  C049  F009         	movff	btemp,??_int_high+8
  3712  000884  C04A  F00A         	movff	btemp+1,??_int_high+9
  3713  000888  C04B  F00B         	movff	btemp+2,??_int_high+10
  3714  00088C  C051  F00C         	movff	btemp+8,??_int_high+11
  3715  000890  C052  F00D         	movff	btemp+9,??_int_high+12
  3716  000894  C053  F00E         	movff	btemp+10,??_int_high+13
  3717  000898  C054  F00F         	movff	btemp+11,??_int_high+14
  3718  00089C  EE15  F064         	lfsr	1,___inthi_sp
  3719                           
  3720                           ;kernel.c: 104: u_int i;
  3721                           ;kernel.c: 106: if (INTCONbits.TMR0IF) {
  3722  0008A0  A4F2               	btfss	intcon,2,c	;volatile
  3723  0008A2  D07C               	goto	i2l100
  3724                           
  3725                           ;kernel.c: 107: INTCONbits.TMR0IF = 0;
  3726  0008A4  94F2               	bcf	intcon,2,c	;volatile
  3727                           
  3728                           ;kernel.c: 108: TMR0L = 252;
  3729  0008A6  0EFC               	movlw	252
  3730  0008A8  6ED6               	movwf	4054,c	;volatile
  3731                           
  3732                           ;kernel.c: 110: for (i = 1; i < tasks_installed; i++) {
  3733  0008AA  0E00               	movlw	0
  3734  0008AC  6E11               	movwf	int_high@i+1,c
  3735  0008AE  0E01               	movlw	1
  3736  0008B0  6E10               	movwf	int_high@i,c
  3737  0008B2  D05F               	goto	i2l95
  3738  0008B4                     
  3739                           ;kernel.c: 111: if (F_APTOS[i].task_state == SLEEPING) {
  3740  0008B4  0E6E               	movlw	110
  3741  0008B6  6EE6               	movwf	postinc1,c
  3742  0008B8  0E00               	movlw	0
  3743  0008BA  6EE6               	movwf	postinc1,c
  3744  0008BC  C010  FFE6         	movff	int_high@i,postinc1
  3745  0008C0  C011  FFE6         	movff	int_high@i+1,postinc1
  3746  0008C4  EC5D  F006         	call	___wmul	;wreg free
  3747  0008C8  0E08               	movlw	8
  3748  0008CA  2649               	addwf	btemp,f,c
  3749  0008CC  0E00               	movlw	0
  3750  0008CE  224A               	addwfc	btemp+1,f,c
  3751  0008D0  0EEE               	movlw	low _F_APTOS
  3752  0008D2  2449               	addwf	btemp,w,c
  3753  0008D4  6ED9               	movwf	fsr2l,c
  3754  0008D6  0E00               	movlw	high _F_APTOS
  3755  0008D8  204A               	addwfc	btemp+1,w,c
  3756  0008DA  6EDA               	movwf	fsr2h,c
  3757  0008DC  0E03               	movlw	3
  3758  0008DE  18DE               	xorwf	postinc2,w,c
  3759  0008E0  A4D8               	btfss	status,2,c
  3760  0008E2  D045               	goto	i2l98
  3761                           
  3762                           ;kernel.c: 112: F_APTOS[i].delay_time--;
  3763  0008E4  0E6E               	movlw	110
  3764  0008E6  6EE6               	movwf	postinc1,c
  3765  0008E8  0E00               	movlw	0
  3766  0008EA  6EE6               	movwf	postinc1,c
  3767  0008EC  C010  FFE6         	movff	int_high@i,postinc1
  3768  0008F0  C011  FFE6         	movff	int_high@i+1,postinc1
  3769  0008F4  EC5D  F006         	call	___wmul	;wreg free
  3770  0008F8  0E06               	movlw	6
  3771  0008FA  2649               	addwf	btemp,f,c
  3772  0008FC  0E00               	movlw	0
  3773  0008FE  224A               	addwfc	btemp+1,f,c
  3774  000900  0EEE               	movlw	low _F_APTOS
  3775  000902  2449               	addwf	btemp,w,c
  3776  000904  6ED9               	movwf	fsr2l,c
  3777  000906  0E00               	movlw	high _F_APTOS
  3778  000908  204A               	addwfc	btemp+1,w,c
  3779  00090A  6EDA               	movwf	fsr2h,c
  3780  00090C  06DE               	decf	postinc2,f,c
  3781  00090E  0E00               	movlw	0
  3782  000910  5ADD               	subwfb	postdec2,f,c
  3783                           
  3784                           ;kernel.c: 113: if (F_APTOS[i].delay_time == 0) {
  3785  000912  0E6E               	movlw	110
  3786  000914  6EE6               	movwf	postinc1,c
  3787  000916  0E00               	movlw	0
  3788  000918  6EE6               	movwf	postinc1,c
  3789  00091A  C010  FFE6         	movff	int_high@i,postinc1
  3790  00091E  C011  FFE6         	movff	int_high@i+1,postinc1
  3791  000922  EC5D  F006         	call	___wmul	;wreg free
  3792  000926  0E06               	movlw	6
  3793  000928  2649               	addwf	btemp,f,c
  3794  00092A  0E00               	movlw	0
  3795  00092C  224A               	addwfc	btemp+1,f,c
  3796  00092E  0EEE               	movlw	low _F_APTOS
  3797  000930  2449               	addwf	btemp,w,c
  3798  000932  6ED9               	movwf	fsr2l,c
  3799  000934  0E00               	movlw	high _F_APTOS
  3800  000936  204A               	addwfc	btemp+1,w,c
  3801  000938  6EDA               	movwf	fsr2h,c
  3802  00093A  50DE               	movf	postinc2,w,c
  3803  00093C  10DE               	iorwf	postinc2,w,c
  3804  00093E  A4D8               	btfss	status,2,c
  3805  000940  D016               	goto	i2l98
  3806                           
  3807                           ;kernel.c: 114: F_APTOS[i].task_state = READY;
  3808  000942  0E6E               	movlw	110
  3809  000944  6EE6               	movwf	postinc1,c
  3810  000946  0E00               	movlw	0
  3811  000948  6EE6               	movwf	postinc1,c
  3812  00094A  C010  FFE6         	movff	int_high@i,postinc1
  3813  00094E  C011  FFE6         	movff	int_high@i+1,postinc1
  3814  000952  EC5D  F006         	call	___wmul	;wreg free
  3815  000956  0E08               	movlw	8
  3816  000958  2649               	addwf	btemp,f,c
  3817  00095A  0E00               	movlw	0
  3818  00095C  224A               	addwfc	btemp+1,f,c
  3819  00095E  0EEE               	movlw	low _F_APTOS
  3820  000960  2449               	addwf	btemp,w,c
  3821  000962  6ED9               	movwf	fsr2l,c
  3822  000964  0E00               	movlw	high _F_APTOS
  3823  000966  204A               	addwfc	btemp+1,w,c
  3824  000968  6EDA               	movwf	fsr2h,c
  3825  00096A  0E01               	movlw	1
  3826  00096C  6EDF               	movwf	indf2,c
  3827  00096E                     i2l98:
  3828  00096E  4A10               	infsnz	int_high@i,f,c
  3829  000970  2A11               	incf	int_high@i+1,f,c
  3830  000972                     i2l95:
  3831  000972  5039               	movf	_tasks_installed,w,c
  3832  000974  5C10               	subwf	int_high@i,w,c
  3833  000976  503A               	movf	_tasks_installed+1,w,c
  3834  000978  5811               	subwfb	int_high@i+1,w,c
  3835  00097A  A0D8               	btfss	status,0,c
  3836  00097C  D79B               	goto	i2l96
  3837                           
  3838                           ;kernel.c: 115: }
  3839                           ;kernel.c: 116: }
  3840                           ;kernel.c: 117: }
  3841                           ;kernel.c: 119: quantum--;
  3842  00097E  0655               	decf	_quantum,f,c
  3843  000980  A0D8               	btfss	status,0,c
  3844  000982  0656               	decf	_quantum+1,f,c
  3845                           
  3846                           ;kernel.c: 120: if (quantum == 0) {
  3847  000984  5055               	movf	_quantum,w,c
  3848  000986  1056               	iorwf	_quantum+1,w,c
  3849  000988  A4D8               	btfss	status,2,c
  3850  00098A  D008               	goto	i2l100
  3851                           
  3852                           ;kernel.c: 121: quantum = 4;
  3853  00098C  0E00               	movlw	0
  3854  00098E  6E56               	movwf	_quantum+1,c
  3855  000990  0E04               	movlw	4
  3856  000992  6E55               	movwf	_quantum,c
  3857                           
  3858                           ;kernel.c: 122: dispatcher(READY);
  3859  000994  0E01               	movlw	1
  3860  000996  6EE6               	movwf	postinc1,c
  3861  000998  EC0A  F000         	call	_dispatcher	;wreg free
  3862  00099C                     i2l100:
  3863  00099C  C00F  F054         	movff	??_int_high+14,btemp+11
  3864  0009A0  C00E  F053         	movff	??_int_high+13,btemp+10
  3865  0009A4  C00D  F052         	movff	??_int_high+12,btemp+9
  3866  0009A8  C00C  F051         	movff	??_int_high+11,btemp+8
  3867  0009AC  C00B  F04B         	movff	??_int_high+10,btemp+2
  3868  0009B0  C00A  F04A         	movff	??_int_high+9,btemp+1
  3869  0009B4  C009  F049         	movff	??_int_high+8,btemp
  3870  0009B8  C008  FFF4         	movff	??_int_high+7,prodh
  3871  0009BC  C007  FFF3         	movff	??_int_high+6,prodl
  3872  0009C0  C006  FFDA         	movff	??_int_high+5,fsr2h
  3873  0009C4  C005  FFD9         	movff	??_int_high+4,fsr2l
  3874  0009C8  C004  FFE2         	movff	??_int_high+3,fsr1h
  3875  0009CC  C003  FFE1         	movff	??_int_high+2,fsr1l
  3876  0009D0  0011               	retfie		f
  3877  0009D2                     __end_of_int_high:
  3878                           	opt stack 0
  3879  0000                     tosu	equ	0xFFF
  3880                           tosh	equ	0xFFE
  3881                           tosl	equ	0xFFD
  3882                           stkptr	equ	0xFFC
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           postinc0	equ	0xFEE
  3891                           postdec0	equ	0xFED
  3892                           plusw0	equ	0xFEB
  3893                           fsr0h	equ	0xFEA
  3894                           fsr0l	equ	0xFE9
  3895                           wreg	equ	0xFE8
  3896                           postinc1	equ	0xFE6
  3897                           postdec1	equ	0xFE5
  3898                           plusw1	equ	0xFE3
  3899                           fsr1h	equ	0xFE2
  3900                           fsr1l	equ	0xFE1
  3901                           bsr	equ	0xFE0
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           plusw2	equ	0xFDB
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           tosu	equ	0xFFF
  3910                           tosh	equ	0xFFE
  3911                           tosl	equ	0xFFD
  3912                           stkptr	equ	0xFFC
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           intcon	equ	0xFF2
  3920                           postinc0	equ	0xFEE
  3921                           postdec0	equ	0xFED
  3922                           plusw0	equ	0xFEB
  3923                           fsr0h	equ	0xFEA
  3924                           fsr0l	equ	0xFE9
  3925                           wreg	equ	0xFE8
  3926                           postinc1	equ	0xFE6
  3927                           postdec1	equ	0xFE5
  3928                           plusw1	equ	0xFE3
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           bsr	equ	0xFE0
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940                           	psect	rparam
  3941  0000                     tosu	equ	0xFFF
  3942                           tosh	equ	0xFFE
  3943                           tosl	equ	0xFFD
  3944                           stkptr	equ	0xFFC
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           intcon	equ	0xFF2
  3952                           postinc0	equ	0xFEE
  3953                           postdec0	equ	0xFED
  3954                           plusw0	equ	0xFEB
  3955                           fsr0h	equ	0xFEA
  3956                           fsr0l	equ	0xFE9
  3957                           wreg	equ	0xFE8
  3958                           postinc1	equ	0xFE6
  3959                           postdec1	equ	0xFE5
  3960                           plusw1	equ	0xFE3
  3961                           fsr1h	equ	0xFE2
  3962                           fsr1l	equ	0xFE1
  3963                           bsr	equ	0xFE0
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           plusw2	equ	0xFDB
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972                           	psect	temp
  3973  000049                     btemp:
  3974                           	opt stack 0
  3975  000049                     	ds	12
  3976  0000                     wtemp0	set	btemp
  3977  0000                     wtemp1	set	btemp+2
  3978  0000                     wtemp2	set	btemp+4
  3979  0000                     wtemp3	set	btemp+6
  3980  0000                     wtemp4	set	btemp+8
  3981  0000                     wtemp5	set	btemp+10
  3982  0000                     wtemp6	set	btemp+1
  3983  0000                     ttemp0	set	btemp
  3984  0000                     ttemp1	set	btemp+3
  3985  0000                     ttemp2	set	btemp+6
  3986  0000                     ttemp3	set	btemp+9
  3987  0000                     ltemp0	set	btemp
  3988  0000                     ltemp1	set	btemp+4
  3989  0000                     ltemp2	set	btemp+8
  3990                           tosu	equ	0xFFF
  3991                           tosh	equ	0xFFE
  3992                           tosl	equ	0xFFD
  3993                           stkptr	equ	0xFFC
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           postdec0	equ	0xFED
  4003                           plusw0	equ	0xFEB
  4004                           fsr0h	equ	0xFEA
  4005                           fsr0l	equ	0xFE9
  4006                           wreg	equ	0xFE8
  4007                           postinc1	equ	0xFE6
  4008                           postdec1	equ	0xFE5
  4009                           plusw1	equ	0xFE3
  4010                           fsr1h	equ	0xFE2
  4011                           fsr1l	equ	0xFE1
  4012                           bsr	equ	0xFE0
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           plusw2	equ	0xFDB
  4017                           fsr2h	equ	0xFDA
  4018                           fsr2l	equ	0xFD9
  4019                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1096
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     38      74
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    read_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    write_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    create_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    S77tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    main@mem	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_SRAMalloc
    _setupOS->_create_task
    _SRAMalloc->__SRAMmerge

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _task_one in BANK0

    None.

Critical Paths under _task_two in BANK0

    None.

Critical Paths under _task_thre in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _task_one in BANK0

    None.

Critical Paths under _task_two in BANK0

    None.

Critical Paths under _task_thre in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _task_one in BANK1

    None.

Critical Paths under _task_two in BANK1

    None.

Critical Paths under _task_thre in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _task_one in BANK1

    None.

Critical Paths under _task_two in BANK1

    None.

Critical Paths under _task_thre in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5795
                                             36 COMRAM     2     2      0
                          _SRAMalloc
                        _create_task
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2465
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     105
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SRAMalloc                                           11     9      2     969
                                             25 COMRAM    11     9      2
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (2) __SRAMmerge                                           8     6      2     478
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             0     0      0    8510
                        _create_pipe
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4316
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             1     1      0    8413
                              _delay
                          _read_pipe
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            0     0      0    4108
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             0     0      0    8510
                        _create_pipe
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4316
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             1     1      0    8413
                              _delay
                          _read_pipe
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            0     0      0    4108
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4108
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4162
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMalloc
     __SRAMmerge
   _create_task
     ___wmul
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _task_one (ROOT)
   _create_pipe
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_two (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_thre (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _task_one (ROOT)
   _create_pipe
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_two (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_thre (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     426      17       69.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     26      4A       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      15        0.0%
DATA                 0      0     4E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Oct 15 17:43:08 2018

                      _s 0027                       l19 0E3E                       l72 0358  
                     u70 0EB4            SRAMalloc@temp 0020                      l210 0A12  
                    l211 0A9C                      l212 0A32                      l215 0A52  
                    l207 09E4                      l233 0BAA                      l209 09EC  
                    l225 0EA8                      l226 0ED6                      l235 0BB6  
                    l238 0BC4                      l239 0C04                      l876 0AC8  
                    l886 0B38                      _BSR 000FE0                      u401 0E8C  
                    u440 0BB2                      _TOS 000FFD            create_task@id 0012  
                    wreg 000FE8           SRAMalloc@pHeap 0023        SRAMInitHeap@pHeap 0014  
      SRAMInitHeap@count 0012                     l1142 1060                     l1422 072C  
                   l1512 1032                     l1504 0FC4                     l1442 059E  
                   l1258 0D68                     l1370 00D0                     l1434 085C  
                   l1454 06D2                     l1390 02EA                     l1496 0F4C  
                   i2l95 0972                     i2l96 08B4                     i2l98 096E  
                   _TOSH 000FFE                     _TOSL 000FFD                     _WREG 000FE8  
                   _TOSU 000FFF                     u2_20 0AF0                     u4_20 0B56  
                   _main 0DD4                     _pipe 003B                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0049  
                   prodh 000FF4                     prodl 000FF3                     start 000C  
        SRAMalloc@nBytes 0022             ___param_bank 000000          SRAMalloc@segLen 001E  
                  ?_main 0001          _tasks_installed 0039                    i2l100 099C  
        __end_of___lwmod 0B6C                    _TMR0L 000FD6                    u26_20 1068  
                  u26_26 106A                    u55_20 0528                    u65_20 0F64  
                  u65_26 0F66                    u66_20 0FD8                    u66_26 0FDA  
                  u67_20 103A                    u67_26 103C               __SRAMmerge 0B6C  
                  _delay 0EF4          create_task@task 0080       __size_of_SRAMalloc 00DE  
                  tablat 000FF5                    ltemp0 0049                    ltemp1 004D  
                  ltemp2 0051          __end_of_setupOS 102E                    plusw0 000FEB  
                  plusw1 000FE3                    plusw2 000FDB                    ttemp0 0049  
                  ttemp1 004C                    ttemp2 004F                    ttemp3 0052  
                  status 000FD8                    wtemp0 0049                    wtemp1 004B  
                  wtemp2 004D                    wtemp3 004F                    wtemp4 0051  
                  wtemp5 0053                    wtemp6 004A          __initialization 0F82  
           __end_of_main 0E40                   ??_main 0025            __activetblptr 000000  
                 _STATUS 000FD8                   _STKPTR 000FFC     __size_of_create_pipe 00A6  
   __size_of_create_task 005A                   ___wmul 0CBA        __end_of_SRAMalloc 0AB0  
                 clear_0 0FA2                   clear_1 0FB4         __end_of_int_high 09D2  
       create_task@prior 0014         __end_of_task_one 0F82             __pdataCOMRAM 0055  
       __end_of_task_two 0FF8                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_setupOS 0018              ?__SRAMmerge 0012  
       __end_of_start_os 1082               __accesstop 0080  __end_of__initialization 0FBA  
          ___rparam_used 000001           __pcstackCOMRAM 0001               ___inthi_sp 0564  
          __end_of_delay 0F3C          __SRAMmerge@uSum 0015            __uDynamicHeap 0314  
     __size_of_read_pipe 018C      __size_of__SRAMmerge 00A8       __size_of_task_idle 0020  
     __size_of_task_thre 0030                  _F_APTOS 00EE               _dispatcher 0014  
              ?_int_high 0001                  __Hparam 0000                  __Lparam 0000  
        __size_of___wmul 0096                  ___lwmod 0AB0                ?_start_os 0001  
                __pcinit 0F82                  __ramtop 0600            ?_SRAMInitHeap 0001  
                __ptext0 0DD4                  __ptext1 107E                  __ptext2 0FF8  
                __ptext3 0E40                  __ptext4 0CBA                  __ptext5 0E9A  
                __ptext6 09D2                  __ptext7 0B6C                  __ptext8 0F3C  
                __ptext9 06E0                _T0CONbits 000FD5        __end_of_read_pipe 06E0  
                _setupOS 0FF8        create_task@task_f 0016                  _quantum 0055  
                main@mem 0025           __pintcode_body 0866     end_of_initialization 0FBA  
      __end_of_task_idle 107E                  int_func 0866        __end_of_task_thre 105E  
             ??_int_high 0001                  postdec0 000FED                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_start_os 0012           ??_SRAMInitHeap 0012  
              _PORTDbits 000F83                _SRAMalloc 09D2                _TRISDbits 000F95  
           ??__SRAMmerge 0014            ??_create_task 0018       __end_of__SRAMmerge 0C14  
         __end_of___wmul 0D50            __pidataCOMRAM 1082               _write_pipe 06E0  
             ?_SRAMalloc 001A      start_initialization 0F82       SRAMalloc@segHeader 001F  
       __SRAMmerge@pSegA 0012         __SRAMmerge@pSegB 0018         __SRAMmerge@uSegA 0016  
       __SRAMmerge@uSegB 0017      __end_of_create_pipe 0CBA      __end_of_create_task 0E9A  
    __size_of_dispatcher 0540              __pbssBIGRAM 00EE              __pbssCOMRAM 0027  
          __pcstackBANK0 0080     __end_of_SRAMInitHeap 0EF4        __size_of_int_high 09CA  
              __pintcode 0008        __size_of_task_one 0046        __size_of_task_two 0038  
      __size_of_start_os 0004              ??_SRAMalloc 001C                 ?_setupOS 0001  
         __size_of_delay 0048     __end_of_rr_scheduler 0DD4                _read_pipe 0554  
            _create_pipe 0C14              _create_task 0E40                _task_idle 105E  
              _task_thre 102E      __size_of_write_pipe 0186                 __Hrparam 0000  
               __Lrparam 0000                int_high@i 0010       __end_of_dispatcher 0554  
       __size_of___lwmod 00BC    __size_of_SRAMInitHeap 005A                 __ptext10 0EF4  
               __ptext11 0014                 __ptext12 0D50                 __ptext13 0AB0  
               __ptext14 0C14                 __ptext15 0FC0                 __ptext16 0554  
               __ptext17 102E                 __ptext18 105E         __size_of_setupOS 0036  
          __size_of_main 006C                 _int_high 0008                 _task_one 0F3C  
               _task_two 0FC0             _task_running 0037                 _start_os 107E  
           _SRAMInitHeap 0E9A    __size_of_rr_scheduler 0084               _INTCONbits 000FF2  
               intlevel1 0000                 intlevel2 0000             _rr_scheduler 0D50  
           ?_create_task 0012       __end_of_write_pipe 0866  
