

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Oct  6 22:13:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  0012BE                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _quantum
    83  0012BE  0004               	dw	4
    84  0000                     _TOS	set	4093
    85  0000                     _TMR0L	set	4054
    86  0000                     _T0CONbits	set	4053
    87  0000                     _PORTDbits	set	3971
    88  0000                     _TRISDbits	set	3989
    89  0000                     _STKPTR	set	4092
    90  0000                     _TOSH	set	4094
    91  0000                     _TOSL	set	4093
    92  0000                     _TOSU	set	4095
    93  0000                     _WREG	set	4072
    94  0000                     _STATUS	set	4056
    95  0000                     _BSR	set	4064
    96  0000                     _INTCONbits	set	4082
    97                           
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101  000FCA                     __pcinit:
   102                           	opt stack 0
   103  000FCA                     start_initialization:
   104                           	opt stack 0
   105  000FCA                     __initialization:
   106                           	opt stack 0
   107                           
   108                           ; Initialize objects allocated to COMRAM (2 bytes)
   109                           ; load TBLPTR registers with __pidataCOMRAM
   110  000FCA  0EBE               	movlw	low __pidataCOMRAM
   111  000FCC  6EF6               	movwf	tblptrl,c
   112  000FCE  0E12               	movlw	high __pidataCOMRAM
   113  000FD0  6EF7               	movwf	tblptrh,c
   114  000FD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   115  000FD4  6EF8               	movwf	tblptru,c
   116  000FD6  0009               	tblrd		*+	;fetch initializer
   117  000FD8  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   118  000FDC  0009               	tblrd		*+	;fetch initializer
   119  000FDE  CFF5 F040          	movff	tablat,__pdataCOMRAM+1
   120                           
   121                           ; Clear objects allocated to BIGRAM (550 bytes)
   122  000FE2  EE02  F06E         	lfsr	0,__pbssBIGRAM
   123  000FE6  EE12 F026          	lfsr	1,550
   124  000FEA                     clear_0:
   125  000FEA  6AEE               	clrf	postinc0,c
   126  000FEC  50E5               	movf	postdec1,w,c
   127  000FEE  50E1               	movf	fsr1l,w,c
   128  000FF0  E1FC               	bnz	clear_0
   129  000FF2  50E2               	movf	fsr1h,w,c
   130  000FF4  E1FA               	bnz	clear_0
   131                           
   132                           ; Clear objects allocated to BANK1 (4 bytes)
   133  000FF6  0101               	movlb	1
   134  000FF8  6B71               	clrf	(__pbssBANK1+3)& (0+255),b
   135  000FFA  6B70               	clrf	(__pbssBANK1+2)& (0+255),b
   136  000FFC  6B6F               	clrf	(__pbssBANK1+1)& (0+255),b
   137  000FFE  6B6E               	clrf	__pbssBANK1& (0+255),b
   138                           
   139                           ; Clear objects allocated to BANK0 (16 bytes)
   140  001000  EE00  F09D         	lfsr	0,__pbssBANK0
   141  001004  0E10               	movlw	16
   142  001006                     clear_1:
   143  001006  6AEE               	clrf	postinc0,c
   144  001008  06E8               	decf	wreg,f,c
   145  00100A  E1FD               	bnz	clear_1
   146                           
   147                           ; Clear objects allocated to COMRAM (24 bytes)
   148  00100C  EE00  F027         	lfsr	0,__pbssCOMRAM
   149  001010  0E18               	movlw	24
   150  001012                     clear_2:
   151  001012  6AEE               	clrf	postinc0,c
   152  001014  06E8               	decf	wreg,f,c
   153  001016  E1FD               	bnz	clear_2
   154  001018                     end_of_initialization:
   155                           	opt stack 0
   156  001018                     __end_of__initialization:
   157                           	opt stack 0
   158  001018  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   159  00101A  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   160  00101C  0100               	movlb	0
   161  00101E  EF54  F007         	goto	_main	;jump to C main() function
   162                           tblptru	equ	0xFF8
   163                           tblptrh	equ	0xFF7
   164                           tblptrl	equ	0xFF6
   165                           tablat	equ	0xFF5
   166                           postinc0	equ	0xFEE
   167                           wreg	equ	0xFE8
   168                           postdec1	equ	0xFE5
   169                           fsr1h	equ	0xFE2
   170                           fsr1l	equ	0xFE1
   171                           
   172                           	psect	bssCOMRAM
   173  000027                     __pbssCOMRAM:
   174                           	opt stack 0
   175  000027                     _msg:
   176                           	opt stack 0
   177  000027                     	ds	24
   178                           tblptru	equ	0xFF8
   179                           tblptrh	equ	0xFF7
   180                           tblptrl	equ	0xFF6
   181                           tablat	equ	0xFF5
   182                           postinc0	equ	0xFEE
   183                           wreg	equ	0xFE8
   184                           postdec1	equ	0xFE5
   185                           fsr1h	equ	0xFE2
   186                           fsr1l	equ	0xFE1
   187                           
   188                           	psect	dataCOMRAM
   189  00003F                     __pdataCOMRAM:
   190                           	opt stack 0
   191  00003F                     _quantum:
   192                           	opt stack 0
   193  00003F                     	ds	2
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1h	equ	0xFE2
   202                           fsr1l	equ	0xFE1
   203                           
   204                           	psect	bssBANK0
   205  00009D                     __pbssBANK0:
   206                           	opt stack 0
   207  00009D                     _s:
   208                           	opt stack 0
   209  00009D                     	ds	16
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           postdec1	equ	0xFE5
   217                           fsr1h	equ	0xFE2
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	bssBANK1
   221  00016E                     __pbssBANK1:
   222                           	opt stack 0
   223  00016E                     _task_running:
   224                           	opt stack 0
   225  00016E                     	ds	2
   226  000170                     _tasks_installed:
   227                           	opt stack 0
   228  000170                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1h	equ	0xFE2
   237                           fsr1l	equ	0xFE1
   238                           
   239                           	psect	bssBIGRAM
   240  00026E                     __pbssBIGRAM:
   241                           	opt stack 0
   242  00026E                     _F_APTOS:
   243                           	opt stack 0
   244  00026E                     	ds	550
   245                           tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           postdec1	equ	0xFE5
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           
   255                           	psect	cstackBANK2
   256  000200                     __pcstackBANK2:
   257                           	opt stack 0
   258  000200                     create_task@task:
   259                           	opt stack 0
   260                           
   261                           ; 110 bytes @ 0x0
   262  000200                     	ds	110
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1h	equ	0xFE2
   271                           fsr1l	equ	0xFE1
   272                           
   273                           	psect	cstackBANK1
   274  000100                     __pcstackBANK1:
   275                           	opt stack 0
   276  000100                     	ds	81
   277  000151                     ?___lwmod:
   278                           	opt stack 0
   279  000151                     ?i1___wmul:
   280                           	opt stack 0
   281  000151                     ___lwmod@dividend:
   282                           	opt stack 0
   283  000151                     i1___wmul@multiplier:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x51
   287  000151                     	ds	2
   288  000153                     ___lwmod@divisor:
   289                           	opt stack 0
   290  000153                     i1___wmul@multiplicand:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x53
   294  000153                     	ds	2
   295  000155                     ?_rr_scheduler:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x55
   299  000155                     	ds	2
   300  000157                     
   301                           ; 1 bytes @ 0x57
   302  000157                     	ds	1
   303  000158                     rr_scheduler@next_task_to_run:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x58
   307  000158                     	ds	2
   308  00015A                     ??_dispatcher:
   309                           
   310                           ; 1 bytes @ 0x5A
   311  00015A                     	ds	2
   312  00015C                     dispatcher@state:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x5C
   316  00015C                     	ds	1
   317  00015D                     _dispatcher$1301:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x5D
   321  00015D                     	ds	2
   322  00015F                     delay@time_ms:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x5F
   326  00015F                     	ds	2
   327  000161                     ??_task_thre:
   328                           
   329                           ; 1 bytes @ 0x61
   330  000161                     	ds	1
   331  000162                     ?___wmul:
   332                           	opt stack 0
   333  000162                     ___wmul@multiplier:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x62
   337  000162                     	ds	2
   338  000164                     ___wmul@multiplicand:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x64
   342  000164                     	ds	2
   343  000166                     ___wmul@product:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x66
   347  000166                     	ds	2
   348  000168                     create_task@id:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x68
   352  000168                     	ds	2
   353  00016A                     create_task@prior:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x6A
   357  00016A                     	ds	2
   358  00016C                     create_task@task_f:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x6C
   362  00016C                     	ds	2
   363  00016E                     tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           postdec1	equ	0xFE5
   370                           fsr1h	equ	0xFE2
   371                           fsr1l	equ	0xFE1
   372                           
   373                           ; 1 bytes @ 0x6E
   374                           
   375                           	psect	cstackBANK0
   376  000080                     __pcstackBANK0:
   377                           	opt stack 0
   378  000080                     	ds	14
   379  00008E                     ??_task_idle:
   380                           
   381                           ; 1 bytes @ 0xE
   382  00008E                     	ds	1
   383  00008F                     sem_init@s:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0xF
   387  00008F                     	ds	2
   388  000091                     sem_init@value:
   389                           	opt stack 0
   390  000091                     sem_wait@s:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x11
   394  000091                     	ds	2
   395  000093                     ??_sem_wait:
   396                           
   397                           ; 1 bytes @ 0x13
   398  000093                     	ds	4
   399  000097                     ??_task_one:
   400                           
   401                           ; 1 bytes @ 0x17
   402  000097                     	ds	3
   403  00009A                     ??_task_two:
   404                           
   405                           ; 1 bytes @ 0x1A
   406  00009A                     	ds	1
   407  00009B                     ___lwmod@counter:
   408                           	opt stack 0
   409  00009B                     i1___wmul@product:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1B
   413  00009B                     	ds	2
   414  00009D                     tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1h	equ	0xFE2
   422                           fsr1l	equ	0xFE1
   423                           
   424                           ; 1 bytes @ 0x1D
   425                           
   426                           	psect	cstackCOMRAM
   427  000001                     __pcstackCOMRAM:
   428                           	opt stack 0
   429  000001                     ?i2___wmul:
   430                           	opt stack 0
   431  000001                     ?i2___lwmod:
   432                           	opt stack 0
   433  000001                     i2___wmul@multiplier:
   434                           	opt stack 0
   435  000001                     i2___lwmod@dividend:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x0
   439  000001                     	ds	2
   440  000003                     i2___wmul@multiplicand:
   441                           	opt stack 0
   442  000003                     i2___lwmod@divisor:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x2
   446  000003                     	ds	2
   447  000005                     i2___lwmod@counter:
   448                           	opt stack 0
   449  000005                     i2___wmul@product:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x4
   453  000005                     	ds	2
   454  000007                     ?i2_rr_scheduler:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x6
   458  000007                     	ds	2
   459  000009                     
   460                           ; 1 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     i2rr_scheduler@next_task_to_run:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x9
   466  00000A                     	ds	2
   467  00000C                     ??i2_dispatcher:
   468                           
   469                           ; 1 bytes @ 0xB
   470  00000C                     	ds	2
   471  00000E                     i2dispatcher@state:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0xD
   475  00000E                     	ds	1
   476  00000F                     i2_dispatcher$1302:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0xE
   480  00000F                     	ds	2
   481  000011                     ??_int_high:
   482                           
   483                           ; 1 bytes @ 0x10
   484  000011                     	ds	20
   485  000025                     int_high@i:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x24
   489  000025                     	ds	2
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1h	equ	0xFE2
   498                           fsr1l	equ	0xFE1
   499                           
   500 ;;
   501 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   502 ;;
   503 ;; *************** function _main *****************
   504 ;; Defined at:
   505 ;;		line 12 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   519 ;;      Params:         0       0       0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0
   522 ;;      Totals:         0       0       0       0       0       0       0
   523 ;;Total ram usage:        0 bytes
   524 ;; Hardware stack levels required when called:   12
   525 ;; This function calls:
   526 ;;		_create_task
   527 ;;		_setupOS
   528 ;;		_start_os
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text0
   535  000EA8                     __ptext0:
   536                           	opt stack 0
   537  000EA8                     _main:
   538                           	opt stack 19
   539                           
   540                           ;main.c: 14: setupOS();
   541                           
   542                           ;incstack = 0
   543  000EA8  ECC3  F008         	call	_setupOS	;wreg free
   544                           
   545                           ;main.c: 17: create_task(2, 3, &task_one);
   546  000EAC  0E00               	movlw	0
   547  000EAE  0101               	movlb	1	; () banked
   548  000EB0  6F69               	movwf	(create_task@id+1)& (0+255),b
   549  000EB2  0E02               	movlw	2
   550  000EB4  6F68               	movwf	create_task@id& (0+255),b
   551  000EB6  0E00               	movlw	0
   552  000EB8  6F6B               	movwf	(create_task@prior+1)& (0+255),b
   553  000EBA  0E03               	movlw	3
   554  000EBC  6F6A               	movwf	create_task@prior& (0+255),b
   555  000EBE  0E22               	movlw	low _task_one
   556  000EC0  6F6C               	movwf	create_task@task_f& (0+255),b
   557  000EC2  0E10               	movlw	high _task_one
   558  000EC4  6F6D               	movwf	(create_task@task_f+1)& (0+255),b
   559  000EC6  ECB6  F007         	call	_create_task	;wreg free
   560                           
   561                           ;main.c: 18: create_task(3, 3, &task_two);
   562  000ECA  0E00               	movlw	0
   563  000ECC  0101               	movlb	1	; () banked
   564  000ECE  6F69               	movwf	(create_task@id+1)& (0+255),b
   565  000ED0  0E03               	movlw	3
   566  000ED2  6F68               	movwf	create_task@id& (0+255),b
   567  000ED4  0E00               	movlw	0
   568  000ED6  6F6B               	movwf	(create_task@prior+1)& (0+255),b
   569  000ED8  0E03               	movlw	3
   570  000EDA  6F6A               	movwf	create_task@prior& (0+255),b
   571  000EDC  0EEC               	movlw	low _task_two
   572  000EDE  6F6C               	movwf	create_task@task_f& (0+255),b
   573  000EE0  0E11               	movlw	high _task_two
   574  000EE2  6F6D               	movwf	(create_task@task_f+1)& (0+255),b
   575  000EE4  ECB6  F007         	call	_create_task	;wreg free
   576                           
   577                           ;main.c: 19: create_task(4, 3, &task_thre);
   578  000EE8  0E00               	movlw	0
   579  000EEA  0101               	movlb	1	; () banked
   580  000EEC  6F69               	movwf	(create_task@id+1)& (0+255),b
   581  000EEE  0E04               	movlw	4
   582  000EF0  6F68               	movwf	create_task@id& (0+255),b
   583  000EF2  0E00               	movlw	0
   584  000EF4  6F6B               	movwf	(create_task@prior+1)& (0+255),b
   585  000EF6  0E03               	movlw	3
   586  000EF8  6F6A               	movwf	create_task@prior& (0+255),b
   587  000EFA  0EBA               	movlw	low _task_thre
   588  000EFC  6F6C               	movwf	create_task@task_f& (0+255),b
   589  000EFE  0E11               	movlw	high _task_thre
   590  000F00  6F6D               	movwf	(create_task@task_f+1)& (0+255),b
   591  000F02  ECB6  F007         	call	_create_task	;wreg free
   592                           
   593                           ;main.c: 22: start_os();
   594  000F06  EC5D  F009         	call	_start_os	;wreg free
   595  000F0A                     l17:
   596  000F0A  D7FF               	goto	l17
   597  000F0C                     __end_of_main:
   598                           	opt stack 0
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1h	equ	0xFE2
   607                           fsr1l	equ	0xFE1
   608                           
   609 ;; *************** function _start_os *****************
   610 ;; Defined at:
   611 ;;		line 119 in file "kernel.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		None
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   625 ;;      Params:         0       0       0       0       0       0       0
   626 ;;      Locals:         0       0       0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0       0       0
   628 ;;      Totals:         0       0       0       0       0       0       0
   629 ;;Total ram usage:        0 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    9
   632 ;; This function calls:
   633 ;;		Nothing
   634 ;; This function is called by:
   635 ;;		_main
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text1
   640  0012BA                     __ptext1:
   641                           	opt stack 0
   642  0012BA                     _start_os:
   643                           	opt stack 21
   644                           
   645                           ;kernel.c: 124: T0CONbits.TMR0ON = 1;
   646                           
   647                           ;incstack = 0
   648  0012BA  8ED5               	bsf	4053,7,c	;volatile
   649  0012BC  0012               	return		;funcret
   650  0012BE                     __end_of_start_os:
   651                           	opt stack 0
   652                           tblptru	equ	0xFF8
   653                           tblptrh	equ	0xFF7
   654                           tblptrl	equ	0xFF6
   655                           tablat	equ	0xFF5
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postdec1	equ	0xFE5
   659                           fsr1h	equ	0xFE2
   660                           fsr1l	equ	0xFE1
   661                           
   662 ;; *************** function _setupOS *****************
   663 ;; Defined at:
   664 ;;		line 73 in file "kernel.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   678 ;;      Params:         0       0       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0
   681 ;;      Totals:         0       0       0       0       0       0       0
   682 ;;Total ram usage:        0 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:   11
   685 ;; This function calls:
   686 ;;		_create_task
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text2
   693  001186                     __ptext2:
   694                           	opt stack 0
   695  001186                     _setupOS:
   696                           	opt stack 19
   697                           
   698                           ;kernel.c: 79: T0CONbits.T0CS = 0;
   699                           
   700                           ;incstack = 0
   701  001186  9AD5               	bcf	4053,5,c	;volatile
   702                           
   703                           ;kernel.c: 80: T0CONbits.PSA = 0;
   704  001188  96D5               	bcf	4053,3,c	;volatile
   705                           
   706                           ;kernel.c: 81: T0CONbits.T0PS = 0b111;
   707  00118A  80D5               	bsf	4053,0,c	;volatile
   708  00118C  82D5               	bsf	4053,1,c	;volatile
   709  00118E  84D5               	bsf	4053,2,c	;volatile
   710                           
   711                           ;kernel.c: 82: INTCONbits.PEIE = 1;
   712  001190  8CF2               	bsf	intcon,6,c	;volatile
   713                           
   714                           ;kernel.c: 83: INTCONbits.TMR0IE = 1;
   715  001192  8AF2               	bsf	intcon,5,c	;volatile
   716                           
   717                           ;kernel.c: 84: TMR0L = 252;
   718  001194  0EFC               	movlw	252
   719  001196  6ED6               	movwf	4054,c	;volatile
   720                           
   721                           ;kernel.c: 87: create_task(1,5, &task_idle);
   722  001198  0E00               	movlw	0
   723  00119A  0101               	movlb	1	; () banked
   724  00119C  6F69               	movwf	(create_task@id+1)& (0+255),b
   725  00119E  0E01               	movlw	1
   726  0011A0  6F68               	movwf	create_task@id& (0+255),b
   727  0011A2  0E00               	movlw	0
   728  0011A4  6F6B               	movwf	(create_task@prior+1)& (0+255),b
   729  0011A6  0E05               	movlw	5
   730  0011A8  6F6A               	movwf	create_task@prior& (0+255),b
   731  0011AA  0E98               	movlw	low _task_idle
   732  0011AC  6F6C               	movwf	create_task@task_f& (0+255),b
   733  0011AE  0E12               	movlw	high _task_idle
   734  0011B0  6F6D               	movwf	(create_task@task_f+1)& (0+255),b
   735  0011B2  ECB6  F007         	call	_create_task	;wreg free
   736                           
   737                           ;kernel.c: 91: (INTCONbits.GIE = 1);
   738  0011B6  8EF2               	bsf	intcon,7,c	;volatile
   739  0011B8  0012               	return		;funcret
   740  0011BA                     __end_of_setupOS:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           intcon	equ	0xFF2
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1h	equ	0xFE2
   751                           fsr1l	equ	0xFE1
   752                           
   753 ;; *************** function _create_task *****************
   754 ;; Defined at:
   755 ;;		line 17 in file "kernel.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  id              2  104[BANK1 ] unsigned int 
   758 ;;  prior           2  106[BANK1 ] unsigned int 
   759 ;;  task_f          2  108[BANK1 ] PTR FTN()void 
   760 ;;		 -> task_idle(1), task_thre(1), task_two(1), task_one(1), 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;  task          110    0[BANK2 ] struct tcb
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   772 ;;      Params:         0       0       6       0       0       0       0
   773 ;;      Locals:         0       0       0     110       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0
   775 ;;      Totals:         0       0       6     110       0       0       0
   776 ;;Total ram usage:      116 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:   10
   779 ;; This function calls:
   780 ;;		___wmul
   781 ;; This function is called by:
   782 ;;		_main
   783 ;;		_setupOS
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text3
   788  000F6C                     __ptext3:
   789                           	opt stack 0
   790  000F6C                     _create_task:
   791                           	opt stack 19
   792                           
   793                           ;kernel.c: 19: tcb_t task;
   794                           ;kernel.c: 21: task.task_id = id;
   795                           
   796                           ;incstack = 0
   797  000F6C  C168  F200         	movff	create_task@id,create_task@task
   798  000F70  C169  F201         	movff	create_task@id+1,create_task@task+1
   799                           
   800                           ;kernel.c: 22: task.task_prior = prior;
   801  000F74  C16A  F202         	movff	create_task@prior,create_task@task+2
   802  000F78  C16B  F203         	movff	create_task@prior+1,create_task@task+3
   803                           
   804                           ;kernel.c: 23: task.task_f = task_f;
   805  000F7C  C16C  F204         	movff	create_task@task_f,create_task@task+4
   806  000F80  C16D  F205         	movff	create_task@task_f+1,create_task@task+5
   807                           
   808                           ;kernel.c: 24: task.task_stack.stack_size = 0;
   809  000F84  0E00               	movlw	0
   810  000F86  0102               	movlb	2	; () banked
   811  000F88  6F6A               	movwf	(create_task@task+106)& (0+255),b
   812  000F8A  0E00               	movlw	0
   813  000F8C  6F69               	movwf	(create_task@task+105)& (0+255),b
   814                           
   815                           ; BSR set to: 2
   816                           ;kernel.c: 25: task.task_state = READY;
   817  000F8E  0E01               	movlw	1
   818  000F90  6F08               	movwf	(create_task@task+8)& (0+255),b
   819                           
   820                           ; BSR set to: 2
   821                           ;kernel.c: 27: F_APTOS[tasks_installed] = task;
   822  000F92  EE22  F000         	lfsr	2,create_task@task
   823  000F96  C170  F162         	movff	_tasks_installed,___wmul@multiplier
   824  000F9A  C171  F163         	movff	_tasks_installed+1,___wmul@multiplier+1
   825  000F9E  0E00               	movlw	0
   826  000FA0  0101               	movlb	1	; () banked
   827  000FA2  6F65               	movwf	(___wmul@multiplicand+1)& (0+255),b
   828  000FA4  0E6E               	movlw	110
   829  000FA6  6F64               	movwf	___wmul@multiplicand& (0+255),b
   830  000FA8  EC25  F009         	call	___wmul	;wreg free
   831  000FAC  0E6E               	movlw	low _F_APTOS
   832  000FAE  0101               	movlb	1	; () banked
   833  000FB0  2562               	addwf	?___wmul& (0+255),w,b
   834  000FB2  6EE1               	movwf	fsr1l,c
   835  000FB4  0E02               	movlw	high _F_APTOS
   836  000FB6  2163               	addwfc	(?___wmul+1)& (0+255),w,b
   837  000FB8  6EE2               	movwf	fsr1h,c
   838  000FBA  0E6D               	movlw	109
   839  000FBC                     u1551:
   840  000FBC  CFDB FFE3          	movff	plusw2,plusw1
   841  000FC0  06E8               	decf	wreg,f,c
   842  000FC2  E2FC               	bc	u1551
   843                           
   844                           ; BSR set to: 1
   845                           ;kernel.c: 28: tasks_installed++;
   846  000FC4  4B70               	infsnz	_tasks_installed& (0+255),f,b
   847  000FC6  2B71               	incf	(_tasks_installed+1)& (0+255),f,b
   848                           
   849                           ; BSR set to: 1
   850  000FC8  0012               	return		;funcret
   851  000FCA                     __end_of_create_task:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           intcon	equ	0xFF2
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           postdec1	equ	0xFE5
   861                           plusw1	equ	0xFE3
   862                           fsr1h	equ	0xFE2
   863                           fsr1l	equ	0xFE1
   864                           plusw2	equ	0xFDB
   865                           
   866 ;; *************** function ___wmul *****************
   867 ;; Defined at:
   868 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  multiplier      2   98[BANK1 ] unsigned int 
   871 ;;  multiplicand    2  100[BANK1 ] unsigned int 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  product         2  102[BANK1 ] unsigned int 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  2   98[BANK1 ] unsigned int 
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, prodl, prodh
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   883 ;;      Params:         0       0       4       0       0       0       0
   884 ;;      Locals:         0       0       2       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0       0       0
   886 ;;      Totals:         0       0       6       0       0       0       0
   887 ;;Total ram usage:        6 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    9
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_create_task
   894 ;;		_get_id
   895 ;;		_prior_scheduler
   896 ;;		_sem_post
   897 ;;		_write_pipe
   898 ;;		_read_pipe
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text4
   903  00124A                     __ptext4:
   904                           	opt stack 0
   905  00124A                     ___wmul:
   906                           	opt stack 19
   907                           
   908                           ; BSR set to: 1
   909                           ;incstack = 0
   910  00124A  0101               	movlb	1	; () banked
   911  00124C  5162               	movf	___wmul@multiplier& (0+255),w,b
   912  00124E  0364               	mulwf	___wmul@multiplicand& (0+255),b
   913  001250  CFF3 F166          	movff	prodl,___wmul@product
   914  001254  CFF4 F167          	movff	prodh,___wmul@product+1
   915  001258  5162               	movf	___wmul@multiplier& (0+255),w,b
   916  00125A  0365               	mulwf	(___wmul@multiplicand+1)& (0+255),b
   917  00125C  50F3               	movf	prodl,w,c
   918  00125E  2767               	addwf	(___wmul@product+1)& (0+255),f,b
   919  001260  5163               	movf	(___wmul@multiplier+1)& (0+255),w,b
   920  001262  0364               	mulwf	___wmul@multiplicand& (0+255),b
   921  001264  50F3               	movf	prodl,w,c
   922  001266  2767               	addwf	(___wmul@product+1)& (0+255),f,b
   923                           
   924                           ; BSR set to: 1
   925  001268  C166  F162         	movff	___wmul@product,?___wmul
   926  00126C  C167  F163         	movff	___wmul@product+1,?___wmul+1
   927  001270  0012               	return	
   928  001272                     __end_of___wmul:
   929                           	opt stack 0
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           prodh	equ	0xFF4
   935                           prodl	equ	0xFF3
   936                           intcon	equ	0xFF2
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           plusw1	equ	0xFE3
   941                           fsr1h	equ	0xFE2
   942                           fsr1l	equ	0xFE1
   943                           plusw2	equ	0xFDB
   944                           
   945 ;; *************** function _task_one *****************
   946 ;; Defined at:
   947 ;;		line 15 in file "tasks.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   961 ;;      Params:         0       0       0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0
   963 ;;      Temps:          0       1       0       0       0       0       0
   964 ;;      Totals:         0       1       0       0       0       0       0
   965 ;;Total ram usage:        1 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    8
   968 ;; This function calls:
   969 ;;		_delay
   970 ;;		_sem_init
   971 ;;		_sem_wait
   972 ;; This function is called by:
   973 ;;		_main
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text5
   978  001022                     __ptext5:
   979                           	opt stack 0
   980  001022                     _task_one:
   981                           	opt stack 19
   982                           
   983                           ;tasks.c: 17: TRISDbits.RD0 = 0;
   984                           
   985                           ; BSR set to: 1
   986                           ;incstack = 0
   987  001022  9095               	bcf	3989,0,c	;volatile
   988                           
   989                           ;tasks.c: 18: PORTDbits.RD0 = 0;
   990  001024  9083               	bcf	3971,0,c	;volatile
   991                           
   992                           ;tasks.c: 20: sem_init(&s, 1);
   993  001026  0E9D               	movlw	low _s
   994  001028  0100               	movlb	0	; () banked
   995  00102A  6F8F               	movwf	sem_init@s& (0+255),b
   996  00102C  0E00               	movlw	high _s
   997  00102E  6F90               	movwf	(sem_init@s+1)& (0+255),b
   998  001030  0E00               	movlw	0
   999  001032  6F92               	movwf	(sem_init@value+1)& (0+255),b
  1000  001034  0E01               	movlw	1
  1001  001036  6F91               	movwf	sem_init@value& (0+255),b
  1002  001038  EC83  F008         	call	_sem_init	;wreg free
  1003  00103C                     
  1004                           ;tasks.c: 23: sem_wait(&s);
  1005  00103C  0E9D               	movlw	low _s
  1006  00103E  0100               	movlb	0	; () banked
  1007  001040  6F91               	movwf	sem_wait@s& (0+255),b
  1008  001042  0E00               	movlw	high _s
  1009  001044  6F92               	movwf	(sem_wait@s+1)& (0+255),b
  1010  001046  ECC8  F006         	call	_sem_wait	;wreg free
  1011                           
  1012                           ;tasks.c: 24: PORTDbits.RD0 = ~PORTDbits.RD0;
  1013  00104A  A083               	btfss	3971,0,c	;volatile
  1014  00104C  D002               	goto	u143_20
  1015  00104E  0E01               	movlw	1
  1016  001050  D001               	goto	u143_26
  1017  001052                     u143_20:
  1018  001052  0E00               	movlw	0
  1019  001054                     u143_26:
  1020  001054  0AFF               	xorlw	255
  1021  001056  0100               	movlb	0	; () banked
  1022  001058  6F97               	movwf	??_task_one& (0+255),b
  1023  00105A  5083               	movf	3971,w,c	;volatile
  1024  00105C  1997               	xorwf	??_task_one& (0+255),w,b
  1025  00105E  0BFE               	andlw	-2
  1026  001060  1997               	xorwf	??_task_one& (0+255),w,b
  1027  001062  6E83               	movwf	3971,c	;volatile
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;tasks.c: 26: delay(100);
  1031  001064  0E00               	movlw	0
  1032  001066  0101               	movlb	1	; () banked
  1033  001068  6F60               	movwf	(delay@time_ms+1)& (0+255),b
  1034  00106A  0E64               	movlw	100
  1035  00106C  6F5F               	movwf	delay@time_ms& (0+255),b
  1036  00106E  ECA3  F008         	call	_delay	;wreg free
  1037  001072  D7E4               	goto	l117
  1038  001074                     __end_of_task_one:
  1039                           	opt stack 0
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           prodh	equ	0xFF4
  1045                           prodl	equ	0xFF3
  1046                           intcon	equ	0xFF2
  1047                           postinc0	equ	0xFEE
  1048                           wreg	equ	0xFE8
  1049                           postdec1	equ	0xFE5
  1050                           plusw1	equ	0xFE3
  1051                           fsr1h	equ	0xFE2
  1052                           fsr1l	equ	0xFE1
  1053                           plusw2	equ	0xFDB
  1054                           
  1055 ;; *************** function _sem_wait *****************
  1056 ;; Defined at:
  1057 ;;		line 17 in file "semaphore.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  s               2   17[BANK0 ] PTR struct sem
  1060 ;;		 -> s(16), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1072 ;;      Params:         0       2       0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0       0       0
  1074 ;;      Temps:          0       4       0       0       0       0       0
  1075 ;;      Totals:         0       6       0       0       0       0       0
  1076 ;;Total ram usage:        6 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    7
  1079 ;; This function calls:
  1080 ;;		___lwmod
  1081 ;;		_dispatcher
  1082 ;; This function is called by:
  1083 ;;		_task_one
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text6
  1088  000D90                     __ptext6:
  1089                           	opt stack 0
  1090  000D90                     _sem_wait:
  1091                           	opt stack 19
  1092                           
  1093                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  1094                           
  1095                           ;incstack = 0
  1096  000D90  9EF2               	bcf	intcon,7,c	;volatile
  1097                           
  1098                           ;semaphore.c: 22: s->contador--;
  1099  000D92  C091  FFD9         	movff	sem_wait@s,fsr2l
  1100  000D96  C092  FFDA         	movff	sem_wait@s+1,fsr2h
  1101  000D9A  06DE               	decf	postinc2,f,c
  1102  000D9C  0E00               	movlw	0
  1103  000D9E  5ADD               	subwfb	postdec2,f,c
  1104                           
  1105                           ;semaphore.c: 23: if (s->contador < 0) {
  1106  000DA0  C091  FFD9         	movff	sem_wait@s,fsr2l
  1107  000DA4  C092  FFDA         	movff	sem_wait@s+1,fsr2h
  1108  000DA8  0E01               	movlw	1
  1109  000DAA  AEDB               	btfss	plusw2,7,c
  1110  000DAC  D048               	goto	i1l171
  1111                           
  1112                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  1113  000DAE  0100               	movlb	0	; () banked
  1114  000DB0  EE20 F00C          	lfsr	2,12
  1115  000DB4  5191               	movf	sem_wait@s& (0+255),w,b
  1116  000DB6  26D9               	addwf	fsr2l,f,c
  1117  000DB8  5192               	movf	(sem_wait@s+1)& (0+255),w,b
  1118  000DBA  22DA               	addwfc	fsr2h,f,c
  1119  000DBC  CFDE F093          	movff	postinc2,??_sem_wait
  1120  000DC0  CFDD F094          	movff	postdec2,??_sem_wait+1
  1121  000DC4  90D8               	bcf	status,0,c
  1122  000DC6  3793               	rlcf	??_sem_wait& (0+255),f,b
  1123  000DC8  3794               	rlcf	(??_sem_wait+1)& (0+255),f,b
  1124  000DCA  C091  F095         	movff	sem_wait@s,??_sem_wait+2
  1125  000DCE  C092  F096         	movff	sem_wait@s+1,??_sem_wait+3
  1126  000DD2  5193               	movf	??_sem_wait& (0+255),w,b
  1127  000DD4  2795               	addwf	(??_sem_wait+2)& (0+255),f,b
  1128  000DD6  5194               	movf	(??_sem_wait+1)& (0+255),w,b
  1129  000DD8  2396               	addwfc	(??_sem_wait+3)& (0+255),f,b
  1130  000DDA  0E02               	movlw	2
  1131  000DDC  2595               	addwf	(??_sem_wait+2)& (0+255),w,b
  1132  000DDE  6ED9               	movwf	fsr2l,c
  1133  000DE0  0E00               	movlw	0
  1134  000DE2  2196               	addwfc	(??_sem_wait+3)& (0+255),w,b
  1135  000DE4  6EDA               	movwf	fsr2h,c
  1136  000DE6  C16E  FFDE         	movff	_task_running,postinc2
  1137  000DEA  C16F  FFDD         	movff	_task_running+1,postdec2
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 5;
  1141  000DEE  EE20 F00C          	lfsr	2,12
  1142  000DF2  5191               	movf	sem_wait@s& (0+255),w,b
  1143  000DF4  26D9               	addwf	fsr2l,f,c
  1144  000DF6  5192               	movf	(sem_wait@s+1)& (0+255),w,b
  1145  000DF8  22DA               	addwfc	fsr2h,f,c
  1146  000DFA  CFDE F093          	movff	postinc2,??_sem_wait
  1147  000DFE  CFDD F094          	movff	postdec2,??_sem_wait+1
  1148  000E02  0E01               	movlw	1
  1149  000E04  2593               	addwf	??_sem_wait& (0+255),w,b
  1150  000E06  0101               	movlb	1	; () banked
  1151  000E08  6F51               	movwf	___lwmod@dividend& (0+255),b
  1152  000E0A  0E00               	movlw	0
  1153  000E0C  0100               	movlb	0	; () banked
  1154  000E0E  2194               	addwfc	(??_sem_wait+1)& (0+255),w,b
  1155  000E10  0101               	movlb	1	; () banked
  1156  000E12  6F52               	movwf	(___lwmod@dividend+1)& (0+255),b
  1157  000E14  0E00               	movlw	0
  1158  000E16  6F54               	movwf	(___lwmod@divisor+1)& (0+255),b
  1159  000E18  0E05               	movlw	5
  1160  000E1A  6F53               	movwf	___lwmod@divisor& (0+255),b
  1161  000E1C  EC3A  F008         	call	___lwmod	;wreg free
  1162  000E20  0100               	movlb	0	; () banked
  1163  000E22  EE20 F00C          	lfsr	2,12
  1164  000E26  5191               	movf	sem_wait@s& (0+255),w,b
  1165  000E28  26D9               	addwf	fsr2l,f,c
  1166  000E2A  5192               	movf	(sem_wait@s+1)& (0+255),w,b
  1167  000E2C  22DA               	addwfc	fsr2h,f,c
  1168  000E2E  0101               	movlb	1	; () banked
  1169  000E30  C151  FFDE         	movff	?___lwmod,postinc2
  1170  000E34  C152  FFDD         	movff	?___lwmod+1,postdec2
  1171                           
  1172                           ; BSR set to: 1
  1173                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  1174  000E38  0E05               	movlw	5
  1175  000E3A  EC09  F000         	call	_dispatcher
  1176  000E3E                     i1l171:
  1177                           
  1178                           ;semaphore.c: 27: }
  1179                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  1180  000E3E  8EF2               	bsf	intcon,7,c	;volatile
  1181  000E40  0012               	return		;funcret
  1182  000E42                     __end_of_sem_wait:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           intcon	equ	0xFF2
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           plusw1	equ	0xFE3
  1195                           fsr1h	equ	0xFE2
  1196                           fsr1l	equ	0xFE1
  1197                           postinc2	equ	0xFDE
  1198                           postdec2	equ	0xFDD
  1199                           plusw2	equ	0xFDB
  1200                           fsr2h	equ	0xFDA
  1201                           fsr2l	equ	0xFD9
  1202                           status	equ	0xFD8
  1203                           
  1204 ;; *************** function _sem_init *****************
  1205 ;; Defined at:
  1206 ;;		line 6 in file "semaphore.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  s               2   15[BANK0 ] PTR struct sem
  1209 ;;		 -> s(16), 
  1210 ;;  value           2   17[BANK0 ] int 
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1222 ;;      Params:         0       4       0       0       0       0       0
  1223 ;;      Locals:         0       0       0       0       0       0       0
  1224 ;;      Temps:          0       0       0       0       0       0       0
  1225 ;;      Totals:         0       4       0       0       0       0       0
  1226 ;;Total ram usage:        4 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    4
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_task_one
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text7
  1237  001106                     __ptext7:
  1238                           	opt stack 0
  1239  001106                     _sem_init:
  1240                           	opt stack 22
  1241                           
  1242                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1243                           
  1244                           ;incstack = 0
  1245  001106  9EF2               	bcf	intcon,7,c	;volatile
  1246                           
  1247                           ;semaphore.c: 10: s->contador = value;
  1248  001108  C08F  FFD9         	movff	sem_init@s,fsr2l
  1249  00110C  C090  FFDA         	movff	sem_init@s+1,fsr2h
  1250  001110  C091  FFDE         	movff	sem_init@value,postinc2
  1251  001114  C092  FFDD         	movff	sem_init@value+1,postdec2
  1252                           
  1253                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1254  001118  0100               	movlb	0	; () banked
  1255  00111A  EE20 F00C          	lfsr	2,12
  1256  00111E  518F               	movf	sem_init@s& (0+255),w,b
  1257  001120  26D9               	addwf	fsr2l,f,c
  1258  001122  5190               	movf	(sem_init@s+1)& (0+255),w,b
  1259  001124  22DA               	addwfc	fsr2h,f,c
  1260  001126  0E00               	movlw	0
  1261  001128  6EDE               	movwf	postinc2,c
  1262  00112A  0E00               	movlw	0
  1263  00112C  6EDD               	movwf	postdec2,c
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1267  00112E  EE20 F00E          	lfsr	2,14
  1268  001132  518F               	movf	sem_init@s& (0+255),w,b
  1269  001134  26D9               	addwf	fsr2l,f,c
  1270  001136  5190               	movf	(sem_init@s+1)& (0+255),w,b
  1271  001138  22DA               	addwfc	fsr2h,f,c
  1272  00113A  0E00               	movlw	0
  1273  00113C  6EDE               	movwf	postinc2,c
  1274  00113E  0E00               	movlw	0
  1275  001140  6EDD               	movwf	postdec2,c
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1279  001142  8EF2               	bsf	intcon,7,c	;volatile
  1280                           
  1281                           ; BSR set to: 0
  1282  001144  0012               	return		;funcret
  1283  001146                     __end_of_sem_init:
  1284                           	opt stack 0
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           prodh	equ	0xFF4
  1290                           prodl	equ	0xFF3
  1291                           intcon	equ	0xFF2
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postdec1	equ	0xFE5
  1295                           plusw1	equ	0xFE3
  1296                           fsr1h	equ	0xFE2
  1297                           fsr1l	equ	0xFE1
  1298                           postinc2	equ	0xFDE
  1299                           postdec2	equ	0xFDD
  1300                           plusw2	equ	0xFDB
  1301                           fsr2h	equ	0xFDA
  1302                           fsr2l	equ	0xFD9
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function _delay *****************
  1306 ;; Defined at:
  1307 ;;		line 52 in file "kernel.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  time_ms         2   95[BANK1 ] unsigned int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1321 ;;      Params:         0       0       2       0       0       0       0
  1322 ;;      Locals:         0       0       0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0       0       0
  1324 ;;      Totals:         0       0       2       0       0       0       0
  1325 ;;Total ram usage:        2 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    7
  1328 ;; This function calls:
  1329 ;;		_dispatcher
  1330 ;;		i1___wmul
  1331 ;; This function is called by:
  1332 ;;		_task_one
  1333 ;;		_task_two
  1334 ;;		_task_thre
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text8
  1339  001146                     __ptext8:
  1340                           	opt stack 0
  1341  001146                     _delay:
  1342                           	opt stack 19
  1343                           
  1344                           ;kernel.c: 54: (INTCONbits.GIE = 0);
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;incstack = 0
  1348  001146  9EF2               	bcf	intcon,7,c	;volatile
  1349                           
  1350                           ;kernel.c: 56: F_APTOS[task_running].delay_time = time_ms;
  1351  001148  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1352  00114C  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1353  001150  0E00               	movlw	0
  1354  001152  0101               	movlb	1	; () banked
  1355  001154  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1356  001156  0E6E               	movlw	110
  1357  001158  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1358  00115A  EC0E  F009         	call	i1___wmul	;wreg free
  1359  00115E  0E06               	movlw	6
  1360  001160  0101               	movlb	1	; () banked
  1361  001162  2751               	addwf	?i1___wmul& (0+255),f,b
  1362  001164  0E00               	movlw	0
  1363  001166  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1364  001168  0E6E               	movlw	low _F_APTOS
  1365  00116A  2551               	addwf	?i1___wmul& (0+255),w,b
  1366  00116C  6ED9               	movwf	fsr2l,c
  1367  00116E  0E02               	movlw	high _F_APTOS
  1368  001170  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1369  001172  6EDA               	movwf	fsr2h,c
  1370  001174  C15F  FFDE         	movff	delay@time_ms,postinc2
  1371  001178  C160  FFDD         	movff	delay@time_ms+1,postdec2
  1372                           
  1373                           ;kernel.c: 57: dispatcher(SLEEPING);
  1374  00117C  0E03               	movlw	3
  1375  00117E  EC09  F000         	call	_dispatcher
  1376                           
  1377                           ;kernel.c: 59: (INTCONbits.GIE = 1);
  1378  001182  8EF2               	bsf	intcon,7,c	;volatile
  1379  001184  0012               	return		;funcret
  1380  001186                     __end_of_delay:
  1381                           	opt stack 0
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           prodh	equ	0xFF4
  1387                           prodl	equ	0xFF3
  1388                           intcon	equ	0xFF2
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           plusw1	equ	0xFE3
  1393                           fsr1h	equ	0xFE2
  1394                           fsr1l	equ	0xFE1
  1395                           postinc2	equ	0xFDE
  1396                           postdec2	equ	0xFDD
  1397                           plusw2	equ	0xFDB
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _dispatcher *****************
  1403 ;; Defined at:
  1404 ;;		line 31 in file "kernel.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  state           1    wreg     enum E3007
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  state           1   92[BANK1 ] enum E3007
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1418 ;;      Params:         0       0       0       0       0       0       0
  1419 ;;      Locals:         0       0       3       0       0       0       0
  1420 ;;      Temps:          0       0       2       0       0       0       0
  1421 ;;      Totals:         0       0       5       0       0       0       0
  1422 ;;Total ram usage:        5 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    6
  1425 ;; This function calls:
  1426 ;;		_rr_scheduler
  1427 ;;		i1___wmul
  1428 ;; This function is called by:
  1429 ;;		_delay
  1430 ;;		_sem_wait
  1431 ;;		_sem_post
  1432 ;;		_write_pipe
  1433 ;;		_read_pipe
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text9
  1438  000012                     __ptext9:
  1439                           	opt stack 0
  1440  000012                     _dispatcher:
  1441                           	opt stack 19
  1442                           
  1443                           ;incstack = 0
  1444                           ;dispatcher@state stored from wreg
  1445  000012  0101               	movlb	1	; () banked
  1446  000014  6F5C               	movwf	dispatcher@state& (0+255),b
  1447                           
  1448                           ;kernel.c: 33: (INTCONbits.GIE = 0);
  1449  000016  9EF2               	bcf	intcon,7,c	;volatile
  1450                           
  1451                           ;kernel.c: 36: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  1452  000018  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1453  00001C  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1454  000020  0E00               	movlw	0
  1455  000022  0101               	movlb	1	; () banked
  1456  000024  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1457  000026  0E6E               	movlw	110
  1458  000028  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1459  00002A  EC0E  F009         	call	i1___wmul	;wreg free
  1460  00002E  0E08               	movlw	8
  1461  000030  0101               	movlb	1	; () banked
  1462  000032  2751               	addwf	?i1___wmul& (0+255),f,b
  1463  000034  0E00               	movlw	0
  1464  000036  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1465  000038  0E6E               	movlw	low _F_APTOS
  1466  00003A  2551               	addwf	?i1___wmul& (0+255),w,b
  1467  00003C  6ED9               	movwf	fsr2l,c
  1468  00003E  0E02               	movlw	high _F_APTOS
  1469  000040  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1470  000042  6EDA               	movwf	fsr2h,c
  1471  000044  C15C  FFDF         	movff	dispatcher@state,indf2
  1472  000048  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1473  00004C  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1474  000050  0E00               	movlw	0
  1475  000052  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1476  000054  0E6E               	movlw	110
  1477  000056  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1478  000058  EC0E  F009         	call	i1___wmul	;wreg free
  1479  00005C  0E6B               	movlw	107
  1480  00005E  0101               	movlb	1	; () banked
  1481  000060  2751               	addwf	?i1___wmul& (0+255),f,b
  1482  000062  0E00               	movlw	0
  1483  000064  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1484  000066  0E6E               	movlw	low _F_APTOS
  1485  000068  2551               	addwf	?i1___wmul& (0+255),w,b
  1486  00006A  6ED9               	movwf	fsr2l,c
  1487  00006C  0E02               	movlw	high _F_APTOS
  1488  00006E  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1489  000070  6EDA               	movwf	fsr2h,c
  1490  000072  CFE0 FFDF          	movff	bsr,indf2	;volatile
  1491  000076  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1492  00007A  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1493  00007E  0E00               	movlw	0
  1494  000080  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1495  000082  0E6E               	movlw	110
  1496  000084  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1497  000086  EC0E  F009         	call	i1___wmul	;wreg free
  1498  00008A  0E6C               	movlw	108
  1499  00008C  0101               	movlb	1	; () banked
  1500  00008E  2751               	addwf	?i1___wmul& (0+255),f,b
  1501  000090  0E00               	movlw	0
  1502  000092  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1503  000094  0E6E               	movlw	low _F_APTOS
  1504  000096  2551               	addwf	?i1___wmul& (0+255),w,b
  1505  000098  6ED9               	movwf	fsr2l,c
  1506  00009A  0E02               	movlw	high _F_APTOS
  1507  00009C  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1508  00009E  6EDA               	movwf	fsr2h,c
  1509  0000A0  CFD8 FFDF          	movff	status,indf2	;volatile
  1510  0000A4  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1511  0000A8  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1512  0000AC  0E00               	movlw	0
  1513  0000AE  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1514  0000B0  0E6E               	movlw	110
  1515  0000B2  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1516  0000B4  EC0E  F009         	call	i1___wmul	;wreg free
  1517  0000B8  0E6D               	movlw	109
  1518  0000BA  0101               	movlb	1	; () banked
  1519  0000BC  2751               	addwf	?i1___wmul& (0+255),f,b
  1520  0000BE  0E00               	movlw	0
  1521  0000C0  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1522  0000C2  0E6E               	movlw	low _F_APTOS
  1523  0000C4  2551               	addwf	?i1___wmul& (0+255),w,b
  1524  0000C6  6ED9               	movwf	fsr2l,c
  1525  0000C8  0E02               	movlw	high _F_APTOS
  1526  0000CA  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1527  0000CC  6EDA               	movwf	fsr2h,c
  1528  0000CE  CFE8 FFDF          	movff	wreg,indf2	;volatile
  1529  0000D2  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1530  0000D6  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1531  0000DA  0E00               	movlw	0
  1532  0000DC  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1533  0000DE  0E6E               	movlw	110
  1534  0000E0  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1535  0000E2  EC0E  F009         	call	i1___wmul	;wreg free
  1536  0000E6  0E69               	movlw	105
  1537  0000E8  0101               	movlb	1	; () banked
  1538  0000EA  2751               	addwf	?i1___wmul& (0+255),f,b
  1539  0000EC  0E00               	movlw	0
  1540  0000EE  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1541  0000F0  0E6E               	movlw	low _F_APTOS
  1542  0000F2  2551               	addwf	?i1___wmul& (0+255),w,b
  1543  0000F4  6ED9               	movwf	fsr2l,c
  1544  0000F6  0E02               	movlw	high _F_APTOS
  1545  0000F8  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1546  0000FA  6EDA               	movwf	fsr2h,c
  1547  0000FC  0E00               	movlw	0
  1548  0000FE  6EDE               	movwf	postinc2,c
  1549  000100  0E00               	movlw	0
  1550  000102  6EDD               	movwf	postdec2,c
  1551  000104                     i1l64:
  1552  000104  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1553  000108  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1554  00010C  0E00               	movlw	0
  1555  00010E  0101               	movlb	1	; () banked
  1556  000110  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1557  000112  0E6E               	movlw	110
  1558  000114  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1559  000116  EC0E  F009         	call	i1___wmul	;wreg free
  1560  00011A  0E69               	movlw	105
  1561  00011C  0101               	movlb	1	; () banked
  1562  00011E  2751               	addwf	?i1___wmul& (0+255),f,b
  1563  000120  0E00               	movlw	0
  1564  000122  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1565  000124  0E6E               	movlw	low _F_APTOS
  1566  000126  2551               	addwf	?i1___wmul& (0+255),w,b
  1567  000128  6ED9               	movwf	fsr2l,c
  1568  00012A  0E02               	movlw	high _F_APTOS
  1569  00012C  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1570  00012E  6EDA               	movwf	fsr2h,c
  1571  000130  CFDE F15D          	movff	postinc2,_dispatcher$1301
  1572  000134  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  1573  000138  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1574  00013C  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1575  000140  0E00               	movlw	0
  1576  000142  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1577  000144  0E6E               	movlw	110
  1578  000146  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1579  000148  EC0E  F009         	call	i1___wmul	;wreg free
  1580  00014C  0E09               	movlw	9
  1581  00014E  0101               	movlb	1	; () banked
  1582  000150  2751               	addwf	?i1___wmul& (0+255),f,b
  1583  000152  0E00               	movlw	0
  1584  000154  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1585  000156  0E6E               	movlw	low _F_APTOS
  1586  000158  6F5A               	movwf	??_dispatcher& (0+255),b
  1587  00015A  0E02               	movlw	high _F_APTOS
  1588  00015C  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  1589  00015E  5151               	movf	?i1___wmul& (0+255),w,b
  1590  000160  275A               	addwf	??_dispatcher& (0+255),f,b
  1591  000162  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1592  000164  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1593  000166  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  1594  00016A  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  1595  00016E  0E00               	movlw	0
  1596  000170  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1597  000172  0E03               	movlw	3
  1598  000174  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1599  000176  EC0E  F009         	call	i1___wmul	;wreg free
  1600  00017A  0101               	movlb	1	; () banked
  1601  00017C  5151               	movf	?i1___wmul& (0+255),w,b
  1602  00017E  255A               	addwf	??_dispatcher& (0+255),w,b
  1603  000180  6ED9               	movwf	fsr2l,c
  1604  000182  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1605  000184  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  1606  000186  6EDA               	movwf	fsr2h,c
  1607  000188  CFFF FFDF          	movff	tosu,indf2	;volatile
  1608  00018C  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1609  000190  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1610  000194  0E00               	movlw	0
  1611  000196  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1612  000198  0E6E               	movlw	110
  1613  00019A  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1614  00019C  EC0E  F009         	call	i1___wmul	;wreg free
  1615  0001A0  0E69               	movlw	105
  1616  0001A2  0101               	movlb	1	; () banked
  1617  0001A4  2751               	addwf	?i1___wmul& (0+255),f,b
  1618  0001A6  0E00               	movlw	0
  1619  0001A8  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1620  0001AA  0E6E               	movlw	low _F_APTOS
  1621  0001AC  2551               	addwf	?i1___wmul& (0+255),w,b
  1622  0001AE  6ED9               	movwf	fsr2l,c
  1623  0001B0  0E02               	movlw	high _F_APTOS
  1624  0001B2  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1625  0001B4  6EDA               	movwf	fsr2h,c
  1626  0001B6  CFDE F15D          	movff	postinc2,_dispatcher$1301
  1627  0001BA  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  1628  0001BE  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1629  0001C2  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1630  0001C6  0E00               	movlw	0
  1631  0001C8  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1632  0001CA  0E6E               	movlw	110
  1633  0001CC  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1634  0001CE  EC0E  F009         	call	i1___wmul	;wreg free
  1635  0001D2  0E09               	movlw	9
  1636  0001D4  0101               	movlb	1	; () banked
  1637  0001D6  2751               	addwf	?i1___wmul& (0+255),f,b
  1638  0001D8  0E00               	movlw	0
  1639  0001DA  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1640  0001DC  0E6E               	movlw	low _F_APTOS
  1641  0001DE  6F5A               	movwf	??_dispatcher& (0+255),b
  1642  0001E0  0E02               	movlw	high _F_APTOS
  1643  0001E2  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  1644  0001E4  5151               	movf	?i1___wmul& (0+255),w,b
  1645  0001E6  275A               	addwf	??_dispatcher& (0+255),f,b
  1646  0001E8  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1647  0001EA  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1648  0001EC  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  1649  0001F0  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  1650  0001F4  0E00               	movlw	0
  1651  0001F6  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1652  0001F8  0E03               	movlw	3
  1653  0001FA  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1654  0001FC  EC0E  F009         	call	i1___wmul	;wreg free
  1655  000200  0101               	movlb	1	; () banked
  1656  000202  5151               	movf	?i1___wmul& (0+255),w,b
  1657  000204  275A               	addwf	??_dispatcher& (0+255),f,b
  1658  000206  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1659  000208  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1660  00020A  0E01               	movlw	1
  1661  00020C  255A               	addwf	??_dispatcher& (0+255),w,b
  1662  00020E  6ED9               	movwf	fsr2l,c
  1663  000210  0E00               	movlw	0
  1664  000212  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  1665  000214  6EDA               	movwf	fsr2h,c
  1666  000216  CFFD FFDF          	movff	tosl,indf2	;volatile
  1667  00021A  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1668  00021E  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1669  000222  0E00               	movlw	0
  1670  000224  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1671  000226  0E6E               	movlw	110
  1672  000228  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1673  00022A  EC0E  F009         	call	i1___wmul	;wreg free
  1674  00022E  0E69               	movlw	105
  1675  000230  0101               	movlb	1	; () banked
  1676  000232  2751               	addwf	?i1___wmul& (0+255),f,b
  1677  000234  0E00               	movlw	0
  1678  000236  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1679  000238  0E6E               	movlw	low _F_APTOS
  1680  00023A  2551               	addwf	?i1___wmul& (0+255),w,b
  1681  00023C  6ED9               	movwf	fsr2l,c
  1682  00023E  0E02               	movlw	high _F_APTOS
  1683  000240  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1684  000242  6EDA               	movwf	fsr2h,c
  1685  000244  CFDE F15D          	movff	postinc2,_dispatcher$1301
  1686  000248  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  1687  00024C  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1688  000250  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1689  000254  0E00               	movlw	0
  1690  000256  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1691  000258  0E6E               	movlw	110
  1692  00025A  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1693  00025C  EC0E  F009         	call	i1___wmul	;wreg free
  1694  000260  0E09               	movlw	9
  1695  000262  0101               	movlb	1	; () banked
  1696  000264  2751               	addwf	?i1___wmul& (0+255),f,b
  1697  000266  0E00               	movlw	0
  1698  000268  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1699  00026A  0E6E               	movlw	low _F_APTOS
  1700  00026C  6F5A               	movwf	??_dispatcher& (0+255),b
  1701  00026E  0E02               	movlw	high _F_APTOS
  1702  000270  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  1703  000272  5151               	movf	?i1___wmul& (0+255),w,b
  1704  000274  275A               	addwf	??_dispatcher& (0+255),f,b
  1705  000276  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1706  000278  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1707  00027A  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  1708  00027E  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  1709  000282  0E00               	movlw	0
  1710  000284  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1711  000286  0E03               	movlw	3
  1712  000288  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1713  00028A  EC0E  F009         	call	i1___wmul	;wreg free
  1714  00028E  0101               	movlb	1	; () banked
  1715  000290  5151               	movf	?i1___wmul& (0+255),w,b
  1716  000292  275A               	addwf	??_dispatcher& (0+255),f,b
  1717  000294  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1718  000296  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1719  000298  0E02               	movlw	2
  1720  00029A  255A               	addwf	??_dispatcher& (0+255),w,b
  1721  00029C  6ED9               	movwf	fsr2l,c
  1722  00029E  0E00               	movlw	0
  1723  0002A0  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  1724  0002A2  6EDA               	movwf	fsr2h,c
  1725  0002A4  CFFE FFDF          	movff	tosh,indf2	;volatile
  1726  0002A8  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1727  0002AC  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1728  0002B0  0E00               	movlw	0
  1729  0002B2  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1730  0002B4  0E6E               	movlw	110
  1731  0002B6  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1732  0002B8  EC0E  F009         	call	i1___wmul	;wreg free
  1733  0002BC  0E69               	movlw	105
  1734  0002BE  0101               	movlb	1	; () banked
  1735  0002C0  2751               	addwf	?i1___wmul& (0+255),f,b
  1736  0002C2  0E00               	movlw	0
  1737  0002C4  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1738  0002C6  0E6E               	movlw	low _F_APTOS
  1739  0002C8  2551               	addwf	?i1___wmul& (0+255),w,b
  1740  0002CA  6ED9               	movwf	fsr2l,c
  1741  0002CC  0E02               	movlw	high _F_APTOS
  1742  0002CE  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1743  0002D0  6EDA               	movwf	fsr2h,c
  1744  0002D2  2ADE               	incf	postinc2,f,c
  1745  0002D4  0E00               	movlw	0
  1746  0002D6  22DD               	addwfc	postdec2,f,c
  1747  0002D8  0006               	pop		;# 
  1748  0002DA  50FC               	movf	stkptr,w,c	;volatile
  1749  0002DC  A4D8               	btfss	status,2,c
  1750  0002DE  D712               	goto	i1l64
  1751                           
  1752                           ;kernel.c: 39: task_running = rr_scheduler();
  1753  0002E0  EC21  F007         	call	_rr_scheduler	;wreg free
  1754  0002E4  C155  F16E         	movff	?_rr_scheduler,_task_running
  1755  0002E8  C156  F16F         	movff	?_rr_scheduler+1,_task_running+1
  1756                           
  1757                           ;kernel.c: 42: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  1758  0002EC  0E00               	movlw	0
  1759  0002EE  6EFC               	movwf	stkptr,c	;volatile
  1760  0002F0  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1761  0002F4  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1762  0002F8  0E00               	movlw	0
  1763  0002FA  0101               	movlb	1	; () banked
  1764  0002FC  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1765  0002FE  0E6E               	movlw	110
  1766  000300  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1767  000302  EC0E  F009         	call	i1___wmul	;wreg free
  1768  000306  0E69               	movlw	105
  1769  000308  0101               	movlb	1	; () banked
  1770  00030A  2751               	addwf	?i1___wmul& (0+255),f,b
  1771  00030C  0E00               	movlw	0
  1772  00030E  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1773  000310  0E6E               	movlw	low _F_APTOS
  1774  000312  2551               	addwf	?i1___wmul& (0+255),w,b
  1775  000314  6ED9               	movwf	fsr2l,c
  1776  000316  0E02               	movlw	high _F_APTOS
  1777  000318  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1778  00031A  6EDA               	movwf	fsr2h,c
  1779  00031C  50DE               	movf	postinc2,w,c
  1780  00031E  10DE               	iorwf	postinc2,w,c
  1781  000320  A4D8               	btfss	status,2,c
  1782  000322  D021               	goto	i1l66
  1783                           
  1784                           ; BSR set to: 1
  1785  000324  0005               	push		;# 
  1786  000326  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1787  00032A  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1788  00032E  0E00               	movlw	0
  1789  000330  0101               	movlb	1	; () banked
  1790  000332  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1791  000334  0E6E               	movlw	110
  1792  000336  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1793  000338  EC0E  F009         	call	i1___wmul	;wreg free
  1794  00033C  0E04               	movlw	4
  1795  00033E  0101               	movlb	1	; () banked
  1796  000340  2751               	addwf	?i1___wmul& (0+255),f,b
  1797  000342  0E00               	movlw	0
  1798  000344  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1799  000346  0E6E               	movlw	low _F_APTOS
  1800  000348  2551               	addwf	?i1___wmul& (0+255),w,b
  1801  00034A  6ED9               	movwf	fsr2l,c
  1802  00034C  0E02               	movlw	high _F_APTOS
  1803  00034E  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1804  000350  6EDA               	movwf	fsr2h,c
  1805  000352  CFDE F15A          	movff	postinc2,??_dispatcher
  1806  000356  CFDD F15B          	movff	postdec2,??_dispatcher+1
  1807  00035A  C15A  FFFD         	movff	??_dispatcher,tosl	;volatile
  1808  00035E  C15B  FFFE         	movff	??_dispatcher+1,tosh	;volatile
  1809  000362  6AFF               	clrf	tosu,c	;volatile
  1810  000364  D14A               	goto	i1u141_20
  1811  000366                     i1l66:
  1812                           
  1813                           ; BSR set to: 1
  1814                           
  1815                           ; BSR set to: 1
  1816  000366  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1817  00036A  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1818  00036E  0E00               	movlw	0
  1819  000370  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1820  000372  0E6E               	movlw	110
  1821  000374  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1822  000376  EC0E  F009         	call	i1___wmul	;wreg free
  1823  00037A  0E6B               	movlw	107
  1824  00037C  0101               	movlb	1	; () banked
  1825  00037E  2751               	addwf	?i1___wmul& (0+255),f,b
  1826  000380  0E00               	movlw	0
  1827  000382  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1828  000384  0E6E               	movlw	low _F_APTOS
  1829  000386  2551               	addwf	?i1___wmul& (0+255),w,b
  1830  000388  6ED9               	movwf	fsr2l,c
  1831  00038A  0E02               	movlw	high _F_APTOS
  1832  00038C  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1833  00038E  6EDA               	movwf	fsr2h,c
  1834  000390  50DF               	movf	indf2,w,c
  1835  000392  6EE0               	movwf	bsr,c	;volatile
  1836  000394  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1837  000398  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1838  00039C  0E00               	movlw	0
  1839  00039E  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1840  0003A0  0E6E               	movlw	110
  1841  0003A2  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1842  0003A4  EC0E  F009         	call	i1___wmul	;wreg free
  1843  0003A8  0E6C               	movlw	108
  1844  0003AA  0101               	movlb	1	; () banked
  1845  0003AC  2751               	addwf	?i1___wmul& (0+255),f,b
  1846  0003AE  0E00               	movlw	0
  1847  0003B0  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1848  0003B2  0E6E               	movlw	low _F_APTOS
  1849  0003B4  2551               	addwf	?i1___wmul& (0+255),w,b
  1850  0003B6  6ED9               	movwf	fsr2l,c
  1851  0003B8  0E02               	movlw	high _F_APTOS
  1852  0003BA  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1853  0003BC  6EDA               	movwf	fsr2h,c
  1854  0003BE  50DF               	movf	indf2,w,c
  1855  0003C0  6ED8               	movwf	status,c	;volatile
  1856  0003C2  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1857  0003C6  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1858  0003CA  0E00               	movlw	0
  1859  0003CC  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1860  0003CE  0E6E               	movlw	110
  1861  0003D0  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1862  0003D2  EC0E  F009         	call	i1___wmul	;wreg free
  1863  0003D6  0E6D               	movlw	109
  1864  0003D8  0101               	movlb	1	; () banked
  1865  0003DA  2751               	addwf	?i1___wmul& (0+255),f,b
  1866  0003DC  0E00               	movlw	0
  1867  0003DE  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1868  0003E0  0E6E               	movlw	low _F_APTOS
  1869  0003E2  2551               	addwf	?i1___wmul& (0+255),w,b
  1870  0003E4  6ED9               	movwf	fsr2l,c
  1871  0003E6  0E02               	movlw	high _F_APTOS
  1872  0003E8  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1873  0003EA  6EDA               	movwf	fsr2h,c
  1874  0003EC  50DF               	movf	indf2,w,c
  1875  0003EE  6F5A               	movwf	??_dispatcher& (0+255),b
  1876  0003F0  515A               	movf	??_dispatcher& (0+255),w,b
  1877  0003F2                     i1l68:
  1878                           
  1879                           ; BSR set to: 1
  1880  0003F2  0005               	push		;# 
  1881  0003F4  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1882  0003F8  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1883  0003FC  0E00               	movlw	0
  1884  0003FE  0101               	movlb	1	; () banked
  1885  000400  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1886  000402  0E6E               	movlw	110
  1887  000404  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1888  000406  EC0E  F009         	call	i1___wmul	;wreg free
  1889  00040A  0E69               	movlw	105
  1890  00040C  0101               	movlb	1	; () banked
  1891  00040E  2751               	addwf	?i1___wmul& (0+255),f,b
  1892  000410  0E00               	movlw	0
  1893  000412  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1894  000414  0E6E               	movlw	low _F_APTOS
  1895  000416  2551               	addwf	?i1___wmul& (0+255),w,b
  1896  000418  6ED9               	movwf	fsr2l,c
  1897  00041A  0E02               	movlw	high _F_APTOS
  1898  00041C  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1899  00041E  6EDA               	movwf	fsr2h,c
  1900  000420  06DE               	decf	postinc2,f,c
  1901  000422  0E00               	movlw	0
  1902  000424  5ADD               	subwfb	postdec2,f,c
  1903  000426  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1904  00042A  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1905  00042E  0E00               	movlw	0
  1906  000430  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1907  000432  0E6E               	movlw	110
  1908  000434  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1909  000436  EC0E  F009         	call	i1___wmul	;wreg free
  1910  00043A  0E69               	movlw	105
  1911  00043C  0101               	movlb	1	; () banked
  1912  00043E  2751               	addwf	?i1___wmul& (0+255),f,b
  1913  000440  0E00               	movlw	0
  1914  000442  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1915  000444  0E6E               	movlw	low _F_APTOS
  1916  000446  2551               	addwf	?i1___wmul& (0+255),w,b
  1917  000448  6ED9               	movwf	fsr2l,c
  1918  00044A  0E02               	movlw	high _F_APTOS
  1919  00044C  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1920  00044E  6EDA               	movwf	fsr2h,c
  1921  000450  CFDE F15D          	movff	postinc2,_dispatcher$1301
  1922  000454  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  1923  000458  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1924  00045C  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1925  000460  0E00               	movlw	0
  1926  000462  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1927  000464  0E6E               	movlw	110
  1928  000466  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1929  000468  EC0E  F009         	call	i1___wmul	;wreg free
  1930  00046C  0E09               	movlw	9
  1931  00046E  0101               	movlb	1	; () banked
  1932  000470  2751               	addwf	?i1___wmul& (0+255),f,b
  1933  000472  0E00               	movlw	0
  1934  000474  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1935  000476  0E6E               	movlw	low _F_APTOS
  1936  000478  6F5A               	movwf	??_dispatcher& (0+255),b
  1937  00047A  0E02               	movlw	high _F_APTOS
  1938  00047C  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  1939  00047E  5151               	movf	?i1___wmul& (0+255),w,b
  1940  000480  275A               	addwf	??_dispatcher& (0+255),f,b
  1941  000482  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1942  000484  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1943  000486  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  1944  00048A  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  1945  00048E  0E00               	movlw	0
  1946  000490  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1947  000492  0E03               	movlw	3
  1948  000494  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1949  000496  EC0E  F009         	call	i1___wmul	;wreg free
  1950  00049A  0101               	movlb	1	; () banked
  1951  00049C  5151               	movf	?i1___wmul& (0+255),w,b
  1952  00049E  255A               	addwf	??_dispatcher& (0+255),w,b
  1953  0004A0  6ED9               	movwf	fsr2l,c
  1954  0004A2  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1955  0004A4  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  1956  0004A6  6EDA               	movwf	fsr2h,c
  1957  0004A8  50DF               	movf	indf2,w,c
  1958  0004AA  6EFF               	movwf	tosu,c	;volatile
  1959  0004AC  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1960  0004B0  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1961  0004B4  0E00               	movlw	0
  1962  0004B6  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1963  0004B8  0E6E               	movlw	110
  1964  0004BA  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1965  0004BC  EC0E  F009         	call	i1___wmul	;wreg free
  1966  0004C0  0E69               	movlw	105
  1967  0004C2  0101               	movlb	1	; () banked
  1968  0004C4  2751               	addwf	?i1___wmul& (0+255),f,b
  1969  0004C6  0E00               	movlw	0
  1970  0004C8  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1971  0004CA  0E6E               	movlw	low _F_APTOS
  1972  0004CC  2551               	addwf	?i1___wmul& (0+255),w,b
  1973  0004CE  6ED9               	movwf	fsr2l,c
  1974  0004D0  0E02               	movlw	high _F_APTOS
  1975  0004D2  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  1976  0004D4  6EDA               	movwf	fsr2h,c
  1977  0004D6  CFDE F15D          	movff	postinc2,_dispatcher$1301
  1978  0004DA  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  1979  0004DE  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  1980  0004E2  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  1981  0004E6  0E00               	movlw	0
  1982  0004E8  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  1983  0004EA  0E6E               	movlw	110
  1984  0004EC  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  1985  0004EE  EC0E  F009         	call	i1___wmul	;wreg free
  1986  0004F2  0E09               	movlw	9
  1987  0004F4  0101               	movlb	1	; () banked
  1988  0004F6  2751               	addwf	?i1___wmul& (0+255),f,b
  1989  0004F8  0E00               	movlw	0
  1990  0004FA  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  1991  0004FC  0E6E               	movlw	low _F_APTOS
  1992  0004FE  6F5A               	movwf	??_dispatcher& (0+255),b
  1993  000500  0E02               	movlw	high _F_APTOS
  1994  000502  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  1995  000504  5151               	movf	?i1___wmul& (0+255),w,b
  1996  000506  275A               	addwf	??_dispatcher& (0+255),f,b
  1997  000508  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  1998  00050A  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  1999  00050C  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  2000  000510  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  2001  000514  0E00               	movlw	0
  2002  000516  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2003  000518  0E03               	movlw	3
  2004  00051A  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2005  00051C  EC0E  F009         	call	i1___wmul	;wreg free
  2006  000520  0101               	movlb	1	; () banked
  2007  000522  5151               	movf	?i1___wmul& (0+255),w,b
  2008  000524  275A               	addwf	??_dispatcher& (0+255),f,b
  2009  000526  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  2010  000528  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  2011  00052A  0E01               	movlw	1
  2012  00052C  255A               	addwf	??_dispatcher& (0+255),w,b
  2013  00052E  6ED9               	movwf	fsr2l,c
  2014  000530  0E00               	movlw	0
  2015  000532  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  2016  000534  6EDA               	movwf	fsr2h,c
  2017  000536  50DF               	movf	indf2,w,c
  2018  000538  6EFD               	movwf	tosl,c	;volatile
  2019  00053A  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  2020  00053E  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  2021  000542  0E00               	movlw	0
  2022  000544  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2023  000546  0E6E               	movlw	110
  2024  000548  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2025  00054A  EC0E  F009         	call	i1___wmul	;wreg free
  2026  00054E  0E69               	movlw	105
  2027  000550  0101               	movlb	1	; () banked
  2028  000552  2751               	addwf	?i1___wmul& (0+255),f,b
  2029  000554  0E00               	movlw	0
  2030  000556  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  2031  000558  0E6E               	movlw	low _F_APTOS
  2032  00055A  2551               	addwf	?i1___wmul& (0+255),w,b
  2033  00055C  6ED9               	movwf	fsr2l,c
  2034  00055E  0E02               	movlw	high _F_APTOS
  2035  000560  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  2036  000562  6EDA               	movwf	fsr2h,c
  2037  000564  CFDE F15D          	movff	postinc2,_dispatcher$1301
  2038  000568  CFDD F15E          	movff	postdec2,_dispatcher$1301+1
  2039  00056C  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  2040  000570  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  2041  000574  0E00               	movlw	0
  2042  000576  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2043  000578  0E6E               	movlw	110
  2044  00057A  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2045  00057C  EC0E  F009         	call	i1___wmul	;wreg free
  2046  000580  0E09               	movlw	9
  2047  000582  0101               	movlb	1	; () banked
  2048  000584  2751               	addwf	?i1___wmul& (0+255),f,b
  2049  000586  0E00               	movlw	0
  2050  000588  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  2051  00058A  0E6E               	movlw	low _F_APTOS
  2052  00058C  6F5A               	movwf	??_dispatcher& (0+255),b
  2053  00058E  0E02               	movlw	high _F_APTOS
  2054  000590  6F5B               	movwf	(??_dispatcher+1)& (0+255),b
  2055  000592  5151               	movf	?i1___wmul& (0+255),w,b
  2056  000594  275A               	addwf	??_dispatcher& (0+255),f,b
  2057  000596  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  2058  000598  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  2059  00059A  C15D  F151         	movff	_dispatcher$1301,i1___wmul@multiplier
  2060  00059E  C15E  F152         	movff	_dispatcher$1301+1,i1___wmul@multiplier+1
  2061  0005A2  0E00               	movlw	0
  2062  0005A4  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2063  0005A6  0E03               	movlw	3
  2064  0005A8  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2065  0005AA  EC0E  F009         	call	i1___wmul	;wreg free
  2066  0005AE  0101               	movlb	1	; () banked
  2067  0005B0  5151               	movf	?i1___wmul& (0+255),w,b
  2068  0005B2  275A               	addwf	??_dispatcher& (0+255),f,b
  2069  0005B4  5152               	movf	(?i1___wmul+1)& (0+255),w,b
  2070  0005B6  235B               	addwfc	(??_dispatcher+1)& (0+255),f,b
  2071  0005B8  0E02               	movlw	2
  2072  0005BA  255A               	addwf	??_dispatcher& (0+255),w,b
  2073  0005BC  6ED9               	movwf	fsr2l,c
  2074  0005BE  0E00               	movlw	0
  2075  0005C0  215B               	addwfc	(??_dispatcher+1)& (0+255),w,b
  2076  0005C2  6EDA               	movwf	fsr2h,c
  2077  0005C4  50DF               	movf	indf2,w,c
  2078  0005C6  6EFE               	movwf	tosh,c	;volatile
  2079  0005C8  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  2080  0005CC  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  2081  0005D0  0E00               	movlw	0
  2082  0005D2  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2083  0005D4  0E6E               	movlw	110
  2084  0005D6  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2085  0005D8  EC0E  F009         	call	i1___wmul	;wreg free
  2086  0005DC  0E69               	movlw	105
  2087  0005DE  0101               	movlb	1	; () banked
  2088  0005E0  2751               	addwf	?i1___wmul& (0+255),f,b
  2089  0005E2  0E00               	movlw	0
  2090  0005E4  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  2091  0005E6  0E6E               	movlw	low _F_APTOS
  2092  0005E8  2551               	addwf	?i1___wmul& (0+255),w,b
  2093  0005EA  6ED9               	movwf	fsr2l,c
  2094  0005EC  0E02               	movlw	high _F_APTOS
  2095  0005EE  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  2096  0005F0  6EDA               	movwf	fsr2h,c
  2097  0005F2  50DE               	movf	postinc2,w,c
  2098  0005F4  10DE               	iorwf	postinc2,w,c
  2099  0005F6  A4D8               	btfss	status,2,c
  2100  0005F8  D6FC               	goto	i1l68
  2101  0005FA                     i1u141_20:
  2102                           
  2103                           ; BSR set to: 1
  2104                           
  2105                           ; BSR set to: 1
  2106                           
  2107                           ; BSR set to: 1
  2108  0005FA  C16E  F151         	movff	_task_running,i1___wmul@multiplier
  2109  0005FE  C16F  F152         	movff	_task_running+1,i1___wmul@multiplier+1
  2110  000602  0E00               	movlw	0
  2111  000604  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2112  000606  0E6E               	movlw	110
  2113  000608  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2114  00060A  EC0E  F009         	call	i1___wmul	;wreg free
  2115  00060E  0E08               	movlw	8
  2116  000610  0101               	movlb	1	; () banked
  2117  000612  2751               	addwf	?i1___wmul& (0+255),f,b
  2118  000614  0E00               	movlw	0
  2119  000616  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  2120  000618  0E6E               	movlw	low _F_APTOS
  2121  00061A  2551               	addwf	?i1___wmul& (0+255),w,b
  2122  00061C  6ED9               	movwf	fsr2l,c
  2123  00061E  0E02               	movlw	high _F_APTOS
  2124  000620  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  2125  000622  6EDA               	movwf	fsr2h,c
  2126  000624  0E02               	movlw	2
  2127  000626  6EDF               	movwf	indf2,c
  2128                           
  2129                           ; BSR set to: 1
  2130  000628  8EF2               	bsf	intcon,7,c	;volatile
  2131                           
  2132                           ; BSR set to: 1
  2133                           ;kernel.c: 44: (INTCONbits.GIE = 1);
  2134  00062A  8EF2               	bsf	intcon,7,c	;volatile
  2135                           
  2136                           ; BSR set to: 1
  2137  00062C  0012               	return		;funcret
  2138  00062E                     __end_of_dispatcher:
  2139                           	opt stack 0
  2140                           tosu	equ	0xFFF
  2141                           tosh	equ	0xFFE
  2142                           tosl	equ	0xFFD
  2143                           stkptr	equ	0xFFC
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon	equ	0xFF2
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           plusw1	equ	0xFE3
  2155                           fsr1h	equ	0xFE2
  2156                           fsr1l	equ	0xFE1
  2157                           bsr	equ	0xFE0
  2158                           indf2	equ	0xFDF
  2159                           postinc2	equ	0xFDE
  2160                           postdec2	equ	0xFDD
  2161                           plusw2	equ	0xFDB
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _rr_scheduler *****************
  2167 ;; Defined at:
  2168 ;;		line 12 in file "scheduler.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  next_task_to    2   88[BANK1 ] unsigned int 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2   85[BANK1 ] unsigned int 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2182 ;;      Params:         0       0       2       0       0       0       0
  2183 ;;      Locals:         0       0       2       0       0       0       0
  2184 ;;      Temps:          0       0       1       0       0       0       0
  2185 ;;      Totals:         0       0       5       0       0       0       0
  2186 ;;Total ram usage:        5 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    5
  2189 ;; This function calls:
  2190 ;;		___lwmod
  2191 ;;		i1___wmul
  2192 ;; This function is called by:
  2193 ;;		_dispatcher
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text10
  2198  000E42                     __ptext10:
  2199                           	opt stack 0
  2200  000E42                     _rr_scheduler:
  2201                           	opt stack 19
  2202                           
  2203                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2204                           
  2205                           ; BSR set to: 1
  2206                           ;incstack = 0
  2207  000E42  C16E  F158         	movff	_task_running,rr_scheduler@next_task_to_run
  2208  000E46  C16F  F159         	movff	_task_running+1,rr_scheduler@next_task_to_run+1
  2209  000E4A                     
  2210                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2211  000E4A  0E01               	movlw	1
  2212  000E4C  0101               	movlb	1	; () banked
  2213  000E4E  2558               	addwf	rr_scheduler@next_task_to_run& (0+255),w,b
  2214  000E50  6F51               	movwf	___lwmod@dividend& (0+255),b
  2215  000E52  0E00               	movlw	0
  2216  000E54  2159               	addwfc	(rr_scheduler@next_task_to_run+1)& (0+255),w,b
  2217  000E56  6F52               	movwf	(___lwmod@dividend+1)& (0+255),b
  2218  000E58  C170  F153         	movff	_tasks_installed,___lwmod@divisor
  2219  000E5C  C171  F154         	movff	_tasks_installed+1,___lwmod@divisor+1
  2220  000E60  EC3A  F008         	call	___lwmod	;wreg free
  2221  000E64  C151  F158         	movff	?___lwmod,rr_scheduler@next_task_to_run
  2222  000E68  C152  F159         	movff	?___lwmod+1,rr_scheduler@next_task_to_run+1
  2223                           
  2224                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2225  000E6C  C158  F151         	movff	rr_scheduler@next_task_to_run,i1___wmul@multiplier
  2226  000E70  C159  F152         	movff	rr_scheduler@next_task_to_run+1,i1___wmul@multiplier+1
  2227  000E74  0E00               	movlw	0
  2228  000E76  0101               	movlb	1	; () banked
  2229  000E78  6F54               	movwf	(i1___wmul@multiplicand+1)& (0+255),b
  2230  000E7A  0E6E               	movlw	110
  2231  000E7C  6F53               	movwf	i1___wmul@multiplicand& (0+255),b
  2232  000E7E  EC0E  F009         	call	i1___wmul	;wreg free
  2233  000E82  0E08               	movlw	8
  2234  000E84  0101               	movlb	1	; () banked
  2235  000E86  2751               	addwf	?i1___wmul& (0+255),f,b
  2236  000E88  0E00               	movlw	0
  2237  000E8A  2352               	addwfc	(?i1___wmul+1)& (0+255),f,b
  2238  000E8C  0E6E               	movlw	low _F_APTOS
  2239  000E8E  2551               	addwf	?i1___wmul& (0+255),w,b
  2240  000E90  6ED9               	movwf	fsr2l,c
  2241  000E92  0E02               	movlw	high _F_APTOS
  2242  000E94  2152               	addwfc	(?i1___wmul+1)& (0+255),w,b
  2243  000E96  6EDA               	movwf	fsr2h,c
  2244  000E98  04DE               	decf	postinc2,w,c
  2245  000E9A  A4D8               	btfss	status,2,c
  2246  000E9C  D7D6               	goto	i1l147
  2247                           
  2248                           ; BSR set to: 1
  2249                           ;scheduler.c: 20: return next_task_to_run;
  2250  000E9E  C158  F155         	movff	rr_scheduler@next_task_to_run,?_rr_scheduler
  2251  000EA2  C159  F156         	movff	rr_scheduler@next_task_to_run+1,?_rr_scheduler+1
  2252                           
  2253                           ; BSR set to: 1
  2254  000EA6  0012               	return		;funcret
  2255  000EA8                     __end_of_rr_scheduler:
  2256                           	opt stack 0
  2257                           tosu	equ	0xFFF
  2258                           tosh	equ	0xFFE
  2259                           tosl	equ	0xFFD
  2260                           stkptr	equ	0xFFC
  2261                           tblptru	equ	0xFF8
  2262                           tblptrh	equ	0xFF7
  2263                           tblptrl	equ	0xFF6
  2264                           tablat	equ	0xFF5
  2265                           prodh	equ	0xFF4
  2266                           prodl	equ	0xFF3
  2267                           intcon	equ	0xFF2
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           postdec1	equ	0xFE5
  2271                           plusw1	equ	0xFE3
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           bsr	equ	0xFE0
  2275                           indf2	equ	0xFDF
  2276                           postinc2	equ	0xFDE
  2277                           postdec2	equ	0xFDD
  2278                           plusw2	equ	0xFDB
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function i1___wmul *****************
  2284 ;; Defined at:
  2285 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  multiplier      2   81[BANK1 ] unsigned int 
  2288 ;;  multiplicand    2   83[BANK1 ] unsigned int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  __wmul          2   27[BANK0 ] unsigned int 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  2   81[BANK1 ] unsigned int 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, prodl, prodh
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2300 ;;      Params:         0       0       4       0       0       0       0
  2301 ;;      Locals:         0       2       0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0       0       0
  2303 ;;      Totals:         0       2       4       0       0       0       0
  2304 ;;Total ram usage:        6 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    4
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_dispatcher
  2311 ;;		_delay
  2312 ;;		_rr_scheduler
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text11
  2317  00121C                     __ptext11:
  2318                           	opt stack 0
  2319  00121C                     i1___wmul:
  2320                           	opt stack 21
  2321                           
  2322                           ; BSR set to: 1
  2323                           ;incstack = 0
  2324  00121C  0101               	movlb	1	; () banked
  2325  00121E  5151               	movf	i1___wmul@multiplier& (0+255),w,b
  2326  001220  0353               	mulwf	i1___wmul@multiplicand& (0+255),b
  2327  001222  CFF3 F09B          	movff	prodl,i1___wmul@product
  2328  001226  CFF4 F09C          	movff	prodh,i1___wmul@product+1
  2329  00122A  5151               	movf	i1___wmul@multiplier& (0+255),w,b
  2330  00122C  0354               	mulwf	(i1___wmul@multiplicand+1)& (0+255),b
  2331  00122E  50F3               	movf	prodl,w,c
  2332  001230  0100               	movlb	0	; () banked
  2333  001232  279C               	addwf	(i1___wmul@product+1)& (0+255),f,b
  2334  001234  0101               	movlb	1	; () banked
  2335  001236  5152               	movf	(i1___wmul@multiplier+1)& (0+255),w,b
  2336  001238  0353               	mulwf	i1___wmul@multiplicand& (0+255),b
  2337  00123A  50F3               	movf	prodl,w,c
  2338  00123C  0100               	movlb	0	; () banked
  2339  00123E  279C               	addwf	(i1___wmul@product+1)& (0+255),f,b
  2340                           
  2341                           ; BSR set to: 0
  2342  001240  C09B  F151         	movff	i1___wmul@product,?i1___wmul
  2343  001244  C09C  F152         	movff	i1___wmul@product+1,?i1___wmul+1
  2344  001248  0012               	return	
  2345  00124A                     __end_ofi1___wmul:
  2346                           	opt stack 0
  2347                           tosu	equ	0xFFF
  2348                           tosh	equ	0xFFE
  2349                           tosl	equ	0xFFD
  2350                           stkptr	equ	0xFFC
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           prodh	equ	0xFF4
  2356                           prodl	equ	0xFF3
  2357                           intcon	equ	0xFF2
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           postdec1	equ	0xFE5
  2361                           plusw1	equ	0xFE3
  2362                           fsr1h	equ	0xFE2
  2363                           fsr1l	equ	0xFE1
  2364                           bsr	equ	0xFE0
  2365                           indf2	equ	0xFDF
  2366                           postinc2	equ	0xFDE
  2367                           postdec2	equ	0xFDD
  2368                           plusw2	equ	0xFDB
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function ___lwmod *****************
  2374 ;; Defined at:
  2375 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  dividend        2   81[BANK1 ] unsigned int 
  2378 ;;  divisor         2   83[BANK1 ] unsigned int 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  counter         1   27[BANK0 ] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  2   81[BANK1 ] unsigned int 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2390 ;;      Params:         0       0       4       0       0       0       0
  2391 ;;      Locals:         0       1       0       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0       0       0
  2393 ;;      Totals:         0       1       4       0       0       0       0
  2394 ;;Total ram usage:        5 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    4
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_rr_scheduler
  2401 ;;		_sem_wait
  2402 ;;		_sem_post
  2403 ;;		_write_pipe
  2404 ;;		_read_pipe
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text12
  2409  001074                     __ptext12:
  2410                           	opt stack 0
  2411  001074                     ___lwmod:
  2412                           	opt stack 19
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;incstack = 0
  2416  001074  0101               	movlb	1	; () banked
  2417  001076  5153               	movf	___lwmod@divisor& (0+255),w,b
  2418  001078  1154               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2419  00107A  B4D8               	btfsc	status,2,c
  2420  00107C  D01E               	goto	i1l627
  2421                           
  2422                           ; BSR set to: 1
  2423  00107E  0E01               	movlw	1
  2424  001080  0100               	movlb	0	; () banked
  2425  001082  6F9B               	movwf	___lwmod@counter& (0+255),b
  2426  001084  D006               	goto	i1l622
  2427  001086                     
  2428                           ; BSR set to: 0
  2429  001086  0101               	movlb	1	; () banked
  2430  001088  90D8               	bcf	status,0,c
  2431  00108A  3753               	rlcf	___lwmod@divisor& (0+255),f,b
  2432  00108C  3754               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2433  00108E  0100               	movlb	0	; () banked
  2434  001090  2B9B               	incf	___lwmod@counter& (0+255),f,b
  2435  001092                     i1l622:
  2436                           
  2437                           ; BSR set to: 0
  2438                           
  2439                           ; BSR set to: 0
  2440  001092  0101               	movlb	1	; () banked
  2441  001094  AF54               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2442  001096  D7F7               	goto	i1l623
  2443  001098                     i1u136_20:
  2444                           
  2445                           ; BSR set to: 1
  2446                           
  2447                           ; BSR set to: 1
  2448  001098  0101               	movlb	1	; () banked
  2449  00109A  5153               	movf	___lwmod@divisor& (0+255),w,b
  2450  00109C  5D51               	subwf	___lwmod@dividend& (0+255),w,b
  2451  00109E  5154               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2452  0010A0  5952               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2453  0010A2  A0D8               	btfss	status,0,c
  2454  0010A4  D004               	goto	i1l626
  2455                           
  2456                           ; BSR set to: 1
  2457  0010A6  5153               	movf	___lwmod@divisor& (0+255),w,b
  2458  0010A8  5F51               	subwf	___lwmod@dividend& (0+255),f,b
  2459  0010AA  5154               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2460  0010AC  5B52               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2461  0010AE                     i1l626:
  2462                           
  2463                           ; BSR set to: 1
  2464                           
  2465                           ; BSR set to: 1
  2466  0010AE  90D8               	bcf	status,0,c
  2467  0010B0  3354               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2468  0010B2  3353               	rrcf	___lwmod@divisor& (0+255),f,b
  2469                           
  2470                           ; BSR set to: 1
  2471  0010B4  0100               	movlb	0	; () banked
  2472  0010B6  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  2473  0010B8  D7EF               	goto	i1u136_20
  2474  0010BA                     i1l627:
  2475                           
  2476                           ; BSR set to: 0
  2477  0010BA  C151  F151         	movff	___lwmod@dividend,?___lwmod
  2478  0010BE  C152  F152         	movff	___lwmod@dividend+1,?___lwmod+1
  2479  0010C2  0012               	return		;funcret
  2480  0010C4                     __end_of___lwmod:
  2481                           	opt stack 0
  2482                           tosu	equ	0xFFF
  2483                           tosh	equ	0xFFE
  2484                           tosl	equ	0xFFD
  2485                           stkptr	equ	0xFFC
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           plusw1	equ	0xFE3
  2497                           fsr1h	equ	0xFE2
  2498                           fsr1l	equ	0xFE1
  2499                           bsr	equ	0xFE0
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           plusw2	equ	0xFDB
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _task_two *****************
  2509 ;; Defined at:
  2510 ;;		line 30 in file "tasks.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2524 ;;      Params:         0       0       0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0
  2526 ;;      Temps:          0       1       0       0       0       0       0
  2527 ;;      Totals:         0       1       0       0       0       0       0
  2528 ;;Total ram usage:        1 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    8
  2531 ;; This function calls:
  2532 ;;		_delay
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text13
  2539  0011EC                     __ptext13:
  2540                           	opt stack 0
  2541  0011EC                     _task_two:
  2542                           	opt stack 19
  2543                           
  2544                           ;tasks.c: 32: TRISDbits.RD1 = 0;
  2545                           
  2546                           ;incstack = 0
  2547  0011EC  9295               	bcf	3989,1,c	;volatile
  2548                           
  2549                           ;tasks.c: 33: PORTDbits.RD1 = 0;
  2550  0011EE  9283               	bcf	3971,1,c	;volatile
  2551  0011F0                     
  2552                           ;tasks.c: 37: PORTDbits.RD1 = ~PORTDbits.RD1;
  2553  0011F0  A283               	btfss	3971,1,c	;volatile
  2554  0011F2  D002               	goto	u144_20
  2555  0011F4  0E01               	movlw	1
  2556  0011F6  D001               	goto	u144_26
  2557  0011F8                     u144_20:
  2558  0011F8  0E00               	movlw	0
  2559  0011FA                     u144_26:
  2560  0011FA  0AFF               	xorlw	255
  2561  0011FC  0100               	movlb	0	; () banked
  2562  0011FE  6F9A               	movwf	??_task_two& (0+255),b
  2563  001200  479A               	rlncf	??_task_two& (0+255),f,b
  2564  001202  5083               	movf	3971,w,c	;volatile
  2565  001204  199A               	xorwf	??_task_two& (0+255),w,b
  2566  001206  0BFD               	andlw	-3
  2567  001208  199A               	xorwf	??_task_two& (0+255),w,b
  2568  00120A  6E83               	movwf	3971,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;tasks.c: 38: delay(100);
  2572  00120C  0E00               	movlw	0
  2573  00120E  0101               	movlb	1	; () banked
  2574  001210  6F60               	movwf	(delay@time_ms+1)& (0+255),b
  2575  001212  0E64               	movlw	100
  2576  001214  6F5F               	movwf	delay@time_ms& (0+255),b
  2577  001216  ECA3  F008         	call	_delay	;wreg free
  2578  00121A  D7EA               	goto	l123
  2579  00121C                     __end_of_task_two:
  2580                           	opt stack 0
  2581                           tosu	equ	0xFFF
  2582                           tosh	equ	0xFFE
  2583                           tosl	equ	0xFFD
  2584                           stkptr	equ	0xFFC
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           intcon	equ	0xFF2
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           plusw1	equ	0xFE3
  2596                           fsr1h	equ	0xFE2
  2597                           fsr1l	equ	0xFE1
  2598                           bsr	equ	0xFE0
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _task_thre *****************
  2608 ;; Defined at:
  2609 ;;		line 43 in file "tasks.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         0       0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       1       0       0       0       0
  2626 ;;      Totals:         0       0       1       0       0       0       0
  2627 ;;Total ram usage:        1 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    8
  2630 ;; This function calls:
  2631 ;;		_delay
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text14
  2638  0011BA                     __ptext14:
  2639                           	opt stack 0
  2640  0011BA                     _task_thre:
  2641                           	opt stack 19
  2642                           
  2643                           ;tasks.c: 45: TRISDbits.RD3 = 0;
  2644                           
  2645                           ;incstack = 0
  2646  0011BA  9695               	bcf	3989,3,c	;volatile
  2647                           
  2648                           ;tasks.c: 46: PORTDbits.RD3 = 0;
  2649  0011BC  9683               	bcf	3971,3,c	;volatile
  2650  0011BE                     
  2651                           ;tasks.c: 49: PORTDbits.RD3 = ~PORTDbits.RD3;
  2652  0011BE  A683               	btfss	3971,3,c	;volatile
  2653  0011C0  D002               	goto	u145_20
  2654  0011C2  0E01               	movlw	1
  2655  0011C4  D001               	goto	u145_26
  2656  0011C6                     u145_20:
  2657  0011C6  0E00               	movlw	0
  2658  0011C8                     u145_26:
  2659  0011C8  0AFF               	xorlw	255
  2660  0011CA  0101               	movlb	1	; () banked
  2661  0011CC  6F61               	movwf	??_task_thre& (0+255),b
  2662  0011CE  4761               	rlncf	??_task_thre& (0+255),f,b
  2663  0011D0  4761               	rlncf	??_task_thre& (0+255),f,b
  2664  0011D2  4761               	rlncf	??_task_thre& (0+255),f,b
  2665  0011D4  5083               	movf	3971,w,c	;volatile
  2666  0011D6  1961               	xorwf	??_task_thre& (0+255),w,b
  2667  0011D8  0BF7               	andlw	-9
  2668  0011DA  1961               	xorwf	??_task_thre& (0+255),w,b
  2669  0011DC  6E83               	movwf	3971,c	;volatile
  2670                           
  2671                           ; BSR set to: 1
  2672                           ;tasks.c: 50: delay(100);
  2673  0011DE  0E00               	movlw	0
  2674  0011E0  6F60               	movwf	(delay@time_ms+1)& (0+255),b
  2675  0011E2  0E64               	movlw	100
  2676  0011E4  6F5F               	movwf	delay@time_ms& (0+255),b
  2677  0011E6  ECA3  F008         	call	_delay	;wreg free
  2678  0011EA  D7E9               	goto	l129
  2679  0011EC                     __end_of_task_thre:
  2680                           	opt stack 0
  2681                           tosu	equ	0xFFF
  2682                           tosh	equ	0xFFE
  2683                           tosl	equ	0xFFD
  2684                           stkptr	equ	0xFFC
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           plusw1	equ	0xFE3
  2696                           fsr1h	equ	0xFE2
  2697                           fsr1l	equ	0xFE1
  2698                           bsr	equ	0xFE0
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           plusw2	equ	0xFDB
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _task_idle *****************
  2708 ;; Defined at:
  2709 ;;		line 62 in file "kernel.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2723 ;;      Params:         0       0       0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0       0
  2725 ;;      Temps:          0       1       0       0       0       0       0
  2726 ;;      Totals:         0       1       0       0       0       0       0
  2727 ;;Total ram usage:        1 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    4
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_setupOS
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text15
  2738  001298                     __ptext15:
  2739                           	opt stack 0
  2740  001298                     _task_idle:
  2741                           	opt stack 23
  2742                           
  2743                           ;kernel.c: 64: TRISDbits.RD4 = 0;
  2744                           
  2745                           ;incstack = 0
  2746  001298  9895               	bcf	3989,4,c	;volatile
  2747  00129A                     
  2748                           ;kernel.c: 67: PORTDbits.RD4 = ~PORTDbits.RD4;
  2749  00129A  A883               	btfss	3971,4,c	;volatile
  2750  00129C  D002               	goto	u54_20
  2751  00129E  0E01               	movlw	1
  2752  0012A0  D001               	goto	u54_26
  2753  0012A2                     u54_20:
  2754  0012A2  0E00               	movlw	0
  2755  0012A4                     u54_26:
  2756  0012A4  0AFF               	xorlw	255
  2757  0012A6  0100               	movlb	0	; () banked
  2758  0012A8  6F8E               	movwf	??_task_idle& (0+255),b
  2759  0012AA  3B8E               	swapf	??_task_idle& (0+255),f,b
  2760  0012AC  5083               	movf	3971,w,c	;volatile
  2761  0012AE  198E               	xorwf	??_task_idle& (0+255),w,b
  2762  0012B0  0BEF               	andlw	-17
  2763  0012B2  198E               	xorwf	??_task_idle& (0+255),w,b
  2764  0012B4  6E83               	movwf	3971,c	;volatile
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;kernel.c: 68: __nop();
  2768  0012B6  F000               	nop	
  2769  0012B8  D7F0               	goto	l79
  2770  0012BA                     __end_of_task_idle:
  2771                           	opt stack 0
  2772                           tosu	equ	0xFFF
  2773                           tosh	equ	0xFFE
  2774                           tosl	equ	0xFFD
  2775                           stkptr	equ	0xFFC
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           prodh	equ	0xFF4
  2781                           prodl	equ	0xFF3
  2782                           intcon	equ	0xFF2
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           postdec1	equ	0xFE5
  2786                           plusw1	equ	0xFE3
  2787                           fsr1h	equ	0xFE2
  2788                           fsr1l	equ	0xFE1
  2789                           bsr	equ	0xFE0
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           plusw2	equ	0xFDB
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _int_high *****************
  2799 ;; Defined at:
  2800 ;;		line 94 in file "kernel.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  i               2   36[COMRAM] unsigned int 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2814 ;;      Params:         0       0       0       0       0       0       0
  2815 ;;      Locals:         2       0       0       0       0       0       0
  2816 ;;      Temps:         20       0       0       0       0       0       0
  2817 ;;      Totals:        22       0       0       0       0       0       0
  2818 ;;Total ram usage:       22 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    3
  2821 ;; This function calls:
  2822 ;;		i2___wmul
  2823 ;;		i2_dispatcher
  2824 ;; This function is called by:
  2825 ;;		Interrupt level 2
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	intcode
  2830  000008                     __pintcode:
  2831                           	opt stack 0
  2832  000008                     _int_high:
  2833                           	opt stack 19
  2834                           
  2835                           ;incstack = 0
  2836  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2837  00000A  EDFF  F005         	call	int_func,f	;refresh shadow registers
  2838                           tosu	equ	0xFFF
  2839                           tosh	equ	0xFFE
  2840                           tosl	equ	0xFFD
  2841                           stkptr	equ	0xFFC
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postdec1	equ	0xFE5
  2852                           plusw1	equ	0xFE3
  2853                           fsr1h	equ	0xFE2
  2854                           fsr1l	equ	0xFE1
  2855                           bsr	equ	0xFE0
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           plusw2	equ	0xFDB
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864                           	psect	intcode_body
  2865  000BFE                     __pintcode_body:
  2866                           	opt stack 19
  2867  000BFE                     int_func:
  2868                           	opt stack 19
  2869  000BFE  0006               	pop		; remove dummy address from shadow register refresh
  2870  000C00  CFFA F013          	movff	pclath,??_int_high+2
  2871  000C04  CFFB F014          	movff	pclatu,??_int_high+3
  2872  000C08  CFE9 F015          	movff	fsr0l,??_int_high+4
  2873  000C0C  CFEA F016          	movff	fsr0h,??_int_high+5
  2874  000C10  CFE1 F017          	movff	fsr1l,??_int_high+6
  2875  000C14  CFE2 F018          	movff	fsr1h,??_int_high+7
  2876  000C18  CFD9 F019          	movff	fsr2l,??_int_high+8
  2877  000C1C  CFDA F01A          	movff	fsr2h,??_int_high+9
  2878  000C20  CFF3 F01B          	movff	prodl,??_int_high+10
  2879  000C24  CFF4 F01C          	movff	prodh,??_int_high+11
  2880  000C28  CFF6 F01D          	movff	tblptrl,??_int_high+12
  2881  000C2C  CFF7 F01E          	movff	tblptrh,??_int_high+13
  2882  000C30  CFF8 F01F          	movff	tblptru,??_int_high+14
  2883  000C34  CFF5 F020          	movff	tablat,??_int_high+15
  2884  000C38  C041  F021         	movff	btemp,??_int_high+16
  2885  000C3C  C042  F022         	movff	btemp+1,??_int_high+17
  2886  000C40  C043  F023         	movff	btemp+2,??_int_high+18
  2887  000C44  C044  F024         	movff	btemp+3,??_int_high+19
  2888                           
  2889                           ;kernel.c: 96: u_int i;
  2890                           ;kernel.c: 98: if (INTCONbits.TMR0IF) {
  2891  000C48  A4F2               	btfss	intcon,2,c	;volatile
  2892  000C4A  D07C               	goto	i2l96
  2893                           
  2894                           ;kernel.c: 99: INTCONbits.TMR0IF = 0;
  2895  000C4C  94F2               	bcf	intcon,2,c	;volatile
  2896                           
  2897                           ;kernel.c: 100: TMR0L = 252;
  2898  000C4E  0EFC               	movlw	252
  2899  000C50  6ED6               	movwf	4054,c	;volatile
  2900                           
  2901                           ;kernel.c: 102: for (i = 1; i < tasks_installed; i++) {
  2902  000C52  0E00               	movlw	0
  2903  000C54  6E26               	movwf	int_high@i+1,c
  2904  000C56  0E01               	movlw	1
  2905  000C58  6E25               	movwf	int_high@i,c
  2906  000C5A  D05F               	goto	i2l91
  2907  000C5C                     
  2908                           ;kernel.c: 103: if (F_APTOS[i].task_state == SLEEPING) {
  2909  000C5C  C025  F001         	movff	int_high@i,i2___wmul@multiplier
  2910  000C60  C026  F002         	movff	int_high@i+1,i2___wmul@multiplier+1
  2911  000C64  0E00               	movlw	0
  2912  000C66  6E04               	movwf	i2___wmul@multiplicand+1,c
  2913  000C68  0E6E               	movlw	110
  2914  000C6A  6E03               	movwf	i2___wmul@multiplicand,c
  2915  000C6C  EC39  F009         	call	i2___wmul	;wreg free
  2916  000C70  0E08               	movlw	8
  2917  000C72  2601               	addwf	?i2___wmul,f,c
  2918  000C74  0E00               	movlw	0
  2919  000C76  2202               	addwfc	?i2___wmul+1,f,c
  2920  000C78  0E6E               	movlw	low _F_APTOS
  2921  000C7A  2401               	addwf	?i2___wmul,w,c
  2922  000C7C  6ED9               	movwf	fsr2l,c
  2923  000C7E  0E02               	movlw	high _F_APTOS
  2924  000C80  2002               	addwfc	?i2___wmul+1,w,c
  2925  000C82  6EDA               	movwf	fsr2h,c
  2926  000C84  0E03               	movlw	3
  2927  000C86  18DE               	xorwf	postinc2,w,c
  2928  000C88  A4D8               	btfss	status,2,c
  2929  000C8A  D045               	goto	i2l94
  2930                           
  2931                           ;kernel.c: 104: F_APTOS[i].delay_time--;
  2932  000C8C  C025  F001         	movff	int_high@i,i2___wmul@multiplier
  2933  000C90  C026  F002         	movff	int_high@i+1,i2___wmul@multiplier+1
  2934  000C94  0E00               	movlw	0
  2935  000C96  6E04               	movwf	i2___wmul@multiplicand+1,c
  2936  000C98  0E6E               	movlw	110
  2937  000C9A  6E03               	movwf	i2___wmul@multiplicand,c
  2938  000C9C  EC39  F009         	call	i2___wmul	;wreg free
  2939  000CA0  0E06               	movlw	6
  2940  000CA2  2601               	addwf	?i2___wmul,f,c
  2941  000CA4  0E00               	movlw	0
  2942  000CA6  2202               	addwfc	?i2___wmul+1,f,c
  2943  000CA8  0E6E               	movlw	low _F_APTOS
  2944  000CAA  2401               	addwf	?i2___wmul,w,c
  2945  000CAC  6ED9               	movwf	fsr2l,c
  2946  000CAE  0E02               	movlw	high _F_APTOS
  2947  000CB0  2002               	addwfc	?i2___wmul+1,w,c
  2948  000CB2  6EDA               	movwf	fsr2h,c
  2949  000CB4  06DE               	decf	postinc2,f,c
  2950  000CB6  0E00               	movlw	0
  2951  000CB8  5ADD               	subwfb	postdec2,f,c
  2952                           
  2953                           ;kernel.c: 105: if (F_APTOS[i].delay_time == 0) {
  2954  000CBA  C025  F001         	movff	int_high@i,i2___wmul@multiplier
  2955  000CBE  C026  F002         	movff	int_high@i+1,i2___wmul@multiplier+1
  2956  000CC2  0E00               	movlw	0
  2957  000CC4  6E04               	movwf	i2___wmul@multiplicand+1,c
  2958  000CC6  0E6E               	movlw	110
  2959  000CC8  6E03               	movwf	i2___wmul@multiplicand,c
  2960  000CCA  EC39  F009         	call	i2___wmul	;wreg free
  2961  000CCE  0E06               	movlw	6
  2962  000CD0  2601               	addwf	?i2___wmul,f,c
  2963  000CD2  0E00               	movlw	0
  2964  000CD4  2202               	addwfc	?i2___wmul+1,f,c
  2965  000CD6  0E6E               	movlw	low _F_APTOS
  2966  000CD8  2401               	addwf	?i2___wmul,w,c
  2967  000CDA  6ED9               	movwf	fsr2l,c
  2968  000CDC  0E02               	movlw	high _F_APTOS
  2969  000CDE  2002               	addwfc	?i2___wmul+1,w,c
  2970  000CE0  6EDA               	movwf	fsr2h,c
  2971  000CE2  50DE               	movf	postinc2,w,c
  2972  000CE4  10DE               	iorwf	postinc2,w,c
  2973  000CE6  A4D8               	btfss	status,2,c
  2974  000CE8  D016               	goto	i2l94
  2975                           
  2976                           ;kernel.c: 106: F_APTOS[i].task_state = READY;
  2977  000CEA  C025  F001         	movff	int_high@i,i2___wmul@multiplier
  2978  000CEE  C026  F002         	movff	int_high@i+1,i2___wmul@multiplier+1
  2979  000CF2  0E00               	movlw	0
  2980  000CF4  6E04               	movwf	i2___wmul@multiplicand+1,c
  2981  000CF6  0E6E               	movlw	110
  2982  000CF8  6E03               	movwf	i2___wmul@multiplicand,c
  2983  000CFA  EC39  F009         	call	i2___wmul	;wreg free
  2984  000CFE  0E08               	movlw	8
  2985  000D00  2601               	addwf	?i2___wmul,f,c
  2986  000D02  0E00               	movlw	0
  2987  000D04  2202               	addwfc	?i2___wmul+1,f,c
  2988  000D06  0E6E               	movlw	low _F_APTOS
  2989  000D08  2401               	addwf	?i2___wmul,w,c
  2990  000D0A  6ED9               	movwf	fsr2l,c
  2991  000D0C  0E02               	movlw	high _F_APTOS
  2992  000D0E  2002               	addwfc	?i2___wmul+1,w,c
  2993  000D10  6EDA               	movwf	fsr2h,c
  2994  000D12  0E01               	movlw	1
  2995  000D14  6EDF               	movwf	indf2,c
  2996  000D16                     i2l94:
  2997  000D16  4A25               	infsnz	int_high@i,f,c
  2998  000D18  2A26               	incf	int_high@i+1,f,c
  2999  000D1A                     i2l91:
  3000  000D1A  0101               	movlb	1	; () banked
  3001  000D1C  5170               	movf	_tasks_installed& (0+255),w,b
  3002  000D1E  5C25               	subwf	int_high@i,w,c
  3003  000D20  5171               	movf	(_tasks_installed+1)& (0+255),w,b
  3004  000D22  5826               	subwfb	int_high@i+1,w,c
  3005  000D24  A0D8               	btfss	status,0,c
  3006  000D26  D79A               	goto	i2l92
  3007                           
  3008                           ; BSR set to: 1
  3009                           ;kernel.c: 107: }
  3010                           ;kernel.c: 108: }
  3011                           ;kernel.c: 109: }
  3012                           ;kernel.c: 111: quantum--;
  3013                           
  3014                           ; BSR set to: 1
  3015  000D28  063F               	decf	_quantum,f,c
  3016  000D2A  A0D8               	btfss	status,0,c
  3017  000D2C  0640               	decf	_quantum+1,f,c
  3018                           
  3019                           ; BSR set to: 1
  3020                           ;kernel.c: 112: if (quantum == 0) {
  3021  000D2E  503F               	movf	_quantum,w,c
  3022  000D30  1040               	iorwf	_quantum+1,w,c
  3023  000D32  A4D8               	btfss	status,2,c
  3024  000D34  D007               	goto	i2l96
  3025                           
  3026                           ; BSR set to: 1
  3027                           ;kernel.c: 113: quantum = 4;
  3028  000D36  0E00               	movlw	0
  3029  000D38  6E40               	movwf	_quantum+1,c
  3030  000D3A  0E04               	movlw	4
  3031  000D3C  6E3F               	movwf	_quantum,c
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;kernel.c: 114: dispatcher(READY);
  3035  000D3E  0E01               	movlw	1
  3036  000D40  EC17  F003         	call	i2_dispatcher
  3037  000D44                     i2l96:
  3038  000D44  C024  F044         	movff	??_int_high+19,btemp+3
  3039  000D48  C023  F043         	movff	??_int_high+18,btemp+2
  3040  000D4C  C022  F042         	movff	??_int_high+17,btemp+1
  3041  000D50  C021  F041         	movff	??_int_high+16,btemp
  3042  000D54  C020  FFF5         	movff	??_int_high+15,tablat
  3043  000D58  C01F  FFF8         	movff	??_int_high+14,tblptru
  3044  000D5C  C01E  FFF7         	movff	??_int_high+13,tblptrh
  3045  000D60  C01D  FFF6         	movff	??_int_high+12,tblptrl
  3046  000D64  C01C  FFF4         	movff	??_int_high+11,prodh
  3047  000D68  C01B  FFF3         	movff	??_int_high+10,prodl
  3048  000D6C  C01A  FFDA         	movff	??_int_high+9,fsr2h
  3049  000D70  C019  FFD9         	movff	??_int_high+8,fsr2l
  3050  000D74  C018  FFE2         	movff	??_int_high+7,fsr1h
  3051  000D78  C017  FFE1         	movff	??_int_high+6,fsr1l
  3052  000D7C  C016  FFEA         	movff	??_int_high+5,fsr0h
  3053  000D80  C015  FFE9         	movff	??_int_high+4,fsr0l
  3054  000D84  C014  FFFB         	movff	??_int_high+3,pclatu
  3055  000D88  C013  FFFA         	movff	??_int_high+2,pclath
  3056  000D8C  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3057  000D8E  0011               	retfie		f
  3058  000D90                     __end_of_int_high:
  3059                           	opt stack 0
  3060                           tosu	equ	0xFFF
  3061                           tosh	equ	0xFFE
  3062                           tosl	equ	0xFFD
  3063                           stkptr	equ	0xFFC
  3064                           pclatu	equ	0xFFB
  3065                           pclath	equ	0xFFA
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           postinc0	equ	0xFEE
  3074                           fsr0h	equ	0xFEA
  3075                           fsr0l	equ	0xFE9
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           plusw1	equ	0xFE3
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           bsr	equ	0xFE0
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           plusw2	equ	0xFDB
  3086                           fsr2h	equ	0xFDA
  3087                           fsr2l	equ	0xFD9
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function i2_dispatcher *****************
  3091 ;; Defined at:
  3092 ;;		line 31 in file "kernel.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  state           1    wreg     enum E3007
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  state           1   13[COMRAM] enum E3007
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3106 ;;      Params:         0       0       0       0       0       0       0
  3107 ;;      Locals:         3       0       0       0       0       0       0
  3108 ;;      Temps:          2       0       0       0       0       0       0
  3109 ;;      Totals:         5       0       0       0       0       0       0
  3110 ;;Total ram usage:        5 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    2
  3113 ;; This function calls:
  3114 ;;		i2___wmul
  3115 ;;		i2_rr_scheduler
  3116 ;; This function is called by:
  3117 ;;		_int_high
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text17
  3122  00062E                     __ptext17:
  3123                           	opt stack 0
  3124  00062E                     i2_dispatcher:
  3125                           	opt stack 19
  3126                           
  3127                           ;incstack = 0
  3128                           ;i2dispatcher@state stored from wreg
  3129  00062E  6E0E               	movwf	i2dispatcher@state,c
  3130                           
  3131                           ;kernel.c: 33: (INTCONbits.GIE = 0);
  3132  000630  9EF2               	bcf	intcon,7,c	;volatile
  3133                           
  3134                           ;kernel.c: 36: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  3135  000632  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3136  000636  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3137  00063A  0E00               	movlw	0
  3138  00063C  6E04               	movwf	i2___wmul@multiplicand+1,c
  3139  00063E  0E6E               	movlw	110
  3140  000640  6E03               	movwf	i2___wmul@multiplicand,c
  3141  000642  EC39  F009         	call	i2___wmul	;wreg free
  3142  000646  0E08               	movlw	8
  3143  000648  2601               	addwf	?i2___wmul,f,c
  3144  00064A  0E00               	movlw	0
  3145  00064C  2202               	addwfc	?i2___wmul+1,f,c
  3146  00064E  0E6E               	movlw	low _F_APTOS
  3147  000650  2401               	addwf	?i2___wmul,w,c
  3148  000652  6ED9               	movwf	fsr2l,c
  3149  000654  0E02               	movlw	high _F_APTOS
  3150  000656  2002               	addwfc	?i2___wmul+1,w,c
  3151  000658  6EDA               	movwf	fsr2h,c
  3152  00065A  C00E  FFDF         	movff	i2dispatcher@state,indf2
  3153  00065E  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3154  000662  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3155  000666  0E00               	movlw	0
  3156  000668  6E04               	movwf	i2___wmul@multiplicand+1,c
  3157  00066A  0E6E               	movlw	110
  3158  00066C  6E03               	movwf	i2___wmul@multiplicand,c
  3159  00066E  EC39  F009         	call	i2___wmul	;wreg free
  3160  000672  0E6B               	movlw	107
  3161  000674  2601               	addwf	?i2___wmul,f,c
  3162  000676  0E00               	movlw	0
  3163  000678  2202               	addwfc	?i2___wmul+1,f,c
  3164  00067A  0E6E               	movlw	low _F_APTOS
  3165  00067C  2401               	addwf	?i2___wmul,w,c
  3166  00067E  6ED9               	movwf	fsr2l,c
  3167  000680  0E02               	movlw	high _F_APTOS
  3168  000682  2002               	addwfc	?i2___wmul+1,w,c
  3169  000684  6EDA               	movwf	fsr2h,c
  3170  000686  CFE0 FFDF          	movff	bsr,indf2	;volatile
  3171  00068A  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3172  00068E  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3173  000692  0E00               	movlw	0
  3174  000694  6E04               	movwf	i2___wmul@multiplicand+1,c
  3175  000696  0E6E               	movlw	110
  3176  000698  6E03               	movwf	i2___wmul@multiplicand,c
  3177  00069A  EC39  F009         	call	i2___wmul	;wreg free
  3178  00069E  0E6C               	movlw	108
  3179  0006A0  2601               	addwf	?i2___wmul,f,c
  3180  0006A2  0E00               	movlw	0
  3181  0006A4  2202               	addwfc	?i2___wmul+1,f,c
  3182  0006A6  0E6E               	movlw	low _F_APTOS
  3183  0006A8  2401               	addwf	?i2___wmul,w,c
  3184  0006AA  6ED9               	movwf	fsr2l,c
  3185  0006AC  0E02               	movlw	high _F_APTOS
  3186  0006AE  2002               	addwfc	?i2___wmul+1,w,c
  3187  0006B0  6EDA               	movwf	fsr2h,c
  3188  0006B2  CFD8 FFDF          	movff	status,indf2	;volatile
  3189  0006B6  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3190  0006BA  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3191  0006BE  0E00               	movlw	0
  3192  0006C0  6E04               	movwf	i2___wmul@multiplicand+1,c
  3193  0006C2  0E6E               	movlw	110
  3194  0006C4  6E03               	movwf	i2___wmul@multiplicand,c
  3195  0006C6  EC39  F009         	call	i2___wmul	;wreg free
  3196  0006CA  0E6D               	movlw	109
  3197  0006CC  2601               	addwf	?i2___wmul,f,c
  3198  0006CE  0E00               	movlw	0
  3199  0006D0  2202               	addwfc	?i2___wmul+1,f,c
  3200  0006D2  0E6E               	movlw	low _F_APTOS
  3201  0006D4  2401               	addwf	?i2___wmul,w,c
  3202  0006D6  6ED9               	movwf	fsr2l,c
  3203  0006D8  0E02               	movlw	high _F_APTOS
  3204  0006DA  2002               	addwfc	?i2___wmul+1,w,c
  3205  0006DC  6EDA               	movwf	fsr2h,c
  3206  0006DE  CFE8 FFDF          	movff	wreg,indf2	;volatile
  3207  0006E2  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3208  0006E6  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3209  0006EA  0E00               	movlw	0
  3210  0006EC  6E04               	movwf	i2___wmul@multiplicand+1,c
  3211  0006EE  0E6E               	movlw	110
  3212  0006F0  6E03               	movwf	i2___wmul@multiplicand,c
  3213  0006F2  EC39  F009         	call	i2___wmul	;wreg free
  3214  0006F6  0E69               	movlw	105
  3215  0006F8  2601               	addwf	?i2___wmul,f,c
  3216  0006FA  0E00               	movlw	0
  3217  0006FC  2202               	addwfc	?i2___wmul+1,f,c
  3218  0006FE  0E6E               	movlw	low _F_APTOS
  3219  000700  2401               	addwf	?i2___wmul,w,c
  3220  000702  6ED9               	movwf	fsr2l,c
  3221  000704  0E02               	movlw	high _F_APTOS
  3222  000706  2002               	addwfc	?i2___wmul+1,w,c
  3223  000708  6EDA               	movwf	fsr2h,c
  3224  00070A  0E00               	movlw	0
  3225  00070C  6EDE               	movwf	postinc2,c
  3226  00070E  0E00               	movlw	0
  3227  000710  6EDD               	movwf	postdec2,c
  3228  000712                     i2l64:
  3229  000712  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3230  000716  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3231  00071A  0E00               	movlw	0
  3232  00071C  6E04               	movwf	i2___wmul@multiplicand+1,c
  3233  00071E  0E6E               	movlw	110
  3234  000720  6E03               	movwf	i2___wmul@multiplicand,c
  3235  000722  EC39  F009         	call	i2___wmul	;wreg free
  3236  000726  0E69               	movlw	105
  3237  000728  2601               	addwf	?i2___wmul,f,c
  3238  00072A  0E00               	movlw	0
  3239  00072C  2202               	addwfc	?i2___wmul+1,f,c
  3240  00072E  0E6E               	movlw	low _F_APTOS
  3241  000730  2401               	addwf	?i2___wmul,w,c
  3242  000732  6ED9               	movwf	fsr2l,c
  3243  000734  0E02               	movlw	high _F_APTOS
  3244  000736  2002               	addwfc	?i2___wmul+1,w,c
  3245  000738  6EDA               	movwf	fsr2h,c
  3246  00073A  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3247  00073E  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3248  000742  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3249  000746  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3250  00074A  0E00               	movlw	0
  3251  00074C  6E04               	movwf	i2___wmul@multiplicand+1,c
  3252  00074E  0E6E               	movlw	110
  3253  000750  6E03               	movwf	i2___wmul@multiplicand,c
  3254  000752  EC39  F009         	call	i2___wmul	;wreg free
  3255  000756  0E09               	movlw	9
  3256  000758  2601               	addwf	?i2___wmul,f,c
  3257  00075A  0E00               	movlw	0
  3258  00075C  2202               	addwfc	?i2___wmul+1,f,c
  3259  00075E  0E6E               	movlw	low _F_APTOS
  3260  000760  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3261  000762  0E02               	movlw	high _F_APTOS
  3262  000764  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3263  000766  5001               	movf	?i2___wmul,w,c
  3264  000768  260C               	addwf	??i2_dispatcher,f,c
  3265  00076A  5002               	movf	?i2___wmul+1,w,c
  3266  00076C  220D               	addwfc	??i2_dispatcher+1,f,c
  3267  00076E  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3268  000772  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3269  000776  0E00               	movlw	0
  3270  000778  6E04               	movwf	i2___wmul@multiplicand+1,c
  3271  00077A  0E03               	movlw	3
  3272  00077C  6E03               	movwf	i2___wmul@multiplicand,c
  3273  00077E  EC39  F009         	call	i2___wmul	;wreg free
  3274  000782  5001               	movf	?i2___wmul,w,c
  3275  000784  240C               	addwf	??i2_dispatcher,w,c
  3276  000786  6ED9               	movwf	fsr2l,c
  3277  000788  5002               	movf	?i2___wmul+1,w,c
  3278  00078A  200D               	addwfc	??i2_dispatcher+1,w,c
  3279  00078C  6EDA               	movwf	fsr2h,c
  3280  00078E  CFFF FFDF          	movff	tosu,indf2	;volatile
  3281  000792  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3282  000796  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3283  00079A  0E00               	movlw	0
  3284  00079C  6E04               	movwf	i2___wmul@multiplicand+1,c
  3285  00079E  0E6E               	movlw	110
  3286  0007A0  6E03               	movwf	i2___wmul@multiplicand,c
  3287  0007A2  EC39  F009         	call	i2___wmul	;wreg free
  3288  0007A6  0E69               	movlw	105
  3289  0007A8  2601               	addwf	?i2___wmul,f,c
  3290  0007AA  0E00               	movlw	0
  3291  0007AC  2202               	addwfc	?i2___wmul+1,f,c
  3292  0007AE  0E6E               	movlw	low _F_APTOS
  3293  0007B0  2401               	addwf	?i2___wmul,w,c
  3294  0007B2  6ED9               	movwf	fsr2l,c
  3295  0007B4  0E02               	movlw	high _F_APTOS
  3296  0007B6  2002               	addwfc	?i2___wmul+1,w,c
  3297  0007B8  6EDA               	movwf	fsr2h,c
  3298  0007BA  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3299  0007BE  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3300  0007C2  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3301  0007C6  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3302  0007CA  0E00               	movlw	0
  3303  0007CC  6E04               	movwf	i2___wmul@multiplicand+1,c
  3304  0007CE  0E6E               	movlw	110
  3305  0007D0  6E03               	movwf	i2___wmul@multiplicand,c
  3306  0007D2  EC39  F009         	call	i2___wmul	;wreg free
  3307  0007D6  0E09               	movlw	9
  3308  0007D8  2601               	addwf	?i2___wmul,f,c
  3309  0007DA  0E00               	movlw	0
  3310  0007DC  2202               	addwfc	?i2___wmul+1,f,c
  3311  0007DE  0E6E               	movlw	low _F_APTOS
  3312  0007E0  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3313  0007E2  0E02               	movlw	high _F_APTOS
  3314  0007E4  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3315  0007E6  5001               	movf	?i2___wmul,w,c
  3316  0007E8  260C               	addwf	??i2_dispatcher,f,c
  3317  0007EA  5002               	movf	?i2___wmul+1,w,c
  3318  0007EC  220D               	addwfc	??i2_dispatcher+1,f,c
  3319  0007EE  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3320  0007F2  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3321  0007F6  0E00               	movlw	0
  3322  0007F8  6E04               	movwf	i2___wmul@multiplicand+1,c
  3323  0007FA  0E03               	movlw	3
  3324  0007FC  6E03               	movwf	i2___wmul@multiplicand,c
  3325  0007FE  EC39  F009         	call	i2___wmul	;wreg free
  3326  000802  5001               	movf	?i2___wmul,w,c
  3327  000804  260C               	addwf	??i2_dispatcher,f,c
  3328  000806  5002               	movf	?i2___wmul+1,w,c
  3329  000808  220D               	addwfc	??i2_dispatcher+1,f,c
  3330  00080A  0E01               	movlw	1
  3331  00080C  240C               	addwf	??i2_dispatcher,w,c
  3332  00080E  6ED9               	movwf	fsr2l,c
  3333  000810  0E00               	movlw	0
  3334  000812  200D               	addwfc	??i2_dispatcher+1,w,c
  3335  000814  6EDA               	movwf	fsr2h,c
  3336  000816  CFFD FFDF          	movff	tosl,indf2	;volatile
  3337  00081A  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3338  00081E  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3339  000822  0E00               	movlw	0
  3340  000824  6E04               	movwf	i2___wmul@multiplicand+1,c
  3341  000826  0E6E               	movlw	110
  3342  000828  6E03               	movwf	i2___wmul@multiplicand,c
  3343  00082A  EC39  F009         	call	i2___wmul	;wreg free
  3344  00082E  0E69               	movlw	105
  3345  000830  2601               	addwf	?i2___wmul,f,c
  3346  000832  0E00               	movlw	0
  3347  000834  2202               	addwfc	?i2___wmul+1,f,c
  3348  000836  0E6E               	movlw	low _F_APTOS
  3349  000838  2401               	addwf	?i2___wmul,w,c
  3350  00083A  6ED9               	movwf	fsr2l,c
  3351  00083C  0E02               	movlw	high _F_APTOS
  3352  00083E  2002               	addwfc	?i2___wmul+1,w,c
  3353  000840  6EDA               	movwf	fsr2h,c
  3354  000842  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3355  000846  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3356  00084A  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3357  00084E  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3358  000852  0E00               	movlw	0
  3359  000854  6E04               	movwf	i2___wmul@multiplicand+1,c
  3360  000856  0E6E               	movlw	110
  3361  000858  6E03               	movwf	i2___wmul@multiplicand,c
  3362  00085A  EC39  F009         	call	i2___wmul	;wreg free
  3363  00085E  0E09               	movlw	9
  3364  000860  2601               	addwf	?i2___wmul,f,c
  3365  000862  0E00               	movlw	0
  3366  000864  2202               	addwfc	?i2___wmul+1,f,c
  3367  000866  0E6E               	movlw	low _F_APTOS
  3368  000868  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3369  00086A  0E02               	movlw	high _F_APTOS
  3370  00086C  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3371  00086E  5001               	movf	?i2___wmul,w,c
  3372  000870  260C               	addwf	??i2_dispatcher,f,c
  3373  000872  5002               	movf	?i2___wmul+1,w,c
  3374  000874  220D               	addwfc	??i2_dispatcher+1,f,c
  3375  000876  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3376  00087A  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3377  00087E  0E00               	movlw	0
  3378  000880  6E04               	movwf	i2___wmul@multiplicand+1,c
  3379  000882  0E03               	movlw	3
  3380  000884  6E03               	movwf	i2___wmul@multiplicand,c
  3381  000886  EC39  F009         	call	i2___wmul	;wreg free
  3382  00088A  5001               	movf	?i2___wmul,w,c
  3383  00088C  260C               	addwf	??i2_dispatcher,f,c
  3384  00088E  5002               	movf	?i2___wmul+1,w,c
  3385  000890  220D               	addwfc	??i2_dispatcher+1,f,c
  3386  000892  0E02               	movlw	2
  3387  000894  240C               	addwf	??i2_dispatcher,w,c
  3388  000896  6ED9               	movwf	fsr2l,c
  3389  000898  0E00               	movlw	0
  3390  00089A  200D               	addwfc	??i2_dispatcher+1,w,c
  3391  00089C  6EDA               	movwf	fsr2h,c
  3392  00089E  CFFE FFDF          	movff	tosh,indf2	;volatile
  3393  0008A2  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3394  0008A6  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3395  0008AA  0E00               	movlw	0
  3396  0008AC  6E04               	movwf	i2___wmul@multiplicand+1,c
  3397  0008AE  0E6E               	movlw	110
  3398  0008B0  6E03               	movwf	i2___wmul@multiplicand,c
  3399  0008B2  EC39  F009         	call	i2___wmul	;wreg free
  3400  0008B6  0E69               	movlw	105
  3401  0008B8  2601               	addwf	?i2___wmul,f,c
  3402  0008BA  0E00               	movlw	0
  3403  0008BC  2202               	addwfc	?i2___wmul+1,f,c
  3404  0008BE  0E6E               	movlw	low _F_APTOS
  3405  0008C0  2401               	addwf	?i2___wmul,w,c
  3406  0008C2  6ED9               	movwf	fsr2l,c
  3407  0008C4  0E02               	movlw	high _F_APTOS
  3408  0008C6  2002               	addwfc	?i2___wmul+1,w,c
  3409  0008C8  6EDA               	movwf	fsr2h,c
  3410  0008CA  2ADE               	incf	postinc2,f,c
  3411  0008CC  0E00               	movlw	0
  3412  0008CE  22DD               	addwfc	postdec2,f,c
  3413  0008D0  0006               	pop		;# 
  3414  0008D2  50FC               	movf	stkptr,w,c	;volatile
  3415  0008D4  A4D8               	btfss	status,2,c
  3416  0008D6  D71D               	goto	i2l64
  3417                           
  3418                           ;kernel.c: 39: task_running = rr_scheduler();
  3419  0008D8  EC86  F007         	call	i2_rr_scheduler	;wreg free
  3420  0008DC  C007  F16E         	movff	?i2_rr_scheduler,_task_running
  3421  0008E0  C008  F16F         	movff	?i2_rr_scheduler+1,_task_running+1
  3422                           
  3423                           ;kernel.c: 42: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  3424  0008E4  0E00               	movlw	0
  3425  0008E6  6EFC               	movwf	stkptr,c	;volatile
  3426  0008E8  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3427  0008EC  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3428  0008F0  0E00               	movlw	0
  3429  0008F2  6E04               	movwf	i2___wmul@multiplicand+1,c
  3430  0008F4  0E6E               	movlw	110
  3431  0008F6  6E03               	movwf	i2___wmul@multiplicand,c
  3432  0008F8  EC39  F009         	call	i2___wmul	;wreg free
  3433  0008FC  0E69               	movlw	105
  3434  0008FE  2601               	addwf	?i2___wmul,f,c
  3435  000900  0E00               	movlw	0
  3436  000902  2202               	addwfc	?i2___wmul+1,f,c
  3437  000904  0E6E               	movlw	low _F_APTOS
  3438  000906  2401               	addwf	?i2___wmul,w,c
  3439  000908  6ED9               	movwf	fsr2l,c
  3440  00090A  0E02               	movlw	high _F_APTOS
  3441  00090C  2002               	addwfc	?i2___wmul+1,w,c
  3442  00090E  6EDA               	movwf	fsr2h,c
  3443  000910  50DE               	movf	postinc2,w,c
  3444  000912  10DE               	iorwf	postinc2,w,c
  3445  000914  A4D8               	btfss	status,2,c
  3446  000916  D01F               	goto	i2l66
  3447  000918  0005               	push		;# 
  3448  00091A  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3449  00091E  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3450  000922  0E00               	movlw	0
  3451  000924  6E04               	movwf	i2___wmul@multiplicand+1,c
  3452  000926  0E6E               	movlw	110
  3453  000928  6E03               	movwf	i2___wmul@multiplicand,c
  3454  00092A  EC39  F009         	call	i2___wmul	;wreg free
  3455  00092E  0E04               	movlw	4
  3456  000930  2601               	addwf	?i2___wmul,f,c
  3457  000932  0E00               	movlw	0
  3458  000934  2202               	addwfc	?i2___wmul+1,f,c
  3459  000936  0E6E               	movlw	low _F_APTOS
  3460  000938  2401               	addwf	?i2___wmul,w,c
  3461  00093A  6ED9               	movwf	fsr2l,c
  3462  00093C  0E02               	movlw	high _F_APTOS
  3463  00093E  2002               	addwfc	?i2___wmul+1,w,c
  3464  000940  6EDA               	movwf	fsr2h,c
  3465  000942  CFDE F00C          	movff	postinc2,??i2_dispatcher
  3466  000946  CFDD F00D          	movff	postdec2,??i2_dispatcher+1
  3467  00094A  C00C  FFFD         	movff	??i2_dispatcher,tosl	;volatile
  3468  00094E  C00D  FFFE         	movff	??i2_dispatcher+1,tosh	;volatile
  3469  000952  6AFF               	clrf	tosu,c	;volatile
  3470  000954  D13B               	goto	i2u53_40
  3471  000956                     i2l66:
  3472  000956  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3473  00095A  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3474  00095E  0E00               	movlw	0
  3475  000960  6E04               	movwf	i2___wmul@multiplicand+1,c
  3476  000962  0E6E               	movlw	110
  3477  000964  6E03               	movwf	i2___wmul@multiplicand,c
  3478  000966  EC39  F009         	call	i2___wmul	;wreg free
  3479  00096A  0E6B               	movlw	107
  3480  00096C  2601               	addwf	?i2___wmul,f,c
  3481  00096E  0E00               	movlw	0
  3482  000970  2202               	addwfc	?i2___wmul+1,f,c
  3483  000972  0E6E               	movlw	low _F_APTOS
  3484  000974  2401               	addwf	?i2___wmul,w,c
  3485  000976  6ED9               	movwf	fsr2l,c
  3486  000978  0E02               	movlw	high _F_APTOS
  3487  00097A  2002               	addwfc	?i2___wmul+1,w,c
  3488  00097C  6EDA               	movwf	fsr2h,c
  3489  00097E  50DF               	movf	indf2,w,c
  3490  000980  6EE0               	movwf	bsr,c	;volatile
  3491  000982  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3492  000986  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3493  00098A  0E00               	movlw	0
  3494  00098C  6E04               	movwf	i2___wmul@multiplicand+1,c
  3495  00098E  0E6E               	movlw	110
  3496  000990  6E03               	movwf	i2___wmul@multiplicand,c
  3497  000992  EC39  F009         	call	i2___wmul	;wreg free
  3498  000996  0E6C               	movlw	108
  3499  000998  2601               	addwf	?i2___wmul,f,c
  3500  00099A  0E00               	movlw	0
  3501  00099C  2202               	addwfc	?i2___wmul+1,f,c
  3502  00099E  0E6E               	movlw	low _F_APTOS
  3503  0009A0  2401               	addwf	?i2___wmul,w,c
  3504  0009A2  6ED9               	movwf	fsr2l,c
  3505  0009A4  0E02               	movlw	high _F_APTOS
  3506  0009A6  2002               	addwfc	?i2___wmul+1,w,c
  3507  0009A8  6EDA               	movwf	fsr2h,c
  3508  0009AA  50DF               	movf	indf2,w,c
  3509  0009AC  6ED8               	movwf	status,c	;volatile
  3510  0009AE  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3511  0009B2  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3512  0009B6  0E00               	movlw	0
  3513  0009B8  6E04               	movwf	i2___wmul@multiplicand+1,c
  3514  0009BA  0E6E               	movlw	110
  3515  0009BC  6E03               	movwf	i2___wmul@multiplicand,c
  3516  0009BE  EC39  F009         	call	i2___wmul	;wreg free
  3517  0009C2  0E6D               	movlw	109
  3518  0009C4  2601               	addwf	?i2___wmul,f,c
  3519  0009C6  0E00               	movlw	0
  3520  0009C8  2202               	addwfc	?i2___wmul+1,f,c
  3521  0009CA  0E6E               	movlw	low _F_APTOS
  3522  0009CC  2401               	addwf	?i2___wmul,w,c
  3523  0009CE  6ED9               	movwf	fsr2l,c
  3524  0009D0  0E02               	movlw	high _F_APTOS
  3525  0009D2  2002               	addwfc	?i2___wmul+1,w,c
  3526  0009D4  6EDA               	movwf	fsr2h,c
  3527  0009D6  50DF               	movf	indf2,w,c
  3528  0009D8  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3529  0009DA  500C               	movf	??i2_dispatcher,w,c
  3530  0009DC                     i2l68:
  3531  0009DC  0005               	push		;# 
  3532  0009DE  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3533  0009E2  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3534  0009E6  0E00               	movlw	0
  3535  0009E8  6E04               	movwf	i2___wmul@multiplicand+1,c
  3536  0009EA  0E6E               	movlw	110
  3537  0009EC  6E03               	movwf	i2___wmul@multiplicand,c
  3538  0009EE  EC39  F009         	call	i2___wmul	;wreg free
  3539  0009F2  0E69               	movlw	105
  3540  0009F4  2601               	addwf	?i2___wmul,f,c
  3541  0009F6  0E00               	movlw	0
  3542  0009F8  2202               	addwfc	?i2___wmul+1,f,c
  3543  0009FA  0E6E               	movlw	low _F_APTOS
  3544  0009FC  2401               	addwf	?i2___wmul,w,c
  3545  0009FE  6ED9               	movwf	fsr2l,c
  3546  000A00  0E02               	movlw	high _F_APTOS
  3547  000A02  2002               	addwfc	?i2___wmul+1,w,c
  3548  000A04  6EDA               	movwf	fsr2h,c
  3549  000A06  06DE               	decf	postinc2,f,c
  3550  000A08  0E00               	movlw	0
  3551  000A0A  5ADD               	subwfb	postdec2,f,c
  3552  000A0C  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3553  000A10  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3554  000A14  0E00               	movlw	0
  3555  000A16  6E04               	movwf	i2___wmul@multiplicand+1,c
  3556  000A18  0E6E               	movlw	110
  3557  000A1A  6E03               	movwf	i2___wmul@multiplicand,c
  3558  000A1C  EC39  F009         	call	i2___wmul	;wreg free
  3559  000A20  0E69               	movlw	105
  3560  000A22  2601               	addwf	?i2___wmul,f,c
  3561  000A24  0E00               	movlw	0
  3562  000A26  2202               	addwfc	?i2___wmul+1,f,c
  3563  000A28  0E6E               	movlw	low _F_APTOS
  3564  000A2A  2401               	addwf	?i2___wmul,w,c
  3565  000A2C  6ED9               	movwf	fsr2l,c
  3566  000A2E  0E02               	movlw	high _F_APTOS
  3567  000A30  2002               	addwfc	?i2___wmul+1,w,c
  3568  000A32  6EDA               	movwf	fsr2h,c
  3569  000A34  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3570  000A38  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3571  000A3C  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3572  000A40  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3573  000A44  0E00               	movlw	0
  3574  000A46  6E04               	movwf	i2___wmul@multiplicand+1,c
  3575  000A48  0E6E               	movlw	110
  3576  000A4A  6E03               	movwf	i2___wmul@multiplicand,c
  3577  000A4C  EC39  F009         	call	i2___wmul	;wreg free
  3578  000A50  0E09               	movlw	9
  3579  000A52  2601               	addwf	?i2___wmul,f,c
  3580  000A54  0E00               	movlw	0
  3581  000A56  2202               	addwfc	?i2___wmul+1,f,c
  3582  000A58  0E6E               	movlw	low _F_APTOS
  3583  000A5A  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3584  000A5C  0E02               	movlw	high _F_APTOS
  3585  000A5E  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3586  000A60  5001               	movf	?i2___wmul,w,c
  3587  000A62  260C               	addwf	??i2_dispatcher,f,c
  3588  000A64  5002               	movf	?i2___wmul+1,w,c
  3589  000A66  220D               	addwfc	??i2_dispatcher+1,f,c
  3590  000A68  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3591  000A6C  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3592  000A70  0E00               	movlw	0
  3593  000A72  6E04               	movwf	i2___wmul@multiplicand+1,c
  3594  000A74  0E03               	movlw	3
  3595  000A76  6E03               	movwf	i2___wmul@multiplicand,c
  3596  000A78  EC39  F009         	call	i2___wmul	;wreg free
  3597  000A7C  5001               	movf	?i2___wmul,w,c
  3598  000A7E  240C               	addwf	??i2_dispatcher,w,c
  3599  000A80  6ED9               	movwf	fsr2l,c
  3600  000A82  5002               	movf	?i2___wmul+1,w,c
  3601  000A84  200D               	addwfc	??i2_dispatcher+1,w,c
  3602  000A86  6EDA               	movwf	fsr2h,c
  3603  000A88  50DF               	movf	indf2,w,c
  3604  000A8A  6EFF               	movwf	tosu,c	;volatile
  3605  000A8C  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3606  000A90  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3607  000A94  0E00               	movlw	0
  3608  000A96  6E04               	movwf	i2___wmul@multiplicand+1,c
  3609  000A98  0E6E               	movlw	110
  3610  000A9A  6E03               	movwf	i2___wmul@multiplicand,c
  3611  000A9C  EC39  F009         	call	i2___wmul	;wreg free
  3612  000AA0  0E69               	movlw	105
  3613  000AA2  2601               	addwf	?i2___wmul,f,c
  3614  000AA4  0E00               	movlw	0
  3615  000AA6  2202               	addwfc	?i2___wmul+1,f,c
  3616  000AA8  0E6E               	movlw	low _F_APTOS
  3617  000AAA  2401               	addwf	?i2___wmul,w,c
  3618  000AAC  6ED9               	movwf	fsr2l,c
  3619  000AAE  0E02               	movlw	high _F_APTOS
  3620  000AB0  2002               	addwfc	?i2___wmul+1,w,c
  3621  000AB2  6EDA               	movwf	fsr2h,c
  3622  000AB4  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3623  000AB8  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3624  000ABC  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3625  000AC0  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3626  000AC4  0E00               	movlw	0
  3627  000AC6  6E04               	movwf	i2___wmul@multiplicand+1,c
  3628  000AC8  0E6E               	movlw	110
  3629  000ACA  6E03               	movwf	i2___wmul@multiplicand,c
  3630  000ACC  EC39  F009         	call	i2___wmul	;wreg free
  3631  000AD0  0E09               	movlw	9
  3632  000AD2  2601               	addwf	?i2___wmul,f,c
  3633  000AD4  0E00               	movlw	0
  3634  000AD6  2202               	addwfc	?i2___wmul+1,f,c
  3635  000AD8  0E6E               	movlw	low _F_APTOS
  3636  000ADA  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3637  000ADC  0E02               	movlw	high _F_APTOS
  3638  000ADE  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3639  000AE0  5001               	movf	?i2___wmul,w,c
  3640  000AE2  260C               	addwf	??i2_dispatcher,f,c
  3641  000AE4  5002               	movf	?i2___wmul+1,w,c
  3642  000AE6  220D               	addwfc	??i2_dispatcher+1,f,c
  3643  000AE8  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3644  000AEC  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3645  000AF0  0E00               	movlw	0
  3646  000AF2  6E04               	movwf	i2___wmul@multiplicand+1,c
  3647  000AF4  0E03               	movlw	3
  3648  000AF6  6E03               	movwf	i2___wmul@multiplicand,c
  3649  000AF8  EC39  F009         	call	i2___wmul	;wreg free
  3650  000AFC  5001               	movf	?i2___wmul,w,c
  3651  000AFE  260C               	addwf	??i2_dispatcher,f,c
  3652  000B00  5002               	movf	?i2___wmul+1,w,c
  3653  000B02  220D               	addwfc	??i2_dispatcher+1,f,c
  3654  000B04  0E01               	movlw	1
  3655  000B06  240C               	addwf	??i2_dispatcher,w,c
  3656  000B08  6ED9               	movwf	fsr2l,c
  3657  000B0A  0E00               	movlw	0
  3658  000B0C  200D               	addwfc	??i2_dispatcher+1,w,c
  3659  000B0E  6EDA               	movwf	fsr2h,c
  3660  000B10  50DF               	movf	indf2,w,c
  3661  000B12  6EFD               	movwf	tosl,c	;volatile
  3662  000B14  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3663  000B18  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3664  000B1C  0E00               	movlw	0
  3665  000B1E  6E04               	movwf	i2___wmul@multiplicand+1,c
  3666  000B20  0E6E               	movlw	110
  3667  000B22  6E03               	movwf	i2___wmul@multiplicand,c
  3668  000B24  EC39  F009         	call	i2___wmul	;wreg free
  3669  000B28  0E69               	movlw	105
  3670  000B2A  2601               	addwf	?i2___wmul,f,c
  3671  000B2C  0E00               	movlw	0
  3672  000B2E  2202               	addwfc	?i2___wmul+1,f,c
  3673  000B30  0E6E               	movlw	low _F_APTOS
  3674  000B32  2401               	addwf	?i2___wmul,w,c
  3675  000B34  6ED9               	movwf	fsr2l,c
  3676  000B36  0E02               	movlw	high _F_APTOS
  3677  000B38  2002               	addwfc	?i2___wmul+1,w,c
  3678  000B3A  6EDA               	movwf	fsr2h,c
  3679  000B3C  CFDE F00F          	movff	postinc2,i2_dispatcher$1302
  3680  000B40  CFDD F010          	movff	postdec2,i2_dispatcher$1302+1
  3681  000B44  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3682  000B48  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3683  000B4C  0E00               	movlw	0
  3684  000B4E  6E04               	movwf	i2___wmul@multiplicand+1,c
  3685  000B50  0E6E               	movlw	110
  3686  000B52  6E03               	movwf	i2___wmul@multiplicand,c
  3687  000B54  EC39  F009         	call	i2___wmul	;wreg free
  3688  000B58  0E09               	movlw	9
  3689  000B5A  2601               	addwf	?i2___wmul,f,c
  3690  000B5C  0E00               	movlw	0
  3691  000B5E  2202               	addwfc	?i2___wmul+1,f,c
  3692  000B60  0E6E               	movlw	low _F_APTOS
  3693  000B62  6E0C               	movwf	??i2_dispatcher& (0+255),c
  3694  000B64  0E02               	movlw	high _F_APTOS
  3695  000B66  6E0D               	movwf	(??i2_dispatcher+1)& (0+255),c
  3696  000B68  5001               	movf	?i2___wmul,w,c
  3697  000B6A  260C               	addwf	??i2_dispatcher,f,c
  3698  000B6C  5002               	movf	?i2___wmul+1,w,c
  3699  000B6E  220D               	addwfc	??i2_dispatcher+1,f,c
  3700  000B70  C00F  F001         	movff	i2_dispatcher$1302,i2___wmul@multiplier
  3701  000B74  C010  F002         	movff	i2_dispatcher$1302+1,i2___wmul@multiplier+1
  3702  000B78  0E00               	movlw	0
  3703  000B7A  6E04               	movwf	i2___wmul@multiplicand+1,c
  3704  000B7C  0E03               	movlw	3
  3705  000B7E  6E03               	movwf	i2___wmul@multiplicand,c
  3706  000B80  EC39  F009         	call	i2___wmul	;wreg free
  3707  000B84  5001               	movf	?i2___wmul,w,c
  3708  000B86  260C               	addwf	??i2_dispatcher,f,c
  3709  000B88  5002               	movf	?i2___wmul+1,w,c
  3710  000B8A  220D               	addwfc	??i2_dispatcher+1,f,c
  3711  000B8C  0E02               	movlw	2
  3712  000B8E  240C               	addwf	??i2_dispatcher,w,c
  3713  000B90  6ED9               	movwf	fsr2l,c
  3714  000B92  0E00               	movlw	0
  3715  000B94  200D               	addwfc	??i2_dispatcher+1,w,c
  3716  000B96  6EDA               	movwf	fsr2h,c
  3717  000B98  50DF               	movf	indf2,w,c
  3718  000B9A  6EFE               	movwf	tosh,c	;volatile
  3719  000B9C  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3720  000BA0  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3721  000BA4  0E00               	movlw	0
  3722  000BA6  6E04               	movwf	i2___wmul@multiplicand+1,c
  3723  000BA8  0E6E               	movlw	110
  3724  000BAA  6E03               	movwf	i2___wmul@multiplicand,c
  3725  000BAC  EC39  F009         	call	i2___wmul	;wreg free
  3726  000BB0  0E69               	movlw	105
  3727  000BB2  2601               	addwf	?i2___wmul,f,c
  3728  000BB4  0E00               	movlw	0
  3729  000BB6  2202               	addwfc	?i2___wmul+1,f,c
  3730  000BB8  0E6E               	movlw	low _F_APTOS
  3731  000BBA  2401               	addwf	?i2___wmul,w,c
  3732  000BBC  6ED9               	movwf	fsr2l,c
  3733  000BBE  0E02               	movlw	high _F_APTOS
  3734  000BC0  2002               	addwfc	?i2___wmul+1,w,c
  3735  000BC2  6EDA               	movwf	fsr2h,c
  3736  000BC4  50DE               	movf	postinc2,w,c
  3737  000BC6  10DE               	iorwf	postinc2,w,c
  3738  000BC8  A4D8               	btfss	status,2,c
  3739  000BCA  D708               	goto	i2l68
  3740  000BCC                     i2u53_40:
  3741  000BCC  C16E  F001         	movff	_task_running,i2___wmul@multiplier
  3742  000BD0  C16F  F002         	movff	_task_running+1,i2___wmul@multiplier+1
  3743  000BD4  0E00               	movlw	0
  3744  000BD6  6E04               	movwf	i2___wmul@multiplicand+1,c
  3745  000BD8  0E6E               	movlw	110
  3746  000BDA  6E03               	movwf	i2___wmul@multiplicand,c
  3747  000BDC  EC39  F009         	call	i2___wmul	;wreg free
  3748  000BE0  0E08               	movlw	8
  3749  000BE2  2601               	addwf	?i2___wmul,f,c
  3750  000BE4  0E00               	movlw	0
  3751  000BE6  2202               	addwfc	?i2___wmul+1,f,c
  3752  000BE8  0E6E               	movlw	low _F_APTOS
  3753  000BEA  2401               	addwf	?i2___wmul,w,c
  3754  000BEC  6ED9               	movwf	fsr2l,c
  3755  000BEE  0E02               	movlw	high _F_APTOS
  3756  000BF0  2002               	addwfc	?i2___wmul+1,w,c
  3757  000BF2  6EDA               	movwf	fsr2h,c
  3758  000BF4  0E02               	movlw	2
  3759  000BF6  6EDF               	movwf	indf2,c
  3760  000BF8  8EF2               	bsf	intcon,7,c	;volatile
  3761                           
  3762                           ;kernel.c: 44: (INTCONbits.GIE = 1);
  3763  000BFA  8EF2               	bsf	intcon,7,c	;volatile
  3764  000BFC  0012               	return		;funcret
  3765  000BFE                     __end_ofi2_dispatcher:
  3766                           	opt stack 0
  3767                           tosu	equ	0xFFF
  3768                           tosh	equ	0xFFE
  3769                           tosl	equ	0xFFD
  3770                           stkptr	equ	0xFFC
  3771                           pclatu	equ	0xFFB
  3772                           pclath	equ	0xFFA
  3773                           tblptru	equ	0xFF8
  3774                           tblptrh	equ	0xFF7
  3775                           tblptrl	equ	0xFF6
  3776                           tablat	equ	0xFF5
  3777                           prodh	equ	0xFF4
  3778                           prodl	equ	0xFF3
  3779                           intcon	equ	0xFF2
  3780                           postinc0	equ	0xFEE
  3781                           fsr0h	equ	0xFEA
  3782                           fsr0l	equ	0xFE9
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           plusw1	equ	0xFE3
  3786                           fsr1h	equ	0xFE2
  3787                           fsr1l	equ	0xFE1
  3788                           bsr	equ	0xFE0
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           plusw2	equ	0xFDB
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function i2_rr_scheduler *****************
  3798 ;; Defined at:
  3799 ;;		line 12 in file "scheduler.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  rr_scheduler    2    9[COMRAM] unsigned int 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  2    6[COMRAM] unsigned int 
  3806 ;; Registers used:
  3807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3813 ;;      Params:         2       0       0       0       0       0       0
  3814 ;;      Locals:         2       0       0       0       0       0       0
  3815 ;;      Temps:          1       0       0       0       0       0       0
  3816 ;;      Totals:         5       0       0       0       0       0       0
  3817 ;;Total ram usage:        5 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    1
  3820 ;; This function calls:
  3821 ;;		i2___lwmod
  3822 ;;		i2___wmul
  3823 ;; This function is called by:
  3824 ;;		i2_dispatcher
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text18
  3829  000F0C                     __ptext18:
  3830                           	opt stack 0
  3831  000F0C                     i2_rr_scheduler:
  3832                           	opt stack 19
  3833                           
  3834                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  3835                           
  3836                           ;incstack = 0
  3837  000F0C  C16E  F00A         	movff	_task_running,i2rr_scheduler@next_task_to_run
  3838  000F10  C16F  F00B         	movff	_task_running+1,i2rr_scheduler@next_task_to_run+1
  3839  000F14                     
  3840                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  3841  000F14  0E01               	movlw	1
  3842  000F16  240A               	addwf	i2rr_scheduler@next_task_to_run,w,c
  3843  000F18  6E01               	movwf	i2___lwmod@dividend,c
  3844  000F1A  0E00               	movlw	0
  3845  000F1C  200B               	addwfc	i2rr_scheduler@next_task_to_run+1,w,c
  3846  000F1E  6E02               	movwf	i2___lwmod@dividend+1,c
  3847  000F20  C170  F003         	movff	_tasks_installed,i2___lwmod@divisor
  3848  000F24  C171  F004         	movff	_tasks_installed+1,i2___lwmod@divisor+1
  3849  000F28  EC62  F008         	call	i2___lwmod	;wreg free
  3850  000F2C  C001  F00A         	movff	?i2___lwmod,i2rr_scheduler@next_task_to_run
  3851  000F30  C002  F00B         	movff	?i2___lwmod+1,i2rr_scheduler@next_task_to_run+1
  3852                           
  3853                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  3854  000F34  C00A  F001         	movff	i2rr_scheduler@next_task_to_run,i2___wmul@multiplier
  3855  000F38  C00B  F002         	movff	i2rr_scheduler@next_task_to_run+1,i2___wmul@multiplier+1
  3856  000F3C  0E00               	movlw	0
  3857  000F3E  6E04               	movwf	i2___wmul@multiplicand+1,c
  3858  000F40  0E6E               	movlw	110
  3859  000F42  6E03               	movwf	i2___wmul@multiplicand,c
  3860  000F44  EC39  F009         	call	i2___wmul	;wreg free
  3861  000F48  0E08               	movlw	8
  3862  000F4A  2601               	addwf	?i2___wmul,f,c
  3863  000F4C  0E00               	movlw	0
  3864  000F4E  2202               	addwfc	?i2___wmul+1,f,c
  3865  000F50  0E6E               	movlw	low _F_APTOS
  3866  000F52  2401               	addwf	?i2___wmul,w,c
  3867  000F54  6ED9               	movwf	fsr2l,c
  3868  000F56  0E02               	movlw	high _F_APTOS
  3869  000F58  2002               	addwfc	?i2___wmul+1,w,c
  3870  000F5A  6EDA               	movwf	fsr2h,c
  3871  000F5C  04DE               	decf	postinc2,w,c
  3872  000F5E  A4D8               	btfss	status,2,c
  3873  000F60  D7D9               	goto	i2l147
  3874                           
  3875                           ;scheduler.c: 20: return next_task_to_run;
  3876  000F62  C00A  F007         	movff	i2rr_scheduler@next_task_to_run,?i2_rr_scheduler
  3877  000F66  C00B  F008         	movff	i2rr_scheduler@next_task_to_run+1,?i2_rr_scheduler+1
  3878  000F6A  0012               	return		;funcret
  3879  000F6C                     __end_ofi2_rr_scheduler:
  3880                           	opt stack 0
  3881                           tosu	equ	0xFFF
  3882                           tosh	equ	0xFFE
  3883                           tosl	equ	0xFFD
  3884                           stkptr	equ	0xFFC
  3885                           pclatu	equ	0xFFB
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           fsr0h	equ	0xFEA
  3896                           fsr0l	equ	0xFE9
  3897                           wreg	equ	0xFE8
  3898                           postdec1	equ	0xFE5
  3899                           plusw1	equ	0xFE3
  3900                           fsr1h	equ	0xFE2
  3901                           fsr1l	equ	0xFE1
  3902                           bsr	equ	0xFE0
  3903                           indf2	equ	0xFDF
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           plusw2	equ	0xFDB
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function i2___wmul *****************
  3912 ;; Defined at:
  3913 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  multiplier      2    0[COMRAM] unsigned int 
  3916 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  __wmul          2    4[COMRAM] unsigned int 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  2    0[COMRAM] unsigned int 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0, prodl, prodh
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3928 ;;      Params:         4       0       0       0       0       0       0
  3929 ;;      Locals:         2       0       0       0       0       0       0
  3930 ;;      Temps:          0       0       0       0       0       0       0
  3931 ;;      Totals:         6       0       0       0       0       0       0
  3932 ;;Total ram usage:        6 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; This function calls:
  3935 ;;		Nothing
  3936 ;; This function is called by:
  3937 ;;		_int_high
  3938 ;;		i2_dispatcher
  3939 ;;		i2_rr_scheduler
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text19
  3944  001272                     __ptext19:
  3945                           	opt stack 0
  3946  001272                     i2___wmul:
  3947                           	opt stack 19
  3948                           
  3949                           ;incstack = 0
  3950  001272  5001               	movf	i2___wmul@multiplier,w,c
  3951  001274  0203               	mulwf	i2___wmul@multiplicand,c
  3952  001276  CFF3 F005          	movff	prodl,i2___wmul@product
  3953  00127A  CFF4 F006          	movff	prodh,i2___wmul@product+1
  3954  00127E  5001               	movf	i2___wmul@multiplier,w,c
  3955  001280  0204               	mulwf	i2___wmul@multiplicand+1,c
  3956  001282  50F3               	movf	prodl,w,c
  3957  001284  2606               	addwf	i2___wmul@product+1,f,c
  3958  001286  5002               	movf	i2___wmul@multiplier+1,w,c
  3959  001288  0203               	mulwf	i2___wmul@multiplicand,c
  3960  00128A  50F3               	movf	prodl,w,c
  3961  00128C  2606               	addwf	i2___wmul@product+1,f,c
  3962  00128E  C005  F001         	movff	i2___wmul@product,?i2___wmul
  3963  001292  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  3964  001296  0012               	return	
  3965  001298                     __end_ofi2___wmul:
  3966                           	opt stack 0
  3967                           tosu	equ	0xFFF
  3968                           tosh	equ	0xFFE
  3969                           tosl	equ	0xFFD
  3970                           stkptr	equ	0xFFC
  3971                           pclatu	equ	0xFFB
  3972                           pclath	equ	0xFFA
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           intcon	equ	0xFF2
  3980                           postinc0	equ	0xFEE
  3981                           fsr0h	equ	0xFEA
  3982                           fsr0l	equ	0xFE9
  3983                           wreg	equ	0xFE8
  3984                           postdec1	equ	0xFE5
  3985                           plusw1	equ	0xFE3
  3986                           fsr1h	equ	0xFE2
  3987                           fsr1l	equ	0xFE1
  3988                           bsr	equ	0xFE0
  3989                           indf2	equ	0xFDF
  3990                           postinc2	equ	0xFDE
  3991                           postdec2	equ	0xFDD
  3992                           plusw2	equ	0xFDB
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function i2___lwmod *****************
  3998 ;; Defined at:
  3999 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  dividend        2    0[COMRAM] unsigned int 
  4002 ;;  divisor         2    2[COMRAM] unsigned int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  __lwmod         1    4[COMRAM] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    0[COMRAM] unsigned int 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4014 ;;      Params:         4       0       0       0       0       0       0
  4015 ;;      Locals:         1       0       0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0
  4017 ;;      Totals:         5       0       0       0       0       0       0
  4018 ;;Total ram usage:        5 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		i2_rr_scheduler
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text20
  4028  0010C4                     __ptext20:
  4029                           	opt stack 0
  4030  0010C4                     i2___lwmod:
  4031                           	opt stack 19
  4032                           
  4033                           ;incstack = 0
  4034  0010C4  5003               	movf	i2___lwmod@divisor,w,c
  4035  0010C6  1004               	iorwf	i2___lwmod@divisor+1,w,c
  4036  0010C8  B4D8               	btfsc	status,2,c
  4037  0010CA  D018               	goto	i2l627
  4038  0010CC  0E01               	movlw	1
  4039  0010CE  6E05               	movwf	i2___lwmod@counter,c
  4040  0010D0  D004               	goto	i2l622
  4041  0010D2  90D8               	bcf	status,0,c
  4042  0010D4  3603               	rlcf	i2___lwmod@divisor,f,c
  4043  0010D6  3604               	rlcf	i2___lwmod@divisor+1,f,c
  4044  0010D8  2A05               	incf	i2___lwmod@counter,f,c
  4045  0010DA                     i2l622:
  4046  0010DA  AE04               	btfss	i2___lwmod@divisor+1,7,c
  4047  0010DC  D7FA               	goto	i2l623
  4048  0010DE                     i2u43_40:
  4049  0010DE  5003               	movf	i2___lwmod@divisor,w,c
  4050  0010E0  5C01               	subwf	i2___lwmod@dividend,w,c
  4051  0010E2  5004               	movf	i2___lwmod@divisor+1,w,c
  4052  0010E4  5802               	subwfb	i2___lwmod@dividend+1,w,c
  4053  0010E6  A0D8               	btfss	status,0,c
  4054  0010E8  D004               	goto	i2l626
  4055  0010EA  5003               	movf	i2___lwmod@divisor,w,c
  4056  0010EC  5E01               	subwf	i2___lwmod@dividend,f,c
  4057  0010EE  5004               	movf	i2___lwmod@divisor+1,w,c
  4058  0010F0  5A02               	subwfb	i2___lwmod@dividend+1,f,c
  4059  0010F2                     i2l626:
  4060  0010F2  90D8               	bcf	status,0,c
  4061  0010F4  3204               	rrcf	i2___lwmod@divisor+1,f,c
  4062  0010F6  3203               	rrcf	i2___lwmod@divisor,f,c
  4063  0010F8  2E05               	decfsz	i2___lwmod@counter,f,c
  4064  0010FA  D7F1               	goto	i2u43_40
  4065  0010FC                     i2l627:
  4066  0010FC  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
  4067  001100  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4068  001104  0012               	return		;funcret
  4069  001106                     __end_ofi2___lwmod:
  4070                           	opt stack 0
  4071  0000                     tosu	equ	0xFFF
  4072                           tosh	equ	0xFFE
  4073                           tosl	equ	0xFFD
  4074                           stkptr	equ	0xFFC
  4075                           pclatu	equ	0xFFB
  4076                           pclath	equ	0xFFA
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           postinc0	equ	0xFEE
  4085                           fsr0h	equ	0xFEA
  4086                           fsr0l	equ	0xFE9
  4087                           wreg	equ	0xFE8
  4088                           postdec1	equ	0xFE5
  4089                           plusw1	equ	0xFE3
  4090                           fsr1h	equ	0xFE2
  4091                           fsr1l	equ	0xFE1
  4092                           bsr	equ	0xFE0
  4093                           indf2	equ	0xFDF
  4094                           postinc2	equ	0xFDE
  4095                           postdec2	equ	0xFDD
  4096                           plusw2	equ	0xFDB
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           tosu	equ	0xFFF
  4101                           tosh	equ	0xFFE
  4102                           tosl	equ	0xFFD
  4103                           stkptr	equ	0xFFC
  4104                           pclatu	equ	0xFFB
  4105                           pclath	equ	0xFFA
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           postinc0	equ	0xFEE
  4114                           fsr0h	equ	0xFEA
  4115                           fsr0l	equ	0xFE9
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           plusw1	equ	0xFE3
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           bsr	equ	0xFE0
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           plusw2	equ	0xFDB
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130                           	psect	text21
  4131  000000                     __ptext21:
  4132                           	opt stack 0
  4133                           tosu	equ	0xFFF
  4134                           tosh	equ	0xFFE
  4135                           tosl	equ	0xFFD
  4136                           stkptr	equ	0xFFC
  4137                           pclatu	equ	0xFFB
  4138                           pclath	equ	0xFFA
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           postinc0	equ	0xFEE
  4147                           fsr0h	equ	0xFEA
  4148                           fsr0l	equ	0xFE9
  4149                           wreg	equ	0xFE8
  4150                           postdec1	equ	0xFE5
  4151                           plusw1	equ	0xFE3
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           bsr	equ	0xFE0
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           postdec2	equ	0xFDD
  4158                           plusw2	equ	0xFDB
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163                           	psect	rparam
  4164  0000                     tosu	equ	0xFFF
  4165                           tosh	equ	0xFFE
  4166                           tosl	equ	0xFFD
  4167                           stkptr	equ	0xFFC
  4168                           pclatu	equ	0xFFB
  4169                           pclath	equ	0xFFA
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           postinc0	equ	0xFEE
  4178                           fsr0h	equ	0xFEA
  4179                           fsr0l	equ	0xFE9
  4180                           wreg	equ	0xFE8
  4181                           postdec1	equ	0xFE5
  4182                           plusw1	equ	0xFE3
  4183                           fsr1h	equ	0xFE2
  4184                           fsr1l	equ	0xFE1
  4185                           bsr	equ	0xFE0
  4186                           indf2	equ	0xFDF
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           plusw2	equ	0xFDB
  4190                           fsr2h	equ	0xFDA
  4191                           fsr2l	equ	0xFD9
  4192                           status	equ	0xFD8
  4193                           
  4194                           	psect	temp
  4195  000041                     btemp:
  4196                           	opt stack 0
  4197  000041                     	ds	1
  4198  0000                     int$flags	set	btemp
  4199  0000                     wtemp6	set	btemp+1
  4200                           tosu	equ	0xFFF
  4201                           tosh	equ	0xFFE
  4202                           tosl	equ	0xFFD
  4203                           stkptr	equ	0xFFC
  4204                           pclatu	equ	0xFFB
  4205                           pclath	equ	0xFFA
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           intcon	equ	0xFF2
  4213                           postinc0	equ	0xFEE
  4214                           fsr0h	equ	0xFEA
  4215                           fsr0l	equ	0xFE9
  4216                           wreg	equ	0xFE8
  4217                           postdec1	equ	0xFE5
  4218                           plusw1	equ	0xFE3
  4219                           fsr1h	equ	0xFE2
  4220                           fsr1l	equ	0xFE1
  4221                           bsr	equ	0xFE0
  4222                           indf2	equ	0xFDF
  4223                           postinc2	equ	0xFDE
  4224                           postdec2	equ	0xFDD
  4225                           plusw2	equ	0xFDB
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         594
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     38      64
    BANK0           128     29      45
    BANK1           256    110     114
    BANK2           256    110     110
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sem_wait@s	PTR struct sem size(2) Largest target is 16
		 -> s(BANK0[16]), 

    sem_init@s	PTR struct sem size(2) Largest target is 16
		 -> s(BANK0[16]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    S70tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), task_thre(), task_two(), task_one(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _task_one in COMRAM

    None.

Critical Paths under _task_two in COMRAM

    None.

Critical Paths under _task_thre in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    _int_high->i2_dispatcher
    i2_dispatcher->i2_rr_scheduler
    i2_rr_scheduler->i2___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _task_one in BANK0

    _task_one->_sem_wait
    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _task_two in BANK0

    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _task_thre in BANK0

    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _task_one in BANK0

    _task_one->_sem_wait
    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _task_two in BANK0

    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _task_thre in BANK0

    _delay->i1___wmul
    _dispatcher->i1___wmul
    _rr_scheduler->i1___wmul

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_create_task
    _setupOS->_create_task
    _create_task->___wmul

Critical Paths under _task_one in BANK1

    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _task_two in BANK1

    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _task_thre in BANK1

    _task_thre->_delay
    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _task_one in BANK1

    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _task_two in BANK1

    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _task_thre in BANK1

    _task_thre->_delay
    _delay->_dispatcher
    _dispatcher->_rr_scheduler
    _rr_scheduler->___lwmod
    _rr_scheduler->i1___wmul

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _task_one in BANK2

    None.

Critical Paths under _task_two in BANK2

    None.

Critical Paths under _task_thre in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _task_one in BANK3

    None.

Critical Paths under _task_two in BANK3

    None.

Critical Paths under _task_thre in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _task_one in BANK4

    None.

Critical Paths under _task_two in BANK4

    None.

Critical Paths under _task_thre in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _task_one in BANK5

    None.

Critical Paths under _task_two in BANK5

    None.

Critical Paths under _task_thre in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15478
                        _create_task
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    7739
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    7739
                                            104 BANK1      6     0      6
                                              0 BANK2    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    6312
                                             98 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             1     1      0   36890
                                             23 BANK0      1     1      0
                              _delay
                           _sem_init
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             6     4      2   16372
                                             17 BANK0      6     4      2
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_init                                             4     0      4     568
                                             15 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             1     1      0   19950
                                             26 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            1     1      0   19950
                                             97 BANK1      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_one                                             1     1      0   36890
                                             23 BANK0      1     1      0
                              _delay
                           _sem_init
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             6     4      2   16372
                                             17 BANK0      6     4      2
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_init                                             4     0      4     568
                                             15 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_two                                             1     1      0   19950
                                             26 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_thre                                            1     1      0   19950
                                             97 BANK1      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2   19950
                                             95 BANK1      2     0      2
                         _dispatcher
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) _dispatcher                                           5     5      0   13881
                                             90 BANK1      5     5      0
                       _rr_scheduler
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) _rr_scheduler                                         5     3      2    7734
                                             85 BANK1      5     3      2
                            ___lwmod
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4    5567
                                             27 BANK0      2     2      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4    1927
                                             27 BANK0      1     1      0
                                             81 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            22    22      0    6794
                                             16 COMRAM    22    22      0
                           i2___wmul
                       i2_dispatcher
 ---------------------------------------------------------------------------------
 (10) i2_dispatcher                                        5     5      0    4601
                                             11 COMRAM     5     5      0
                           i2___wmul
                     i2_rr_scheduler
 ---------------------------------------------------------------------------------
 (11) i2_rr_scheduler                                      5     3      2    2360
                                              6 COMRAM     5     3      2
                          i2___lwmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4    2081
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (12) i2___lwmod                                           5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _create_task
     ___wmul
   _setupOS
     _create_task
       ___wmul
   _start_os

 _task_one (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul
   _sem_init
   _sem_wait
     ___lwmod
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul

 _task_two (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul

 _task_thre (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul

 _task_idle (ROOT)

 _task_one (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul
   _sem_init
   _sem_wait
     ___lwmod
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul

 _task_two (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul

 _task_thre (ROOT)
   _delay
     _dispatcher
       _rr_scheduler
         ___lwmod
         i1___wmul
       i1___wmul
     i1___wmul

 _int_high (ROOT)
   i2___wmul
   i2_dispatcher
     i2___wmul
     i2_rr_scheduler
       i2___lwmod
       i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     226      17       35.8%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     6E      6E       9       43.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6E      72       7       44.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      2D       5       35.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     26      40       1       50.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14D      15        0.0%
DATA                 0      0     373       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Oct  6 22:13:16 2018

                             _s 009D                              l17 0F0A                              l79 129A  
           ___wmul@multiplicand 0164                i1___wmul@product 009B                             l123 11F0  
                           l117 103C                             l129 11BE                             _BSR 000FE0  
                           _TOS 000FFD                   create_task@id 0168                             _msg 0027  
                           wreg 000FE8                            u1551 0FBC                            i1l64 0104  
                          i1l66 0366                            i1l68 03F2                            i2l64 0712  
                          i2l66 0956                            i2l91 0D1A                            i2l68 09DC  
                          i2l92 0C5C                            i2l94 0D16                            i2l96 0D44  
                          _TOSH 000FFE                            _TOSL 000FFD                            _WREG 000FE8  
                          _TOSU 000FFF                            _main 0EA8                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0041                            prodh 000FF4                            prodl 000FF3  
                          start 000E                    ___param_bank 000000                           ?_main 0001  
               _tasks_installed 0170                           i1l147 0E4A                           i1l171 0E3E  
               __end_of___lwmod 10C4                           i1l622 1092                           i1l623 1086  
                         i1l626 10AE                           i2l147 0F14                           i1l627 10BA  
                         i2l622 10DA                           i2l623 10D2                           i2l626 10F2  
                         i2l627 10FC                           _TMR0L 000FD6                           u54_20 12A2  
                         u54_26 12A4                           _delay 1146                 create_task@task 0200  
                         pclath 000FFA                           tablat 000FF5                __end_ofi1___wmul 124A  
               __end_of_setupOS 11BA                __end_ofi2___wmul 1298                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8             i1___wmul@multiplier 0151  
                         wtemp6 0042           __size_ofi2_dispatcher 05D0              __size_ofi2___lwmod 0042  
               __initialization 0FCA                    __end_of_main 0F0C                  i2_rr_scheduler 0F0C  
                        ??_main 016E                   __activetblptr 000000                          ?_delay 015F  
                  i2_dispatcher 062E                          u143_20 1052                          u143_26 1054  
                        u144_20 11F8                          u144_26 11FA                          u145_20 11C6  
                        u145_26 11C8                          _STATUS 000FD8                          _STKPTR 000FFC  
          __size_of_create_task 005E                          ___wmul 124A          __end_ofi2_rr_scheduler 0F6C  
                     ??___lwmod 009B                          clear_0 0FEA                          clear_1 1006  
                        clear_2 1012                __end_of_int_high 0D90                create_task@prior 016A  
              __end_of_sem_init 1146                __end_of_sem_wait 0E42                __end_of_task_one 1074  
                  __pdataCOMRAM 003F                __end_of_task_two 121C               __end_ofi2___lwmod 1106  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                     ??_setupOS 016E                __end_of_start_os 12BE                      __accesstop 0080  
       __end_of__initialization 1018                   ___rparam_used 000001              i2___lwmod@dividend 0001  
                __pcstackCOMRAM 0001                   __end_of_delay 1186                 ?i2_rr_scheduler 0007  
                     ?i1___wmul 0151                       ?i2___wmul 0001                         ??_delay 009D  
                    __pbssBANK0 009D                      __pbssBANK1 016E                         ?___wmul 0162  
            __size_of_task_idle 0022              __size_of_task_thre 0032                      ??i1___wmul 009B  
                    ??i2___wmul 0005                         _F_APTOS 026E                         i2u43_40 10DE  
                       i2u53_40 0BCC                      _dispatcher 0012                       ?_int_high 0001  
             i2dispatcher@state 000E                         __Hparam 0000                       ?_sem_init 008F  
                     ?_sem_wait 0091                         __Lparam 0000                       ?_task_one 0001  
                     ?_task_two 0001                 __size_of___wmul 0028                         ___lwmod 1074  
                     ?_start_os 0001                         __pcinit 0FCA                         __ramtop 0600  
                       __ptext0 0EA8                         __ptext1 12BA                         __ptext2 1186  
                       __ptext3 0F6C                         __ptext4 124A                         __ptext5 1022  
                       __ptext6 0D90                         __ptext7 1106                         __ptext8 1146  
                       __ptext9 0012                       _T0CONbits 000FD5    rr_scheduler@next_task_to_run 0158  
                       _setupOS 1186               create_task@task_f 016C                         _quantum 003F  
                __pintcode_body 0BFE            end_of_initialization 1018               __end_of_task_idle 12BA  
                       int_func 0BFE             i2___wmul@multiplier 0001               __end_of_task_thre 11EC  
                    ??_int_high 0011                      ??_sem_init 0093                      ??_sem_wait 0093  
                    ??_task_one 0097                      ??_task_two 009A               i2_dispatcher$1302 000F  
                       postdec1 000FE5                         postdec2 000FDD                   ?_rr_scheduler 0155  
                       postinc0 000FEE                         postinc2 000FDE                      ??_start_os 0162  
         i1___wmul@multiplicand 0153                       _PORTDbits 000F83                       _TRISDbits 000F95  
                 sem_init@value 0091                     ?_dispatcher 0001                       i2___lwmod 10C4  
                 ??_create_task 016E                ??i2_rr_scheduler 0009                  ??_rr_scheduler 0157  
                __end_of___wmul 1272                   __pidataCOMRAM 12BE                i2___wmul@product 0005  
           start_initialization 0FCA               __size_ofi1___wmul 002E               __size_ofi2___wmul 0026  
                    ?i2___lwmod 0001             __end_of_create_task 0FCA                        ??___wmul 0166  
           __size_of_dispatcher 061C                     __pbssBIGRAM 026E                     __pbssCOMRAM 0027  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100                   __pcstackBANK2 0200  
             i2___lwmod@divisor 0003               i2___lwmod@counter 0005               __size_of_int_high 0D88  
                     __pintcode 0008               __size_of_sem_init 0040               __size_of_sem_wait 00B2  
             __size_of_task_one 0052               __size_of_task_two 0030                        ?___lwmod 0151  
             __size_of_start_os 0004                        ?_setupOS 0001                   ?i2_dispatcher 0001  
                __size_of_delay 0040            __end_of_rr_scheduler 0EA8                     ??i2___lwmod 0005  
               dispatcher@state 015C                     _create_task 0F6C                  ___wmul@product 0166  
                  delay@time_ms 015F  i2rr_scheduler@next_task_to_run 000A                        i1u141_20 05FA  
                      i1u136_20 1098                       _task_idle 1298                       _task_thre 11BA  
             ___wmul@multiplier 0162                        i1___wmul 121C                        i2___wmul 1272  
                ??i2_dispatcher 000C                    ??_dispatcher 015A                 _dispatcher$1301 015D  
                      __Hrparam 0000                      ?_task_idle 0001                      ?_task_thre 0001  
                      __Lrparam 0000                       int_high@i 0025              __end_of_dispatcher 062E  
         i2___wmul@multiplicand 0003                __size_of___lwmod 0050                        __ptext10 0E42  
                      __ptext11 121C                        __ptext20 10C4                        __ptext12 1074  
                      __ptext21 0000                        __ptext13 11EC                        __ptext14 11BA  
                      __ptext15 1298                        __ptext17 062E                        __ptext18 0F0C  
                      __ptext19 1272                __size_of_setupOS 0034                       sem_init@s 008F  
                     sem_wait@s 0091                   __size_of_main 0064                        _int_high 0008  
                      _sem_init 1106                        _sem_wait 0D90                        _task_one 1022  
                      _task_two 11EC                    _task_running 016E                        int$flags 0041  
                      _start_os 12BA           __size_of_rr_scheduler 0066                      _INTCONbits 000FF2  
                      intlevel1 0000                        intlevel2 0000                ___lwmod@dividend 0151  
                   ??_task_idle 008E                     ??_task_thre 0161            __end_ofi2_dispatcher 0BFE  
                  _rr_scheduler 0E42         __size_ofi2_rr_scheduler 0060                 ___lwmod@divisor 0153  
               ___lwmod@counter 009B                    ?_create_task 0168  
