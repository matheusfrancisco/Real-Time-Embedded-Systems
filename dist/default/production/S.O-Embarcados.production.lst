

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Oct 28 00:26:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4520 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76 ;;___wmul@product	offset	0
    77 ;;___wmul@multiplier	offset=-2 (param)
    78 ;;___wmul@multiplicand	offset=-4 (param)
    79 ;;SRAMalloc@pHeap	offset	0
    80 ;;SRAMalloc@temp	offset	2
    81 ;;SRAMalloc@segHeader	offset	4
    82 ;;SRAMalloc@segLen	offset	5
    83 ;;SRAMalloc@nBytes	offset=-1 (param)
    84 ;;__SRAMmerge@pSegB	offset	0
    85 ;;__SRAMmerge@uSegB	offset	2
    86 ;;__SRAMmerge@uSegA	offset	3
    87 ;;__SRAMmerge@uSum	offset	4
    88 ;;__SRAMmerge@pSegA	offset=-2 (param)
    89 ;;write_pipe@pipe	offset=-2 (param)
    90 ;;write_pipe@data	offset=-3 (param)
    91 ;;dispatcher@state	offset=-1 (param)
    92 ;;rr_scheduler@next_task_to_run	offset	0
    93 ;;___wmul@product	offset	0
    94 ;;___wmul@multiplier	offset=-2 (param)
    95 ;;___wmul@multiplicand	offset=-4 (param)
    96 ;;___lwmod@counter	offset	0
    97 ;;___lwmod@dividend	offset=-2 (param)
    98 ;;___lwmod@divisor	offset=-4 (param)
    99 ;;create_pipe@pipe	offset=-2 (param)
   100 ;;createAviao@av	offset=-2 (param)
   101 ;;createAviao@tempo_v	offset=-4 (param)
   102 ;;createAviao@tempo_p	offset=-6 (param)
   103 ;;createAviao@numero	offset=-8 (param)
   104 ;;SRAMalloc@pHeap	offset	0
   105 ;;SRAMalloc@temp	offset	2
   106 ;;SRAMalloc@segHeader	offset	4
   107 ;;SRAMalloc@segLen	offset	5
   108 ;;SRAMalloc@nBytes	offset=-1 (param)
   109 ;;__SRAMmerge@pSegB	offset	0
   110 ;;__SRAMmerge@uSegB	offset	2
   111 ;;__SRAMmerge@uSegA	offset	3
   112 ;;__SRAMmerge@uSum	offset	4
   113 ;;__SRAMmerge@pSegA	offset=-2 (param)
   114 ;;ctpista@tp_549	offset	0
   115 ;;ctpista@tv_548	offset	2
   116 ;;ctpista@n_547	offset	4
   117 ;;ctpista@tp	offset	6
   118 ;;ctpista@tv	offset	8
   119 ;;ctpista@n	offset	10
   120 ;;ctpista@dado	offset	12
   121 ;;sem_wait@s	offset=-2 (param)
   122 ;;sem_post@s	offset=-2 (param)
   123 ;;read_pipe@dado	offset	0
   124 ;;read_pipe@pipe	offset=-2 (param)
   125 ;;delay@time_ms	offset=-2 (param)
   126 ;;dispatcher@state	offset=-1 (param)
   127 ;;rr_scheduler@next_task_to_run	offset	0
   128 ;;___wmul@product	offset	0
   129 ;;___wmul@multiplier	offset=-2 (param)
   130 ;;___wmul@multiplicand	offset=-4 (param)
   131 ;;___lwmod@counter	offset	0
   132 ;;___lwmod@dividend	offset=-2 (param)
   133 ;;___lwmod@divisor	offset=-4 (param)
   134                           
   135                           	psect	idataCOMRAM
   136  001670                     __pidataCOMRAM:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _quantum
   140  001670  0004               	dw	4
   141  0000                     _TOS	set	4093
   142  0000                     _TMR0L	set	4054
   143  0000                     _T0CONbits	set	4053
   144  0000                     _PORTDbits	set	3971
   145  0000                     _TRISDbits	set	3989
   146  0000                     _STKPTR	set	4092
   147  0000                     _TOSH	set	4094
   148  0000                     _TOSL	set	4093
   149  0000                     _TOSU	set	4095
   150  0000                     _WREG	set	4072
   151  0000                     _STATUS	set	4056
   152  0000                     _BSR	set	4064
   153  0000                     _INTCONbits	set	4082
   154                           
   155                           ; #config settings
   156                           
   157                           	psect	cinit
   158  00159A                     __pcinit:
   159                           	opt stack 0
   160  00159A                     start_initialization:
   161                           	opt stack 0
   162  00159A                     __initialization:
   163                           	opt stack 0
   164                           
   165                           ; Initialize objects allocated to COMRAM (2 bytes)
   166                           ; load TBLPTR registers with __pidataCOMRAM
   167  00159A  0E70               	movlw	low __pidataCOMRAM
   168  00159C  6EF6               	movwf	tblptrl,c
   169  00159E  0E16               	movlw	high __pidataCOMRAM
   170  0015A0  6EF7               	movwf	tblptrh,c
   171  0015A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   172  0015A4  6EF8               	movwf	tblptru,c
   173  0015A6  0009               	tblrd		*+	;fetch initializer
   174  0015A8  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   175  0015AC  0009               	tblrd		*+	;fetch initializer
   176  0015AE  CFF5 F06D          	movff	tablat,__pdataCOMRAM+1
   177                           
   178                           ; Clear objects allocated to BIGRAM (1062 bytes)
   179  0015B2  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   180  0015B6  EE24 F026          	lfsr	2,1062
   181  0015BA                     clear_0:
   182  0015BA  6AEE               	clrf	postinc0,c
   183  0015BC  50DD               	movf	postdec2,w,c
   184  0015BE  50D9               	movf	fsr2l,w,c
   185  0015C0  E1FC               	bnz	clear_0
   186  0015C2  50DA               	movf	fsr2h,w,c
   187  0015C4  E1FA               	bnz	clear_0
   188                           
   189                           ; Clear objects allocated to COMRAM (70 bytes)
   190  0015C6  EE00  F001         	lfsr	0,__pbssCOMRAM
   191  0015CA  0E46               	movlw	70
   192  0015CC                     clear_1:
   193  0015CC  6AEE               	clrf	postinc0,c
   194  0015CE  06E8               	decf	wreg,f,c
   195  0015D0  E1FD               	bnz	clear_1
   196  0015D2                     end_of_initialization:
   197                           	opt stack 0
   198  0015D2                     __end_of__initialization:
   199                           	opt stack 0
   200  0015D2  0100               	movlb	0
   201  0015D4  EF88  F009         	goto	_main	;jump to C main() function
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec2	equ	0xFDD
   209                           fsr2h	equ	0xFDA
   210                           fsr2l	equ	0xFD9
   211                           
   212                           	psect	bssCOMRAM
   213  000001                     __pbssCOMRAM:
   214                           	opt stack 0
   215  000001                     _task_running:
   216                           	opt stack 0
   217  000001                     	ds	2
   218  000003                     _tasks_installed:
   219                           	opt stack 0
   220  000003                     	ds	2
   221  000005                     _pista:
   222                           	opt stack 0
   223  000005                     	ds	24
   224  00001D                     _semafaro:
   225                           	opt stack 0
   226  00001D                     	ds	16
   227  00002D                     _pipe1:
   228                           	opt stack 0
   229  00002D                     	ds	14
   230  00003B                     _aviaozinho2:
   231                           	opt stack 0
   232  00003B                     	ds	6
   233  000041                     _aviaozinho1:
   234                           	opt stack 0
   235  000041                     	ds	6
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec2	equ	0xFDD
   243                           fsr2h	equ	0xFDA
   244                           fsr2l	equ	0xFD9
   245                           
   246                           	psect	dataCOMRAM
   247  00006C                     __pdataCOMRAM:
   248                           	opt stack 0
   249  00006C                     _quantum:
   250                           	opt stack 0
   251  00006C                     	ds	2
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec2	equ	0xFDD
   259                           fsr2h	equ	0xFDA
   260                           fsr2l	equ	0xFD9
   261                           
   262                           	psect	bssBIGRAM
   263  0000EE                     __pbssBIGRAM:
   264                           	opt stack 0
   265  0000EE                     _F_APTOS:
   266                           	opt stack 0
   267  0000EE                     	ds	550
   268  000314                     __uDynamicHeap:
   269                           	opt stack 0
   270  000314                     	ds	512
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec2	equ	0xFDD
   278                           fsr2h	equ	0xFDA
   279                           fsr2l	equ	0xFD9
   280                           
   281                           	psect	cstackBANK0
   282  000080                     __pcstackBANK0:
   283                           	opt stack 0
   284  000080                     create_task@task:
   285                           	opt stack 0
   286                           
   287                           ; 110 bytes @ 0x0
   288  000080                     	ds	110
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec2	equ	0xFDD
   296                           fsr2h	equ	0xFDA
   297                           fsr2l	equ	0xFD9
   298                           
   299                           	psect	cstackCOMRAM
   300  000047                     __pcstackCOMRAM:
   301                           	opt stack 0
   302  000047                     ??_int_high:
   303                           
   304                           ; 1 bytes @ 0x0
   305  000047                     	ds	15
   306  000056                     int_high@i:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xF
   310  000056                     	ds	2
   311  000058                     create_task@id:
   312                           	opt stack 0
   313  000058                     sem_init@s:
   314                           	opt stack 0
   315  000058                     SRAMInitHeap@count:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x11
   319  000058                     	ds	2
   320  00005A                     create_task@prior:
   321                           	opt stack 0
   322  00005A                     sem_init@value:
   323                           	opt stack 0
   324  00005A                     SRAMInitHeap@pHeap:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x13
   328  00005A                     	ds	2
   329  00005C                     create_task@task_f:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x15
   333  00005C                     	ds	2
   334  00005E                     main@mem:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x17
   338  00005E                     	ds	2
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           postdec2	equ	0xFDD
   346                           fsr2h	equ	0xFDA
   347                           fsr2l	equ	0xFD9
   348                           
   349 ;;
   350 ;;Main: autosize = 0, tempsize = 0, incstack = 1, save=0
   351 ;;
   352 ;; *************** function _main *****************
   353 ;; Defined at:
   354 ;;		line 15 in file "main.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  mem             2   23[COMRAM] PTR unsigned char 
   359 ;;		 -> _uDynamicHeap(512), NULL(0), 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, pro
      +dl, prodh, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   369 ;;      Params:         0       0       0       0       0       0       0
   370 ;;      Locals:         2       0       0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0
   372 ;;      Totals:         2       0       0       0       0       0       0
   373 ;;Total ram usage:        2 bytes
   374 ;; Hardware stack levels required when called:   12
   375 ;; This function calls:
   376 ;;		_SRAMInitHeap
   377 ;;		_SRAMalloc
   378 ;;		_create_task
   379 ;;		_sem_init
   380 ;;		_setupOS
   381 ;;		_start_os
   382 ;; This function is called by:
   383 ;;		Startup code after reset
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text0
   388  001310                     __ptext0:
   389                           	opt stack 0
   390  001310                     _main:
   391                           	opt stack 19
   392                           
   393                           ;main.c: 17: setupOS();
   394                           
   395                           ;incstack = 0
   396  001310  EC0B  F00B         	call	_setupOS	;wreg free
   397                           
   398                           ;main.c: 18: SRAMInitHeap();
   399  001314  EC3A  F00A         	call	_SRAMInitHeap	;wreg free
   400                           
   401                           ;main.c: 19: sem_init(&semafaro, 0);
   402  001318  0E1D               	movlw	low _semafaro
   403  00131A  6E58               	movwf	sem_init@s,c
   404  00131C  0E00               	movlw	high _semafaro
   405  00131E  6E59               	movwf	sem_init@s+1,c
   406  001320  0E00               	movlw	0
   407  001322  6E5B               	movwf	sem_init@value+1,c
   408  001324  0E00               	movlw	0
   409  001326  6E5A               	movwf	sem_init@value,c
   410  001328  ECEC  F00A         	call	_sem_init	;wreg free
   411                           
   412                           ;main.c: 23: create_task(2, 3, &ctpista);
   413  00132C  0E00               	movlw	0
   414  00132E  6E59               	movwf	create_task@id+1,c
   415  001330  0E02               	movlw	2
   416  001332  6E58               	movwf	create_task@id,c
   417  001334  0E00               	movlw	0
   418  001336  6E5B               	movwf	create_task@prior+1,c
   419  001338  0E03               	movlw	3
   420  00133A  6E5A               	movwf	create_task@prior,c
   421  00133C  0E54               	movlw	low _ctpista
   422  00133E  6E5C               	movwf	create_task@task_f,c
   423  001340  0E05               	movlw	high _ctpista
   424  001342  6E5D               	movwf	create_task@task_f+1,c
   425  001344  EC0D  F00A         	call	_create_task	;wreg free
   426                           
   427                           ;main.c: 24: create_task(3, 3, &aviao1);
   428  001348  0E00               	movlw	0
   429  00134A  6E59               	movwf	create_task@id+1,c
   430  00134C  0E03               	movlw	3
   431  00134E  6E58               	movwf	create_task@id,c
   432  001350  0E00               	movlw	0
   433  001352  6E5B               	movwf	create_task@prior+1,c
   434  001354  0E03               	movlw	3
   435  001356  6E5A               	movwf	create_task@prior,c
   436  001358  0E16               	movlw	low _aviao1
   437  00135A  6E5C               	movwf	create_task@task_f,c
   438  00135C  0E15               	movlw	high _aviao1
   439  00135E  6E5D               	movwf	create_task@task_f+1,c
   440  001360  EC0D  F00A         	call	_create_task	;wreg free
   441                           
   442                           ;main.c: 25: create_task(4, 3, &aviao2);
   443  001364  0E00               	movlw	0
   444  001366  6E59               	movwf	create_task@id+1,c
   445  001368  0E04               	movlw	4
   446  00136A  6E58               	movwf	create_task@id,c
   447  00136C  0E00               	movlw	0
   448  00136E  6E5B               	movwf	create_task@prior+1,c
   449  001370  0E03               	movlw	3
   450  001372  6E5A               	movwf	create_task@prior,c
   451  001374  0E58               	movlw	low _aviao2
   452  001376  6E5C               	movwf	create_task@task_f,c
   453  001378  0E15               	movlw	high _aviao2
   454  00137A  6E5D               	movwf	create_task@task_f+1,c
   455  00137C  EC0D  F00A         	call	_create_task	;wreg free
   456                           
   457                           ;main.c: 29: start_os();
   458  001380  EC36  F00B         	call	_start_os	;wreg free
   459                           
   460                           ;main.c: 33: byte *mem = SRAMalloc(100);
   461  001384  0E64               	movlw	100
   462  001386  6EE6               	movwf	postinc1,c
   463  001388  EC81  F003         	call	_SRAMalloc	;wreg free
   464  00138C  C060  F05E         	movff	btemp,main@mem
   465  001390  C061  F05F         	movff	btemp+1,main@mem+1
   466  001394                     l25:
   467  001394  D7FF               	goto	l25
   468  001396                     __end_of_main:
   469                           	opt stack 0
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postinc1	equ	0xFE6
   477                           postdec2	equ	0xFDD
   478                           fsr2h	equ	0xFDA
   479                           fsr2l	equ	0xFD9
   480                           
   481 ;; *************** function _start_os *****************
   482 ;; Defined at:
   483 ;;		line 127 in file "kernel.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		None
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   497 ;;      Params:         0       0       0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used:    1
   503 ;; Hardware stack levels required when called:    9
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text1
   512  00166C                     __ptext1:
   513                           	opt stack 0
   514  00166C                     _start_os:
   515                           	opt stack 21
   516                           
   517                           ;kernel.c: 132: T0CONbits.TMR0ON = 1;
   518                           
   519                           ;incstack = 0
   520  00166C  8ED5               	bsf	4053,7,c	;volatile
   521  00166E  0012               	return		;funcret
   522  001670                     __end_of_start_os:
   523                           	opt stack 0
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postinc1	equ	0xFE6
   531                           postdec2	equ	0xFDD
   532                           fsr2h	equ	0xFDA
   533                           fsr2l	equ	0xFD9
   534                           
   535 ;; *************** function _setupOS *****************
   536 ;; Defined at:
   537 ;;		line 79 in file "kernel.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   551 ;;      Params:         0       0       0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0       0       0
   554 ;;      Totals:         0       0       0       0       0       0       0
   555 ;;Total ram usage:        0 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; Hardware stack levels required when called:   11
   558 ;; This function calls:
   559 ;;		_SRAMInitHeap
   560 ;;		_create_task
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text2
   567  001616                     __ptext2:
   568                           	opt stack 0
   569  001616                     _setupOS:
   570                           	opt stack 19
   571                           
   572                           ;kernel.c: 85: T0CONbits.T0CS = 0;
   573                           
   574                           ;incstack = 0
   575  001616  9AD5               	bcf	4053,5,c	;volatile
   576                           
   577                           ;kernel.c: 86: T0CONbits.PSA = 0;
   578  001618  96D5               	bcf	4053,3,c	;volatile
   579                           
   580                           ;kernel.c: 87: T0CONbits.T0PS = 0b111;
   581  00161A  80D5               	bsf	4053,0,c	;volatile
   582  00161C  82D5               	bsf	4053,1,c	;volatile
   583  00161E  84D5               	bsf	4053,2,c	;volatile
   584                           
   585                           ;kernel.c: 88: INTCONbits.PEIE = 1;
   586  001620  8CF2               	bsf	intcon,6,c	;volatile
   587                           
   588                           ;kernel.c: 89: INTCONbits.TMR0IE = 1;
   589  001622  8AF2               	bsf	intcon,5,c	;volatile
   590                           
   591                           ;kernel.c: 90: TMR0L = 252;
   592  001624  0EFC               	movlw	252
   593  001626  6ED6               	movwf	4054,c	;volatile
   594                           
   595                           ;kernel.c: 93: create_task(1,5, &task_idle);
   596  001628  0E00               	movlw	0
   597  00162A  6E59               	movwf	create_task@id+1,c
   598  00162C  0E01               	movlw	1
   599  00162E  6E58               	movwf	create_task@id,c
   600  001630  0E00               	movlw	0
   601  001632  6E5B               	movwf	create_task@prior+1,c
   602  001634  0E05               	movlw	5
   603  001636  6E5A               	movwf	create_task@prior,c
   604  001638  0E4C               	movlw	low _task_idle
   605  00163A  6E5C               	movwf	create_task@task_f,c
   606  00163C  0E16               	movlw	high _task_idle
   607  00163E  6E5D               	movwf	create_task@task_f+1,c
   608  001640  EC0D  F00A         	call	_create_task	;wreg free
   609                           
   610                           ;kernel.c: 97: SRAMInitHeap();
   611  001644  EC3A  F00A         	call	_SRAMInitHeap	;wreg free
   612                           
   613                           ;kernel.c: 99: (INTCONbits.GIE = 1);
   614  001648  8EF2               	bsf	intcon,7,c	;volatile
   615  00164A  0012               	return		;funcret
   616  00164C                     __end_of_setupOS:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           intcon	equ	0xFF2
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postinc1	equ	0xFE6
   626                           postdec2	equ	0xFDD
   627                           fsr2h	equ	0xFDA
   628                           fsr2l	equ	0xFD9
   629                           
   630 ;; *************** function _create_task *****************
   631 ;; Defined at:
   632 ;;		line 19 in file "kernel.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  id              2   17[COMRAM] unsigned int 
   635 ;;  prior           2   19[COMRAM] unsigned int 
   636 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   637 ;;		 -> task_idle(1), aviao2(1), aviao1(1), ctpista(1), 
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  task          110    0[BANK0 ] struct tcb
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   649 ;;      Params:         6       0       0       0       0       0       0
   650 ;;      Locals:         0     110       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0
   652 ;;      Totals:         6     110       0       0       0       0       0
   653 ;;Total ram usage:      116 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:   10
   656 ;; This function calls:
   657 ;;		___wmul
   658 ;; This function is called by:
   659 ;;		_main
   660 ;;		_setupOS
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text3
   665  00141A                     __ptext3:
   666                           	opt stack 0
   667  00141A                     _create_task:
   668                           	opt stack 19
   669                           
   670                           ;kernel.c: 21: tcb_t task;
   671                           ;kernel.c: 23: task.task_id = id;
   672                           
   673                           ;incstack = 0
   674  00141A  C058  F080         	movff	create_task@id,create_task@task
   675  00141E  C059  F081         	movff	create_task@id+1,create_task@task+1
   676                           
   677                           ;kernel.c: 24: task.task_prior = prior;
   678  001422  C05A  F082         	movff	create_task@prior,create_task@task+2
   679  001426  C05B  F083         	movff	create_task@prior+1,create_task@task+3
   680                           
   681                           ;kernel.c: 25: task.task_f = task_f;
   682  00142A  C05C  F084         	movff	create_task@task_f,create_task@task+4
   683  00142E  C05D  F085         	movff	create_task@task_f+1,create_task@task+5
   684                           
   685                           ;kernel.c: 26: task.task_stack.stack_size = 0;
   686  001432  0E00               	movlw	0
   687  001434  0100               	movlb	0	; () banked
   688  001436  6FEA               	movwf	(create_task@task+106)& (0+255),b
   689  001438  0E00               	movlw	0
   690  00143A  6FE9               	movwf	(create_task@task+105)& (0+255),b
   691                           
   692                           ; BSR set to: 0
   693                           ;kernel.c: 27: task.task_state = READY;
   694  00143C  0E01               	movlw	1
   695  00143E  6F88               	movwf	(create_task@task+8)& (0+255),b
   696                           
   697                           ; BSR set to: 0
   698                           ;kernel.c: 29: F_APTOS[tasks_installed] = task;
   699  001440  0E6E               	movlw	110
   700  001442  6EE6               	movwf	postinc1,c
   701  001444  0E00               	movlw	0
   702  001446  6EE6               	movwf	postinc1,c
   703  001448  C003  FFE6         	movff	_tasks_installed,postinc1
   704  00144C  C004  FFE6         	movff	_tasks_installed+1,postinc1
   705  001450  EC3D  F009         	call	___wmul	;wreg free
   706  001454  0EEE               	movlw	low _F_APTOS
   707  001456  2460               	addwf	btemp,w,c
   708  001458  6EE9               	movwf	fsr0l,c
   709  00145A  0E00               	movlw	high _F_APTOS
   710  00145C  2061               	addwfc	btemp+1,w,c
   711  00145E  6EEA               	movwf	fsr0h,c
   712  001460  EE20  F080         	lfsr	2,create_task@task
   713  001464  0E6D               	movlw	109
   714  001466                     u411:
   715  001466  CFDB FFEB          	movff	plusw2,plusw0
   716  00146A  06E8               	decf	wreg,f,c
   717  00146C  E2FC               	bc	u411
   718                           
   719                           ;kernel.c: 30: tasks_installed++;
   720  00146E  4A03               	infsnz	_tasks_installed,f,c
   721  001470  2A04               	incf	_tasks_installed+1,f,c
   722  001472  0012               	return		;funcret
   723  001474                     __end_of_create_task:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           intcon	equ	0xFF2
   730                           postinc0	equ	0xFEE
   731                           plusw0	equ	0xFEB
   732                           fsr0h	equ	0xFEA
   733                           fsr0l	equ	0xFE9
   734                           wreg	equ	0xFE8
   735                           postinc1	equ	0xFE6
   736                           postdec2	equ	0xFDD
   737                           plusw2	equ	0xFDB
   738                           fsr2h	equ	0xFDA
   739                           fsr2l	equ	0xFD9
   740                           
   741 ;; *************** function ___wmul *****************
   742 ;; Defined at:
   743 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  multiplier      2  [STACK] unsigned int 
   746 ;;  multiplicand    2  [STACK] unsigned int 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  product         2  [STACK] unsigned int 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  2  [STACK] unsigned int 
   751 ;; Registers used:
   752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   758 ;;      Params:         0       0       0       0       0       0       0
   759 ;;      Locals:         0       0       0       0       0       0       0
   760 ;;      Temps:          0       0       0       0       0       0       0
   761 ;;      Totals:         0       0       0       0       0       0       0
   762 ;;Total ram usage:        0 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; Hardware stack levels required when called:    9
   765 ;; This function calls:
   766 ;;		Nothing
   767 ;; This function is called by:
   768 ;;		_create_task
   769 ;;		_dispatcher
   770 ;;		_delay
   771 ;;		_int_high
   772 ;;		_rr_scheduler
   773 ;;		_sem_post
   774 ;;		_write_pipe
   775 ;;		_read_pipe
   776 ;;		_get_id
   777 ;;		_prior_scheduler
   778 ;; This function uses a reentrant model
   779 ;;
   780                           
   781                           	psect	text4
   782  00127A                     __ptext4:
   783                           	opt stack 0
   784  00127A                     ___wmul:
   785                           	opt stack 0
   786                           
   787                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   788  00127A  52E6               	movf	postinc1,f,c
   789  00127C  52E6               	movf	postinc1,f,c
   790                           
   791                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   792                           
   793                           ;incstack = 0
   794  00127E  0EFA               	movlw	-6
   795  001280  CFE3 F06B          	movff	plusw1,btemp+11
   796                           
   797                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   798  001284  0EFC               	movlw	-4
   799  001286  50E3               	movf	plusw1,w,c
   800  001288  026B               	mulwf	btemp+11,c
   801                           
   802                           ;stkvar	___wmul@product @ sp[(-2)+0]
   803  00128A  0EFE               	movlw	-2
   804  00128C  CFF3 FFE3          	movff	prodl,plusw1
   805  001290  0EFF               	movlw	-1
   806  001292  CFF4 FFE3          	movff	prodh,plusw1
   807                           
   808                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   809  001296  0EFB               	movlw	251
   810  001298  24E1               	addwf	fsr1l,w,c
   811  00129A  6ED9               	movwf	fsr2l,c
   812  00129C  0EFF               	movlw	255
   813  00129E  20E2               	addwfc	fsr1h,w,c
   814  0012A0  6EDA               	movwf	fsr2h,c
   815  0012A2  50DF               	movf	indf2,w,c
   816  0012A4  6E6B               	movwf	btemp+11,c
   817                           
   818                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   819  0012A6  0EFC               	movlw	-4
   820  0012A8  50E3               	movf	plusw1,w,c
   821  0012AA  026B               	mulwf	btemp+11,c
   822  0012AC  CFF3 FFF4          	movff	prodl,prodh
   823  0012B0  6AF3               	clrf	prodl,c
   824                           
   825                           ;stkvar	___wmul@product @ sp[(-2)+0]
   826  0012B2  50E1               	movf	fsr1l,w,c
   827  0012B4  0FFE               	addlw	-2
   828  0012B6  6ED9               	movwf	fsr2l,c
   829  0012B8  50E2               	movf	fsr1h,w,c
   830  0012BA  6EDA               	movwf	fsr2h,c
   831  0012BC  0EFF               	movlw	255
   832  0012BE  22DA               	addwfc	fsr2h,f,c
   833  0012C0  50F3               	movf	prodl,w,c
   834  0012C2  26DE               	addwf	postinc2,f,c
   835  0012C4  50F4               	movf	prodh,w,c
   836  0012C6  22DD               	addwfc	postdec2,f,c
   837                           
   838                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   839  0012C8  0EFA               	movlw	-6
   840  0012CA  CFE3 F06B          	movff	plusw1,btemp+11
   841                           
   842                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   843  0012CE  0EFD               	movlw	253
   844  0012D0  24E1               	addwf	fsr1l,w,c
   845  0012D2  6ED9               	movwf	fsr2l,c
   846  0012D4  0EFF               	movlw	255
   847  0012D6  20E2               	addwfc	fsr1h,w,c
   848  0012D8  6EDA               	movwf	fsr2h,c
   849  0012DA  50DF               	movf	indf2,w,c
   850  0012DC  026B               	mulwf	btemp+11,c
   851  0012DE  CFF3 FFF4          	movff	prodl,prodh
   852  0012E2  6AF3               	clrf	prodl,c
   853                           
   854                           ;stkvar	___wmul@product @ sp[(-2)+0]
   855  0012E4  50E1               	movf	fsr1l,w,c
   856  0012E6  0FFE               	addlw	-2
   857  0012E8  6ED9               	movwf	fsr2l,c
   858  0012EA  50E2               	movf	fsr1h,w,c
   859  0012EC  6EDA               	movwf	fsr2h,c
   860  0012EE  0EFF               	movlw	255
   861  0012F0  22DA               	addwfc	fsr2h,f,c
   862  0012F2  50F3               	movf	prodl,w,c
   863  0012F4  26DE               	addwf	postinc2,f,c
   864  0012F6  50F4               	movf	prodh,w,c
   865  0012F8  22DD               	addwfc	postdec2,f,c
   866                           
   867                           ;stkvar	___wmul@product @ sp[(-2)+0]
   868  0012FA  0EFE               	movlw	-2
   869  0012FC  CFE3 F060          	movff	plusw1,btemp
   870  001300  0EFF               	movlw	-1
   871  001302  CFE3 F061          	movff	plusw1,btemp+1
   872                           
   873                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   874  001306  0EFA               	movlw	250
   875  001308  26E1               	addwf	fsr1l,f,c
   876  00130A  0EFF               	movlw	255
   877  00130C  22E2               	addwfc	fsr1h,f,c
   878  00130E  0012               	return		;funcret
   879  001310                     __end_of___wmul:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           prodh	equ	0xFF4
   886                           prodl	equ	0xFF3
   887                           intcon	equ	0xFF2
   888                           postinc0	equ	0xFEE
   889                           plusw0	equ	0xFEB
   890                           fsr0h	equ	0xFEA
   891                           fsr0l	equ	0xFE9
   892                           wreg	equ	0xFE8
   893                           postinc1	equ	0xFE6
   894                           plusw1	equ	0xFE3
   895                           fsr1h	equ	0xFE2
   896                           fsr1l	equ	0xFE1
   897                           indf2	equ	0xFDF
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           plusw2	equ	0xFDB
   901                           fsr2h	equ	0xFDA
   902                           fsr2l	equ	0xFD9
   903                           
   904 ;; *************** function _SRAMInitHeap *****************
   905 ;; Defined at:
   906 ;;		line 300 in file "memory.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  count           2   17[COMRAM] unsigned int 
   911 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   912 ;;		 -> _uDynamicHeap(512), 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   922 ;;      Params:         0       0       0       0       0       0       0
   923 ;;      Locals:         4       0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0
   925 ;;      Totals:         4       0       0       0       0       0       0
   926 ;;Total ram usage:        4 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    9
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;;		_setupOS
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text5
   938  001474                     __ptext5:
   939                           	opt stack 0
   940  001474                     _SRAMInitHeap:
   941                           	opt stack 20
   942                           
   943                           ;memory.c: 302: unsigned char * near pHeap;
   944                           ;memory.c: 303: near unsigned int count;
   945                           ;memory.c: 305: pHeap = _uDynamicHeap;
   946                           
   947                           ;incstack = 0
   948  001474  0E14               	movlw	low __uDynamicHeap
   949  001476  6E5A               	movwf	SRAMInitHeap@pHeap,c
   950  001478  0E03               	movlw	high __uDynamicHeap
   951  00147A  6E5B               	movwf	SRAMInitHeap@pHeap+1,c
   952                           
   953                           ;memory.c: 306: count = 0x200-1;
   954  00147C  0E01               	movlw	1
   955  00147E  6E59               	movwf	SRAMInitHeap@count+1,c
   956  001480  6858               	setf	SRAMInitHeap@count,c
   957  001482                     
   958                           ;memory.c: 309: {
   959                           ;memory.c: 310: if (count > 0x7F)
   960  001482  5059               	movf	SRAMInitHeap@count+1,w,c
   961  001484  E104               	bnz	u100
   962  001486  0E80               	movlw	128
   963  001488  5C58               	subwf	SRAMInitHeap@count,w,c
   964  00148A  A0D8               	btfss	status,0,c
   965  00148C  D011               	goto	l247
   966  00148E                     u100:
   967                           
   968                           ;memory.c: 311: {
   969                           ;memory.c: 312: *pHeap = 0x7F;
   970  00148E  C05A  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   971  001492  C05B  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   972  001496  0E7F               	movlw	127
   973  001498  6EDF               	movwf	indf2,c
   974                           
   975                           ;memory.c: 313: pHeap += 0x7F;
   976  00149A  0E7F               	movlw	127
   977  00149C  265A               	addwf	SRAMInitHeap@pHeap,f,c
   978  00149E  0E00               	movlw	0
   979  0014A0  225B               	addwfc	SRAMInitHeap@pHeap+1,f,c
   980                           
   981                           ;memory.c: 314: count = count - 0x7F;
   982  0014A2  0E81               	movlw	129
   983  0014A4  2458               	addwf	SRAMInitHeap@count,w,c
   984  0014A6  6E58               	movwf	SRAMInitHeap@count,c
   985  0014A8  0EFF               	movlw	255
   986  0014AA  2059               	addwfc	SRAMInitHeap@count+1,w,c
   987  0014AC  6E59               	movwf	SRAMInitHeap@count+1,c
   988                           
   989                           ;memory.c: 315: }
   990  0014AE  D7E9               	goto	l246
   991  0014B0                     l247:
   992                           
   993                           ;memory.c: 316: else
   994                           ;memory.c: 317: {
   995                           ;memory.c: 318: *pHeap = count;
   996  0014B0  C05A  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   997  0014B4  C05B  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   998  0014B8  C058  FFDF         	movff	SRAMInitHeap@count,indf2
   999                           
  1000                           ;memory.c: 319: *(pHeap + count) = 0;
  1001  0014BC  5058               	movf	SRAMInitHeap@count,w,c
  1002  0014BE  245A               	addwf	SRAMInitHeap@pHeap,w,c
  1003  0014C0  6ED9               	movwf	fsr2l,c
  1004  0014C2  5059               	movf	SRAMInitHeap@count+1,w,c
  1005  0014C4  205B               	addwfc	SRAMInitHeap@pHeap+1,w,c
  1006  0014C6  6EDA               	movwf	fsr2h,c
  1007  0014C8  0E00               	movlw	0
  1008  0014CA  6EDF               	movwf	indf2,c
  1009                           
  1010                           ;memory.c: 320: return;
  1011  0014CC  0012               	return	
  1012  0014CE                     __end_of_SRAMInitHeap:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           prodh	equ	0xFF4
  1019                           prodl	equ	0xFF3
  1020                           intcon	equ	0xFF2
  1021                           postinc0	equ	0xFEE
  1022                           plusw0	equ	0xFEB
  1023                           fsr0h	equ	0xFEA
  1024                           fsr0l	equ	0xFE9
  1025                           wreg	equ	0xFE8
  1026                           postinc1	equ	0xFE6
  1027                           plusw1	equ	0xFE3
  1028                           fsr1h	equ	0xFE2
  1029                           fsr1l	equ	0xFE1
  1030                           indf2	equ	0xFDF
  1031                           postinc2	equ	0xFDE
  1032                           postdec2	equ	0xFDD
  1033                           plusw2	equ	0xFDB
  1034                           fsr2h	equ	0xFDA
  1035                           fsr2l	equ	0xFD9
  1036                           status	equ	0xFD8
  1037                           
  1038 ;; *************** function _sem_init *****************
  1039 ;; Defined at:
  1040 ;;		line 6 in file "semaphore.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  s               2   17[COMRAM] PTR struct sem
  1043 ;;		 -> semafaro(16), 
  1044 ;;  value           2   19[COMRAM] int 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1056 ;;      Params:         4       0       0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0       0       0
  1059 ;;      Totals:         4       0       0       0       0       0       0
  1060 ;;Total ram usage:        4 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    9
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text6
  1071  0015D8                     __ptext6:
  1072                           	opt stack 0
  1073  0015D8                     _sem_init:
  1074                           	opt stack 21
  1075                           
  1076                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1077                           
  1078                           ;incstack = 0
  1079  0015D8  9EF2               	bcf	intcon,7,c	;volatile
  1080                           
  1081                           ;semaphore.c: 10: s->contador = value;
  1082  0015DA  C058  FFD9         	movff	sem_init@s,fsr2l
  1083  0015DE  C059  FFDA         	movff	sem_init@s+1,fsr2h
  1084  0015E2  C05A  FFDE         	movff	sem_init@value,postinc2
  1085  0015E6  C05B  FFDD         	movff	sem_init@value+1,postdec2
  1086                           
  1087                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1088  0015EA  EE20 F00C          	lfsr	2,12
  1089  0015EE  5058               	movf	sem_init@s,w,c
  1090  0015F0  26D9               	addwf	fsr2l,f,c
  1091  0015F2  5059               	movf	sem_init@s+1,w,c
  1092  0015F4  22DA               	addwfc	fsr2h,f,c
  1093  0015F6  0E00               	movlw	0
  1094  0015F8  6EDE               	movwf	postinc2,c
  1095  0015FA  0E00               	movlw	0
  1096  0015FC  6EDD               	movwf	postdec2,c
  1097                           
  1098                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1099  0015FE  EE20 F00E          	lfsr	2,14
  1100  001602  5058               	movf	sem_init@s,w,c
  1101  001604  26D9               	addwf	fsr2l,f,c
  1102  001606  5059               	movf	sem_init@s+1,w,c
  1103  001608  22DA               	addwfc	fsr2h,f,c
  1104  00160A  0E00               	movlw	0
  1105  00160C  6EDE               	movwf	postinc2,c
  1106  00160E  0E00               	movlw	0
  1107  001610  6EDD               	movwf	postdec2,c
  1108                           
  1109                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1110  001612  8EF2               	bsf	intcon,7,c	;volatile
  1111  001614  0012               	return		;funcret
  1112  001616                     __end_of_sem_init:
  1113                           	opt stack 0
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           prodh	equ	0xFF4
  1119                           prodl	equ	0xFF3
  1120                           intcon	equ	0xFF2
  1121                           postinc0	equ	0xFEE
  1122                           plusw0	equ	0xFEB
  1123                           fsr0h	equ	0xFEA
  1124                           fsr0l	equ	0xFE9
  1125                           wreg	equ	0xFE8
  1126                           postinc1	equ	0xFE6
  1127                           plusw1	equ	0xFE3
  1128                           fsr1h	equ	0xFE2
  1129                           fsr1l	equ	0xFE1
  1130                           indf2	equ	0xFDF
  1131                           postinc2	equ	0xFDE
  1132                           postdec2	equ	0xFDD
  1133                           plusw2	equ	0xFDB
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _SRAMalloc *****************
  1139 ;; Defined at:
  1140 ;;		line 178 in file "memory.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  nBytes          1  [STACK] near unsigned char 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  pHeap           2  [STACK] near PTR struct _SALLOC
  1145 ;;		 -> _uDynamicHeap(512), 
  1146 ;;  temp            2  [STACK] near PTR struct _SALLOC
  1147 ;;		 -> _uDynamicHeap(512), 
  1148 ;;  segHeader       1  [STACK] struct _SALLOC
  1149 ;;  segLen          1  [STACK] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  2  [STACK] PTR unsigned char 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1159 ;;      Params:         0       0       0       0       0       0       0
  1160 ;;      Locals:         0       0       0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0
  1162 ;;      Totals:         0       0       0       0       0       0       0
  1163 ;;Total ram usage:        0 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:   10
  1166 ;; This function calls:
  1167 ;;		__SRAMmerge
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;;		_createAviao
  1171 ;; This function uses a reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text7
  1175  000702                     __ptext7:
  1176                           	opt stack 0
  1177  000702                     _SRAMalloc:
  1178                           	opt stack 0
  1179                           
  1180                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1181  000702  0E06               	movlw	6
  1182  000704  26E1               	addwf	fsr1l,f,c
  1183  000706  0E00               	movlw	0
  1184  000708  22E2               	addwfc	fsr1h,f,c
  1185                           
  1186                           ;memory.c: 180: SALLOC * near pHeap;
  1187                           ;memory.c: 181: SALLOC * near temp;
  1188                           ;memory.c: 182: near SALLOC segHeader;
  1189                           ;memory.c: 183: near unsigned char segLen;
  1190                           ;memory.c: 186: if (nBytes > (0x7F - 1)) return (0);
  1191                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1192                           
  1193                           ;incstack = 0
  1194  00070A  0EF9               	movlw	-7
  1195  00070C  CFE3 F060          	movff	plusw1,btemp
  1196  000710  0E7E               	movlw	126
  1197  000712  6460               	cpfsgt	btemp,c
  1198  000714  D004               	goto	l999
  1199  000716                     u120:
  1200  000716  0E00               	movlw	0
  1201  000718  6E60               	movwf	btemp,c
  1202  00071A  0E00               	movlw	0
  1203  00071C  D07B               	goto	L1
  1204  00071E                     l999:
  1205                           
  1206                           ;memory.c: 189: pHeap = (SALLOC *)_uDynamicHeap;
  1207                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1208  00071E  0E03               	movlw	high __uDynamicHeap
  1209  000720  6E60               	movwf	btemp,c
  1210  000722  0EFB               	movlw	-5
  1211  000724  C060  FFE3         	movff	btemp,plusw1
  1212  000728  0E14               	movlw	low __uDynamicHeap
  1213  00072A  6E60               	movwf	btemp,c
  1214  00072C  0EFA               	movlw	-6
  1215  00072E  C060  FFE3         	movff	btemp,plusw1
  1216  000732                     l1001:
  1217                           
  1218                           ;memory.c: 192: {
  1219                           ;memory.c: 194: segHeader = *pHeap;
  1220                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1221  000732  0EFA               	movlw	-6
  1222  000734  CFE3 FFD9          	movff	plusw1,fsr2l
  1223  000738  0EFB               	movlw	-5
  1224  00073A  CFE3 FFDA          	movff	plusw1,fsr2h
  1225  00073E  50DF               	movf	indf2,w,c
  1226  000740  6E6B               	movwf	btemp+11,c
  1227                           
  1228                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1229  000742  0EFE               	movlw	-2
  1230  000744  C06B  FFE3         	movff	btemp+11,plusw1
  1231                           
  1232                           ;memory.c: 197: segLen = segHeader.bits.count - 1;
  1233                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1234  000748  50E1               	movf	fsr1l,w,c
  1235  00074A  0FFE               	addlw	-2
  1236  00074C  6ED9               	movwf	fsr2l,c
  1237  00074E  50E2               	movf	fsr1h,w,c
  1238  000750  6EDA               	movwf	fsr2h,c
  1239  000752  0EFF               	movlw	255
  1240  000754  22DA               	addwfc	fsr2h,f,c
  1241  000756  50DF               	movf	223,w,c
  1242  000758  0B7F               	andlw	127
  1243  00075A  6E6B               	movwf	btemp+11,c
  1244  00075C  0EFF               	movlw	255
  1245  00075E  266B               	addwf	btemp+11,f,c
  1246                           
  1247                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1248  000760  0EFF               	movlw	-1
  1249  000762  C06B  FFE3         	movff	btemp+11,plusw1
  1250                           
  1251                           ;memory.c: 200: if (segHeader.byte == 0) return (0);
  1252                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1253  000766  0EFE               	movlw	-2
  1254  000768  50E3               	movf	plusw1,w,c
  1255  00076A  B4D8               	btfsc	status,2,c
  1256  00076C  D7D4               	goto	u120
  1257                           
  1258                           ;memory.c: 203: if (!(segHeader.bits.alloc))
  1259                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1260  00076E  50E1               	movf	fsr1l,w,c
  1261  000770  0FFE               	addlw	-2
  1262  000772  6ED9               	movwf	fsr2l,c
  1263  000774  50E2               	movf	fsr1h,w,c
  1264  000776  6EDA               	movwf	fsr2h,c
  1265  000778  0EFF               	movlw	255
  1266  00077A  22DA               	addwfc	fsr2h,f,c
  1267  00077C  BEDF               	btfsc	indf2,7,c
  1268  00077E  D016               	goto	u160
  1269                           
  1270                           ;memory.c: 204: {
  1271                           ;memory.c: 206: if (nBytes > segLen)
  1272                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1273                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1274  000780  50E1               	movf	fsr1l,w,c
  1275  000782  0FFF               	addlw	-1
  1276  000784  6ED9               	movwf	fsr2l,c
  1277  000786  50E2               	movf	fsr1h,w,c
  1278  000788  6EDA               	movwf	fsr2h,c
  1279  00078A  0EFF               	movlw	255
  1280  00078C  22DA               	addwfc	fsr2h,f,c
  1281  00078E  0EF9               	movlw	-7
  1282  000790  50E3               	movf	plusw1,w,c
  1283  000792  5CDE               	subwf	postinc2,w,c
  1284  000794  B0D8               	btfsc	status,0,c
  1285  000796  D020               	goto	l1019
  1286                           
  1287                           ;memory.c: 207: {
  1288                           ;memory.c: 209: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  1289                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1290  000798  0EFA               	movlw	-6
  1291  00079A  CFE3 FFE6          	movff	plusw1,postinc1
  1292  00079E  CFE3 FFE6          	movff	plusw1,postinc1
  1293  0007A2  EC91  F006         	call	__SRAMmerge	;wreg free
  1294  0007A6  5060               	movf	btemp,w,c
  1295  0007A8  A4D8               	btfss	status,2,c
  1296  0007AA  D7C3               	goto	l1001
  1297  0007AC                     u160:
  1298                           
  1299                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1300  0007AC  50E1               	movf	fsr1l,w,c
  1301  0007AE  0FFE               	addlw	-2
  1302  0007B0  6ED9               	movwf	fsr2l,c
  1303  0007B2  50E2               	movf	fsr1h,w,c
  1304  0007B4  6EDA               	movwf	fsr2h,c
  1305  0007B6  0EFF               	movlw	255
  1306  0007B8  22DA               	addwfc	fsr2h,f,c
  1307  0007BA  50DF               	movf	223,w,c
  1308  0007BC  0B7F               	andlw	127
  1309  0007BE  0D01               	mullw	1
  1310                           
  1311                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1312  0007C0  50E1               	movf	fsr1l,w,c
  1313  0007C2  0FFA               	addlw	-6
  1314  0007C4  6ED9               	movwf	fsr2l,c
  1315  0007C6  50E2               	movf	fsr1h,w,c
  1316  0007C8  6EDA               	movwf	fsr2h,c
  1317  0007CA  0EFF               	movlw	255
  1318  0007CC  22DA               	addwfc	fsr2h,f,c
  1319  0007CE  50F3               	movf	prodl,w,c
  1320  0007D0  26DE               	addwf	postinc2,f,c
  1321  0007D2  50F4               	movf	prodh,w,c
  1322  0007D4  22DD               	addwfc	postdec2,f,c
  1323  0007D6  D7AD               	goto	l1001
  1324  0007D8                     l1019:
  1325                           
  1326                           ;memory.c: 211: else
  1327                           ;memory.c: 215: if (nBytes == segLen)
  1328                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1329                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1330  0007D8  50E1               	movf	fsr1l,w,c
  1331  0007DA  0FF9               	addlw	-7
  1332  0007DC  6ED9               	movwf	fsr2l,c
  1333  0007DE  50E2               	movf	fsr1h,w,c
  1334  0007E0  6EDA               	movwf	fsr2h,c
  1335  0007E2  0EFF               	movlw	255
  1336  0007E4  22DA               	addwfc	fsr2h,f,c
  1337  0007E6  0EFF               	movlw	-1
  1338  0007E8  50E3               	movf	plusw1,w,c
  1339  0007EA  18DE               	xorwf	postinc2,w,c
  1340  0007EC  A4D8               	btfss	status,2,c
  1341  0007EE  D014               	goto	l1029
  1342                           
  1343                           ;memory.c: 216: {
  1344                           ;memory.c: 218: (*pHeap).bits.alloc = 1;
  1345                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1346  0007F0  0EFA               	movlw	-6
  1347  0007F2  CFE3 FFD9          	movff	plusw1,fsr2l
  1348  0007F6  0EFB               	movlw	-5
  1349  0007F8  CFE3 FFDA          	movff	plusw1,fsr2h
  1350  0007FC  8EDF               	bsf	indf2,7,c
  1351                           
  1352                           ;memory.c: 221: return ((unsigned char *)(pHeap + 1));
  1353                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1354  0007FE  0EFA               	movlw	-6
  1355  000800  CFE3 F06A          	movff	plusw1,btemp+10
  1356  000804  0EFB               	movlw	-5
  1357  000806  CFE3 F06B          	movff	plusw1,btemp+11
  1358  00080A  0E01               	movlw	1
  1359  00080C  246A               	addwf	btemp+10,w,c
  1360  00080E  6E60               	movwf	btemp,c
  1361  000810  0E00               	movlw	0
  1362  000812  206B               	addwfc	btemp+11,w,c
  1363  000814                     L1:
  1364  000814  6E61               	movwf	btemp+1,c
  1365  000816  D041               	goto	l229
  1366  000818                     l1029:
  1367                           
  1368                           ;memory.c: 225: else
  1369                           ;memory.c: 226: {
  1370                           ;memory.c: 228: (*pHeap).byte = nBytes + 0x81;
  1371                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1372  000818  0EFA               	movlw	-6
  1373  00081A  CFE3 FFD9          	movff	plusw1,fsr2l
  1374  00081E  0EFB               	movlw	-5
  1375  000820  CFE3 FFDA          	movff	plusw1,fsr2h
  1376                           
  1377                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1378  000824  0EF9               	movlw	-7
  1379  000826  50E3               	movf	plusw1,w,c
  1380  000828  0F81               	addlw	129
  1381  00082A  6EDF               	movwf	indf2,c
  1382                           
  1383                           ;memory.c: 231: temp = pHeap + 1;
  1384                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1385  00082C  0EFA               	movlw	-6
  1386  00082E  50E3               	movf	plusw1,w,c
  1387  000830  0F01               	addlw	1
  1388  000832  6E61               	movwf	btemp+1,c
  1389  000834  0EFB               	movlw	-5
  1390  000836  CFE3 F062          	movff	plusw1,btemp+2
  1391  00083A  0E00               	movlw	0
  1392  00083C  2262               	addwfc	btemp+2,f,c
  1393                           
  1394                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  1395  00083E  0EFD               	movlw	-3
  1396  000840  C062  FFE3         	movff	btemp+2,plusw1
  1397  000844  0EFC               	movlw	-4
  1398  000846  C061  FFE3         	movff	btemp+1,plusw1
  1399                           
  1400                           ;memory.c: 234: pHeap += (nBytes + 1);
  1401                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1402  00084A  0EF9               	movlw	-7
  1403  00084C  50E3               	movf	plusw1,w,c
  1404  00084E  6E61               	movwf	btemp+1,c
  1405  000850  6A62               	clrf	btemp+2,c
  1406  000852  0E01               	movlw	1
  1407  000854  2661               	addwf	btemp+1,f,c
  1408  000856  0E00               	movlw	0
  1409  000858  2262               	addwfc	btemp+2,f,c
  1410                           
  1411                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1412  00085A  50E1               	movf	fsr1l,w,c
  1413  00085C  0FFA               	addlw	-6
  1414  00085E  6ED9               	movwf	fsr2l,c
  1415  000860  50E2               	movf	fsr1h,w,c
  1416  000862  6EDA               	movwf	fsr2h,c
  1417  000864  0EFF               	movlw	255
  1418  000866  22DA               	addwfc	fsr2h,f,c
  1419  000868  5061               	movf	btemp+1,w,c
  1420  00086A  26DE               	addwf	postinc2,f,c
  1421  00086C  5062               	movf	btemp+2,w,c
  1422  00086E  22DD               	addwfc	postdec2,f,c
  1423                           
  1424                           ;memory.c: 237: (*pHeap).byte = segLen - nBytes;
  1425                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1426  000870  0EFA               	movlw	-6
  1427  000872  CFE3 FFD9          	movff	plusw1,fsr2l
  1428  000876  0EFB               	movlw	-5
  1429  000878  CFE3 FFDA          	movff	plusw1,fsr2h
  1430                           
  1431                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1432  00087C  0EF9               	movlw	-7
  1433  00087E  CFE3 F06B          	movff	plusw1,btemp+11
  1434                           
  1435                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1436  000882  0EFF               	movlw	-1
  1437  000884  CFE3 F06A          	movff	plusw1,btemp+10
  1438  000888  506B               	movf	btemp+11,w,c
  1439  00088A  5C6A               	subwf	btemp+10,w,c
  1440  00088C  6EDF               	movwf	indf2,c
  1441                           
  1442                           ;memory.c: 240: return ((unsigned char *) temp);
  1443                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  1444  00088E  0EFC               	movlw	-4
  1445  000890  CFE3 F060          	movff	plusw1,btemp
  1446  000894  0EFD               	movlw	-3
  1447  000896  CFE3 F061          	movff	plusw1,btemp+1
  1448  00089A                     l229:
  1449                           
  1450                           ; _SRAMalloc: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
  1451  00089A  0EF9               	movlw	249
  1452  00089C  26E1               	addwf	fsr1l,f,c
  1453  00089E  0EFF               	movlw	255
  1454  0008A0  22E2               	addwfc	fsr1h,f,c
  1455  0008A2  0012               	return		;funcret
  1456  0008A4                     __end_of_SRAMalloc:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           prodh	equ	0xFF4
  1463                           prodl	equ	0xFF3
  1464                           intcon	equ	0xFF2
  1465                           postinc0	equ	0xFEE
  1466                           plusw0	equ	0xFEB
  1467                           fsr0h	equ	0xFEA
  1468                           fsr0l	equ	0xFE9
  1469                           wreg	equ	0xFE8
  1470                           postinc1	equ	0xFE6
  1471                           plusw1	equ	0xFE3
  1472                           fsr1h	equ	0xFE2
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           plusw2	equ	0xFDB
  1478                           fsr2h	equ	0xFDA
  1479                           fsr2l	equ	0xFD9
  1480                           status	equ	0xFD8
  1481                           
  1482 ;; *************** function __SRAMmerge *****************
  1483 ;; Defined at:
  1484 ;;		line 346 in file "memory.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  pSegA           2  [STACK] near PTR struct _SALLOC
  1487 ;;		 -> _uDynamicHeap(512), 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  pSegB           2  [STACK] near PTR struct _SALLOC
  1490 ;;		 -> _uDynamicHeap(512), 
  1491 ;;  uSegB           1  [STACK] struct _SALLOC
  1492 ;;  uSegA           1  [STACK] struct _SALLOC
  1493 ;;  uSum            1  [STACK] struct _SALLOC
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1  [STACK] unsigned char 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1503 ;;      Params:         0       0       0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0
  1506 ;;      Totals:         0       0       0       0       0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    9
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_SRAMalloc
  1514 ;; This function uses a reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text8
  1518  000D22                     __ptext8:
  1519                           	opt stack 0
  1520  000D22                     __SRAMmerge:
  1521                           	opt stack 0
  1522                           
  1523                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1524  000D22  0E05               	movlw	5
  1525  000D24  26E1               	addwf	fsr1l,f,c
  1526  000D26  0E00               	movlw	0
  1527  000D28  22E2               	addwfc	fsr1h,f,c
  1528                           
  1529                           ;memory.c: 348: SALLOC * near pSegB;
  1530                           ;memory.c: 349: near SALLOC uSegA, uSegB, uSum;
  1531                           ;memory.c: 353: pSegB = pSegA + (*pSegA).byte;
  1532                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1533                           
  1534                           ;incstack = 0
  1535  000D2A  0EF9               	movlw	-7
  1536  000D2C  CFE3 FFD9          	movff	plusw1,fsr2l
  1537  000D30  0EFA               	movlw	-6
  1538  000D32  CFE3 FFDA          	movff	plusw1,fsr2h
  1539  000D36  50DF               	movf	indf2,w,c
  1540  000D38  6E61               	movwf	btemp+1,c
  1541  000D3A  6A62               	clrf	btemp+2,c
  1542                           
  1543                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1544  000D3C  0EF9               	movlw	-7
  1545  000D3E  50E3               	movf	plusw1,w,c
  1546  000D40  2661               	addwf	btemp+1,f,c
  1547  000D42  0EFA               	movlw	-6
  1548  000D44  50E3               	movf	plusw1,w,c
  1549  000D46  2262               	addwfc	btemp+2,f,c
  1550                           
  1551                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1552  000D48  0EFC               	movlw	-4
  1553  000D4A  C062  FFE3         	movff	btemp+2,plusw1
  1554  000D4E  0EFB               	movlw	-5
  1555  000D50  C061  FFE3         	movff	btemp+1,plusw1
  1556                           
  1557                           ;memory.c: 356: uSegA = *pSegA;
  1558                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1559  000D54  0EF9               	movlw	-7
  1560  000D56  CFE3 FFD9          	movff	plusw1,fsr2l
  1561  000D5A  0EFA               	movlw	-6
  1562  000D5C  CFE3 FFDA          	movff	plusw1,fsr2h
  1563  000D60  50DF               	movf	indf2,w,c
  1564  000D62  6E6B               	movwf	btemp+11,c
  1565                           
  1566                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1567  000D64  0EFE               	movlw	-2
  1568  000D66  C06B  FFE3         	movff	btemp+11,plusw1
  1569                           
  1570                           ;memory.c: 357: uSegB = *pSegB;
  1571                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1572  000D6A  0EFB               	movlw	-5
  1573  000D6C  CFE3 FFD9          	movff	plusw1,fsr2l
  1574  000D70  0EFC               	movlw	-4
  1575  000D72  CFE3 FFDA          	movff	plusw1,fsr2h
  1576  000D76  50DF               	movf	indf2,w,c
  1577  000D78  6E6B               	movwf	btemp+11,c
  1578                           
  1579                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1580  000D7A  0EFD               	movlw	-3
  1581  000D7C  C06B  FFE3         	movff	btemp+11,plusw1
  1582                           
  1583                           ;memory.c: 360: if (uSegB.byte == 0) return (0);
  1584                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1585  000D80  0EFD               	movlw	-3
  1586  000D82  50E3               	movf	plusw1,w,c
  1587  000D84  A4D8               	btfss	status,2,c
  1588  000D86  D002               	goto	l895
  1589  000D88                     u10:
  1590  000D88  0E00               	movlw	0
  1591  000D8A  D06E               	goto	L2
  1592  000D8C                     l895:
  1593                           
  1594                           ;memory.c: 363: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  1595                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1596  000D8C  50E1               	movf	fsr1l,w,c
  1597  000D8E  0FFE               	addlw	-2
  1598  000D90  6ED9               	movwf	fsr2l,c
  1599  000D92  50E2               	movf	fsr1h,w,c
  1600  000D94  6EDA               	movwf	fsr2h,c
  1601  000D96  0EFF               	movlw	255
  1602  000D98  22DA               	addwfc	fsr2h,f,c
  1603  000D9A  BEDF               	btfsc	indf2,7,c
  1604  000D9C  D7F5               	goto	u10
  1605                           
  1606                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1607  000D9E  50E1               	movf	fsr1l,w,c
  1608  000DA0  0FFD               	addlw	-3
  1609  000DA2  6ED9               	movwf	fsr2l,c
  1610  000DA4  50E2               	movf	fsr1h,w,c
  1611  000DA6  6EDA               	movwf	fsr2h,c
  1612  000DA8  0EFF               	movlw	255
  1613  000DAA  22DA               	addwfc	fsr2h,f,c
  1614  000DAC  BEDF               	btfsc	indf2,7,c
  1615  000DAE  D7EC               	goto	u10
  1616                           
  1617                           ;memory.c: 366: if (uSegA.bits.count == 0x7F) return (0);
  1618                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1619  000DB0  50E1               	movf	fsr1l,w,c
  1620  000DB2  0FFE               	addlw	-2
  1621  000DB4  6ED9               	movwf	fsr2l,c
  1622  000DB6  50E2               	movf	fsr1h,w,c
  1623  000DB8  6EDA               	movwf	fsr2h,c
  1624  000DBA  0EFF               	movlw	255
  1625  000DBC  22DA               	addwfc	fsr2h,f,c
  1626  000DBE  50DF               	movf	223,w,c
  1627  000DC0  0B7F               	andlw	127
  1628  000DC2  0A7F               	xorlw	127
  1629  000DC4  B4D8               	btfsc	status,2,c
  1630  000DC6  D7E0               	goto	u10
  1631                           
  1632                           ;memory.c: 369: uSum.byte = uSegA.byte + uSegB.byte;
  1633                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1634  000DC8  0EFD               	movlw	-3
  1635  000DCA  CFE3 F06B          	movff	plusw1,btemp+11
  1636                           
  1637                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1638  000DCE  0EFE               	movlw	-2
  1639  000DD0  50E3               	movf	plusw1,w,c
  1640  000DD2  246B               	addwf	btemp+11,w,c
  1641  000DD4  6E6A               	movwf	btemp+10,c
  1642                           
  1643                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1644  000DD6  0EFF               	movlw	-1
  1645  000DD8  C06A  FFE3         	movff	btemp+10,plusw1
  1646                           
  1647                           ;memory.c: 375: if ((uSum.byte) > 0x7F)
  1648                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1649  000DDC  0EFF               	movlw	-1
  1650  000DDE  CFE3 F060          	movff	plusw1,btemp
  1651  000DE2  0E7F               	movlw	127
  1652  000DE4  6460               	cpfsgt	btemp,c
  1653  000DE6  D036               	goto	l927
  1654                           
  1655                           ;memory.c: 376: {
  1656                           ;memory.c: 377: (*pSegA).byte = 0x7F;
  1657                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1658  000DE8  0EF9               	movlw	-7
  1659  000DEA  CFE3 FFD9          	movff	plusw1,fsr2l
  1660  000DEE  0EFA               	movlw	-6
  1661  000DF0  CFE3 FFDA          	movff	plusw1,fsr2h
  1662  000DF4  0E7F               	movlw	127
  1663  000DF6  6EDF               	movwf	indf2,c
  1664                           
  1665                           ;memory.c: 378: pSegA += 0x7F;
  1666                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1667  000DF8  0EF9               	movlw	-7
  1668  000DFA  50E3               	movf	plusw1,w,c
  1669  000DFC  0F7F               	addlw	127
  1670  000DFE  6E60               	movwf	btemp,c
  1671  000E00  0EF9               	movlw	-7
  1672  000E02  C060  FFE3         	movff	btemp,plusw1
  1673  000E06  6A60               	clrf	btemp,c
  1674  000E08  0EFA               	movlw	-6
  1675  000E0A  50E3               	movf	plusw1,w,c
  1676  000E0C  2060               	addwfc	btemp,w,c
  1677  000E0E  6E60               	movwf	btemp,c
  1678  000E10  0EFA               	movlw	-6
  1679  000E12  C060  FFE3         	movff	btemp,plusw1
  1680                           
  1681                           ;memory.c: 379: pSegB += uSegB.byte;
  1682                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1683  000E16  0EFD               	movlw	-3
  1684  000E18  50E3               	movf	plusw1,w,c
  1685  000E1A  0D01               	mullw	1
  1686                           
  1687                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1688  000E1C  50E1               	movf	fsr1l,w,c
  1689  000E1E  0FFB               	addlw	-5
  1690  000E20  6ED9               	movwf	fsr2l,c
  1691  000E22  50E2               	movf	fsr1h,w,c
  1692  000E24  6EDA               	movwf	fsr2h,c
  1693  000E26  0EFF               	movlw	255
  1694  000E28  22DA               	addwfc	fsr2h,f,c
  1695  000E2A  50F3               	movf	prodl,w,c
  1696  000E2C  26DE               	addwf	postinc2,f,c
  1697  000E2E  50F4               	movf	prodh,w,c
  1698  000E30  22DD               	addwfc	postdec2,f,c
  1699                           
  1700                           ;memory.c: 380: (*pSegA).byte = pSegB - pSegA;
  1701                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1702  000E32  0EF9               	movlw	-7
  1703  000E34  CFE3 FFD9          	movff	plusw1,fsr2l
  1704  000E38  0EFA               	movlw	-6
  1705  000E3A  CFE3 FFDA          	movff	plusw1,fsr2h
  1706                           
  1707                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1708  000E3E  0EF9               	movlw	-7
  1709  000E40  CFE3 F06B          	movff	plusw1,btemp+11
  1710                           
  1711                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1712  000E44  0EFB               	movlw	-5
  1713  000E46  CFE3 F06A          	movff	plusw1,btemp+10
  1714  000E4A  506B               	movf	btemp+11,w,c
  1715  000E4C  5C6A               	subwf	btemp+10,w,c
  1716  000E4E  6EDF               	movwf	indf2,c
  1717                           
  1718                           ;memory.c: 382: return (0x7F);
  1719  000E50  0E7F               	movlw	127
  1720  000E52  D00A               	goto	L2
  1721  000E54                     l927:
  1722                           
  1723                           ;memory.c: 386: else
  1724                           ;memory.c: 387: {
  1725                           ;memory.c: 388: return ((*pSegA).byte = uSum.byte);
  1726                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1727                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1728  000E54  0EF9               	movlw	-7
  1729  000E56  CFE3 FFD9          	movff	plusw1,fsr2l
  1730  000E5A  0EFA               	movlw	-6
  1731  000E5C  CFE3 FFDA          	movff	plusw1,fsr2h
  1732  000E60  0EFF               	movlw	-1
  1733  000E62  CFE3 FFDF          	movff	plusw1,indf2
  1734  000E66  50DF               	movf	indf2,w,c
  1735  000E68                     L2:
  1736  000E68  6E60               	movwf	btemp,c
  1737                           
  1738                           ; __SRAMmerge: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  1739  000E6A  0EF9               	movlw	249
  1740  000E6C  26E1               	addwf	fsr1l,f,c
  1741  000E6E  0EFF               	movlw	255
  1742  000E70  22E2               	addwfc	fsr1h,f,c
  1743  000E72  0012               	return		;funcret
  1744  000E74                     __end_of__SRAMmerge:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           postinc0	equ	0xFEE
  1754                           plusw0	equ	0xFEB
  1755                           fsr0h	equ	0xFEA
  1756                           fsr0l	equ	0xFE9
  1757                           wreg	equ	0xFE8
  1758                           postinc1	equ	0xFE6
  1759                           plusw1	equ	0xFE3
  1760                           fsr1h	equ	0xFE2
  1761                           fsr1l	equ	0xFE1
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           plusw2	equ	0xFDB
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _aviao1 *****************
  1771 ;; Defined at:
  1772 ;;		line 27 in file "tasks.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1  [STACK] void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1786 ;;      Params:         0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    8
  1793 ;; This function calls:
  1794 ;;		_createAviao
  1795 ;;		_create_pipe
  1796 ;;		_write_pipe
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text9
  1803  001516                     __ptext9:
  1804                           	opt stack 0
  1805  001516                     _aviao1:
  1806                           	opt stack 19
  1807                           
  1808                           ;tasks.c: 30: createAviao(&aviaozinho1,100,100, 1);
  1809                           
  1810                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1811                           ;incstack = 0
  1812  001516  0E01               	movlw	1
  1813  001518  6EE6               	movwf	postinc1,c
  1814  00151A  0E00               	movlw	0
  1815  00151C  6EE6               	movwf	postinc1,c
  1816  00151E  0E64               	movlw	100
  1817  001520  6EE6               	movwf	postinc1,c
  1818  001522  0E00               	movlw	0
  1819  001524  6EE6               	movwf	postinc1,c
  1820  001526  0E64               	movlw	100
  1821  001528  6EE6               	movwf	postinc1,c
  1822  00152A  0E00               	movlw	0
  1823  00152C  6EE6               	movwf	postinc1,c
  1824  00152E  0E41               	movlw	low _aviaozinho1
  1825  001530  6EE6               	movwf	postinc1,c
  1826  001532  0E00               	movlw	high _aviaozinho1
  1827  001534  6EE6               	movwf	postinc1,c
  1828  001536  ECEF  F008         	call	_createAviao	;wreg free
  1829                           
  1830                           ;tasks.c: 36: create_pipe(&pipe1);
  1831  00153A  0E2D               	movlw	low _pipe1
  1832  00153C  6EE6               	movwf	postinc1,c
  1833  00153E  0E00               	movlw	high _pipe1
  1834  001540  6EE6               	movwf	postinc1,c
  1835  001542  EC9C  F008         	call	_create_pipe	;wreg free
  1836  001546                     l1545:
  1837                           
  1838                           ;tasks.c: 41: write_pipe(&pipe1, 'l');
  1839  001546  0E6C               	movlw	108
  1840  001548  6EE6               	movwf	postinc1,c
  1841  00154A  0E2D               	movlw	low _pipe1
  1842  00154C  6EE6               	movwf	postinc1,c
  1843  00154E  0E00               	movlw	high _pipe1
  1844  001550  6EE6               	movwf	postinc1,c
  1845  001552  EC18  F005         	call	_write_pipe	;wreg free
  1846  001556  D7F7               	goto	l1545
  1847  001558                     __end_of_aviao1:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           plusw0	equ	0xFEB
  1858                           fsr0h	equ	0xFEA
  1859                           fsr0l	equ	0xFE9
  1860                           wreg	equ	0xFE8
  1861                           postinc1	equ	0xFE6
  1862                           plusw1	equ	0xFE3
  1863                           fsr1h	equ	0xFE2
  1864                           fsr1l	equ	0xFE1
  1865                           indf2	equ	0xFDF
  1866                           postinc2	equ	0xFDE
  1867                           postdec2	equ	0xFDD
  1868                           plusw2	equ	0xFDB
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _write_pipe *****************
  1874 ;; Defined at:
  1875 ;;		line 21 in file "pipe.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  pipe            2  [STACK] PTR struct pipe
  1878 ;;		 -> pipe1(14), 
  1879 ;;  data            1  [STACK] unsigned char 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1  [STACK] void 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1891 ;;      Params:         0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    7
  1898 ;; This function calls:
  1899 ;;		___wmul
  1900 ;;		_dispatcher
  1901 ;; This function is called by:
  1902 ;;		_aviao1
  1903 ;;		_aviao2
  1904 ;; This function uses a reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text10
  1908  000A30                     __ptext10:
  1909                           	opt stack 0
  1910  000A30                     _write_pipe:
  1911                           	opt stack 19
  1912                           
  1913                           ;pipe.c: 23: (INTCONbits.GIE = 0);
  1914                           
  1915                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  1916                           ;incstack = 0
  1917  000A30  9EF2               	bcf	intcon,7,c	;volatile
  1918                           
  1919                           ;pipe.c: 26: if (pipe->pipe_itens == 4) {
  1920                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1921  000A32  0EFE               	movlw	-2
  1922  000A34  CFE3 F061          	movff	plusw1,btemp+1
  1923  000A38  0EFF               	movlw	-1
  1924  000A3A  CFE3 F062          	movff	plusw1,btemp+2
  1925  000A3E  0E08               	movlw	8
  1926  000A40  2461               	addwf	btemp+1,w,c
  1927  000A42  6ED9               	movwf	fsr2l,c
  1928  000A44  0E00               	movlw	0
  1929  000A46  2062               	addwfc	btemp+2,w,c
  1930  000A48  6EDA               	movwf	fsr2h,c
  1931  000A4A  0E04               	movlw	4
  1932  000A4C  18DE               	xorwf	postinc2,w,c
  1933  000A4E  10DE               	iorwf	postinc2,w,c
  1934  000A50  A4D8               	btfss	status,2,c
  1935  000A52  D014               	goto	l1439
  1936                           
  1937                           ;pipe.c: 28: pipe->pos_bloqued_write = task_running;
  1938                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1939  000A54  0EFE               	movlw	-2
  1940  000A56  CFE3 F061          	movff	plusw1,btemp+1
  1941  000A5A  0EFF               	movlw	-1
  1942  000A5C  CFE3 F062          	movff	plusw1,btemp+2
  1943  000A60  0E0C               	movlw	12
  1944  000A62  2461               	addwf	btemp+1,w,c
  1945  000A64  6ED9               	movwf	fsr2l,c
  1946  000A66  0E00               	movlw	0
  1947  000A68  2062               	addwfc	btemp+2,w,c
  1948  000A6A  6EDA               	movwf	fsr2h,c
  1949  000A6C  C001  FFDE         	movff	_task_running,postinc2
  1950  000A70  C002  FFDD         	movff	_task_running+1,postdec2
  1951                           
  1952                           ;pipe.c: 30: dispatcher(WAITING_PIPE);
  1953  000A74  0E06               	movlw	6
  1954  000A76  6EE6               	movwf	postinc1,c
  1955  000A78  EC0A  F000         	call	_dispatcher	;wreg free
  1956  000A7C                     l1439:
  1957                           
  1958                           ;pipe.c: 31: }
  1959                           ;pipe.c: 33: pipe->pipe_queue[pipe->pos_write_pipe] = data;
  1960                           ;stkvar	write_pipe@data @ sp[(0)+-3]
  1961                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1962  000A7C  0EFE               	movlw	-2
  1963  000A7E  CFE3 F061          	movff	plusw1,btemp+1
  1964  000A82  0EFF               	movlw	-1
  1965  000A84  CFE3 F062          	movff	plusw1,btemp+2
  1966  000A88  0E06               	movlw	6
  1967  000A8A  2461               	addwf	btemp+1,w,c
  1968  000A8C  6ED9               	movwf	fsr2l,c
  1969  000A8E  0E00               	movlw	0
  1970  000A90  2062               	addwfc	btemp+2,w,c
  1971  000A92  6EDA               	movwf	fsr2h,c
  1972  000A94  CFDE F061          	movff	postinc2,btemp+1
  1973  000A98  CFDD F062          	movff	postdec2,btemp+2
  1974                           
  1975                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1976  000A9C  0EFE               	movlw	-2
  1977  000A9E  CFE3 F06A          	movff	plusw1,btemp+10
  1978  000AA2  0EFF               	movlw	-1
  1979  000AA4  CFE3 F06B          	movff	plusw1,btemp+11
  1980  000AA8  5061               	movf	btemp+1,w,c
  1981  000AAA  246A               	addwf	btemp+10,w,c
  1982  000AAC  6ED9               	movwf	fsr2l,c
  1983  000AAE  5062               	movf	btemp+2,w,c
  1984  000AB0  206B               	addwfc	btemp+11,w,c
  1985  000AB2  6EDA               	movwf	fsr2h,c
  1986  000AB4  0EFD               	movlw	-3
  1987  000AB6  CFE3 FFDF          	movff	plusw1,indf2
  1988                           
  1989                           ;pipe.c: 34: pipe->pos_write_pipe = (pipe->pos_write_pipe + 1) % 4;
  1990                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1991  000ABA  0EFE               	movlw	-2
  1992  000ABC  CFE3 F061          	movff	plusw1,btemp+1
  1993  000AC0  0EFF               	movlw	-1
  1994  000AC2  CFE3 F062          	movff	plusw1,btemp+2
  1995  000AC6  0E06               	movlw	6
  1996  000AC8  2461               	addwf	btemp+1,w,c
  1997  000ACA  6ED9               	movwf	fsr2l,c
  1998  000ACC  0E00               	movlw	0
  1999  000ACE  2062               	addwfc	btemp+2,w,c
  2000  000AD0  6EDA               	movwf	fsr2h,c
  2001  000AD2  CFDE F061          	movff	postinc2,btemp+1
  2002  000AD6  CFDD F062          	movff	postdec2,btemp+2
  2003  000ADA  0E01               	movlw	1
  2004  000ADC  2661               	addwf	btemp+1,f,c
  2005  000ADE  0E00               	movlw	0
  2006  000AE0  2262               	addwfc	btemp+2,f,c
  2007  000AE2  0E03               	movlw	3
  2008  000AE4  1661               	andwf	btemp+1,f,c
  2009  000AE6  0E00               	movlw	0
  2010  000AE8  1662               	andwf	btemp+2,f,c
  2011                           
  2012                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2013  000AEA  0EFE               	movlw	-2
  2014  000AEC  CFE3 F06A          	movff	plusw1,btemp+10
  2015  000AF0  0EFF               	movlw	-1
  2016  000AF2  CFE3 F06B          	movff	plusw1,btemp+11
  2017  000AF6  0E06               	movlw	6
  2018  000AF8  246A               	addwf	btemp+10,w,c
  2019  000AFA  6ED9               	movwf	fsr2l,c
  2020  000AFC  0E00               	movlw	0
  2021  000AFE  206B               	addwfc	btemp+11,w,c
  2022  000B00  6EDA               	movwf	fsr2h,c
  2023  000B02  C061  FFDE         	movff	btemp+1,postinc2
  2024  000B06  C062  FFDD         	movff	btemp+2,postdec2
  2025                           
  2026                           ;pipe.c: 35: pipe->pipe_itens++;
  2027                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2028  000B0A  0EFE               	movlw	-2
  2029  000B0C  CFE3 F061          	movff	plusw1,btemp+1
  2030  000B10  0EFF               	movlw	-1
  2031  000B12  CFE3 F062          	movff	plusw1,btemp+2
  2032  000B16  0E08               	movlw	8
  2033  000B18  2461               	addwf	btemp+1,w,c
  2034  000B1A  6ED9               	movwf	fsr2l,c
  2035  000B1C  0E00               	movlw	0
  2036  000B1E  2062               	addwfc	btemp+2,w,c
  2037  000B20  6EDA               	movwf	fsr2h,c
  2038  000B22  2ADE               	incf	postinc2,f,c
  2039  000B24  0E00               	movlw	0
  2040  000B26  22DD               	addwfc	postdec2,f,c
  2041                           
  2042                           ;pipe.c: 38: if (pipe->pos_bloqued_read > 0) {
  2043                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2044  000B28  0EFE               	movlw	-2
  2045  000B2A  CFE3 F061          	movff	plusw1,btemp+1
  2046  000B2E  0EFF               	movlw	-1
  2047  000B30  CFE3 F062          	movff	plusw1,btemp+2
  2048  000B34  0E0A               	movlw	10
  2049  000B36  2461               	addwf	btemp+1,w,c
  2050  000B38  6ED9               	movwf	fsr2l,c
  2051  000B3A  0E00               	movlw	0
  2052  000B3C  2062               	addwfc	btemp+2,w,c
  2053  000B3E  6EDA               	movwf	fsr2h,c
  2054  000B40  50DE               	movf	postinc2,w,c
  2055  000B42  10DE               	iorwf	postinc2,w,c
  2056  000B44  B4D8               	btfsc	status,2,c
  2057  000B46  D032               	goto	l1451
  2058                           
  2059                           ;pipe.c: 39: F_APTOS[pipe->pos_bloqued_read].task_state = READY;
  2060  000B48  0E6E               	movlw	110
  2061  000B4A  6EE6               	movwf	postinc1,c
  2062  000B4C  0E00               	movlw	0
  2063  000B4E  6EE6               	movwf	postinc1,c
  2064                           
  2065                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  2066  000B50  0EFC               	movlw	-4
  2067  000B52  CFE3 F061          	movff	plusw1,btemp+1
  2068  000B56  0EFD               	movlw	-3
  2069  000B58  CFE3 F062          	movff	plusw1,btemp+2
  2070  000B5C  0E0A               	movlw	10
  2071  000B5E  2461               	addwf	btemp+1,w,c
  2072  000B60  6ED9               	movwf	fsr2l,c
  2073  000B62  0E00               	movlw	0
  2074  000B64  2062               	addwfc	btemp+2,w,c
  2075  000B66  6EDA               	movwf	fsr2h,c
  2076  000B68  CFDE F061          	movff	postinc2,btemp+1
  2077  000B6C  CFDD F062          	movff	postdec2,btemp+2
  2078  000B70  C061  FFE6         	movff	btemp+1,postinc1
  2079  000B74  C062  FFE6         	movff	btemp+2,postinc1
  2080  000B78  EC3D  F009         	call	___wmul	;wreg free
  2081  000B7C  0EF6               	movlw	low (_F_APTOS+8)
  2082  000B7E  2460               	addwf	btemp,w,c
  2083  000B80  6ED9               	movwf	fsr2l,c
  2084  000B82  0E00               	movlw	high (_F_APTOS+8)
  2085  000B84  2061               	addwfc	btemp+1,w,c
  2086  000B86  6EDA               	movwf	fsr2h,c
  2087  000B88  0E01               	movlw	1
  2088  000B8A  6EDF               	movwf	indf2,c
  2089                           
  2090                           ;pipe.c: 40: pipe->pos_bloqued_read = 0;
  2091                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2092  000B8C  0EFE               	movlw	-2
  2093  000B8E  CFE3 F061          	movff	plusw1,btemp+1
  2094  000B92  0EFF               	movlw	-1
  2095  000B94  CFE3 F062          	movff	plusw1,btemp+2
  2096  000B98  0E0A               	movlw	10
  2097  000B9A  2461               	addwf	btemp+1,w,c
  2098  000B9C  6ED9               	movwf	fsr2l,c
  2099  000B9E  0E00               	movlw	0
  2100  000BA0  2062               	addwfc	btemp+2,w,c
  2101  000BA2  6EDA               	movwf	fsr2h,c
  2102  000BA4  0E00               	movlw	0
  2103  000BA6  6EDE               	movwf	postinc2,c
  2104  000BA8  0E00               	movlw	0
  2105  000BAA  6EDD               	movwf	postdec2,c
  2106  000BAC                     l1451:
  2107                           
  2108                           ;pipe.c: 44: }
  2109                           ;pipe.c: 47: (INTCONbits.GIE = 1);
  2110  000BAC  8EF2               	bsf	intcon,7,c	;volatile
  2111                           
  2112                           ; _write_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
  2113  000BAE  52E5               	movf	postdec1,f,c
  2114  000BB0  52E5               	movf	postdec1,f,c
  2115  000BB2  52E5               	movf	postdec1,f,c
  2116  000BB4  0012               	return		;funcret
  2117  000BB6                     __end_of_write_pipe:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           postinc0	equ	0xFEE
  2127                           plusw0	equ	0xFEB
  2128                           fsr0h	equ	0xFEA
  2129                           fsr0l	equ	0xFE9
  2130                           wreg	equ	0xFE8
  2131                           postinc1	equ	0xFE6
  2132                           postdec1	equ	0xFE5
  2133                           plusw1	equ	0xFE3
  2134                           fsr1h	equ	0xFE2
  2135                           fsr1l	equ	0xFE1
  2136                           indf2	equ	0xFDF
  2137                           postinc2	equ	0xFDE
  2138                           postdec2	equ	0xFDD
  2139                           plusw2	equ	0xFDB
  2140                           fsr2h	equ	0xFDA
  2141                           fsr2l	equ	0xFD9
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _dispatcher *****************
  2145 ;; Defined at:
  2146 ;;		line 33 in file "kernel.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  state           1  [STACK] enum E3015
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;		None
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1  [STACK] void 
  2153 ;; Registers used:
  2154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2160 ;;      Params:         0       0       0       0       0       0       0
  2161 ;;      Locals:         0       0       0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0
  2163 ;;      Totals:         0       0       0       0       0       0       0
  2164 ;;Total ram usage:        0 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    6
  2167 ;; This function calls:
  2168 ;;		___wmul
  2169 ;;		_rr_scheduler
  2170 ;; This function is called by:
  2171 ;;		_delay
  2172 ;;		_int_high
  2173 ;;		_sem_wait
  2174 ;;		_sem_post
  2175 ;;		_write_pipe
  2176 ;;		_read_pipe
  2177 ;; This function uses a reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text11
  2181  000014                     __ptext11:
  2182                           	opt stack 0
  2183  000014                     _dispatcher:
  2184                           	opt stack 15
  2185                           
  2186                           ;kernel.c: 35: (INTCONbits.GIE = 0);
  2187                           
  2188                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  2189                           ;incstack = 0
  2190  000014  9EF2               	bcf	intcon,7,c	;volatile
  2191                           
  2192                           ;kernel.c: 38: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  2193                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  2194  000016  0E6E               	movlw	110
  2195  000018  6EE6               	movwf	postinc1,c
  2196  00001A  0E00               	movlw	0
  2197  00001C  6EE6               	movwf	postinc1,c
  2198  00001E  C001  FFE6         	movff	_task_running,postinc1
  2199  000022  C002  FFE6         	movff	_task_running+1,postinc1
  2200  000026  EC3D  F009         	call	___wmul	;wreg free
  2201  00002A  0EF6               	movlw	low (_F_APTOS+8)
  2202  00002C  2460               	addwf	btemp,w,c
  2203  00002E  6ED9               	movwf	fsr2l,c
  2204  000030  0E00               	movlw	high (_F_APTOS+8)
  2205  000032  2061               	addwfc	btemp+1,w,c
  2206  000034  6EDA               	movwf	fsr2h,c
  2207  000036  0EFF               	movlw	-1
  2208  000038  CFE3 FFDF          	movff	plusw1,indf2
  2209  00003C  0E6E               	movlw	110
  2210  00003E  6EE6               	movwf	postinc1,c
  2211  000040  0E00               	movlw	0
  2212  000042  6EE6               	movwf	postinc1,c
  2213  000044  C001  FFE6         	movff	_task_running,postinc1
  2214  000048  C002  FFE6         	movff	_task_running+1,postinc1
  2215  00004C  EC3D  F009         	call	___wmul	;wreg free
  2216  000050  0E59               	movlw	low (_F_APTOS+107)
  2217  000052  2460               	addwf	btemp,w,c
  2218  000054  6ED9               	movwf	fsr2l,c
  2219  000056  0E01               	movlw	high (_F_APTOS+107)
  2220  000058  2061               	addwfc	btemp+1,w,c
  2221  00005A  6EDA               	movwf	fsr2h,c
  2222  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  2223  000060  0E6E               	movlw	110
  2224  000062  6EE6               	movwf	postinc1,c
  2225  000064  0E00               	movlw	0
  2226  000066  6EE6               	movwf	postinc1,c
  2227  000068  C001  FFE6         	movff	_task_running,postinc1
  2228  00006C  C002  FFE6         	movff	_task_running+1,postinc1
  2229  000070  EC3D  F009         	call	___wmul	;wreg free
  2230  000074  0E5A               	movlw	low (_F_APTOS+108)
  2231  000076  2460               	addwf	btemp,w,c
  2232  000078  6ED9               	movwf	fsr2l,c
  2233  00007A  0E01               	movlw	high (_F_APTOS+108)
  2234  00007C  2061               	addwfc	btemp+1,w,c
  2235  00007E  6EDA               	movwf	fsr2h,c
  2236  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  2237  000084  0E6E               	movlw	110
  2238  000086  6EE6               	movwf	postinc1,c
  2239  000088  0E00               	movlw	0
  2240  00008A  6EE6               	movwf	postinc1,c
  2241  00008C  C001  FFE6         	movff	_task_running,postinc1
  2242  000090  C002  FFE6         	movff	_task_running+1,postinc1
  2243  000094  EC3D  F009         	call	___wmul	;wreg free
  2244  000098  0E5B               	movlw	low (_F_APTOS+109)
  2245  00009A  2460               	addwf	btemp,w,c
  2246  00009C  6ED9               	movwf	fsr2l,c
  2247  00009E  0E01               	movlw	high (_F_APTOS+109)
  2248  0000A0  2061               	addwfc	btemp+1,w,c
  2249  0000A2  6EDA               	movwf	fsr2h,c
  2250  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  2251  0000A8  0E6E               	movlw	110
  2252  0000AA  6EE6               	movwf	postinc1,c
  2253  0000AC  0E00               	movlw	0
  2254  0000AE  6EE6               	movwf	postinc1,c
  2255  0000B0  C001  FFE6         	movff	_task_running,postinc1
  2256  0000B4  C002  FFE6         	movff	_task_running+1,postinc1
  2257  0000B8  EC3D  F009         	call	___wmul	;wreg free
  2258  0000BC  0E57               	movlw	low (_F_APTOS+105)
  2259  0000BE  2460               	addwf	btemp,w,c
  2260  0000C0  6ED9               	movwf	fsr2l,c
  2261  0000C2  0E01               	movlw	high (_F_APTOS+105)
  2262  0000C4  2061               	addwfc	btemp+1,w,c
  2263  0000C6  6EDA               	movwf	fsr2h,c
  2264  0000C8  0E00               	movlw	0
  2265  0000CA  6EDE               	movwf	postinc2,c
  2266  0000CC  0E00               	movlw	0
  2267  0000CE  6EDD               	movwf	postdec2,c
  2268  0000D0                     l1387:
  2269  0000D0  0E03               	movlw	3
  2270  0000D2  6EE6               	movwf	postinc1,c
  2271  0000D4  0E00               	movlw	0
  2272  0000D6  6EE6               	movwf	postinc1,c
  2273  0000D8  0E6E               	movlw	110
  2274  0000DA  6EE6               	movwf	postinc1,c
  2275  0000DC  0E00               	movlw	0
  2276  0000DE  6EE6               	movwf	postinc1,c
  2277  0000E0  C001  FFE6         	movff	_task_running,postinc1
  2278  0000E4  C002  FFE6         	movff	_task_running+1,postinc1
  2279  0000E8  EC3D  F009         	call	___wmul	;wreg free
  2280  0000EC  0E57               	movlw	low (_F_APTOS+105)
  2281  0000EE  2460               	addwf	btemp,w,c
  2282  0000F0  6ED9               	movwf	fsr2l,c
  2283  0000F2  0E01               	movlw	high (_F_APTOS+105)
  2284  0000F4  2061               	addwfc	btemp+1,w,c
  2285  0000F6  6EDA               	movwf	fsr2h,c
  2286  0000F8  CFDE F061          	movff	postinc2,btemp+1
  2287  0000FC  CFDD F062          	movff	postdec2,btemp+2
  2288  000100  C061  FFE6         	movff	btemp+1,postinc1
  2289  000104  C062  FFE6         	movff	btemp+2,postinc1
  2290  000108  EC3D  F009         	call	___wmul	;wreg free
  2291  00010C  C060  F068         	movff	btemp,btemp+8
  2292  000110  C061  F069         	movff	btemp+1,btemp+9
  2293  000114  0E6E               	movlw	110
  2294  000116  6EE6               	movwf	postinc1,c
  2295  000118  0E00               	movlw	0
  2296  00011A  6EE6               	movwf	postinc1,c
  2297  00011C  C001  FFE6         	movff	_task_running,postinc1
  2298  000120  C002  FFE6         	movff	_task_running+1,postinc1
  2299  000124  EC3D  F009         	call	___wmul	;wreg free
  2300  000128  0EEE               	movlw	low _F_APTOS
  2301  00012A  6E6A               	movwf	btemp+10,c
  2302  00012C  0E00               	movlw	high _F_APTOS
  2303  00012E  6E6B               	movwf	btemp+11,c
  2304  000130  0E09               	movlw	9
  2305  000132  266A               	addwf	btemp+10,f,c
  2306  000134  0E00               	movlw	0
  2307  000136  226B               	addwfc	btemp+11,f,c
  2308  000138  5060               	movf	btemp,w,c
  2309  00013A  266A               	addwf	btemp+10,f,c
  2310  00013C  5061               	movf	btemp+1,w,c
  2311  00013E  226B               	addwfc	btemp+11,f,c
  2312  000140  5068               	movf	btemp+8,w,c
  2313  000142  246A               	addwf	btemp+10,w,c
  2314  000144  6ED9               	movwf	fsr2l,c
  2315  000146  5069               	movf	btemp+9,w,c
  2316  000148  206B               	addwfc	btemp+11,w,c
  2317  00014A  6EDA               	movwf	fsr2h,c
  2318  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  2319  000150  0E03               	movlw	3
  2320  000152  6EE6               	movwf	postinc1,c
  2321  000154  0E00               	movlw	0
  2322  000156  6EE6               	movwf	postinc1,c
  2323  000158  0E6E               	movlw	110
  2324  00015A  6EE6               	movwf	postinc1,c
  2325  00015C  0E00               	movlw	0
  2326  00015E  6EE6               	movwf	postinc1,c
  2327  000160  C001  FFE6         	movff	_task_running,postinc1
  2328  000164  C002  FFE6         	movff	_task_running+1,postinc1
  2329  000168  EC3D  F009         	call	___wmul	;wreg free
  2330  00016C  0E57               	movlw	low (_F_APTOS+105)
  2331  00016E  2460               	addwf	btemp,w,c
  2332  000170  6ED9               	movwf	fsr2l,c
  2333  000172  0E01               	movlw	high (_F_APTOS+105)
  2334  000174  2061               	addwfc	btemp+1,w,c
  2335  000176  6EDA               	movwf	fsr2h,c
  2336  000178  CFDE F061          	movff	postinc2,btemp+1
  2337  00017C  CFDD F062          	movff	postdec2,btemp+2
  2338  000180  C061  FFE6         	movff	btemp+1,postinc1
  2339  000184  C062  FFE6         	movff	btemp+2,postinc1
  2340  000188  EC3D  F009         	call	___wmul	;wreg free
  2341  00018C  C060  F068         	movff	btemp,btemp+8
  2342  000190  C061  F069         	movff	btemp+1,btemp+9
  2343  000194  0E6E               	movlw	110
  2344  000196  6EE6               	movwf	postinc1,c
  2345  000198  0E00               	movlw	0
  2346  00019A  6EE6               	movwf	postinc1,c
  2347  00019C  C001  FFE6         	movff	_task_running,postinc1
  2348  0001A0  C002  FFE6         	movff	_task_running+1,postinc1
  2349  0001A4  EC3D  F009         	call	___wmul	;wreg free
  2350  0001A8  0EEE               	movlw	low _F_APTOS
  2351  0001AA  6E6A               	movwf	btemp+10,c
  2352  0001AC  0E00               	movlw	high _F_APTOS
  2353  0001AE  6E6B               	movwf	btemp+11,c
  2354  0001B0  0E0A               	movlw	10
  2355  0001B2  266A               	addwf	btemp+10,f,c
  2356  0001B4  0E00               	movlw	0
  2357  0001B6  226B               	addwfc	btemp+11,f,c
  2358  0001B8  5060               	movf	btemp,w,c
  2359  0001BA  266A               	addwf	btemp+10,f,c
  2360  0001BC  5061               	movf	btemp+1,w,c
  2361  0001BE  226B               	addwfc	btemp+11,f,c
  2362  0001C0  5068               	movf	btemp+8,w,c
  2363  0001C2  246A               	addwf	btemp+10,w,c
  2364  0001C4  6ED9               	movwf	fsr2l,c
  2365  0001C6  5069               	movf	btemp+9,w,c
  2366  0001C8  206B               	addwfc	btemp+11,w,c
  2367  0001CA  6EDA               	movwf	fsr2h,c
  2368  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2369  0001D0  0E03               	movlw	3
  2370  0001D2  6EE6               	movwf	postinc1,c
  2371  0001D4  0E00               	movlw	0
  2372  0001D6  6EE6               	movwf	postinc1,c
  2373  0001D8  0E6E               	movlw	110
  2374  0001DA  6EE6               	movwf	postinc1,c
  2375  0001DC  0E00               	movlw	0
  2376  0001DE  6EE6               	movwf	postinc1,c
  2377  0001E0  C001  FFE6         	movff	_task_running,postinc1
  2378  0001E4  C002  FFE6         	movff	_task_running+1,postinc1
  2379  0001E8  EC3D  F009         	call	___wmul	;wreg free
  2380  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2381  0001EE  2460               	addwf	btemp,w,c
  2382  0001F0  6ED9               	movwf	fsr2l,c
  2383  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2384  0001F4  2061               	addwfc	btemp+1,w,c
  2385  0001F6  6EDA               	movwf	fsr2h,c
  2386  0001F8  CFDE F061          	movff	postinc2,btemp+1
  2387  0001FC  CFDD F062          	movff	postdec2,btemp+2
  2388  000200  C061  FFE6         	movff	btemp+1,postinc1
  2389  000204  C062  FFE6         	movff	btemp+2,postinc1
  2390  000208  EC3D  F009         	call	___wmul	;wreg free
  2391  00020C  C060  F068         	movff	btemp,btemp+8
  2392  000210  C061  F069         	movff	btemp+1,btemp+9
  2393  000214  0E6E               	movlw	110
  2394  000216  6EE6               	movwf	postinc1,c
  2395  000218  0E00               	movlw	0
  2396  00021A  6EE6               	movwf	postinc1,c
  2397  00021C  C001  FFE6         	movff	_task_running,postinc1
  2398  000220  C002  FFE6         	movff	_task_running+1,postinc1
  2399  000224  EC3D  F009         	call	___wmul	;wreg free
  2400  000228  0EEE               	movlw	low _F_APTOS
  2401  00022A  6E6A               	movwf	btemp+10,c
  2402  00022C  0E00               	movlw	high _F_APTOS
  2403  00022E  6E6B               	movwf	btemp+11,c
  2404  000230  0E0B               	movlw	11
  2405  000232  266A               	addwf	btemp+10,f,c
  2406  000234  0E00               	movlw	0
  2407  000236  226B               	addwfc	btemp+11,f,c
  2408  000238  5060               	movf	btemp,w,c
  2409  00023A  266A               	addwf	btemp+10,f,c
  2410  00023C  5061               	movf	btemp+1,w,c
  2411  00023E  226B               	addwfc	btemp+11,f,c
  2412  000240  5068               	movf	btemp+8,w,c
  2413  000242  246A               	addwf	btemp+10,w,c
  2414  000244  6ED9               	movwf	fsr2l,c
  2415  000246  5069               	movf	btemp+9,w,c
  2416  000248  206B               	addwfc	btemp+11,w,c
  2417  00024A  6EDA               	movwf	fsr2h,c
  2418  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2419  000250  0E6E               	movlw	110
  2420  000252  6EE6               	movwf	postinc1,c
  2421  000254  0E00               	movlw	0
  2422  000256  6EE6               	movwf	postinc1,c
  2423  000258  C001  FFE6         	movff	_task_running,postinc1
  2424  00025C  C002  FFE6         	movff	_task_running+1,postinc1
  2425  000260  EC3D  F009         	call	___wmul	;wreg free
  2426  000264  0E57               	movlw	low (_F_APTOS+105)
  2427  000266  2460               	addwf	btemp,w,c
  2428  000268  6ED9               	movwf	fsr2l,c
  2429  00026A  0E01               	movlw	high (_F_APTOS+105)
  2430  00026C  2061               	addwfc	btemp+1,w,c
  2431  00026E  6EDA               	movwf	fsr2h,c
  2432  000270  2ADE               	incf	postinc2,f,c
  2433  000272  0E00               	movlw	0
  2434  000274  22DD               	addwfc	postdec2,f,c
  2435  000276  0006               	pop		;# 
  2436  000278  50FC               	movf	stkptr,w,c	;volatile
  2437  00027A  A4D8               	btfss	status,2,c
  2438  00027C  D729               	goto	l1387
  2439                           
  2440                           ;kernel.c: 42: task_running = rr_scheduler();
  2441  00027E  ECCB  F009         	call	_rr_scheduler	;wreg free
  2442  000282  C060  F001         	movff	btemp,_task_running
  2443  000286  C061  F002         	movff	btemp+1,_task_running+1
  2444                           
  2445                           ;kernel.c: 48: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2446  00028A  6AFC               	clrf	stkptr,c	;volatile
  2447  00028C  0E6E               	movlw	110
  2448  00028E  6EE6               	movwf	postinc1,c
  2449  000290  0E00               	movlw	0
  2450  000292  6EE6               	movwf	postinc1,c
  2451  000294  C001  FFE6         	movff	_task_running,postinc1
  2452  000298  C002  FFE6         	movff	_task_running+1,postinc1
  2453  00029C  EC3D  F009         	call	___wmul	;wreg free
  2454  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2455  0002A2  2460               	addwf	btemp,w,c
  2456  0002A4  6ED9               	movwf	fsr2l,c
  2457  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2458  0002A8  2061               	addwfc	btemp+1,w,c
  2459  0002AA  6EDA               	movwf	fsr2h,c
  2460  0002AC  50DE               	movf	postinc2,w,c
  2461  0002AE  10DE               	iorwf	postinc2,w,c
  2462  0002B0  A4D8               	btfss	status,2,c
  2463  0002B2  D01B               	goto	l1407
  2464  0002B4  0005               	push		;# 
  2465  0002B6  0E6E               	movlw	110
  2466  0002B8  6EE6               	movwf	postinc1,c
  2467  0002BA  0E00               	movlw	0
  2468  0002BC  6EE6               	movwf	postinc1,c
  2469  0002BE  C001  FFE6         	movff	_task_running,postinc1
  2470  0002C2  C002  FFE6         	movff	_task_running+1,postinc1
  2471  0002C6  EC3D  F009         	call	___wmul	;wreg free
  2472  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2473  0002CC  2460               	addwf	btemp,w,c
  2474  0002CE  6ED9               	movwf	fsr2l,c
  2475  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2476  0002D2  2061               	addwfc	btemp+1,w,c
  2477  0002D4  6EDA               	movwf	fsr2h,c
  2478  0002D6  CFDE F061          	movff	postinc2,btemp+1
  2479  0002DA  CFDD F062          	movff	postdec2,btemp+2
  2480  0002DE  C061  FFFD         	movff	btemp+1,tosl	;volatile
  2481  0002E2  C062  FFFE         	movff	btemp+2,tosh	;volatile
  2482  0002E6  6AFF               	clrf	tosu,c	;volatile
  2483  0002E8  D11F               	goto	u45_20
  2484  0002EA                     l1407:
  2485  0002EA  0E6E               	movlw	110
  2486  0002EC  6EE6               	movwf	postinc1,c
  2487  0002EE  0E00               	movlw	0
  2488  0002F0  6EE6               	movwf	postinc1,c
  2489  0002F2  C001  FFE6         	movff	_task_running,postinc1
  2490  0002F6  C002  FFE6         	movff	_task_running+1,postinc1
  2491  0002FA  EC3D  F009         	call	___wmul	;wreg free
  2492  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2493  000300  2460               	addwf	btemp,w,c
  2494  000302  6ED9               	movwf	fsr2l,c
  2495  000304  0E01               	movlw	high (_F_APTOS+107)
  2496  000306  2061               	addwfc	btemp+1,w,c
  2497  000308  6EDA               	movwf	fsr2h,c
  2498  00030A  50DF               	movf	indf2,w,c
  2499  00030C  6EE0               	movwf	bsr,c	;volatile
  2500  00030E  0E6E               	movlw	110
  2501  000310  6EE6               	movwf	postinc1,c
  2502  000312  0E00               	movlw	0
  2503  000314  6EE6               	movwf	postinc1,c
  2504  000316  C001  FFE6         	movff	_task_running,postinc1
  2505  00031A  C002  FFE6         	movff	_task_running+1,postinc1
  2506  00031E  EC3D  F009         	call	___wmul	;wreg free
  2507  000322  0E5A               	movlw	low (_F_APTOS+108)
  2508  000324  2460               	addwf	btemp,w,c
  2509  000326  6ED9               	movwf	fsr2l,c
  2510  000328  0E01               	movlw	high (_F_APTOS+108)
  2511  00032A  2061               	addwfc	btemp+1,w,c
  2512  00032C  6EDA               	movwf	fsr2h,c
  2513  00032E  50DF               	movf	indf2,w,c
  2514  000330  6ED8               	movwf	status,c	;volatile
  2515  000332  0E6E               	movlw	110
  2516  000334  6EE6               	movwf	postinc1,c
  2517  000336  0E00               	movlw	0
  2518  000338  6EE6               	movwf	postinc1,c
  2519  00033A  C001  FFE6         	movff	_task_running,postinc1
  2520  00033E  C002  FFE6         	movff	_task_running+1,postinc1
  2521  000342  EC3D  F009         	call	___wmul	;wreg free
  2522  000346  0E5B               	movlw	low (_F_APTOS+109)
  2523  000348  2460               	addwf	btemp,w,c
  2524  00034A  6ED9               	movwf	fsr2l,c
  2525  00034C  0E01               	movlw	high (_F_APTOS+109)
  2526  00034E  2061               	addwfc	btemp+1,w,c
  2527  000350  6EDA               	movwf	fsr2h,c
  2528  000352  50DF               	movf	indf2,w,c
  2529  000354  6E6B               	movwf	btemp+11,c
  2530  000356  506B               	movf	btemp+11,w,c
  2531  000358                     l78:
  2532  000358  0005               	push		;# 
  2533  00035A  0E6E               	movlw	110
  2534  00035C  6EE6               	movwf	postinc1,c
  2535  00035E  0E00               	movlw	0
  2536  000360  6EE6               	movwf	postinc1,c
  2537  000362  C001  FFE6         	movff	_task_running,postinc1
  2538  000366  C002  FFE6         	movff	_task_running+1,postinc1
  2539  00036A  EC3D  F009         	call	___wmul	;wreg free
  2540  00036E  0E57               	movlw	low (_F_APTOS+105)
  2541  000370  2460               	addwf	btemp,w,c
  2542  000372  6ED9               	movwf	fsr2l,c
  2543  000374  0E01               	movlw	high (_F_APTOS+105)
  2544  000376  2061               	addwfc	btemp+1,w,c
  2545  000378  6EDA               	movwf	fsr2h,c
  2546  00037A  06DE               	decf	postinc2,f,c
  2547  00037C  0E00               	movlw	0
  2548  00037E  5ADD               	subwfb	postdec2,f,c
  2549  000380  0E03               	movlw	3
  2550  000382  6EE6               	movwf	postinc1,c
  2551  000384  0E00               	movlw	0
  2552  000386  6EE6               	movwf	postinc1,c
  2553  000388  0E6E               	movlw	110
  2554  00038A  6EE6               	movwf	postinc1,c
  2555  00038C  0E00               	movlw	0
  2556  00038E  6EE6               	movwf	postinc1,c
  2557  000390  C001  FFE6         	movff	_task_running,postinc1
  2558  000394  C002  FFE6         	movff	_task_running+1,postinc1
  2559  000398  EC3D  F009         	call	___wmul	;wreg free
  2560  00039C  0E57               	movlw	low (_F_APTOS+105)
  2561  00039E  2460               	addwf	btemp,w,c
  2562  0003A0  6ED9               	movwf	fsr2l,c
  2563  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2564  0003A4  2061               	addwfc	btemp+1,w,c
  2565  0003A6  6EDA               	movwf	fsr2h,c
  2566  0003A8  CFDE F061          	movff	postinc2,btemp+1
  2567  0003AC  CFDD F062          	movff	postdec2,btemp+2
  2568  0003B0  C061  FFE6         	movff	btemp+1,postinc1
  2569  0003B4  C062  FFE6         	movff	btemp+2,postinc1
  2570  0003B8  EC3D  F009         	call	___wmul	;wreg free
  2571  0003BC  C060  F068         	movff	btemp,btemp+8
  2572  0003C0  C061  F069         	movff	btemp+1,btemp+9
  2573  0003C4  0E6E               	movlw	110
  2574  0003C6  6EE6               	movwf	postinc1,c
  2575  0003C8  0E00               	movlw	0
  2576  0003CA  6EE6               	movwf	postinc1,c
  2577  0003CC  C001  FFE6         	movff	_task_running,postinc1
  2578  0003D0  C002  FFE6         	movff	_task_running+1,postinc1
  2579  0003D4  EC3D  F009         	call	___wmul	;wreg free
  2580  0003D8  0EEE               	movlw	low _F_APTOS
  2581  0003DA  6E6A               	movwf	btemp+10,c
  2582  0003DC  0E00               	movlw	high _F_APTOS
  2583  0003DE  6E6B               	movwf	btemp+11,c
  2584  0003E0  0E09               	movlw	9
  2585  0003E2  266A               	addwf	btemp+10,f,c
  2586  0003E4  0E00               	movlw	0
  2587  0003E6  226B               	addwfc	btemp+11,f,c
  2588  0003E8  5060               	movf	btemp,w,c
  2589  0003EA  266A               	addwf	btemp+10,f,c
  2590  0003EC  5061               	movf	btemp+1,w,c
  2591  0003EE  226B               	addwfc	btemp+11,f,c
  2592  0003F0  5068               	movf	btemp+8,w,c
  2593  0003F2  246A               	addwf	btemp+10,w,c
  2594  0003F4  6ED9               	movwf	fsr2l,c
  2595  0003F6  5069               	movf	btemp+9,w,c
  2596  0003F8  206B               	addwfc	btemp+11,w,c
  2597  0003FA  6EDA               	movwf	fsr2h,c
  2598  0003FC  50DF               	movf	indf2,w,c
  2599  0003FE  6EFF               	movwf	tosu,c	;volatile
  2600  000400  0E03               	movlw	3
  2601  000402  6EE6               	movwf	postinc1,c
  2602  000404  0E00               	movlw	0
  2603  000406  6EE6               	movwf	postinc1,c
  2604  000408  0E6E               	movlw	110
  2605  00040A  6EE6               	movwf	postinc1,c
  2606  00040C  0E00               	movlw	0
  2607  00040E  6EE6               	movwf	postinc1,c
  2608  000410  C001  FFE6         	movff	_task_running,postinc1
  2609  000414  C002  FFE6         	movff	_task_running+1,postinc1
  2610  000418  EC3D  F009         	call	___wmul	;wreg free
  2611  00041C  0E57               	movlw	low (_F_APTOS+105)
  2612  00041E  2460               	addwf	btemp,w,c
  2613  000420  6ED9               	movwf	fsr2l,c
  2614  000422  0E01               	movlw	high (_F_APTOS+105)
  2615  000424  2061               	addwfc	btemp+1,w,c
  2616  000426  6EDA               	movwf	fsr2h,c
  2617  000428  CFDE F061          	movff	postinc2,btemp+1
  2618  00042C  CFDD F062          	movff	postdec2,btemp+2
  2619  000430  C061  FFE6         	movff	btemp+1,postinc1
  2620  000434  C062  FFE6         	movff	btemp+2,postinc1
  2621  000438  EC3D  F009         	call	___wmul	;wreg free
  2622  00043C  C060  F068         	movff	btemp,btemp+8
  2623  000440  C061  F069         	movff	btemp+1,btemp+9
  2624  000444  0E6E               	movlw	110
  2625  000446  6EE6               	movwf	postinc1,c
  2626  000448  0E00               	movlw	0
  2627  00044A  6EE6               	movwf	postinc1,c
  2628  00044C  C001  FFE6         	movff	_task_running,postinc1
  2629  000450  C002  FFE6         	movff	_task_running+1,postinc1
  2630  000454  EC3D  F009         	call	___wmul	;wreg free
  2631  000458  0EEE               	movlw	low _F_APTOS
  2632  00045A  6E6A               	movwf	btemp+10,c
  2633  00045C  0E00               	movlw	high _F_APTOS
  2634  00045E  6E6B               	movwf	btemp+11,c
  2635  000460  0E0A               	movlw	10
  2636  000462  266A               	addwf	btemp+10,f,c
  2637  000464  0E00               	movlw	0
  2638  000466  226B               	addwfc	btemp+11,f,c
  2639  000468  5060               	movf	btemp,w,c
  2640  00046A  266A               	addwf	btemp+10,f,c
  2641  00046C  5061               	movf	btemp+1,w,c
  2642  00046E  226B               	addwfc	btemp+11,f,c
  2643  000470  5068               	movf	btemp+8,w,c
  2644  000472  246A               	addwf	btemp+10,w,c
  2645  000474  6ED9               	movwf	fsr2l,c
  2646  000476  5069               	movf	btemp+9,w,c
  2647  000478  206B               	addwfc	btemp+11,w,c
  2648  00047A  6EDA               	movwf	fsr2h,c
  2649  00047C  50DF               	movf	indf2,w,c
  2650  00047E  6EFD               	movwf	tosl,c	;volatile
  2651  000480  0E03               	movlw	3
  2652  000482  6EE6               	movwf	postinc1,c
  2653  000484  0E00               	movlw	0
  2654  000486  6EE6               	movwf	postinc1,c
  2655  000488  0E6E               	movlw	110
  2656  00048A  6EE6               	movwf	postinc1,c
  2657  00048C  0E00               	movlw	0
  2658  00048E  6EE6               	movwf	postinc1,c
  2659  000490  C001  FFE6         	movff	_task_running,postinc1
  2660  000494  C002  FFE6         	movff	_task_running+1,postinc1
  2661  000498  EC3D  F009         	call	___wmul	;wreg free
  2662  00049C  0E57               	movlw	low (_F_APTOS+105)
  2663  00049E  2460               	addwf	btemp,w,c
  2664  0004A0  6ED9               	movwf	fsr2l,c
  2665  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2666  0004A4  2061               	addwfc	btemp+1,w,c
  2667  0004A6  6EDA               	movwf	fsr2h,c
  2668  0004A8  CFDE F061          	movff	postinc2,btemp+1
  2669  0004AC  CFDD F062          	movff	postdec2,btemp+2
  2670  0004B0  C061  FFE6         	movff	btemp+1,postinc1
  2671  0004B4  C062  FFE6         	movff	btemp+2,postinc1
  2672  0004B8  EC3D  F009         	call	___wmul	;wreg free
  2673  0004BC  C060  F068         	movff	btemp,btemp+8
  2674  0004C0  C061  F069         	movff	btemp+1,btemp+9
  2675  0004C4  0E6E               	movlw	110
  2676  0004C6  6EE6               	movwf	postinc1,c
  2677  0004C8  0E00               	movlw	0
  2678  0004CA  6EE6               	movwf	postinc1,c
  2679  0004CC  C001  FFE6         	movff	_task_running,postinc1
  2680  0004D0  C002  FFE6         	movff	_task_running+1,postinc1
  2681  0004D4  EC3D  F009         	call	___wmul	;wreg free
  2682  0004D8  0EEE               	movlw	low _F_APTOS
  2683  0004DA  6E6A               	movwf	btemp+10,c
  2684  0004DC  0E00               	movlw	high _F_APTOS
  2685  0004DE  6E6B               	movwf	btemp+11,c
  2686  0004E0  0E0B               	movlw	11
  2687  0004E2  266A               	addwf	btemp+10,f,c
  2688  0004E4  0E00               	movlw	0
  2689  0004E6  226B               	addwfc	btemp+11,f,c
  2690  0004E8  5060               	movf	btemp,w,c
  2691  0004EA  266A               	addwf	btemp+10,f,c
  2692  0004EC  5061               	movf	btemp+1,w,c
  2693  0004EE  226B               	addwfc	btemp+11,f,c
  2694  0004F0  5068               	movf	btemp+8,w,c
  2695  0004F2  246A               	addwf	btemp+10,w,c
  2696  0004F4  6ED9               	movwf	fsr2l,c
  2697  0004F6  5069               	movf	btemp+9,w,c
  2698  0004F8  206B               	addwfc	btemp+11,w,c
  2699  0004FA  6EDA               	movwf	fsr2h,c
  2700  0004FC  50DF               	movf	indf2,w,c
  2701  0004FE  6EFE               	movwf	tosh,c	;volatile
  2702  000500  0E6E               	movlw	110
  2703  000502  6EE6               	movwf	postinc1,c
  2704  000504  0E00               	movlw	0
  2705  000506  6EE6               	movwf	postinc1,c
  2706  000508  C001  FFE6         	movff	_task_running,postinc1
  2707  00050C  C002  FFE6         	movff	_task_running+1,postinc1
  2708  000510  EC3D  F009         	call	___wmul	;wreg free
  2709  000514  0E57               	movlw	low (_F_APTOS+105)
  2710  000516  2460               	addwf	btemp,w,c
  2711  000518  6ED9               	movwf	fsr2l,c
  2712  00051A  0E01               	movlw	high (_F_APTOS+105)
  2713  00051C  2061               	addwfc	btemp+1,w,c
  2714  00051E  6EDA               	movwf	fsr2h,c
  2715  000520  50DE               	movf	postinc2,w,c
  2716  000522  10DE               	iorwf	postinc2,w,c
  2717  000524  A4D8               	btfss	status,2,c
  2718  000526  D718               	goto	l78
  2719  000528                     u45_20:
  2720  000528  0E6E               	movlw	110
  2721  00052A  6EE6               	movwf	postinc1,c
  2722  00052C  0E00               	movlw	0
  2723  00052E  6EE6               	movwf	postinc1,c
  2724  000530  C001  FFE6         	movff	_task_running,postinc1
  2725  000534  C002  FFE6         	movff	_task_running+1,postinc1
  2726  000538  EC3D  F009         	call	___wmul	;wreg free
  2727  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2728  00053E  2460               	addwf	btemp,w,c
  2729  000540  6ED9               	movwf	fsr2l,c
  2730  000542  0E00               	movlw	high (_F_APTOS+8)
  2731  000544  2061               	addwfc	btemp+1,w,c
  2732  000546  6EDA               	movwf	fsr2h,c
  2733  000548  0E02               	movlw	2
  2734  00054A  6EDF               	movwf	indf2,c
  2735  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2736                           
  2737                           ;kernel.c: 50: (INTCONbits.GIE = 1);
  2738  00054E  8EF2               	bsf	intcon,7,c	;volatile
  2739                           
  2740                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2741  000550  52E5               	movf	postdec1,f,c
  2742  000552  0012               	return		;funcret
  2743  000554                     __end_of_dispatcher:
  2744                           	opt stack 0
  2745                           tosu	equ	0xFFF
  2746                           tosh	equ	0xFFE
  2747                           tosl	equ	0xFFD
  2748                           stkptr	equ	0xFFC
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           intcon	equ	0xFF2
  2756                           postinc0	equ	0xFEE
  2757                           plusw0	equ	0xFEB
  2758                           fsr0h	equ	0xFEA
  2759                           fsr0l	equ	0xFE9
  2760                           wreg	equ	0xFE8
  2761                           postinc1	equ	0xFE6
  2762                           postdec1	equ	0xFE5
  2763                           plusw1	equ	0xFE3
  2764                           fsr1h	equ	0xFE2
  2765                           fsr1l	equ	0xFE1
  2766                           bsr	equ	0xFE0
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           plusw2	equ	0xFDB
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _rr_scheduler *****************
  2776 ;; Defined at:
  2777 ;;		line 12 in file "scheduler.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  next_task_to    2  [STACK] unsigned int 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  2  [STACK] unsigned int 
  2784 ;; Registers used:
  2785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2791 ;;      Params:         0       0       0       0       0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0
  2794 ;;      Totals:         0       0       0       0       0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    5
  2798 ;; This function calls:
  2799 ;;		___lwmod
  2800 ;;		___wmul
  2801 ;; This function is called by:
  2802 ;;		_dispatcher
  2803 ;; This function uses a reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text12
  2807  001396                     __ptext12:
  2808                           	opt stack 0
  2809  001396                     _rr_scheduler:
  2810                           	opt stack 0
  2811                           
  2812                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2813  001396  52E6               	movf	postinc1,f,c
  2814  001398  52E6               	movf	postinc1,f,c
  2815                           
  2816                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2817                           
  2818                           ;incstack = 0
  2819  00139A  C001  F061         	movff	_task_running,btemp+1
  2820  00139E  C002  F062         	movff	_task_running+1,btemp+2
  2821                           
  2822                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2823  0013A2  0EFE               	movlw	-2
  2824  0013A4  C061  FFE3         	movff	btemp+1,plusw1
  2825  0013A8  0EFF               	movlw	-1
  2826  0013AA  C062  FFE3         	movff	btemp+2,plusw1
  2827  0013AE                     l1355:
  2828                           
  2829                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2830  0013AE  C003  FFE6         	movff	_tasks_installed,postinc1
  2831  0013B2  C004  FFE6         	movff	_tasks_installed+1,postinc1
  2832                           
  2833                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2834  0013B6  0EFC               	movlw	-4
  2835  0013B8  50E3               	movf	plusw1,w,c
  2836  0013BA  0F01               	addlw	1
  2837  0013BC  6E61               	movwf	btemp+1,c
  2838  0013BE  0EFD               	movlw	-3
  2839  0013C0  CFE3 F062          	movff	plusw1,btemp+2
  2840  0013C4  0E00               	movlw	0
  2841  0013C6  2262               	addwfc	btemp+2,f,c
  2842  0013C8  C061  FFE6         	movff	btemp+1,postinc1
  2843  0013CC  C062  FFE6         	movff	btemp+2,postinc1
  2844  0013D0  EC3E  F008         	call	___lwmod	;wreg free
  2845                           
  2846                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2847  0013D4  0EFE               	movlw	-2
  2848  0013D6  C060  FFE3         	movff	btemp,plusw1
  2849  0013DA  0EFF               	movlw	-1
  2850  0013DC  C061  FFE3         	movff	btemp+1,plusw1
  2851                           
  2852                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2853  0013E0  0E6E               	movlw	110
  2854  0013E2  6EE6               	movwf	postinc1,c
  2855  0013E4  0E00               	movlw	0
  2856  0013E6  6EE6               	movwf	postinc1,c
  2857                           
  2858                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2859  0013E8  0EFC               	movlw	-4
  2860  0013EA  CFE3 FFE6          	movff	plusw1,postinc1
  2861  0013EE  CFE3 FFE6          	movff	plusw1,postinc1
  2862  0013F2  EC3D  F009         	call	___wmul	;wreg free
  2863  0013F6  0EF6               	movlw	low (_F_APTOS+8)
  2864  0013F8  2460               	addwf	btemp,w,c
  2865  0013FA  6ED9               	movwf	fsr2l,c
  2866  0013FC  0E00               	movlw	high (_F_APTOS+8)
  2867  0013FE  2061               	addwfc	btemp+1,w,c
  2868  001400  6EDA               	movwf	fsr2h,c
  2869  001402  04DE               	decf	postinc2,w,c
  2870  001404  A4D8               	btfss	status,2,c
  2871  001406  D7D3               	goto	l1355
  2872                           
  2873                           ;scheduler.c: 20: return next_task_to_run;
  2874                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2875  001408  0EFE               	movlw	-2
  2876  00140A  CFE3 F060          	movff	plusw1,btemp
  2877  00140E  0EFF               	movlw	-1
  2878  001410  CFE3 F061          	movff	plusw1,btemp+1
  2879                           
  2880                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2881  001414  52E5               	movf	postdec1,f,c
  2882  001416  52E5               	movf	postdec1,f,c
  2883  001418  0012               	return		;funcret
  2884  00141A                     __end_of_rr_scheduler:
  2885                           	opt stack 0
  2886                           tosu	equ	0xFFF
  2887                           tosh	equ	0xFFE
  2888                           tosl	equ	0xFFD
  2889                           stkptr	equ	0xFFC
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           intcon	equ	0xFF2
  2897                           postinc0	equ	0xFEE
  2898                           plusw0	equ	0xFEB
  2899                           fsr0h	equ	0xFEA
  2900                           fsr0l	equ	0xFE9
  2901                           wreg	equ	0xFE8
  2902                           postinc1	equ	0xFE6
  2903                           postdec1	equ	0xFE5
  2904                           plusw1	equ	0xFE3
  2905                           fsr1h	equ	0xFE2
  2906                           fsr1l	equ	0xFE1
  2907                           bsr	equ	0xFE0
  2908                           indf2	equ	0xFDF
  2909                           postinc2	equ	0xFDE
  2910                           postdec2	equ	0xFDD
  2911                           plusw2	equ	0xFDB
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8
  2915                           
  2916 ;; *************** function ___lwmod *****************
  2917 ;; Defined at:
  2918 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  dividend        2  [STACK] unsigned int 
  2921 ;;  divisor         2  [STACK] unsigned int 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  counter         1  [STACK] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  2  [STACK] unsigned int 
  2926 ;; Registers used:
  2927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2933 ;;      Params:         0       0       0       0       0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0
  2936 ;;      Totals:         0       0       0       0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    4
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_rr_scheduler
  2944 ;;		_sem_wait
  2945 ;;		_sem_post
  2946 ;; This function uses a reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text13
  2950  00107C                     __ptext13:
  2951                           	opt stack 0
  2952  00107C                     ___lwmod:
  2953                           	opt stack 0
  2954                           
  2955                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2956  00107C  52E6               	movf	postinc1,f,c
  2957                           
  2958                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2959                           
  2960                           ;incstack = 0
  2961  00107E  0EFB               	movlw	-5
  2962  001080  CFE3 F060          	movff	plusw1,btemp
  2963  001084  0EFC               	movlw	-4
  2964  001086  50E3               	movf	plusw1,w,c
  2965  001088  1060               	iorwf	btemp,w,c
  2966  00108A  B4D8               	btfsc	status,2,c
  2967  00108C  D04A               	goto	u9_20
  2968                           
  2969                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2970  00108E  0EFF               	movlw	-1
  2971  001090  6AE3               	clrf	plusw1,c
  2972  001092  D010               	goto	L3
  2973  001094                     l945:
  2974                           
  2975                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2976  001094  0EFB               	movlw	-5
  2977  001096  50E3               	movf	plusw1,w,c
  2978  001098  90D8               	bcf	status,0,c
  2979  00109A  34E8               	rlcf	wreg,w,c
  2980  00109C  6E60               	movwf	btemp,c
  2981  00109E  0EFB               	movlw	-5
  2982  0010A0  C060  FFE3         	movff	btemp,plusw1
  2983  0010A4  0EFC               	movlw	-4
  2984  0010A6  50E3               	movf	plusw1,w,c
  2985  0010A8  34E8               	rlcf	wreg,w,c
  2986  0010AA  6E60               	movwf	btemp,c
  2987  0010AC  0EFC               	movlw	-4
  2988  0010AE  C060  FFE3         	movff	btemp,plusw1
  2989                           
  2990                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2991  0010B2  0EFF               	movlw	-1
  2992  0010B4                     L3:
  2993  0010B4  2AE3               	incf	plusw1,f,c
  2994                           
  2995                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2996  0010B6  0EFC               	movlw	-4
  2997  0010B8  AEE3               	btfss	plusw1,7,c
  2998  0010BA  D7EC               	goto	l945
  2999  0010BC                     u7_20:
  3000                           
  3001                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3002  0010BC  0EFB               	movlw	-5
  3003  0010BE  CFE3 F061          	movff	plusw1,btemp+1
  3004  0010C2  0EFC               	movlw	-4
  3005  0010C4  CFE3 F062          	movff	plusw1,btemp+2
  3006                           
  3007                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3008  0010C8  0EFD               	movlw	-3
  3009  0010CA  CFE3 F06A          	movff	plusw1,btemp+10
  3010  0010CE  0EFE               	movlw	-2
  3011  0010D0  CFE3 F06B          	movff	plusw1,btemp+11
  3012  0010D4  5061               	movf	btemp+1,w,c
  3013  0010D6  5C6A               	subwf	btemp+10,w,c
  3014  0010D8  5062               	movf	btemp+2,w,c
  3015  0010DA  586B               	subwfb	btemp+11,w,c
  3016  0010DC  A0D8               	btfss	status,0,c
  3017  0010DE  D012               	goto	l955
  3018                           
  3019                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3020                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3021  0010E0  0EFD               	movlw	-3
  3022  0010E2  50E3               	movf	plusw1,w,c
  3023  0010E4  6E60               	movwf	btemp,c
  3024  0010E6  0EFB               	movlw	-5
  3025  0010E8  50E3               	movf	plusw1,w,c
  3026  0010EA  5E60               	subwf	btemp,f,c
  3027  0010EC  0EFD               	movlw	-3
  3028  0010EE  C060  FFE3         	movff	btemp,plusw1
  3029  0010F2  0EFE               	movlw	-2
  3030  0010F4  50E3               	movf	plusw1,w,c
  3031  0010F6  6E60               	movwf	btemp,c
  3032  0010F8  0EFC               	movlw	-4
  3033  0010FA  50E3               	movf	plusw1,w,c
  3034  0010FC  5A60               	subwfb	btemp,f,c
  3035  0010FE  0EFE               	movlw	-2
  3036  001100  C060  FFE3         	movff	btemp,plusw1
  3037  001104                     l955:
  3038                           
  3039                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3040  001104  90D8               	bcf	status,0,c
  3041  001106  0EFC               	movlw	-4
  3042  001108  32E3               	rrcf	plusw1,f,c
  3043  00110A  0EFB               	movlw	-5
  3044  00110C  32E3               	rrcf	plusw1,f,c
  3045                           
  3046                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  3047  00110E  0EFF               	movlw	-1
  3048  001110  50E3               	movf	plusw1,w,c
  3049  001112  6E60               	movwf	btemp,c
  3050  001114  0E01               	movlw	1
  3051  001116  5E60               	subwf	btemp,f,c
  3052  001118  0EFF               	movlw	-1
  3053  00111A  C060  FFE3         	movff	btemp,plusw1
  3054  00111E  A4D8               	btfss	status,2,c
  3055  001120  D7CD               	goto	u7_20
  3056  001122                     u9_20:
  3057                           
  3058                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3059  001122  0EFD               	movlw	-3
  3060  001124  CFE3 F060          	movff	plusw1,btemp
  3061  001128  0EFE               	movlw	-2
  3062  00112A  CFE3 F061          	movff	plusw1,btemp+1
  3063                           
  3064                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  3065  00112E  0EFB               	movlw	251
  3066  001130  26E1               	addwf	fsr1l,f,c
  3067  001132  0EFF               	movlw	255
  3068  001134  22E2               	addwfc	fsr1h,f,c
  3069  001136  0012               	return		;funcret
  3070  001138                     __end_of___lwmod:
  3071                           	opt stack 0
  3072                           tosu	equ	0xFFF
  3073                           tosh	equ	0xFFE
  3074                           tosl	equ	0xFFD
  3075                           stkptr	equ	0xFFC
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           postinc0	equ	0xFEE
  3084                           plusw0	equ	0xFEB
  3085                           fsr0h	equ	0xFEA
  3086                           fsr0l	equ	0xFE9
  3087                           wreg	equ	0xFE8
  3088                           postinc1	equ	0xFE6
  3089                           postdec1	equ	0xFE5
  3090                           plusw1	equ	0xFE3
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           bsr	equ	0xFE0
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           plusw2	equ	0xFDB
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _create_pipe *****************
  3103 ;; Defined at:
  3104 ;;		line 10 in file "pipe.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  pipe            2  [STACK] PTR struct pipe
  3107 ;;		 -> pipe1(14), 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1  [STACK] void 
  3112 ;; Registers used:
  3113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3119 ;;      Params:         0       0       0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0
  3122 ;;      Totals:         0       0       0       0       0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_aviao1
  3130 ;;		_aviao2
  3131 ;; This function uses a reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text14
  3135  001138                     __ptext14:
  3136                           	opt stack 0
  3137  001138                     _create_pipe:
  3138                           	opt stack 22
  3139                           
  3140                           ;pipe.c: 12: pipe->pos_read_pipe = 0;
  3141                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3142                           
  3143                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3144                           ;incstack = 0
  3145  001138  0EFE               	movlw	-2
  3146  00113A  CFE3 F061          	movff	plusw1,btemp+1
  3147  00113E  0EFF               	movlw	-1
  3148  001140  CFE3 F062          	movff	plusw1,btemp+2
  3149  001144  0E04               	movlw	4
  3150  001146  2461               	addwf	btemp+1,w,c
  3151  001148  6ED9               	movwf	fsr2l,c
  3152  00114A  0E00               	movlw	0
  3153  00114C  2062               	addwfc	btemp+2,w,c
  3154  00114E  6EDA               	movwf	fsr2h,c
  3155  001150  0E00               	movlw	0
  3156  001152  6EDE               	movwf	postinc2,c
  3157  001154  0E00               	movlw	0
  3158  001156  6EDD               	movwf	postdec2,c
  3159                           
  3160                           ;pipe.c: 13: pipe->pos_write_pipe = 0;
  3161                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3162  001158  0EFE               	movlw	-2
  3163  00115A  CFE3 F061          	movff	plusw1,btemp+1
  3164  00115E  0EFF               	movlw	-1
  3165  001160  CFE3 F062          	movff	plusw1,btemp+2
  3166  001164  0E06               	movlw	6
  3167  001166  2461               	addwf	btemp+1,w,c
  3168  001168  6ED9               	movwf	fsr2l,c
  3169  00116A  0E00               	movlw	0
  3170  00116C  2062               	addwfc	btemp+2,w,c
  3171  00116E  6EDA               	movwf	fsr2h,c
  3172  001170  0E00               	movlw	0
  3173  001172  6EDE               	movwf	postinc2,c
  3174  001174  0E00               	movlw	0
  3175  001176  6EDD               	movwf	postdec2,c
  3176                           
  3177                           ;pipe.c: 14: pipe->pipe_itens = 0;
  3178                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3179  001178  0EFE               	movlw	-2
  3180  00117A  CFE3 F061          	movff	plusw1,btemp+1
  3181  00117E  0EFF               	movlw	-1
  3182  001180  CFE3 F062          	movff	plusw1,btemp+2
  3183  001184  0E08               	movlw	8
  3184  001186  2461               	addwf	btemp+1,w,c
  3185  001188  6ED9               	movwf	fsr2l,c
  3186  00118A  0E00               	movlw	0
  3187  00118C  2062               	addwfc	btemp+2,w,c
  3188  00118E  6EDA               	movwf	fsr2h,c
  3189  001190  0E00               	movlw	0
  3190  001192  6EDE               	movwf	postinc2,c
  3191  001194  0E00               	movlw	0
  3192  001196  6EDD               	movwf	postdec2,c
  3193                           
  3194                           ;pipe.c: 17: pipe->pos_bloqued_read = 0;
  3195                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3196  001198  0EFE               	movlw	-2
  3197  00119A  CFE3 F061          	movff	plusw1,btemp+1
  3198  00119E  0EFF               	movlw	-1
  3199  0011A0  CFE3 F062          	movff	plusw1,btemp+2
  3200  0011A4  0E0A               	movlw	10
  3201  0011A6  2461               	addwf	btemp+1,w,c
  3202  0011A8  6ED9               	movwf	fsr2l,c
  3203  0011AA  0E00               	movlw	0
  3204  0011AC  2062               	addwfc	btemp+2,w,c
  3205  0011AE  6EDA               	movwf	fsr2h,c
  3206  0011B0  0E00               	movlw	0
  3207  0011B2  6EDE               	movwf	postinc2,c
  3208  0011B4  0E00               	movlw	0
  3209  0011B6  6EDD               	movwf	postdec2,c
  3210                           
  3211                           ;pipe.c: 18: pipe->pos_bloqued_write = 0;
  3212                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3213  0011B8  0EFE               	movlw	-2
  3214  0011BA  CFE3 F061          	movff	plusw1,btemp+1
  3215  0011BE  0EFF               	movlw	-1
  3216  0011C0  CFE3 F062          	movff	plusw1,btemp+2
  3217  0011C4  0E0C               	movlw	12
  3218  0011C6  2461               	addwf	btemp+1,w,c
  3219  0011C8  6ED9               	movwf	fsr2l,c
  3220  0011CA  0E00               	movlw	0
  3221  0011CC  2062               	addwfc	btemp+2,w,c
  3222  0011CE  6EDA               	movwf	fsr2h,c
  3223  0011D0  0E00               	movlw	0
  3224  0011D2  6EDE               	movwf	postinc2,c
  3225  0011D4  0E00               	movlw	0
  3226  0011D6  6EDD               	movwf	postdec2,c
  3227                           
  3228                           ; _create_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, a
      +                          rgsize = 2, vargsize = 0
  3229  0011D8  52E5               	movf	postdec1,f,c
  3230  0011DA  52E5               	movf	postdec1,f,c
  3231  0011DC  0012               	return		;funcret
  3232  0011DE                     __end_of_create_pipe:
  3233                           	opt stack 0
  3234                           tosu	equ	0xFFF
  3235                           tosh	equ	0xFFE
  3236                           tosl	equ	0xFFD
  3237                           stkptr	equ	0xFFC
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           prodh	equ	0xFF4
  3243                           prodl	equ	0xFF3
  3244                           intcon	equ	0xFF2
  3245                           postinc0	equ	0xFEE
  3246                           plusw0	equ	0xFEB
  3247                           fsr0h	equ	0xFEA
  3248                           fsr0l	equ	0xFE9
  3249                           wreg	equ	0xFE8
  3250                           postinc1	equ	0xFE6
  3251                           postdec1	equ	0xFE5
  3252                           plusw1	equ	0xFE3
  3253                           fsr1h	equ	0xFE2
  3254                           fsr1l	equ	0xFE1
  3255                           bsr	equ	0xFE0
  3256                           indf2	equ	0xFDF
  3257                           postinc2	equ	0xFDE
  3258                           postdec2	equ	0xFDD
  3259                           plusw2	equ	0xFDB
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _createAviao *****************
  3265 ;; Defined at:
  3266 ;;		line 17 in file "tasks.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  av              2  [STACK] PTR struct aviao
  3269 ;;		 -> _uDynamicHeap(512), NULL(0), aviaozinho2(6), aviaozinho1(6), 
  3270 ;;  tempo_v         2  [STACK] unsigned int 
  3271 ;;  tempo_p         2  [STACK] unsigned int 
  3272 ;;  numero          2  [STACK] unsigned int 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  6  [STACK] struct aviao
  3277 ;; Registers used:
  3278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, pro
      +dl, prodh
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         0       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    6
  3291 ;; This function calls:
  3292 ;;		_SRAMalloc
  3293 ;; This function is called by:
  3294 ;;		_aviao1
  3295 ;;		_aviao2
  3296 ;; This function uses a reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text15
  3300  0011DE                     __ptext15:
  3301                           	opt stack 0
  3302  0011DE                     _createAviao:
  3303                           	opt stack 20
  3304                           
  3305                           ;tasks.c: 19: av = (aviao_t*) SRAMalloc(sizeof(aviao_t));
  3306                           
  3307                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
  3308                           ;incstack = 0
  3309  0011DE  0E06               	movlw	6
  3310  0011E0  6EE6               	movwf	postinc1,c
  3311  0011E2  EC81  F003         	call	_SRAMalloc	;wreg free
  3312                           
  3313                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3314  0011E6  0EFF               	movlw	-1
  3315  0011E8  C061  FFE3         	movff	btemp+1,plusw1
  3316  0011EC  0EFE               	movlw	-2
  3317  0011EE  C060  FFE3         	movff	btemp,plusw1
  3318                           
  3319                           ;tasks.c: 21: av->numero =numero;
  3320                           ;stkvar	createAviao@numero @ sp[(0)+-8]
  3321  0011F2  50E1               	movf	fsr1l,w,c
  3322  0011F4  0FF8               	addlw	-8
  3323  0011F6  6ED9               	movwf	fsr2l,c
  3324  0011F8  50E2               	movf	fsr1h,w,c
  3325  0011FA  6EDA               	movwf	fsr2h,c
  3326  0011FC  0EFF               	movlw	255
  3327  0011FE  22DA               	addwfc	fsr2h,f,c
  3328                           
  3329                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3330  001200  0EFE               	movlw	-2
  3331  001202  CFE3 FFE9          	movff	plusw1,fsr0l
  3332  001206  0EFF               	movlw	-1
  3333  001208  CFE3 FFEA          	movff	plusw1,fsr0h
  3334  00120C  CFDE FFEE          	movff	postinc2,postinc0
  3335  001210  CFDD FFED          	movff	postdec2,postdec0
  3336                           
  3337                           ;tasks.c: 22: av->tempo_p = tempo_p;
  3338                           ;stkvar	createAviao@tempo_p @ sp[(0)+-6]
  3339  001214  50E1               	movf	fsr1l,w,c
  3340  001216  0FFA               	addlw	-6
  3341  001218  6ED9               	movwf	fsr2l,c
  3342  00121A  50E2               	movf	fsr1h,w,c
  3343  00121C  6EDA               	movwf	fsr2h,c
  3344  00121E  0EFF               	movlw	255
  3345  001220  22DA               	addwfc	fsr2h,f,c
  3346                           
  3347                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3348  001222  0EFE               	movlw	-2
  3349  001224  CFE3 F061          	movff	plusw1,btemp+1
  3350  001228  0EFF               	movlw	-1
  3351  00122A  CFE3 F062          	movff	plusw1,btemp+2
  3352  00122E  0E04               	movlw	4
  3353  001230  2461               	addwf	btemp+1,w,c
  3354  001232  6EE9               	movwf	fsr0l,c
  3355  001234  0E00               	movlw	0
  3356  001236  2062               	addwfc	btemp+2,w,c
  3357  001238  6EEA               	movwf	fsr0h,c
  3358  00123A  CFDE FFEE          	movff	postinc2,postinc0
  3359  00123E  CFDD FFED          	movff	postdec2,postdec0
  3360                           
  3361                           ;tasks.c: 23: av->tempo_v = tempo_v;
  3362                           ;stkvar	createAviao@tempo_v @ sp[(0)+-4]
  3363  001242  50E1               	movf	fsr1l,w,c
  3364  001244  0FFC               	addlw	-4
  3365  001246  6ED9               	movwf	fsr2l,c
  3366  001248  50E2               	movf	fsr1h,w,c
  3367  00124A  6EDA               	movwf	fsr2h,c
  3368  00124C  0EFF               	movlw	255
  3369  00124E  22DA               	addwfc	fsr2h,f,c
  3370                           
  3371                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3372  001250  0EFE               	movlw	-2
  3373  001252  CFE3 F061          	movff	plusw1,btemp+1
  3374  001256  0EFF               	movlw	-1
  3375  001258  CFE3 F062          	movff	plusw1,btemp+2
  3376  00125C  0E02               	movlw	2
  3377  00125E  2461               	addwf	btemp+1,w,c
  3378  001260  6EE9               	movwf	fsr0l,c
  3379  001262  0E00               	movlw	0
  3380  001264  2062               	addwfc	btemp+2,w,c
  3381  001266  6EEA               	movwf	fsr0h,c
  3382  001268  CFDE FFEE          	movff	postinc2,postinc0
  3383  00126C  CFDD FFED          	movff	postdec2,postdec0
  3384                           
  3385                           ; _createAviao: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, a
      +                          rgsize = 8, vargsize = 0
  3386  001270  0EF8               	movlw	248
  3387  001272  26E1               	addwf	fsr1l,f,c
  3388  001274  0EFF               	movlw	255
  3389  001276  22E2               	addwfc	fsr1h,f,c
  3390  001278  0012               	return		;funcret
  3391  00127A                     __end_of_createAviao:
  3392                           	opt stack 0
  3393                           tosu	equ	0xFFF
  3394                           tosh	equ	0xFFE
  3395                           tosl	equ	0xFFD
  3396                           stkptr	equ	0xFFC
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           intcon	equ	0xFF2
  3404                           postinc0	equ	0xFEE
  3405                           postdec0	equ	0xFED
  3406                           plusw0	equ	0xFEB
  3407                           fsr0h	equ	0xFEA
  3408                           fsr0l	equ	0xFE9
  3409                           wreg	equ	0xFE8
  3410                           postinc1	equ	0xFE6
  3411                           postdec1	equ	0xFE5
  3412                           plusw1	equ	0xFE3
  3413                           fsr1h	equ	0xFE2
  3414                           fsr1l	equ	0xFE1
  3415                           bsr	equ	0xFE0
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           plusw2	equ	0xFDB
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _aviao2 *****************
  3425 ;; Defined at:
  3426 ;;		line 47 in file "tasks.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1  [STACK] void 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3440 ;;      Params:         0       0       0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0
  3443 ;;      Totals:         0       0       0       0       0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    8
  3447 ;; This function calls:
  3448 ;;		_createAviao
  3449 ;;		_create_pipe
  3450 ;;		_write_pipe
  3451 ;; This function is called by:
  3452 ;;		_main
  3453 ;; This function uses a reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text16
  3457  001558                     __ptext16:
  3458                           	opt stack 0
  3459  001558                     _aviao2:
  3460                           	opt stack 19
  3461                           
  3462                           ;tasks.c: 51: createAviao(&aviaozinho2,1000,200, 2);
  3463                           
  3464                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3465                           ;incstack = 0
  3466  001558  0E02               	movlw	2
  3467  00155A  6EE6               	movwf	postinc1,c
  3468  00155C  0E00               	movlw	0
  3469  00155E  6EE6               	movwf	postinc1,c
  3470  001560  0EC8               	movlw	200
  3471  001562  6EE6               	movwf	postinc1,c
  3472  001564  0E00               	movlw	0
  3473  001566  6EE6               	movwf	postinc1,c
  3474  001568  0EE8               	movlw	232
  3475  00156A  6EE6               	movwf	postinc1,c
  3476  00156C  0E03               	movlw	3
  3477  00156E  6EE6               	movwf	postinc1,c
  3478  001570  0E3B               	movlw	low _aviaozinho2
  3479  001572  6EE6               	movwf	postinc1,c
  3480  001574  0E00               	movlw	high _aviaozinho2
  3481  001576  6EE6               	movwf	postinc1,c
  3482  001578  ECEF  F008         	call	_createAviao	;wreg free
  3483                           
  3484                           ;tasks.c: 59: create_pipe(&pipe1);
  3485  00157C  0E2D               	movlw	low _pipe1
  3486  00157E  6EE6               	movwf	postinc1,c
  3487  001580  0E00               	movlw	high _pipe1
  3488  001582  6EE6               	movwf	postinc1,c
  3489  001584  EC9C  F008         	call	_create_pipe	;wreg free
  3490  001588                     l1551:
  3491                           
  3492                           ;tasks.c: 64: write_pipe(&pipe1, 'm');
  3493  001588  0E6D               	movlw	109
  3494  00158A  6EE6               	movwf	postinc1,c
  3495  00158C  0E2D               	movlw	low _pipe1
  3496  00158E  6EE6               	movwf	postinc1,c
  3497  001590  0E00               	movlw	high _pipe1
  3498  001592  6EE6               	movwf	postinc1,c
  3499  001594  EC18  F005         	call	_write_pipe	;wreg free
  3500  001598  D7F7               	goto	l1551
  3501  00159A                     __end_of_aviao2:
  3502                           	opt stack 0
  3503                           tosu	equ	0xFFF
  3504                           tosh	equ	0xFFE
  3505                           tosl	equ	0xFFD
  3506                           stkptr	equ	0xFFC
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           intcon	equ	0xFF2
  3514                           postinc0	equ	0xFEE
  3515                           postdec0	equ	0xFED
  3516                           plusw0	equ	0xFEB
  3517                           fsr0h	equ	0xFEA
  3518                           fsr0l	equ	0xFE9
  3519                           wreg	equ	0xFE8
  3520                           postinc1	equ	0xFE6
  3521                           postdec1	equ	0xFE5
  3522                           plusw1	equ	0xFE3
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           bsr	equ	0xFE0
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           plusw2	equ	0xFDB
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _ctpista *****************
  3535 ;; Defined at:
  3536 ;;		line 70 in file "tasks.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  tp              2  [STACK] unsigned int 
  3541 ;;  tv              2  [STACK] unsigned int 
  3542 ;;  n               2  [STACK] unsigned int 
  3543 ;;  tp              2  [STACK] unsigned int 
  3544 ;;  tv              2  [STACK] unsigned int 
  3545 ;;  n               2  [STACK] unsigned int 
  3546 ;;  dado            1  [STACK] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1  [STACK] void 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3556 ;;      Params:         0       0       0       0       0       0       0
  3557 ;;      Locals:         0       0       0       0       0       0       0
  3558 ;;      Temps:          0       0       0       0       0       0       0
  3559 ;;      Totals:         0       0       0       0       0       0       0
  3560 ;;Total ram usage:        0 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    8
  3563 ;; This function calls:
  3564 ;;		_delay
  3565 ;;		_read_pipe
  3566 ;;		_sem_post
  3567 ;;		_sem_wait
  3568 ;; This function is called by:
  3569 ;;		_main
  3570 ;; This function uses a reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text17
  3574  000554                     __ptext17:
  3575                           	opt stack 0
  3576  000554                     _ctpista:
  3577                           	opt stack 0
  3578                           
  3579                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0
  3580  000554  0E0D               	movlw	13
  3581  000556  26E1               	addwf	fsr1l,f,c
  3582  000558  0E00               	movlw	0
  3583  00055A  22E2               	addwfc	fsr1h,f,c
  3584  00055C                     l154:
  3585                           
  3586                           ;tasks.c: 75: {
  3587                           ;tasks.c: 76: byte dado = read_pipe(&pipe1);
  3588  00055C  0E2D               	movlw	low _pipe1
  3589  00055E  6EE6               	movwf	postinc1,c
  3590  000560  0E00               	movlw	high _pipe1
  3591  000562  6EE6               	movwf	postinc1,c
  3592  000564  EC52  F004         	call	_read_pipe	;wreg free
  3593                           
  3594                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3595  000568  0EFF               	movlw	-1
  3596  00056A  C060  FFE3         	movff	btemp,plusw1
  3597                           
  3598                           ;tasks.c: 77: if(dado== 'l')
  3599                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3600  00056E  0EFF               	movlw	-1
  3601  000570  CFE3 F060          	movff	plusw1,btemp
  3602  000574  0E6C               	movlw	108
  3603  000576  1860               	xorwf	btemp,w,c
  3604  000578  A4D8               	btfss	status,2,c
  3605  00057A  D05D               	goto	l1581
  3606                           
  3607                           ;tasks.c: 78: {
  3608                           ;tasks.c: 80: TRISDbits.RD1 = 0;
  3609  00057C  9295               	bcf	3989,1,c	;volatile
  3610                           
  3611                           ;tasks.c: 81: PORTDbits.RD1 = 0;
  3612  00057E  9283               	bcf	3971,1,c	;volatile
  3613                           
  3614                           ;tasks.c: 82: u_int n = aviaozinho1.numero;
  3615  000580  C041  F061         	movff	_aviaozinho1,btemp+1
  3616  000584  C042  F062         	movff	_aviaozinho1+1,btemp+2
  3617                           
  3618                           ;stkvar	ctpista@n @ sp[(-13)+10]
  3619  000588  0EFD               	movlw	-3
  3620  00058A  C061  FFE3         	movff	btemp+1,plusw1
  3621  00058E  0EFE               	movlw	-2
  3622  000590  C062  FFE3         	movff	btemp+2,plusw1
  3623                           
  3624                           ;tasks.c: 83: u_int tv = aviaozinho1.tempo_v;
  3625  000594  EE20  F043         	lfsr	2,_aviaozinho1+2
  3626  000598  CFDE F061          	movff	postinc2,btemp+1
  3627  00059C  CFDD F062          	movff	postdec2,btemp+2
  3628                           
  3629                           ;stkvar	ctpista@tv @ sp[(-13)+8]
  3630  0005A0  0EFB               	movlw	-5
  3631  0005A2  C061  FFE3         	movff	btemp+1,plusw1
  3632  0005A6  0EFC               	movlw	-4
  3633  0005A8  C062  FFE3         	movff	btemp+2,plusw1
  3634                           
  3635                           ;tasks.c: 84: u_int tp = aviaozinho1.tempo_p;
  3636  0005AC  EE20  F045         	lfsr	2,_aviaozinho1+4
  3637  0005B0  CFDE F061          	movff	postinc2,btemp+1
  3638  0005B4  CFDD F062          	movff	postdec2,btemp+2
  3639                           
  3640                           ;stkvar	ctpista@tp @ sp[(-13)+6]
  3641  0005B8  0EF9               	movlw	-7
  3642  0005BA  C061  FFE3         	movff	btemp+1,plusw1
  3643  0005BE  0EFA               	movlw	-6
  3644  0005C0  C062  FFE3         	movff	btemp+2,plusw1
  3645                           
  3646                           ;tasks.c: 85: PORTDbits.RD1 = ~PORTDbits.RD1;
  3647  0005C4  A283               	btfss	3971,1,c	;volatile
  3648  0005C6  D002               	goto	u58_20
  3649  0005C8  0E01               	movlw	1
  3650  0005CA  D001               	goto	u58_26
  3651  0005CC                     u58_20:
  3652  0005CC  0E00               	movlw	0
  3653  0005CE                     u58_26:
  3654  0005CE  0AFF               	xorlw	255
  3655  0005D0  6E6B               	movwf	btemp+11,c
  3656  0005D2  466B               	rlncf	btemp+11,f,c
  3657  0005D4  5083               	movf	3971,w,c	;volatile
  3658  0005D6  186B               	xorwf	btemp+11,w,c
  3659  0005D8  0BFD               	andlw	-3
  3660  0005DA  186B               	xorwf	btemp+11,w,c
  3661  0005DC  6E83               	movwf	3971,c	;volatile
  3662                           
  3663                           ;tasks.c: 86: pista.aviaozinho.numero=n;
  3664                           ;stkvar	ctpista@n @ sp[(-13)+10]
  3665  0005DE  0EFD               	movlw	-3
  3666  0005E0  CFE3 F005          	movff	plusw1,_pista
  3667  0005E4  0EFE               	movlw	-2
  3668  0005E6  CFE3 F006          	movff	plusw1,_pista+1
  3669                           
  3670                           ;tasks.c: 87: pista.status = 1;
  3671  0005EA  0E00               	movlw	0
  3672  0005EC  6E0C               	movwf	_pista+7,c
  3673  0005EE  0E01               	movlw	1
  3674  0005F0  6E0B               	movwf	_pista+6,c
  3675                           
  3676                           ;tasks.c: 88: sem_wait(&pista.s);
  3677  0005F2  0E0D               	movlw	low (_pista+8)
  3678  0005F4  6EE6               	movwf	postinc1,c
  3679  0005F6  0E00               	movlw	high (_pista+8)
  3680  0005F8  6EE6               	movwf	postinc1,c
  3681  0005FA  ECD0  F007         	call	_sem_wait	;wreg free
  3682                           
  3683                           ;tasks.c: 89: delay(tv+tp);
  3684                           ;stkvar	ctpista@tp @ sp[(-13)+6]
  3685                           ;stkvar	ctpista@tv @ sp[(-13)+8]
  3686  0005FE  0EFB               	movlw	-5
  3687  000600  CFE3 F061          	movff	plusw1,btemp+1
  3688  000604  0EFC               	movlw	-4
  3689  000606  CFE3 F062          	movff	plusw1,btemp+2
  3690  00060A  0EF9               	movlw	-7
  3691  00060C  50E3               	movf	plusw1,w,c
  3692  00060E  2661               	addwf	btemp+1,f,c
  3693  000610  0EFA               	movlw	-6
  3694  000612  50E3               	movf	plusw1,w,c
  3695  000614  2262               	addwfc	btemp+2,f,c
  3696  000616  C061  FFE6         	movff	btemp+1,postinc1
  3697  00061A  C062  FFE6         	movff	btemp+2,postinc1
  3698  00061E  EC67  F00A         	call	_delay	;wreg free
  3699                           
  3700                           ;tasks.c: 90: sem_post(&pista.s);
  3701  000622  0E0D               	movlw	low (_pista+8)
  3702  000624  6EE6               	movwf	postinc1,c
  3703  000626  0E00               	movlw	high (_pista+8)
  3704  000628  6EE6               	movwf	postinc1,c
  3705  00062A  EC3A  F007         	call	_sem_post	;wreg free
  3706                           
  3707                           ;tasks.c: 91: pista.status = 0;
  3708  00062E  6A0B               	clrf	_pista+6,c
  3709  000630  6A0C               	clrf	_pista+7,c
  3710                           
  3711                           ;tasks.c: 92: pista.aviaozinho.numero= 0;
  3712  000632  6A05               	clrf	_pista,c
  3713  000634  6A06               	clrf	_pista+1,c
  3714  000636                     l1581:
  3715                           
  3716                           ;tasks.c: 97: }
  3717                           ;tasks.c: 98: if(dado=='m')
  3718                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3719  000636  0EFF               	movlw	-1
  3720  000638  CFE3 F060          	movff	plusw1,btemp
  3721  00063C  0E6D               	movlw	109
  3722  00063E  1860               	xorwf	btemp,w,c
  3723  000640  A4D8               	btfss	status,2,c
  3724  000642  D78C               	goto	l154
  3725                           
  3726                           ;tasks.c: 99: {
  3727                           ;tasks.c: 100: TRISDbits.RD2 = 0;
  3728  000644  9495               	bcf	3989,2,c	;volatile
  3729                           
  3730                           ;tasks.c: 101: PORTDbits.RD2 = 0;
  3731  000646  9483               	bcf	3971,2,c	;volatile
  3732                           
  3733                           ;tasks.c: 102: u_int n = aviaozinho2.numero;
  3734  000648  C03B  F061         	movff	_aviaozinho2,btemp+1
  3735  00064C  C03C  F062         	movff	_aviaozinho2+1,btemp+2
  3736                           
  3737                           ;stkvar	ctpista@n_547 @ sp[(-13)+4]
  3738  000650  0EF7               	movlw	-9
  3739  000652  C061  FFE3         	movff	btemp+1,plusw1
  3740  000656  0EF8               	movlw	-8
  3741  000658  C062  FFE3         	movff	btemp+2,plusw1
  3742                           
  3743                           ;tasks.c: 103: u_int tv = aviaozinho2.tempo_v;
  3744  00065C  EE20  F03D         	lfsr	2,_aviaozinho2+2
  3745  000660  CFDE F061          	movff	postinc2,btemp+1
  3746  000664  CFDD F062          	movff	postdec2,btemp+2
  3747                           
  3748                           ;stkvar	ctpista@tv_548 @ sp[(-13)+2]
  3749  000668  0EF5               	movlw	-11
  3750  00066A  C061  FFE3         	movff	btemp+1,plusw1
  3751  00066E  0EF6               	movlw	-10
  3752  000670  C062  FFE3         	movff	btemp+2,plusw1
  3753                           
  3754                           ;tasks.c: 104: u_int tp = aviaozinho2.tempo_p;
  3755  000674  EE20  F03F         	lfsr	2,_aviaozinho2+4
  3756  000678  CFDE F061          	movff	postinc2,btemp+1
  3757  00067C  CFDD F062          	movff	postdec2,btemp+2
  3758                           
  3759                           ;stkvar	ctpista@tp_549 @ sp[(-13)+0]
  3760  000680  0EF3               	movlw	-13
  3761  000682  C061  FFE3         	movff	btemp+1,plusw1
  3762  000686  0EF4               	movlw	-12
  3763  000688  C062  FFE3         	movff	btemp+2,plusw1
  3764                           
  3765                           ;tasks.c: 105: PORTDbits.RD2 = ~PORTDbits.RD2;
  3766  00068C  A483               	btfss	3971,2,c	;volatile
  3767  00068E  D002               	goto	u60_20
  3768  000690  0E01               	movlw	1
  3769  000692  D001               	goto	u60_26
  3770  000694                     u60_20:
  3771  000694  0E00               	movlw	0
  3772  000696                     u60_26:
  3773  000696  0AFF               	xorlw	255
  3774  000698  6E6B               	movwf	btemp+11,c
  3775  00069A  466B               	rlncf	btemp+11,f,c
  3776  00069C  466B               	rlncf	btemp+11,f,c
  3777  00069E  5083               	movf	3971,w,c	;volatile
  3778  0006A0  186B               	xorwf	btemp+11,w,c
  3779  0006A2  0BFB               	andlw	-5
  3780  0006A4  186B               	xorwf	btemp+11,w,c
  3781  0006A6  6E83               	movwf	3971,c	;volatile
  3782                           
  3783                           ;tasks.c: 106: pista.aviaozinho.numero=n;
  3784                           ;stkvar	ctpista@n_547 @ sp[(-13)+4]
  3785  0006A8  0EF7               	movlw	-9
  3786  0006AA  CFE3 F005          	movff	plusw1,_pista
  3787  0006AE  0EF8               	movlw	-8
  3788  0006B0  CFE3 F006          	movff	plusw1,_pista+1
  3789                           
  3790                           ;tasks.c: 107: pista.status = 1;
  3791  0006B4  0E00               	movlw	0
  3792  0006B6  6E0C               	movwf	_pista+7,c
  3793  0006B8  0E01               	movlw	1
  3794  0006BA  6E0B               	movwf	_pista+6,c
  3795                           
  3796                           ;tasks.c: 108: sem_wait(&pista.s);
  3797  0006BC  0E0D               	movlw	low (_pista+8)
  3798  0006BE  6EE6               	movwf	postinc1,c
  3799  0006C0  0E00               	movlw	high (_pista+8)
  3800  0006C2  6EE6               	movwf	postinc1,c
  3801  0006C4  ECD0  F007         	call	_sem_wait	;wreg free
  3802                           
  3803                           ;tasks.c: 109: delay(tv+tp);
  3804                           ;stkvar	ctpista@tp_549 @ sp[(-13)+0]
  3805                           ;stkvar	ctpista@tv_548 @ sp[(-13)+2]
  3806  0006C8  0EF5               	movlw	-11
  3807  0006CA  CFE3 F061          	movff	plusw1,btemp+1
  3808  0006CE  0EF6               	movlw	-10
  3809  0006D0  CFE3 F062          	movff	plusw1,btemp+2
  3810  0006D4  0EF3               	movlw	-13
  3811  0006D6  50E3               	movf	plusw1,w,c
  3812  0006D8  2661               	addwf	btemp+1,f,c
  3813  0006DA  0EF4               	movlw	-12
  3814  0006DC  50E3               	movf	plusw1,w,c
  3815  0006DE  2262               	addwfc	btemp+2,f,c
  3816  0006E0  C061  FFE6         	movff	btemp+1,postinc1
  3817  0006E4  C062  FFE6         	movff	btemp+2,postinc1
  3818  0006E8  EC67  F00A         	call	_delay	;wreg free
  3819                           
  3820                           ;tasks.c: 110: sem_post(&pista.s);
  3821  0006EC  0E0D               	movlw	low (_pista+8)
  3822  0006EE  6EE6               	movwf	postinc1,c
  3823  0006F0  0E00               	movlw	high (_pista+8)
  3824  0006F2  6EE6               	movwf	postinc1,c
  3825  0006F4  EC3A  F007         	call	_sem_post	;wreg free
  3826                           
  3827                           ;tasks.c: 111: pista.status = 0;
  3828  0006F8  6A0B               	clrf	_pista+6,c
  3829  0006FA  6A0C               	clrf	_pista+7,c
  3830                           
  3831                           ;tasks.c: 112: pista.aviaozinho.numero= 0;
  3832  0006FC  6A05               	clrf	_pista,c
  3833  0006FE  6A06               	clrf	_pista+1,c
  3834  000700  D72D               	goto	l154
  3835  000702                     __end_of_ctpista:
  3836                           	opt stack 0
  3837                           tosu	equ	0xFFF
  3838                           tosh	equ	0xFFE
  3839                           tosl	equ	0xFFD
  3840                           stkptr	equ	0xFFC
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           postinc0	equ	0xFEE
  3849                           postdec0	equ	0xFED
  3850                           plusw0	equ	0xFEB
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           postinc1	equ	0xFE6
  3855                           postdec1	equ	0xFE5
  3856                           plusw1	equ	0xFE3
  3857                           fsr1h	equ	0xFE2
  3858                           fsr1l	equ	0xFE1
  3859                           bsr	equ	0xFE0
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           plusw2	equ	0xFDB
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _sem_wait *****************
  3869 ;; Defined at:
  3870 ;;		line 17 in file "semaphore.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  s               2  [STACK] PTR struct sem
  3873 ;;		 -> pista(24), 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1  [STACK] void 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         0       0       0       0       0       0       0
  3886 ;;      Locals:         0       0       0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0
  3888 ;;      Totals:         0       0       0       0       0       0       0
  3889 ;;Total ram usage:        0 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    7
  3892 ;; This function calls:
  3893 ;;		___lwmod
  3894 ;;		_dispatcher
  3895 ;; This function is called by:
  3896 ;;		_ctpista
  3897 ;; This function uses a reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text18
  3901  000FA0                     __ptext18:
  3902                           	opt stack 0
  3903  000FA0                     _sem_wait:
  3904                           	opt stack 19
  3905                           
  3906                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  3907                           
  3908                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3909                           ;incstack = 0
  3910  000FA0  9EF2               	bcf	intcon,7,c	;volatile
  3911                           
  3912                           ;semaphore.c: 22: s->contador--;
  3913                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3914  000FA2  0EFE               	movlw	-2
  3915  000FA4  CFE3 FFD9          	movff	plusw1,fsr2l
  3916  000FA8  0EFF               	movlw	-1
  3917  000FAA  CFE3 FFDA          	movff	plusw1,fsr2h
  3918  000FAE  06DE               	decf	postinc2,f,c
  3919  000FB0  0E00               	movlw	0
  3920  000FB2  5ADD               	subwfb	postdec2,f,c
  3921                           
  3922                           ;semaphore.c: 23: if (s->contador < 0) {
  3923                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3924  000FB4  0EFE               	movlw	-2
  3925  000FB6  CFE3 FFD9          	movff	plusw1,fsr2l
  3926  000FBA  0EFF               	movlw	-1
  3927  000FBC  CFE3 FFDA          	movff	plusw1,fsr2h
  3928  000FC0  0E01               	movlw	1
  3929  000FC2  AEDB               	btfss	plusw2,7,c
  3930  000FC4  D057               	goto	l1487
  3931                           
  3932                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  3933                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3934  000FC6  0EFE               	movlw	-2
  3935  000FC8  CFE3 F061          	movff	plusw1,btemp+1
  3936  000FCC  0EFF               	movlw	-1
  3937  000FCE  CFE3 F062          	movff	plusw1,btemp+2
  3938  000FD2  0E0C               	movlw	12
  3939  000FD4  2461               	addwf	btemp+1,w,c
  3940  000FD6  6ED9               	movwf	fsr2l,c
  3941  000FD8  0E00               	movlw	0
  3942  000FDA  2062               	addwfc	btemp+2,w,c
  3943  000FDC  6EDA               	movwf	fsr2h,c
  3944  000FDE  CFDE F06A          	movff	postinc2,btemp+10
  3945  000FE2  CFDD F06B          	movff	postdec2,btemp+11
  3946  000FE6  90D8               	bcf	status,0,c
  3947  000FE8  346A               	rlcf	btemp+10,w,c
  3948  000FEA  6E61               	movwf	btemp+1,c
  3949  000FEC  346B               	rlcf	btemp+11,w,c
  3950  000FEE  6E62               	movwf	btemp+2,c
  3951                           
  3952                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3953  000FF0  0EFE               	movlw	-2
  3954  000FF2  50E3               	movf	plusw1,w,c
  3955  000FF4  2661               	addwf	btemp+1,f,c
  3956  000FF6  0EFF               	movlw	-1
  3957  000FF8  50E3               	movf	plusw1,w,c
  3958  000FFA  2262               	addwfc	btemp+2,f,c
  3959  000FFC  0E02               	movlw	2
  3960  000FFE  2461               	addwf	btemp+1,w,c
  3961  001000  6ED9               	movwf	fsr2l,c
  3962  001002  0E00               	movlw	0
  3963  001004  2062               	addwfc	btemp+2,w,c
  3964  001006  6EDA               	movwf	fsr2h,c
  3965  001008  C001  FFDE         	movff	_task_running,postinc2
  3966  00100C  C002  FFDD         	movff	_task_running+1,postdec2
  3967                           
  3968                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 5;
  3969  001010  0E05               	movlw	5
  3970  001012  6EE6               	movwf	postinc1,c
  3971  001014  0E00               	movlw	0
  3972  001016  6EE6               	movwf	postinc1,c
  3973                           
  3974                           ;stkvar	sem_wait@s @ sp[(-2)+-2]
  3975  001018  0EFC               	movlw	-4
  3976  00101A  CFE3 F061          	movff	plusw1,btemp+1
  3977  00101E  0EFD               	movlw	-3
  3978  001020  CFE3 F062          	movff	plusw1,btemp+2
  3979  001024  0E0C               	movlw	12
  3980  001026  2461               	addwf	btemp+1,w,c
  3981  001028  6ED9               	movwf	fsr2l,c
  3982  00102A  0E00               	movlw	0
  3983  00102C  2062               	addwfc	btemp+2,w,c
  3984  00102E  6EDA               	movwf	fsr2h,c
  3985  001030  CFDE F061          	movff	postinc2,btemp+1
  3986  001034  CFDD F062          	movff	postdec2,btemp+2
  3987  001038  0E01               	movlw	1
  3988  00103A  2661               	addwf	btemp+1,f,c
  3989  00103C  0E00               	movlw	0
  3990  00103E  2262               	addwfc	btemp+2,f,c
  3991  001040  C061  FFE6         	movff	btemp+1,postinc1
  3992  001044  C062  FFE6         	movff	btemp+2,postinc1
  3993  001048  EC3E  F008         	call	___lwmod	;wreg free
  3994                           
  3995                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3996  00104C  0EFE               	movlw	-2
  3997  00104E  CFE3 F06A          	movff	plusw1,btemp+10
  3998  001052  0EFF               	movlw	-1
  3999  001054  CFE3 F06B          	movff	plusw1,btemp+11
  4000  001058  0E0C               	movlw	12
  4001  00105A  246A               	addwf	btemp+10,w,c
  4002  00105C  6ED9               	movwf	fsr2l,c
  4003  00105E  0E00               	movlw	0
  4004  001060  206B               	addwfc	btemp+11,w,c
  4005  001062  6EDA               	movwf	fsr2h,c
  4006  001064  C060  FFDE         	movff	btemp,postinc2
  4007  001068  C061  FFDD         	movff	btemp+1,postdec2
  4008                           
  4009                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  4010  00106C  0E05               	movlw	5
  4011  00106E  6EE6               	movwf	postinc1,c
  4012  001070  EC0A  F000         	call	_dispatcher	;wreg free
  4013  001074                     l1487:
  4014                           
  4015                           ;semaphore.c: 27: }
  4016                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  4017  001074  8EF2               	bsf	intcon,7,c	;volatile
  4018                           
  4019                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  4020  001076  52E5               	movf	postdec1,f,c
  4021  001078  52E5               	movf	postdec1,f,c
  4022  00107A  0012               	return		;funcret
  4023  00107C                     __end_of_sem_wait:
  4024                           	opt stack 0
  4025                           tosu	equ	0xFFF
  4026                           tosh	equ	0xFFE
  4027                           tosl	equ	0xFFD
  4028                           stkptr	equ	0xFFC
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           intcon	equ	0xFF2
  4036                           postinc0	equ	0xFEE
  4037                           postdec0	equ	0xFED
  4038                           plusw0	equ	0xFEB
  4039                           fsr0h	equ	0xFEA
  4040                           fsr0l	equ	0xFE9
  4041                           wreg	equ	0xFE8
  4042                           postinc1	equ	0xFE6
  4043                           postdec1	equ	0xFE5
  4044                           plusw1	equ	0xFE3
  4045                           fsr1h	equ	0xFE2
  4046                           fsr1l	equ	0xFE1
  4047                           bsr	equ	0xFE0
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           postdec2	equ	0xFDD
  4051                           plusw2	equ	0xFDB
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _sem_post *****************
  4057 ;; Defined at:
  4058 ;;		line 32 in file "semaphore.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  s               2  [STACK] PTR struct sem
  4061 ;;		 -> pista(24), 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1  [STACK] void 
  4066 ;; Registers used:
  4067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4073 ;;      Params:         0       0       0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    7
  4080 ;; This function calls:
  4081 ;;		___lwmod
  4082 ;;		___wmul
  4083 ;;		_dispatcher
  4084 ;; This function is called by:
  4085 ;;		_ctpista
  4086 ;; This function uses a reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text19
  4090  000E74                     __ptext19:
  4091                           	opt stack 0
  4092  000E74                     _sem_post:
  4093                           	opt stack 19
  4094                           
  4095                           ;semaphore.c: 34: (INTCONbits.GIE = 0);
  4096                           
  4097                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4098                           ;incstack = 0
  4099  000E74  9EF2               	bcf	intcon,7,c	;volatile
  4100                           
  4101                           ;semaphore.c: 36: s->contador++;
  4102                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4103  000E76  0EFE               	movlw	-2
  4104  000E78  CFE3 FFD9          	movff	plusw1,fsr2l
  4105  000E7C  0EFF               	movlw	-1
  4106  000E7E  CFE3 FFDA          	movff	plusw1,fsr2h
  4107  000E82  2ADE               	incf	postinc2,f,c
  4108  000E84  0E00               	movlw	0
  4109  000E86  22DD               	addwfc	postdec2,f,c
  4110                           
  4111                           ;semaphore.c: 37: if (s->contador <= 0) {
  4112                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4113  000E88  0EFE               	movlw	-2
  4114  000E8A  CFE3 FFD9          	movff	plusw1,fsr2l
  4115  000E8E  0EFF               	movlw	-1
  4116  000E90  CFE3 FFDA          	movff	plusw1,fsr2h
  4117  000E94  0E01               	movlw	1
  4118  000E96  BEDB               	btfsc	plusw2,7,c
  4119  000E98  D006               	goto	u51_20
  4120  000E9A  0E01               	movlw	1
  4121  000E9C  50DB               	movf	plusw2,w,c
  4122  000E9E  E17C               	bnz	l1501
  4123  000EA0  04DE               	decf	postinc2,w,c
  4124  000EA2  B0D8               	btfsc	status,0,c
  4125  000EA4  D079               	goto	l1501
  4126  000EA6                     u51_20:
  4127                           
  4128                           ;semaphore.c: 38: F_APTOS[s->queue.s_queue[s->queue.s_queue_pos_out]].task_state = READY
      +                          ;
  4129  000EA6  0E6E               	movlw	110
  4130  000EA8  6EE6               	movwf	postinc1,c
  4131  000EAA  0E00               	movlw	0
  4132  000EAC  6EE6               	movwf	postinc1,c
  4133                           
  4134                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4135  000EAE  0EFC               	movlw	-4
  4136  000EB0  CFE3 F061          	movff	plusw1,btemp+1
  4137  000EB4  0EFD               	movlw	-3
  4138  000EB6  CFE3 F062          	movff	plusw1,btemp+2
  4139  000EBA  0E0E               	movlw	14
  4140  000EBC  2461               	addwf	btemp+1,w,c
  4141  000EBE  6ED9               	movwf	fsr2l,c
  4142  000EC0  0E00               	movlw	0
  4143  000EC2  2062               	addwfc	btemp+2,w,c
  4144  000EC4  6EDA               	movwf	fsr2h,c
  4145  000EC6  CFDE F06A          	movff	postinc2,btemp+10
  4146  000ECA  CFDD F06B          	movff	postdec2,btemp+11
  4147  000ECE  90D8               	bcf	status,0,c
  4148  000ED0  346A               	rlcf	btemp+10,w,c
  4149  000ED2  6E61               	movwf	btemp+1,c
  4150  000ED4  346B               	rlcf	btemp+11,w,c
  4151  000ED6  6E62               	movwf	btemp+2,c
  4152                           
  4153                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4154  000ED8  0EFC               	movlw	-4
  4155  000EDA  50E3               	movf	plusw1,w,c
  4156  000EDC  2661               	addwf	btemp+1,f,c
  4157  000EDE  0EFD               	movlw	-3
  4158  000EE0  50E3               	movf	plusw1,w,c
  4159  000EE2  2262               	addwfc	btemp+2,f,c
  4160  000EE4  0E02               	movlw	2
  4161  000EE6  2461               	addwf	btemp+1,w,c
  4162  000EE8  6ED9               	movwf	fsr2l,c
  4163  000EEA  0E00               	movlw	0
  4164  000EEC  2062               	addwfc	btemp+2,w,c
  4165  000EEE  6EDA               	movwf	fsr2h,c
  4166  000EF0  CFDE F061          	movff	postinc2,btemp+1
  4167  000EF4  CFDD F062          	movff	postdec2,btemp+2
  4168  000EF8  C061  FFE6         	movff	btemp+1,postinc1
  4169  000EFC  C062  FFE6         	movff	btemp+2,postinc1
  4170  000F00  EC3D  F009         	call	___wmul	;wreg free
  4171  000F04  0EF6               	movlw	low (_F_APTOS+8)
  4172  000F06  2460               	addwf	btemp,w,c
  4173  000F08  6ED9               	movwf	fsr2l,c
  4174  000F0A  0E00               	movlw	high (_F_APTOS+8)
  4175  000F0C  2061               	addwfc	btemp+1,w,c
  4176  000F0E  6EDA               	movwf	fsr2h,c
  4177  000F10  0E01               	movlw	1
  4178  000F12  6EDF               	movwf	indf2,c
  4179                           
  4180                           ;semaphore.c: 39: s->queue.s_queue_pos_out = (s->queue.s_queue_pos_out + 1) % s->queue.s
      +                          _queue_pos_in;
  4181                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4182  000F14  0EFE               	movlw	-2
  4183  000F16  CFE3 F061          	movff	plusw1,btemp+1
  4184  000F1A  0EFF               	movlw	-1
  4185  000F1C  CFE3 F062          	movff	plusw1,btemp+2
  4186  000F20  0E0C               	movlw	12
  4187  000F22  2461               	addwf	btemp+1,w,c
  4188  000F24  6ED9               	movwf	fsr2l,c
  4189  000F26  0E00               	movlw	0
  4190  000F28  2062               	addwfc	btemp+2,w,c
  4191  000F2A  6EDA               	movwf	fsr2h,c
  4192  000F2C  CFDE F061          	movff	postinc2,btemp+1
  4193  000F30  CFDD F062          	movff	postdec2,btemp+2
  4194  000F34  C061  FFE6         	movff	btemp+1,postinc1
  4195  000F38  C062  FFE6         	movff	btemp+2,postinc1
  4196                           
  4197                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4198  000F3C  0EFC               	movlw	-4
  4199  000F3E  CFE3 F061          	movff	plusw1,btemp+1
  4200  000F42  0EFD               	movlw	-3
  4201  000F44  CFE3 F062          	movff	plusw1,btemp+2
  4202  000F48  0E0E               	movlw	14
  4203  000F4A  2461               	addwf	btemp+1,w,c
  4204  000F4C  6ED9               	movwf	fsr2l,c
  4205  000F4E  0E00               	movlw	0
  4206  000F50  2062               	addwfc	btemp+2,w,c
  4207  000F52  6EDA               	movwf	fsr2h,c
  4208  000F54  CFDE F061          	movff	postinc2,btemp+1
  4209  000F58  CFDD F062          	movff	postdec2,btemp+2
  4210  000F5C  0E01               	movlw	1
  4211  000F5E  2661               	addwf	btemp+1,f,c
  4212  000F60  0E00               	movlw	0
  4213  000F62  2262               	addwfc	btemp+2,f,c
  4214  000F64  C061  FFE6         	movff	btemp+1,postinc1
  4215  000F68  C062  FFE6         	movff	btemp+2,postinc1
  4216  000F6C  EC3E  F008         	call	___lwmod	;wreg free
  4217                           
  4218                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4219  000F70  0EFE               	movlw	-2
  4220  000F72  CFE3 F06A          	movff	plusw1,btemp+10
  4221  000F76  0EFF               	movlw	-1
  4222  000F78  CFE3 F06B          	movff	plusw1,btemp+11
  4223  000F7C  0E0E               	movlw	14
  4224  000F7E  246A               	addwf	btemp+10,w,c
  4225  000F80  6ED9               	movwf	fsr2l,c
  4226  000F82  0E00               	movlw	0
  4227  000F84  206B               	addwfc	btemp+11,w,c
  4228  000F86  6EDA               	movwf	fsr2h,c
  4229  000F88  C060  FFDE         	movff	btemp,postinc2
  4230  000F8C  C061  FFDD         	movff	btemp+1,postdec2
  4231                           
  4232                           ;semaphore.c: 40: dispatcher(READY);
  4233  000F90  0E01               	movlw	1
  4234  000F92  6EE6               	movwf	postinc1,c
  4235  000F94  EC0A  F000         	call	_dispatcher	;wreg free
  4236  000F98                     l1501:
  4237                           
  4238                           ;semaphore.c: 41: }
  4239                           ;semaphore.c: 43: (INTCONbits.GIE = 1);
  4240  000F98  8EF2               	bsf	intcon,7,c	;volatile
  4241                           
  4242                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  4243  000F9A  52E5               	movf	postdec1,f,c
  4244  000F9C  52E5               	movf	postdec1,f,c
  4245  000F9E  0012               	return		;funcret
  4246  000FA0                     __end_of_sem_post:
  4247                           	opt stack 0
  4248                           tosu	equ	0xFFF
  4249                           tosh	equ	0xFFE
  4250                           tosl	equ	0xFFD
  4251                           stkptr	equ	0xFFC
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           postinc0	equ	0xFEE
  4260                           postdec0	equ	0xFED
  4261                           plusw0	equ	0xFEB
  4262                           fsr0h	equ	0xFEA
  4263                           fsr0l	equ	0xFE9
  4264                           wreg	equ	0xFE8
  4265                           postinc1	equ	0xFE6
  4266                           postdec1	equ	0xFE5
  4267                           plusw1	equ	0xFE3
  4268                           fsr1h	equ	0xFE2
  4269                           fsr1l	equ	0xFE1
  4270                           bsr	equ	0xFE0
  4271                           indf2	equ	0xFDF
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           plusw2	equ	0xFDB
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function _read_pipe *****************
  4280 ;; Defined at:
  4281 ;;		line 50 in file "pipe.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  pipe            2  [STACK] PTR struct pipe
  4284 ;;		 -> pipe1(14), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  dado            1  [STACK] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1  [STACK] unsigned char 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4296 ;;      Params:         0       0       0       0       0       0       0
  4297 ;;      Locals:         0       0       0       0       0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0
  4299 ;;      Totals:         0       0       0       0       0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    7
  4303 ;; This function calls:
  4304 ;;		___wmul
  4305 ;;		_dispatcher
  4306 ;; This function is called by:
  4307 ;;		_ctpista
  4308 ;; This function uses a reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text20
  4312  0008A4                     __ptext20:
  4313                           	opt stack 0
  4314  0008A4                     _read_pipe:
  4315                           	opt stack 0
  4316                           
  4317                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4318  0008A4  52E6               	movf	postinc1,f,c
  4319                           
  4320                           ;pipe.c: 52: byte dado;
  4321                           ;pipe.c: 55: if (pipe->pipe_itens == 0) {
  4322                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4323                           
  4324                           ;incstack = 0
  4325  0008A6  0EFD               	movlw	-3
  4326  0008A8  CFE3 F061          	movff	plusw1,btemp+1
  4327  0008AC  0EFE               	movlw	-2
  4328  0008AE  CFE3 F062          	movff	plusw1,btemp+2
  4329  0008B2  0E08               	movlw	8
  4330  0008B4  2461               	addwf	btemp+1,w,c
  4331  0008B6  6ED9               	movwf	fsr2l,c
  4332  0008B8  0E00               	movlw	0
  4333  0008BA  2062               	addwfc	btemp+2,w,c
  4334  0008BC  6EDA               	movwf	fsr2h,c
  4335  0008BE  50DE               	movf	postinc2,w,c
  4336  0008C0  10DE               	iorwf	postinc2,w,c
  4337  0008C2  A4D8               	btfss	status,2,c
  4338  0008C4  D014               	goto	l1459
  4339                           
  4340                           ;pipe.c: 58: pipe->pos_bloqued_read = task_running;
  4341                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4342  0008C6  0EFD               	movlw	-3
  4343  0008C8  CFE3 F061          	movff	plusw1,btemp+1
  4344  0008CC  0EFE               	movlw	-2
  4345  0008CE  CFE3 F062          	movff	plusw1,btemp+2
  4346  0008D2  0E0A               	movlw	10
  4347  0008D4  2461               	addwf	btemp+1,w,c
  4348  0008D6  6ED9               	movwf	fsr2l,c
  4349  0008D8  0E00               	movlw	0
  4350  0008DA  2062               	addwfc	btemp+2,w,c
  4351  0008DC  6EDA               	movwf	fsr2h,c
  4352  0008DE  C001  FFDE         	movff	_task_running,postinc2
  4353  0008E2  C002  FFDD         	movff	_task_running+1,postdec2
  4354                           
  4355                           ;pipe.c: 59: dispatcher(WAITING_PIPE);
  4356  0008E6  0E06               	movlw	6
  4357  0008E8  6EE6               	movwf	postinc1,c
  4358  0008EA  EC0A  F000         	call	_dispatcher	;wreg free
  4359  0008EE                     l1459:
  4360                           
  4361                           ;pipe.c: 60: }
  4362                           ;pipe.c: 62: dado = pipe->pipe_queue[pipe->pos_read_pipe];
  4363                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4364  0008EE  0EFD               	movlw	-3
  4365  0008F0  CFE3 F061          	movff	plusw1,btemp+1
  4366  0008F4  0EFE               	movlw	-2
  4367  0008F6  CFE3 F062          	movff	plusw1,btemp+2
  4368  0008FA  0E04               	movlw	4
  4369  0008FC  2461               	addwf	btemp+1,w,c
  4370  0008FE  6ED9               	movwf	fsr2l,c
  4371  000900  0E00               	movlw	0
  4372  000902  2062               	addwfc	btemp+2,w,c
  4373  000904  6EDA               	movwf	fsr2h,c
  4374  000906  CFDE F061          	movff	postinc2,btemp+1
  4375  00090A  CFDD F062          	movff	postdec2,btemp+2
  4376                           
  4377                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4378  00090E  0EFD               	movlw	-3
  4379  000910  CFE3 F06A          	movff	plusw1,btemp+10
  4380  000914  0EFE               	movlw	-2
  4381  000916  CFE3 F06B          	movff	plusw1,btemp+11
  4382  00091A  5061               	movf	btemp+1,w,c
  4383  00091C  246A               	addwf	btemp+10,w,c
  4384  00091E  6ED9               	movwf	fsr2l,c
  4385  000920  5062               	movf	btemp+2,w,c
  4386  000922  206B               	addwfc	btemp+11,w,c
  4387  000924  6EDA               	movwf	fsr2h,c
  4388  000926  50DF               	movf	indf2,w,c
  4389  000928  6E6B               	movwf	btemp+11,c
  4390                           
  4391                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  4392  00092A  0EFF               	movlw	-1
  4393  00092C  C06B  FFE3         	movff	btemp+11,plusw1
  4394                           
  4395                           ;pipe.c: 63: pipe->pos_read_pipe = (pipe->pos_read_pipe + 1) % 4;
  4396                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4397  000930  0EFD               	movlw	-3
  4398  000932  CFE3 F061          	movff	plusw1,btemp+1
  4399  000936  0EFE               	movlw	-2
  4400  000938  CFE3 F062          	movff	plusw1,btemp+2
  4401  00093C  0E04               	movlw	4
  4402  00093E  2461               	addwf	btemp+1,w,c
  4403  000940  6ED9               	movwf	fsr2l,c
  4404  000942  0E00               	movlw	0
  4405  000944  2062               	addwfc	btemp+2,w,c
  4406  000946  6EDA               	movwf	fsr2h,c
  4407  000948  CFDE F061          	movff	postinc2,btemp+1
  4408  00094C  CFDD F062          	movff	postdec2,btemp+2
  4409  000950  0E01               	movlw	1
  4410  000952  2661               	addwf	btemp+1,f,c
  4411  000954  0E00               	movlw	0
  4412  000956  2262               	addwfc	btemp+2,f,c
  4413  000958  0E03               	movlw	3
  4414  00095A  1661               	andwf	btemp+1,f,c
  4415  00095C  0E00               	movlw	0
  4416  00095E  1662               	andwf	btemp+2,f,c
  4417                           
  4418                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4419  000960  0EFD               	movlw	-3
  4420  000962  CFE3 F06A          	movff	plusw1,btemp+10
  4421  000966  0EFE               	movlw	-2
  4422  000968  CFE3 F06B          	movff	plusw1,btemp+11
  4423  00096C  0E04               	movlw	4
  4424  00096E  246A               	addwf	btemp+10,w,c
  4425  000970  6ED9               	movwf	fsr2l,c
  4426  000972  0E00               	movlw	0
  4427  000974  206B               	addwfc	btemp+11,w,c
  4428  000976  6EDA               	movwf	fsr2h,c
  4429  000978  C061  FFDE         	movff	btemp+1,postinc2
  4430  00097C  C062  FFDD         	movff	btemp+2,postdec2
  4431                           
  4432                           ;pipe.c: 64: pipe->pipe_itens--;
  4433                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4434  000980  0EFD               	movlw	-3
  4435  000982  CFE3 F061          	movff	plusw1,btemp+1
  4436  000986  0EFE               	movlw	-2
  4437  000988  CFE3 F062          	movff	plusw1,btemp+2
  4438  00098C  0E08               	movlw	8
  4439  00098E  2461               	addwf	btemp+1,w,c
  4440  000990  6ED9               	movwf	fsr2l,c
  4441  000992  0E00               	movlw	0
  4442  000994  2062               	addwfc	btemp+2,w,c
  4443  000996  6EDA               	movwf	fsr2h,c
  4444  000998  06DE               	decf	postinc2,f,c
  4445  00099A  0E00               	movlw	0
  4446  00099C  5ADD               	subwfb	postdec2,f,c
  4447                           
  4448                           ;pipe.c: 67: if (pipe->pos_bloqued_write > 0) {
  4449                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4450  00099E  0EFD               	movlw	-3
  4451  0009A0  CFE3 F061          	movff	plusw1,btemp+1
  4452  0009A4  0EFE               	movlw	-2
  4453  0009A6  CFE3 F062          	movff	plusw1,btemp+2
  4454  0009AA  0E0C               	movlw	12
  4455  0009AC  2461               	addwf	btemp+1,w,c
  4456  0009AE  6ED9               	movwf	fsr2l,c
  4457  0009B0  0E00               	movlw	0
  4458  0009B2  2062               	addwfc	btemp+2,w,c
  4459  0009B4  6EDA               	movwf	fsr2h,c
  4460  0009B6  50DE               	movf	postinc2,w,c
  4461  0009B8  10DE               	iorwf	postinc2,w,c
  4462  0009BA  B4D8               	btfsc	status,2,c
  4463  0009BC  D032               	goto	l1471
  4464                           
  4465                           ;pipe.c: 68: F_APTOS[pipe->pos_bloqued_write].task_state = READY;
  4466  0009BE  0E6E               	movlw	110
  4467  0009C0  6EE6               	movwf	postinc1,c
  4468  0009C2  0E00               	movlw	0
  4469  0009C4  6EE6               	movwf	postinc1,c
  4470                           
  4471                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  4472  0009C6  0EFB               	movlw	-5
  4473  0009C8  CFE3 F061          	movff	plusw1,btemp+1
  4474  0009CC  0EFC               	movlw	-4
  4475  0009CE  CFE3 F062          	movff	plusw1,btemp+2
  4476  0009D2  0E0C               	movlw	12
  4477  0009D4  2461               	addwf	btemp+1,w,c
  4478  0009D6  6ED9               	movwf	fsr2l,c
  4479  0009D8  0E00               	movlw	0
  4480  0009DA  2062               	addwfc	btemp+2,w,c
  4481  0009DC  6EDA               	movwf	fsr2h,c
  4482  0009DE  CFDE F061          	movff	postinc2,btemp+1
  4483  0009E2  CFDD F062          	movff	postdec2,btemp+2
  4484  0009E6  C061  FFE6         	movff	btemp+1,postinc1
  4485  0009EA  C062  FFE6         	movff	btemp+2,postinc1
  4486  0009EE  EC3D  F009         	call	___wmul	;wreg free
  4487  0009F2  0EF6               	movlw	low (_F_APTOS+8)
  4488  0009F4  2460               	addwf	btemp,w,c
  4489  0009F6  6ED9               	movwf	fsr2l,c
  4490  0009F8  0E00               	movlw	high (_F_APTOS+8)
  4491  0009FA  2061               	addwfc	btemp+1,w,c
  4492  0009FC  6EDA               	movwf	fsr2h,c
  4493  0009FE  0E01               	movlw	1
  4494  000A00  6EDF               	movwf	indf2,c
  4495                           
  4496                           ;pipe.c: 69: pipe->pos_bloqued_write = 0;
  4497                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4498  000A02  0EFD               	movlw	-3
  4499  000A04  CFE3 F061          	movff	plusw1,btemp+1
  4500  000A08  0EFE               	movlw	-2
  4501  000A0A  CFE3 F062          	movff	plusw1,btemp+2
  4502  000A0E  0E0C               	movlw	12
  4503  000A10  2461               	addwf	btemp+1,w,c
  4504  000A12  6ED9               	movwf	fsr2l,c
  4505  000A14  0E00               	movlw	0
  4506  000A16  2062               	addwfc	btemp+2,w,c
  4507  000A18  6EDA               	movwf	fsr2h,c
  4508  000A1A  0E00               	movlw	0
  4509  000A1C  6EDE               	movwf	postinc2,c
  4510  000A1E  0E00               	movlw	0
  4511  000A20  6EDD               	movwf	postdec2,c
  4512  000A22                     l1471:
  4513                           
  4514                           ;pipe.c: 73: }
  4515                           ;pipe.c: 75: return dado;
  4516                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  4517  000A22  0EFF               	movlw	-1
  4518  000A24  CFE3 F060          	movff	plusw1,btemp
  4519                           
  4520                           ; _read_pipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  4521  000A28  52E5               	movf	postdec1,f,c
  4522  000A2A  52E5               	movf	postdec1,f,c
  4523  000A2C  52E5               	movf	postdec1,f,c
  4524  000A2E  0012               	return		;funcret
  4525  000A30                     __end_of_read_pipe:
  4526                           	opt stack 0
  4527                           tosu	equ	0xFFF
  4528                           tosh	equ	0xFFE
  4529                           tosl	equ	0xFFD
  4530                           stkptr	equ	0xFFC
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           prodh	equ	0xFF4
  4536                           prodl	equ	0xFF3
  4537                           intcon	equ	0xFF2
  4538                           postinc0	equ	0xFEE
  4539                           postdec0	equ	0xFED
  4540                           plusw0	equ	0xFEB
  4541                           fsr0h	equ	0xFEA
  4542                           fsr0l	equ	0xFE9
  4543                           wreg	equ	0xFE8
  4544                           postinc1	equ	0xFE6
  4545                           postdec1	equ	0xFE5
  4546                           plusw1	equ	0xFE3
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           bsr	equ	0xFE0
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           plusw2	equ	0xFDB
  4554                           fsr2h	equ	0xFDA
  4555                           fsr2l	equ	0xFD9
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function _delay *****************
  4559 ;; Defined at:
  4560 ;;		line 58 in file "kernel.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  time_ms         2  [STACK] unsigned int 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1  [STACK] void 
  4567 ;; Registers used:
  4568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4574 ;;      Params:         0       0       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    7
  4581 ;; This function calls:
  4582 ;;		___wmul
  4583 ;;		_dispatcher
  4584 ;; This function is called by:
  4585 ;;		_ctpista
  4586 ;; This function uses a reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text21
  4590  0014CE                     __ptext21:
  4591                           	opt stack 0
  4592  0014CE                     _delay:
  4593                           	opt stack 19
  4594                           
  4595                           ;kernel.c: 60: (INTCONbits.GIE = 0);
  4596                           
  4597                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4598                           ;incstack = 0
  4599  0014CE  9EF2               	bcf	intcon,7,c	;volatile
  4600                           
  4601                           ;kernel.c: 62: F_APTOS[task_running].delay_time = time_ms;
  4602  0014D0  0E6E               	movlw	110
  4603  0014D2  6EE6               	movwf	postinc1,c
  4604  0014D4  0E00               	movlw	0
  4605  0014D6  6EE6               	movwf	postinc1,c
  4606  0014D8  C001  FFE6         	movff	_task_running,postinc1
  4607  0014DC  C002  FFE6         	movff	_task_running+1,postinc1
  4608  0014E0  EC3D  F009         	call	___wmul	;wreg free
  4609  0014E4  0EF4               	movlw	low (_F_APTOS+6)
  4610  0014E6  2460               	addwf	btemp,w,c
  4611  0014E8  6EE9               	movwf	fsr0l,c
  4612  0014EA  0E00               	movlw	high (_F_APTOS+6)
  4613  0014EC  2061               	addwfc	btemp+1,w,c
  4614  0014EE  6EEA               	movwf	fsr0h,c
  4615                           
  4616                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  4617  0014F0  50E1               	movf	fsr1l,w,c
  4618  0014F2  0FFE               	addlw	-2
  4619  0014F4  6ED9               	movwf	fsr2l,c
  4620  0014F6  50E2               	movf	fsr1h,w,c
  4621  0014F8  6EDA               	movwf	fsr2h,c
  4622  0014FA  0EFF               	movlw	255
  4623  0014FC  22DA               	addwfc	fsr2h,f,c
  4624  0014FE  CFDE FFEE          	movff	postinc2,postinc0
  4625  001502  CFDD FFED          	movff	postdec2,postdec0
  4626                           
  4627                           ;kernel.c: 63: dispatcher(SLEEPING);
  4628  001506  0E03               	movlw	3
  4629  001508  6EE6               	movwf	postinc1,c
  4630  00150A  EC0A  F000         	call	_dispatcher	;wreg free
  4631                           
  4632                           ;kernel.c: 65: (INTCONbits.GIE = 1);
  4633  00150E  8EF2               	bsf	intcon,7,c	;volatile
  4634                           
  4635                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  4636  001510  52E5               	movf	postdec1,f,c
  4637  001512  52E5               	movf	postdec1,f,c
  4638  001514  0012               	return		;funcret
  4639  001516                     __end_of_delay:
  4640                           	opt stack 0
  4641                           tosu	equ	0xFFF
  4642                           tosh	equ	0xFFE
  4643                           tosl	equ	0xFFD
  4644                           stkptr	equ	0xFFC
  4645                           tblptru	equ	0xFF8
  4646                           tblptrh	equ	0xFF7
  4647                           tblptrl	equ	0xFF6
  4648                           tablat	equ	0xFF5
  4649                           prodh	equ	0xFF4
  4650                           prodl	equ	0xFF3
  4651                           intcon	equ	0xFF2
  4652                           postinc0	equ	0xFEE
  4653                           postdec0	equ	0xFED
  4654                           plusw0	equ	0xFEB
  4655                           fsr0h	equ	0xFEA
  4656                           fsr0l	equ	0xFE9
  4657                           wreg	equ	0xFE8
  4658                           postinc1	equ	0xFE6
  4659                           postdec1	equ	0xFE5
  4660                           plusw1	equ	0xFE3
  4661                           fsr1h	equ	0xFE2
  4662                           fsr1l	equ	0xFE1
  4663                           bsr	equ	0xFE0
  4664                           indf2	equ	0xFDF
  4665                           postinc2	equ	0xFDE
  4666                           postdec2	equ	0xFDD
  4667                           plusw2	equ	0xFDB
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _task_idle *****************
  4673 ;; Defined at:
  4674 ;;		line 68 in file "kernel.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  1  [STACK] void 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, btemp+11
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4688 ;;      Params:         0       0       0       0       0       0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0
  4691 ;;      Totals:         0       0       0       0       0       0       0
  4692 ;;Total ram usage:        0 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    4
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_setupOS
  4699 ;; This function uses a reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text22
  4703  00164C                     __ptext22:
  4704                           	opt stack 0
  4705  00164C                     _task_idle:
  4706                           	opt stack 23
  4707                           
  4708                           ;kernel.c: 70: TRISDbits.RD4 = 0;
  4709                           
  4710                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  4711                           ;incstack = 0
  4712  00164C  9895               	bcf	3989,4,c	;volatile
  4713  00164E                     l1221:
  4714                           
  4715                           ;kernel.c: 73: PORTDbits.RD4 = ~PORTDbits.RD4;
  4716  00164E  A883               	btfss	3971,4,c	;volatile
  4717  001650  D002               	goto	u28_20
  4718  001652  0E01               	movlw	1
  4719  001654  D001               	goto	u28_26
  4720  001656                     u28_20:
  4721  001656  0E00               	movlw	0
  4722  001658                     u28_26:
  4723  001658  0AFF               	xorlw	255
  4724  00165A  6E6B               	movwf	btemp+11,c
  4725  00165C  3A6B               	swapf	btemp+11,f,c
  4726  00165E  5083               	movf	3971,w,c	;volatile
  4727  001660  186B               	xorwf	btemp+11,w,c
  4728  001662  0BEF               	andlw	-17
  4729  001664  186B               	xorwf	btemp+11,w,c
  4730  001666  6E83               	movwf	3971,c	;volatile
  4731                           
  4732                           ;kernel.c: 74: __nop();
  4733  001668  F000               	nop	
  4734  00166A  D7F1               	goto	l1221
  4735  00166C                     __end_of_task_idle:
  4736                           	opt stack 0
  4737                           tosu	equ	0xFFF
  4738                           tosh	equ	0xFFE
  4739                           tosl	equ	0xFFD
  4740                           stkptr	equ	0xFFC
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           postinc0	equ	0xFEE
  4749                           postdec0	equ	0xFED
  4750                           plusw0	equ	0xFEB
  4751                           fsr0h	equ	0xFEA
  4752                           fsr0l	equ	0xFE9
  4753                           wreg	equ	0xFE8
  4754                           postinc1	equ	0xFE6
  4755                           postdec1	equ	0xFE5
  4756                           plusw1	equ	0xFE3
  4757                           fsr1h	equ	0xFE2
  4758                           fsr1l	equ	0xFE1
  4759                           bsr	equ	0xFE0
  4760                           indf2	equ	0xFDF
  4761                           postinc2	equ	0xFDE
  4762                           postdec2	equ	0xFDD
  4763                           plusw2	equ	0xFDB
  4764                           fsr2h	equ	0xFDA
  4765                           fsr2l	equ	0xFD9
  4766                           status	equ	0xFD8
  4767                           
  4768 ;; *************** function _int_high *****************
  4769 ;; Defined at:
  4770 ;;		line 102 in file "kernel.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  i               2   15[COMRAM] unsigned int 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         0       0       0       0       0       0       0
  4785 ;;      Locals:         2       0       0       0       0       0       0
  4786 ;;      Temps:         15       0       0       0       0       0       0
  4787 ;;      Totals:        17       0       0       0       0       0       0
  4788 ;;Total ram usage:       17 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    3
  4791 ;; This function calls:
  4792 ;;		___wmul
  4793 ;;		_dispatcher
  4794 ;; This function is called by:
  4795 ;;		Interrupt level 2
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	intcode
  4800  000008                     __pintcode:
  4801                           	opt stack 0
  4802  000008                     _int_high:
  4803                           	opt stack 19
  4804                           
  4805                           ;incstack = 0
  4806  000008  EDDB  F005         	call	int_func,f	;refresh shadow registers
  4807                           tosu	equ	0xFFF
  4808                           tosh	equ	0xFFE
  4809                           tosl	equ	0xFFD
  4810                           stkptr	equ	0xFFC
  4811                           tblptru	equ	0xFF8
  4812                           tblptrh	equ	0xFF7
  4813                           tblptrl	equ	0xFF6
  4814                           tablat	equ	0xFF5
  4815                           prodh	equ	0xFF4
  4816                           prodl	equ	0xFF3
  4817                           intcon	equ	0xFF2
  4818                           postinc0	equ	0xFEE
  4819                           postdec0	equ	0xFED
  4820                           plusw0	equ	0xFEB
  4821                           fsr0h	equ	0xFEA
  4822                           fsr0l	equ	0xFE9
  4823                           wreg	equ	0xFE8
  4824                           postinc1	equ	0xFE6
  4825                           postdec1	equ	0xFE5
  4826                           plusw1	equ	0xFE3
  4827                           fsr1h	equ	0xFE2
  4828                           fsr1l	equ	0xFE1
  4829                           bsr	equ	0xFE0
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           plusw2	equ	0xFDB
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838                           	psect	intcode_body
  4839  000BB6                     __pintcode_body:
  4840                           	opt stack 19
  4841  000BB6                     int_func:
  4842                           	opt stack 19
  4843  000BB6  0006               	pop		; remove dummy address from shadow register refresh
  4844  000BB8  CFE1 F049          	movff	fsr1l,??_int_high+2
  4845  000BBC  CFE2 F04A          	movff	fsr1h,??_int_high+3
  4846  000BC0  CFD9 F04B          	movff	fsr2l,??_int_high+4
  4847  000BC4  CFDA F04C          	movff	fsr2h,??_int_high+5
  4848  000BC8  CFF3 F04D          	movff	prodl,??_int_high+6
  4849  000BCC  CFF4 F04E          	movff	prodh,??_int_high+7
  4850  000BD0  C060  F04F         	movff	btemp,??_int_high+8
  4851  000BD4  C061  F050         	movff	btemp+1,??_int_high+9
  4852  000BD8  C062  F051         	movff	btemp+2,??_int_high+10
  4853  000BDC  C068  F052         	movff	btemp+8,??_int_high+11
  4854  000BE0  C069  F053         	movff	btemp+9,??_int_high+12
  4855  000BE4  C06A  F054         	movff	btemp+10,??_int_high+13
  4856  000BE8  C06B  F055         	movff	btemp+11,??_int_high+14
  4857  000BEC  EE15  F064         	lfsr	1,___inthi_sp
  4858                           
  4859                           ;kernel.c: 104: u_int i;
  4860                           ;kernel.c: 106: if (INTCONbits.TMR0IF) {
  4861  000BF0  A4F2               	btfss	intcon,2,c	;volatile
  4862  000BF2  D07C               	goto	i2l106
  4863                           
  4864                           ;kernel.c: 107: INTCONbits.TMR0IF = 0;
  4865  000BF4  94F2               	bcf	intcon,2,c	;volatile
  4866                           
  4867                           ;kernel.c: 108: TMR0L = 252;
  4868  000BF6  0EFC               	movlw	252
  4869  000BF8  6ED6               	movwf	4054,c	;volatile
  4870                           
  4871                           ;kernel.c: 110: for (i = 1; i < tasks_installed; i++) {
  4872  000BFA  0E00               	movlw	0
  4873  000BFC  6E57               	movwf	int_high@i+1,c
  4874  000BFE  0E01               	movlw	1
  4875  000C00  6E56               	movwf	int_high@i,c
  4876  000C02  D05F               	goto	i2l101
  4877  000C04                     
  4878                           ;kernel.c: 111: if (F_APTOS[i].task_state == SLEEPING) {
  4879  000C04  0E6E               	movlw	110
  4880  000C06  6EE6               	movwf	postinc1,c
  4881  000C08  0E00               	movlw	0
  4882  000C0A  6EE6               	movwf	postinc1,c
  4883  000C0C  C056  FFE6         	movff	int_high@i,postinc1
  4884  000C10  C057  FFE6         	movff	int_high@i+1,postinc1
  4885  000C14  EC3D  F009         	call	___wmul	;wreg free
  4886  000C18  0E08               	movlw	8
  4887  000C1A  2660               	addwf	btemp,f,c
  4888  000C1C  0E00               	movlw	0
  4889  000C1E  2261               	addwfc	btemp+1,f,c
  4890  000C20  0EEE               	movlw	low _F_APTOS
  4891  000C22  2460               	addwf	btemp,w,c
  4892  000C24  6ED9               	movwf	fsr2l,c
  4893  000C26  0E00               	movlw	high _F_APTOS
  4894  000C28  2061               	addwfc	btemp+1,w,c
  4895  000C2A  6EDA               	movwf	fsr2h,c
  4896  000C2C  0E03               	movlw	3
  4897  000C2E  18DE               	xorwf	postinc2,w,c
  4898  000C30  A4D8               	btfss	status,2,c
  4899  000C32  D045               	goto	i2l104
  4900                           
  4901                           ;kernel.c: 112: F_APTOS[i].delay_time--;
  4902  000C34  0E6E               	movlw	110
  4903  000C36  6EE6               	movwf	postinc1,c
  4904  000C38  0E00               	movlw	0
  4905  000C3A  6EE6               	movwf	postinc1,c
  4906  000C3C  C056  FFE6         	movff	int_high@i,postinc1
  4907  000C40  C057  FFE6         	movff	int_high@i+1,postinc1
  4908  000C44  EC3D  F009         	call	___wmul	;wreg free
  4909  000C48  0E06               	movlw	6
  4910  000C4A  2660               	addwf	btemp,f,c
  4911  000C4C  0E00               	movlw	0
  4912  000C4E  2261               	addwfc	btemp+1,f,c
  4913  000C50  0EEE               	movlw	low _F_APTOS
  4914  000C52  2460               	addwf	btemp,w,c
  4915  000C54  6ED9               	movwf	fsr2l,c
  4916  000C56  0E00               	movlw	high _F_APTOS
  4917  000C58  2061               	addwfc	btemp+1,w,c
  4918  000C5A  6EDA               	movwf	fsr2h,c
  4919  000C5C  06DE               	decf	postinc2,f,c
  4920  000C5E  0E00               	movlw	0
  4921  000C60  5ADD               	subwfb	postdec2,f,c
  4922                           
  4923                           ;kernel.c: 113: if (F_APTOS[i].delay_time == 0) {
  4924  000C62  0E6E               	movlw	110
  4925  000C64  6EE6               	movwf	postinc1,c
  4926  000C66  0E00               	movlw	0
  4927  000C68  6EE6               	movwf	postinc1,c
  4928  000C6A  C056  FFE6         	movff	int_high@i,postinc1
  4929  000C6E  C057  FFE6         	movff	int_high@i+1,postinc1
  4930  000C72  EC3D  F009         	call	___wmul	;wreg free
  4931  000C76  0E06               	movlw	6
  4932  000C78  2660               	addwf	btemp,f,c
  4933  000C7A  0E00               	movlw	0
  4934  000C7C  2261               	addwfc	btemp+1,f,c
  4935  000C7E  0EEE               	movlw	low _F_APTOS
  4936  000C80  2460               	addwf	btemp,w,c
  4937  000C82  6ED9               	movwf	fsr2l,c
  4938  000C84  0E00               	movlw	high _F_APTOS
  4939  000C86  2061               	addwfc	btemp+1,w,c
  4940  000C88  6EDA               	movwf	fsr2h,c
  4941  000C8A  50DE               	movf	postinc2,w,c
  4942  000C8C  10DE               	iorwf	postinc2,w,c
  4943  000C8E  A4D8               	btfss	status,2,c
  4944  000C90  D016               	goto	i2l104
  4945                           
  4946                           ;kernel.c: 114: F_APTOS[i].task_state = READY;
  4947  000C92  0E6E               	movlw	110
  4948  000C94  6EE6               	movwf	postinc1,c
  4949  000C96  0E00               	movlw	0
  4950  000C98  6EE6               	movwf	postinc1,c
  4951  000C9A  C056  FFE6         	movff	int_high@i,postinc1
  4952  000C9E  C057  FFE6         	movff	int_high@i+1,postinc1
  4953  000CA2  EC3D  F009         	call	___wmul	;wreg free
  4954  000CA6  0E08               	movlw	8
  4955  000CA8  2660               	addwf	btemp,f,c
  4956  000CAA  0E00               	movlw	0
  4957  000CAC  2261               	addwfc	btemp+1,f,c
  4958  000CAE  0EEE               	movlw	low _F_APTOS
  4959  000CB0  2460               	addwf	btemp,w,c
  4960  000CB2  6ED9               	movwf	fsr2l,c
  4961  000CB4  0E00               	movlw	high _F_APTOS
  4962  000CB6  2061               	addwfc	btemp+1,w,c
  4963  000CB8  6EDA               	movwf	fsr2h,c
  4964  000CBA  0E01               	movlw	1
  4965  000CBC  6EDF               	movwf	indf2,c
  4966  000CBE                     i2l104:
  4967  000CBE  4A56               	infsnz	int_high@i,f,c
  4968  000CC0  2A57               	incf	int_high@i+1,f,c
  4969  000CC2                     i2l101:
  4970  000CC2  5003               	movf	_tasks_installed,w,c
  4971  000CC4  5C56               	subwf	int_high@i,w,c
  4972  000CC6  5004               	movf	_tasks_installed+1,w,c
  4973  000CC8  5857               	subwfb	int_high@i+1,w,c
  4974  000CCA  A0D8               	btfss	status,0,c
  4975  000CCC  D79B               	goto	i2l102
  4976                           
  4977                           ;kernel.c: 115: }
  4978                           ;kernel.c: 116: }
  4979                           ;kernel.c: 117: }
  4980                           ;kernel.c: 119: quantum--;
  4981  000CCE  066C               	decf	_quantum,f,c
  4982  000CD0  A0D8               	btfss	status,0,c
  4983  000CD2  066D               	decf	_quantum+1,f,c
  4984                           
  4985                           ;kernel.c: 120: if (quantum == 0) {
  4986  000CD4  506C               	movf	_quantum,w,c
  4987  000CD6  106D               	iorwf	_quantum+1,w,c
  4988  000CD8  A4D8               	btfss	status,2,c
  4989  000CDA  D008               	goto	i2l106
  4990                           
  4991                           ;kernel.c: 121: quantum = 4;
  4992  000CDC  0E00               	movlw	0
  4993  000CDE  6E6D               	movwf	_quantum+1,c
  4994  000CE0  0E04               	movlw	4
  4995  000CE2  6E6C               	movwf	_quantum,c
  4996                           
  4997                           ;kernel.c: 122: dispatcher(READY);
  4998  000CE4  0E01               	movlw	1
  4999  000CE6  6EE6               	movwf	postinc1,c
  5000  000CE8  EC0A  F000         	call	_dispatcher	;wreg free
  5001  000CEC                     i2l106:
  5002  000CEC  C055  F06B         	movff	??_int_high+14,btemp+11
  5003  000CF0  C054  F06A         	movff	??_int_high+13,btemp+10
  5004  000CF4  C053  F069         	movff	??_int_high+12,btemp+9
  5005  000CF8  C052  F068         	movff	??_int_high+11,btemp+8
  5006  000CFC  C051  F062         	movff	??_int_high+10,btemp+2
  5007  000D00  C050  F061         	movff	??_int_high+9,btemp+1
  5008  000D04  C04F  F060         	movff	??_int_high+8,btemp
  5009  000D08  C04E  FFF4         	movff	??_int_high+7,prodh
  5010  000D0C  C04D  FFF3         	movff	??_int_high+6,prodl
  5011  000D10  C04C  FFDA         	movff	??_int_high+5,fsr2h
  5012  000D14  C04B  FFD9         	movff	??_int_high+4,fsr2l
  5013  000D18  C04A  FFE2         	movff	??_int_high+3,fsr1h
  5014  000D1C  C049  FFE1         	movff	??_int_high+2,fsr1l
  5015  000D20  0011               	retfie		f
  5016  000D22                     __end_of_int_high:
  5017                           	opt stack 0
  5018  0000                     tosu	equ	0xFFF
  5019                           tosh	equ	0xFFE
  5020                           tosl	equ	0xFFD
  5021                           stkptr	equ	0xFFC
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           postinc0	equ	0xFEE
  5030                           postdec0	equ	0xFED
  5031                           plusw0	equ	0xFEB
  5032                           fsr0h	equ	0xFEA
  5033                           fsr0l	equ	0xFE9
  5034                           wreg	equ	0xFE8
  5035                           postinc1	equ	0xFE6
  5036                           postdec1	equ	0xFE5
  5037                           plusw1	equ	0xFE3
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           bsr	equ	0xFE0
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           plusw2	equ	0xFDB
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           tosu	equ	0xFFF
  5049                           tosh	equ	0xFFE
  5050                           tosl	equ	0xFFD
  5051                           stkptr	equ	0xFFC
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           postinc0	equ	0xFEE
  5060                           postdec0	equ	0xFED
  5061                           plusw0	equ	0xFEB
  5062                           fsr0h	equ	0xFEA
  5063                           fsr0l	equ	0xFE9
  5064                           wreg	equ	0xFE8
  5065                           postinc1	equ	0xFE6
  5066                           postdec1	equ	0xFE5
  5067                           plusw1	equ	0xFE3
  5068                           fsr1h	equ	0xFE2
  5069                           fsr1l	equ	0xFE1
  5070                           bsr	equ	0xFE0
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           plusw2	equ	0xFDB
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079                           	psect	rparam
  5080  0000                     tosu	equ	0xFFF
  5081                           tosh	equ	0xFFE
  5082                           tosl	equ	0xFFD
  5083                           stkptr	equ	0xFFC
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           intcon	equ	0xFF2
  5091                           postinc0	equ	0xFEE
  5092                           postdec0	equ	0xFED
  5093                           plusw0	equ	0xFEB
  5094                           fsr0h	equ	0xFEA
  5095                           fsr0l	equ	0xFE9
  5096                           wreg	equ	0xFE8
  5097                           postinc1	equ	0xFE6
  5098                           postdec1	equ	0xFE5
  5099                           plusw1	equ	0xFE3
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           bsr	equ	0xFE0
  5103                           indf2	equ	0xFDF
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           plusw2	equ	0xFDB
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111                           	psect	temp
  5112  000060                     btemp:
  5113                           	opt stack 0
  5114  000060                     	ds	12
  5115  0000                     wtemp0	set	btemp
  5116  0000                     wtemp1	set	btemp+2
  5117  0000                     wtemp2	set	btemp+4
  5118  0000                     wtemp3	set	btemp+6
  5119  0000                     wtemp4	set	btemp+8
  5120  0000                     wtemp5	set	btemp+10
  5121  0000                     wtemp6	set	btemp+1
  5122  0000                     ttemp0	set	btemp
  5123  0000                     ttemp1	set	btemp+3
  5124  0000                     ttemp2	set	btemp+6
  5125  0000                     ttemp3	set	btemp+9
  5126  0000                     ltemp0	set	btemp
  5127  0000                     ltemp1	set	btemp+4
  5128  0000                     ltemp2	set	btemp+8
  5129                           tosu	equ	0xFFF
  5130                           tosh	equ	0xFFE
  5131                           tosl	equ	0xFFD
  5132                           stkptr	equ	0xFFC
  5133                           tblptru	equ	0xFF8
  5134                           tblptrh	equ	0xFF7
  5135                           tblptrl	equ	0xFF6
  5136                           tablat	equ	0xFF5
  5137                           prodh	equ	0xFF4
  5138                           prodl	equ	0xFF3
  5139                           intcon	equ	0xFF2
  5140                           postinc0	equ	0xFEE
  5141                           postdec0	equ	0xFED
  5142                           plusw0	equ	0xFEB
  5143                           fsr0h	equ	0xFEA
  5144                           fsr0l	equ	0xFE9
  5145                           wreg	equ	0xFE8
  5146                           postinc1	equ	0xFE6
  5147                           postdec1	equ	0xFE5
  5148                           plusw1	equ	0xFE3
  5149                           fsr1h	equ	0xFE2
  5150                           fsr1l	equ	0xFE1
  5151                           bsr	equ	0xFE0
  5152                           indf2	equ	0xFDF
  5153                           postinc2	equ	0xFDE
  5154                           postdec2	equ	0xFDD
  5155                           plusw2	equ	0xFDB
  5156                           fsr2h	equ	0xFDA
  5157                           fsr2l	equ	0xFD9
  5158                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     25      97
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    read_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe1(COMRAM[14]), 

    write_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe1(COMRAM[14]), 

    create_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe1(COMRAM[14]), 

    sem_post@s	PTR struct sem size(2) Largest target is 24
		 -> pista(COMRAM[24]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 24
		 -> pista(COMRAM[24]), 

    sem_init@s	PTR struct sem size(2) Largest target is 16
		 -> semafaro(COMRAM[16]), 

    createAviao@av	PTR struct aviao size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), aviaozinho2(COMRAM[6]), aviaozinho1(COMRAM[6]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    S100tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    main@mem	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5782
                                             23 COMRAM     2     2      0
                       _SRAMInitHeap
                          _SRAMalloc
                        _create_task
                           _sem_init
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2465
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     105
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sem_init                                             4     0      4     240
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               0     0      0    5226
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               0     0      0    5226
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                             13    13      0   16097
                              _delay
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4096
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               0     0      0    5226
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               0     0      0    5226
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                             13    13      0   16097
                              _delay
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4096
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4162
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMInitHeap
   _SRAMalloc
     __SRAMmerge
   _create_task
     ___wmul
   _sem_init
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _aviao1 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _aviao1 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     426      17       69.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     19      61       1       84.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CF      15        0.0%
DATA                 0      0     4FA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Oct 28 00:26:53 2018

                     l25 1394                       l78 0358                       u10 0D88  
                    l154 055C                      l229 089A                      l246 1482  
                    l247 14B0                      l927 0E54                      l945 1094  
                    l955 1104                      l895 0D8C                      l999 071E  
                    _BSR 000FE0                      u100 148E                      u120 0716  
                    u160 07AC                      u411 1466                      _TOS 000FFD  
          create_task@id 0058                      wreg 000FE8        SRAMInitHeap@pHeap 005A  
      SRAMInitHeap@count 0058                     l1001 0732                     l1019 07D8  
                   l1221 164E                     l1029 0818                     l1501 0F98  
                   l1407 02EA                     l1355 13AE                     l1451 0BAC  
                   l1471 0A22                     l1551 1588                     l1439 0A7C  
                   l1545 1546                     l1459 08EE                     l1387 00D0  
                   l1581 0636                     l1487 1074                     _TOSH 000FFE  
                   _TOSL 000FFD                     _WREG 000FE8                     _TOSU 000FFF  
                   u7_20 10BC                     u9_20 1122                     _main 1310  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0060                     prodh 000FF4  
                   prodl 000FF3                     start 000C             ___param_bank 000000  
                  ?_main 0047          _tasks_installed 0003                    i2l101 0CC2  
                  i2l102 0C04                    i2l104 0CBE          __end_of___lwmod 1138  
                  i2l106 0CEC                    _TMR0L 000FD6                    u51_20 0EA6  
                  u28_20 1656                    u60_20 0694                    u28_26 1658  
                  u60_26 0696                    u45_20 0528                    u58_20 05CC  
                  u58_26 05CE               __SRAMmerge 0D22                    _delay 14CE  
        __end_of_ctpista 0702                    _pipe1 002D                    _pista 0005  
        create_task@task 0080       __size_of_SRAMalloc 01A2                    tablat 000FF5  
                  ltemp0 0060                    ltemp1 0064                    ltemp2 0068  
        __end_of_setupOS 164C                    plusw0 000FEB                    plusw1 000FE3  
                  plusw2 000FDB                    ttemp0 0060                    ttemp1 0063  
                  ttemp2 0066                    ttemp3 0069                    status 000FD8  
                  wtemp0 0060                    wtemp1 0062                    wtemp2 0064  
                  wtemp3 0066                    wtemp4 0068                    wtemp5 006A  
                  wtemp6 0061          __initialization 159A             __end_of_main 1396  
                 ??_main 005E            __activetblptr 000000                   _STATUS 000FD8  
   __size_of_createAviao 009C                   _STKPTR 000FFC     __size_of_create_pipe 00A6  
   __size_of_create_task 005A                   ___wmul 127A                   _aviao1 1516  
                 _aviao2 1558        __end_of_SRAMalloc 08A4                   clear_0 15BA  
                 clear_1 15CC         __end_of_int_high 0D22         create_task@prior 005A  
       __end_of_sem_init 1616         __end_of_sem_wait 107C         __end_of_sem_post 0FA0  
           __pdataCOMRAM 006C                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_setupOS 005E         __end_of_start_os 1670  
             __accesstop 0080  __end_of__initialization 15D2            ___rparam_used 000001  
         __pcstackCOMRAM 0047               ___inthi_sp 0564            __end_of_delay 1516  
          __uDynamicHeap 0314       __size_of_read_pipe 018C      __size_of__SRAMmerge 0152  
     __size_of_task_idle 0020                  _F_APTOS 00EE               _dispatcher 0014  
              ?_int_high 0047                  __Hparam 0000                ?_sem_init 0058  
                __Lparam 0000          __size_of___wmul 0096                  ___lwmod 107C  
              ?_start_os 0047          __size_of_aviao1 0042          __size_of_aviao2 0042  
                __pcinit 159A                  __ramtop 0600            ?_SRAMInitHeap 0047  
                __ptext0 1310                  __ptext1 166C                  __ptext2 1616  
                __ptext3 141A                  __ptext4 127A                  __ptext5 1474  
                __ptext6 15D8                  __ptext7 0702                  __ptext8 0D22  
                __ptext9 1516                _T0CONbits 000FD5                  _ctpista 0554  
      __end_of_read_pipe 0A30                  _setupOS 1616        create_task@task_f 005C  
                _quantum 006C                  main@mem 005E           __pintcode_body 0BB6  
   end_of_initialization 15D2        __end_of_task_idle 166C                  int_func 0BB6  
             ??_int_high 0047               ??_sem_init 005C                  postdec0 000FED  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_start_os 0058  
         ??_SRAMInitHeap 0058                _PORTDbits 000F83                _SRAMalloc 0702  
              _TRISDbits 000F95            sem_init@value 005A            ??_create_task 005E  
     __end_of__SRAMmerge 0E74           __end_of___wmul 1310            __pidataCOMRAM 1670  
         __end_of_aviao1 1558           __end_of_aviao2 159A               _write_pipe 0A30  
    start_initialization 159A      __end_of_createAviao 127A      __end_of_create_pipe 11DE  
    __end_of_create_task 1474      __size_of_dispatcher 0540              __pbssBIGRAM 00EE  
            __pbssCOMRAM 0001            __pcstackBANK0 0080     __end_of_SRAMInitHeap 14CE  
      __size_of_int_high 0D1A                __pintcode 0008        __size_of_sem_init 003E  
      __size_of_sem_wait 00DC        __size_of_sem_post 012C        __size_of_start_os 0004  
               ?_setupOS 0047           __size_of_delay 0048     __end_of_rr_scheduler 141A  
              _read_pipe 08A4              _createAviao 11DE              _create_pipe 1138  
            _create_task 141A                _task_idle 164C              _aviaozinho1 0041  
            _aviaozinho2 003B      __size_of_write_pipe 0186                 __Hrparam 0000  
               __Lrparam 0000                int_high@i 0056       __end_of_dispatcher 0554  
       __size_of___lwmod 00BC         __size_of_ctpista 01AE    __size_of_SRAMInitHeap 005A  
               __ptext10 0A30                 __ptext11 0014                 __ptext20 08A4  
               __ptext12 1396                 __ptext21 14CE                 __ptext13 107C  
               __ptext22 164C                 __ptext14 1138                 __ptext15 11DE  
               __ptext16 1558                 __ptext17 0554                 __ptext18 0FA0  
               __ptext19 0E74         __size_of_setupOS 0036                sem_init@s 0058  
          __size_of_main 0086                 _int_high 0008                 _semafaro 001D  
               _sem_init 15D8                 _sem_wait 0FA0                 _sem_post 0E74  
           _task_running 0001                 _start_os 166C             _SRAMInitHeap 1474  
  __size_of_rr_scheduler 0084               _INTCONbits 000FF2                 intlevel1 0000  
               intlevel2 0000             _rr_scheduler 1396             ?_create_task 0058  
     __end_of_write_pipe 0BB6  
