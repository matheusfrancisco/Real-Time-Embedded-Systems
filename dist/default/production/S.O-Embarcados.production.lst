

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Oct 28 00:15:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4520 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76 ;;___wmul@product	offset	0
    77 ;;___wmul@multiplier	offset=-2 (param)
    78 ;;___wmul@multiplicand	offset=-4 (param)
    79 ;;SRAMalloc@pHeap	offset	0
    80 ;;SRAMalloc@temp	offset	2
    81 ;;SRAMalloc@segHeader	offset	4
    82 ;;SRAMalloc@segLen	offset	5
    83 ;;SRAMalloc@nBytes	offset=-1 (param)
    84 ;;__SRAMmerge@pSegB	offset	0
    85 ;;__SRAMmerge@uSegB	offset	2
    86 ;;__SRAMmerge@uSegA	offset	3
    87 ;;__SRAMmerge@uSum	offset	4
    88 ;;__SRAMmerge@pSegA	offset=-2 (param)
    89 ;;write_pipe@pipe	offset=-2 (param)
    90 ;;write_pipe@data	offset=-3 (param)
    91 ;;dispatcher@state	offset=-1 (param)
    92 ;;rr_scheduler@next_task_to_run	offset	0
    93 ;;___wmul@product	offset	0
    94 ;;___wmul@multiplier	offset=-2 (param)
    95 ;;___wmul@multiplicand	offset=-4 (param)
    96 ;;___lwmod@counter	offset	0
    97 ;;___lwmod@dividend	offset=-2 (param)
    98 ;;___lwmod@divisor	offset=-4 (param)
    99 ;;create_pipe@pipe	offset=-2 (param)
   100 ;;createAviao@av	offset=-2 (param)
   101 ;;createAviao@tempo_v	offset=-4 (param)
   102 ;;createAviao@tempo_p	offset=-6 (param)
   103 ;;createAviao@numero	offset=-8 (param)
   104 ;;SRAMalloc@pHeap	offset	0
   105 ;;SRAMalloc@temp	offset	2
   106 ;;SRAMalloc@segHeader	offset	4
   107 ;;SRAMalloc@segLen	offset	5
   108 ;;SRAMalloc@nBytes	offset=-1 (param)
   109 ;;__SRAMmerge@pSegB	offset	0
   110 ;;__SRAMmerge@uSegB	offset	2
   111 ;;__SRAMmerge@uSegA	offset	3
   112 ;;__SRAMmerge@uSum	offset	4
   113 ;;__SRAMmerge@pSegA	offset=-2 (param)
   114 ;;ctpista@tp_549	offset	0
   115 ;;ctpista@tv_548	offset	2
   116 ;;ctpista@n_547	offset	4
   117 ;;ctpista@tp	offset	6
   118 ;;ctpista@tv	offset	8
   119 ;;ctpista@n	offset	10
   120 ;;ctpista@dado	offset	12
   121 ;;sem_wait@s	offset=-2 (param)
   122 ;;sem_post@s	offset=-2 (param)
   123 ;;read_pipe@dado	offset	0
   124 ;;read_pipe@pipe	offset=-2 (param)
   125 ;;delay@time_ms	offset=-2 (param)
   126 ;;dispatcher@state	offset=-1 (param)
   127 ;;rr_scheduler@next_task_to_run	offset	0
   128 ;;___wmul@product	offset	0
   129 ;;___wmul@multiplier	offset=-2 (param)
   130 ;;___wmul@multiplicand	offset=-4 (param)
   131 ;;___lwmod@counter	offset	0
   132 ;;___lwmod@dividend	offset=-2 (param)
   133 ;;___lwmod@divisor	offset=-4 (param)
   134                           
   135                           	psect	idataCOMRAM
   136  00160E                     __pidataCOMRAM:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _quantum
   140  00160E  0004               	dw	4
   141  0000                     _TOS	set	4093
   142  0000                     _TMR0L	set	4054
   143  0000                     _T0CONbits	set	4053
   144  0000                     _PORTDbits	set	3971
   145  0000                     _TRISDbits	set	3989
   146  0000                     _STKPTR	set	4092
   147  0000                     _TOSH	set	4094
   148  0000                     _TOSL	set	4093
   149  0000                     _TOSU	set	4095
   150  0000                     _WREG	set	4072
   151  0000                     _STATUS	set	4056
   152  0000                     _BSR	set	4064
   153  0000                     _INTCONbits	set	4082
   154                           
   155                           ; #config settings
   156                           
   157                           	psect	cinit
   158  001538                     __pcinit:
   159                           	opt stack 0
   160  001538                     start_initialization:
   161                           	opt stack 0
   162  001538                     __initialization:
   163                           	opt stack 0
   164                           
   165                           ; Initialize objects allocated to COMRAM (2 bytes)
   166                           ; load TBLPTR registers with __pidataCOMRAM
   167  001538  0E0E               	movlw	low __pidataCOMRAM
   168  00153A  6EF6               	movwf	tblptrl,c
   169  00153C  0E16               	movlw	high __pidataCOMRAM
   170  00153E  6EF7               	movwf	tblptrh,c
   171  001540  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   172  001542  6EF8               	movwf	tblptru,c
   173  001544  0009               	tblrd		*+	;fetch initializer
   174  001546  CFF5 F069          	movff	tablat,__pdataCOMRAM
   175  00154A  0009               	tblrd		*+	;fetch initializer
   176  00154C  CFF5 F06A          	movff	tablat,__pdataCOMRAM+1
   177                           
   178                           ; Clear objects allocated to BIGRAM (1062 bytes)
   179  001550  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   180  001554  EE24 F026          	lfsr	2,1062
   181  001558                     clear_0:
   182  001558  6AEE               	clrf	postinc0,c
   183  00155A  50DD               	movf	postdec2,w,c
   184  00155C  50D9               	movf	fsr2l,w,c
   185  00155E  E1FC               	bnz	clear_0
   186  001560  50DA               	movf	fsr2h,w,c
   187  001562  E1FA               	bnz	clear_0
   188                           
   189                           ; Clear objects allocated to COMRAM (67 bytes)
   190  001564  EE00  F001         	lfsr	0,__pbssCOMRAM
   191  001568  0E43               	movlw	67
   192  00156A                     clear_1:
   193  00156A  6AEE               	clrf	postinc0,c
   194  00156C  06E8               	decf	wreg,f,c
   195  00156E  E1FD               	bnz	clear_1
   196  001570                     end_of_initialization:
   197                           	opt stack 0
   198  001570                     __end_of__initialization:
   199                           	opt stack 0
   200  001570  0100               	movlb	0
   201  001572  EF57  F009         	goto	_main	;jump to C main() function
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec2	equ	0xFDD
   209                           fsr2h	equ	0xFDA
   210                           fsr2l	equ	0xFD9
   211                           
   212                           	psect	bssCOMRAM
   213  000001                     __pbssCOMRAM:
   214                           	opt stack 0
   215  000001                     _task_running:
   216                           	opt stack 0
   217  000001                     	ds	2
   218  000003                     _tasks_installed:
   219                           	opt stack 0
   220  000003                     	ds	2
   221  000005                     _pista:
   222                           	opt stack 0
   223  000005                     	ds	24
   224  00001D                     _semafaro:
   225                           	opt stack 0
   226  00001D                     	ds	16
   227  00002D                     _pipe1:
   228                           	opt stack 0
   229  00002D                     	ds	11
   230  000038                     _aviaozinho2:
   231                           	opt stack 0
   232  000038                     	ds	6
   233  00003E                     _aviaozinho1:
   234                           	opt stack 0
   235  00003E                     	ds	6
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec2	equ	0xFDD
   243                           fsr2h	equ	0xFDA
   244                           fsr2l	equ	0xFD9
   245                           
   246                           	psect	dataCOMRAM
   247  000069                     __pdataCOMRAM:
   248                           	opt stack 0
   249  000069                     _quantum:
   250                           	opt stack 0
   251  000069                     	ds	2
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec2	equ	0xFDD
   259                           fsr2h	equ	0xFDA
   260                           fsr2l	equ	0xFD9
   261                           
   262                           	psect	bssBIGRAM
   263  0000EE                     __pbssBIGRAM:
   264                           	opt stack 0
   265  0000EE                     _F_APTOS:
   266                           	opt stack 0
   267  0000EE                     	ds	550
   268  000314                     __uDynamicHeap:
   269                           	opt stack 0
   270  000314                     	ds	512
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec2	equ	0xFDD
   278                           fsr2h	equ	0xFDA
   279                           fsr2l	equ	0xFD9
   280                           
   281                           	psect	cstackBANK0
   282  000080                     __pcstackBANK0:
   283                           	opt stack 0
   284  000080                     create_task@task:
   285                           	opt stack 0
   286                           
   287                           ; 110 bytes @ 0x0
   288  000080                     	ds	110
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec2	equ	0xFDD
   296                           fsr2h	equ	0xFDA
   297                           fsr2l	equ	0xFD9
   298                           
   299                           	psect	cstackCOMRAM
   300  000044                     __pcstackCOMRAM:
   301                           	opt stack 0
   302  000044                     ??_int_high:
   303                           
   304                           ; 1 bytes @ 0x0
   305  000044                     	ds	15
   306  000053                     int_high@i:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xF
   310  000053                     	ds	2
   311  000055                     create_task@id:
   312                           	opt stack 0
   313  000055                     sem_init@s:
   314                           	opt stack 0
   315  000055                     SRAMInitHeap@count:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x11
   319  000055                     	ds	2
   320  000057                     create_task@prior:
   321                           	opt stack 0
   322  000057                     sem_init@value:
   323                           	opt stack 0
   324  000057                     SRAMInitHeap@pHeap:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x13
   328  000057                     	ds	2
   329  000059                     create_task@task_f:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x15
   333  000059                     	ds	2
   334  00005B                     main@mem:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x17
   338  00005B                     	ds	2
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           postdec2	equ	0xFDD
   346                           fsr2h	equ	0xFDA
   347                           fsr2l	equ	0xFD9
   348                           
   349 ;;
   350 ;;Main: autosize = 0, tempsize = 0, incstack = 1, save=0
   351 ;;
   352 ;; *************** function _main *****************
   353 ;; Defined at:
   354 ;;		line 15 in file "main.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  mem             2   23[COMRAM] PTR unsigned char 
   359 ;;		 -> _uDynamicHeap(512), NULL(0), 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, pro
      +dl, prodh, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   369 ;;      Params:         0       0       0       0       0       0       0
   370 ;;      Locals:         2       0       0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0
   372 ;;      Totals:         2       0       0       0       0       0       0
   373 ;;Total ram usage:        2 bytes
   374 ;; Hardware stack levels required when called:   12
   375 ;; This function calls:
   376 ;;		_SRAMInitHeap
   377 ;;		_SRAMalloc
   378 ;;		_create_task
   379 ;;		_sem_init
   380 ;;		_setupOS
   381 ;;		_start_os
   382 ;; This function is called by:
   383 ;;		Startup code after reset
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text0
   388  0012AE                     __ptext0:
   389                           	opt stack 0
   390  0012AE                     _main:
   391                           	opt stack 19
   392                           
   393                           ;main.c: 17: setupOS();
   394                           
   395                           ;incstack = 0
   396  0012AE  ECDA  F00A         	call	_setupOS	;wreg free
   397                           
   398                           ;main.c: 18: SRAMInitHeap();
   399  0012B2  EC09  F00A         	call	_SRAMInitHeap	;wreg free
   400                           
   401                           ;main.c: 19: sem_init(&semafaro, 0);
   402  0012B6  0E1D               	movlw	low _semafaro
   403  0012B8  6E55               	movwf	sem_init@s,c
   404  0012BA  0E00               	movlw	high _semafaro
   405  0012BC  6E56               	movwf	sem_init@s+1,c
   406  0012BE  0E00               	movlw	0
   407  0012C0  6E58               	movwf	sem_init@value+1,c
   408  0012C2  0E00               	movlw	0
   409  0012C4  6E57               	movwf	sem_init@value,c
   410  0012C6  ECBB  F00A         	call	_sem_init	;wreg free
   411                           
   412                           ;main.c: 23: create_task(2, 3, &ctpista);
   413  0012CA  0E00               	movlw	0
   414  0012CC  6E56               	movwf	create_task@id+1,c
   415  0012CE  0E02               	movlw	2
   416  0012D0  6E55               	movwf	create_task@id,c
   417  0012D2  0E00               	movlw	0
   418  0012D4  6E58               	movwf	create_task@prior+1,c
   419  0012D6  0E03               	movlw	3
   420  0012D8  6E57               	movwf	create_task@prior,c
   421  0012DA  0E54               	movlw	low _ctpista
   422  0012DC  6E59               	movwf	create_task@task_f,c
   423  0012DE  0E05               	movlw	high _ctpista
   424  0012E0  6E5A               	movwf	create_task@task_f+1,c
   425  0012E2  ECDC  F009         	call	_create_task	;wreg free
   426                           
   427                           ;main.c: 24: create_task(3, 3, &aviao1);
   428  0012E6  0E00               	movlw	0
   429  0012E8  6E56               	movwf	create_task@id+1,c
   430  0012EA  0E03               	movlw	3
   431  0012EC  6E55               	movwf	create_task@id,c
   432  0012EE  0E00               	movlw	0
   433  0012F0  6E58               	movwf	create_task@prior+1,c
   434  0012F2  0E03               	movlw	3
   435  0012F4  6E57               	movwf	create_task@prior,c
   436  0012F6  0EB4               	movlw	low _aviao1
   437  0012F8  6E59               	movwf	create_task@task_f,c
   438  0012FA  0E14               	movlw	high _aviao1
   439  0012FC  6E5A               	movwf	create_task@task_f+1,c
   440  0012FE  ECDC  F009         	call	_create_task	;wreg free
   441                           
   442                           ;main.c: 25: create_task(4, 3, &aviao2);
   443  001302  0E00               	movlw	0
   444  001304  6E56               	movwf	create_task@id+1,c
   445  001306  0E04               	movlw	4
   446  001308  6E55               	movwf	create_task@id,c
   447  00130A  0E00               	movlw	0
   448  00130C  6E58               	movwf	create_task@prior+1,c
   449  00130E  0E03               	movlw	3
   450  001310  6E57               	movwf	create_task@prior,c
   451  001312  0EF6               	movlw	low _aviao2
   452  001314  6E59               	movwf	create_task@task_f,c
   453  001316  0E14               	movlw	high _aviao2
   454  001318  6E5A               	movwf	create_task@task_f+1,c
   455  00131A  ECDC  F009         	call	_create_task	;wreg free
   456                           
   457                           ;main.c: 29: start_os();
   458  00131E  EC05  F00B         	call	_start_os	;wreg free
   459                           
   460                           ;main.c: 33: byte *mem = SRAMalloc(100);
   461  001322  0E64               	movlw	100
   462  001324  6EE6               	movwf	postinc1,c
   463  001326  EC81  F003         	call	_SRAMalloc	;wreg free
   464  00132A  C05D  F05B         	movff	btemp,main@mem
   465  00132E  C05E  F05C         	movff	btemp+1,main@mem+1
   466  001332                     l25:
   467  001332  D7FF               	goto	l25
   468  001334                     __end_of_main:
   469                           	opt stack 0
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postinc1	equ	0xFE6
   477                           postdec2	equ	0xFDD
   478                           fsr2h	equ	0xFDA
   479                           fsr2l	equ	0xFD9
   480                           
   481 ;; *************** function _start_os *****************
   482 ;; Defined at:
   483 ;;		line 127 in file "kernel.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		None
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   497 ;;      Params:         0       0       0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used:    1
   503 ;; Hardware stack levels required when called:    9
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text1
   512  00160A                     __ptext1:
   513                           	opt stack 0
   514  00160A                     _start_os:
   515                           	opt stack 21
   516                           
   517                           ;kernel.c: 132: T0CONbits.TMR0ON = 1;
   518                           
   519                           ;incstack = 0
   520  00160A  8ED5               	bsf	4053,7,c	;volatile
   521  00160C  0012               	return		;funcret
   522  00160E                     __end_of_start_os:
   523                           	opt stack 0
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           postinc1	equ	0xFE6
   531                           postdec2	equ	0xFDD
   532                           fsr2h	equ	0xFDA
   533                           fsr2l	equ	0xFD9
   534                           
   535 ;; *************** function _setupOS *****************
   536 ;; Defined at:
   537 ;;		line 79 in file "kernel.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   551 ;;      Params:         0       0       0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0       0       0
   554 ;;      Totals:         0       0       0       0       0       0       0
   555 ;;Total ram usage:        0 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; Hardware stack levels required when called:   11
   558 ;; This function calls:
   559 ;;		_SRAMInitHeap
   560 ;;		_create_task
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text2
   567  0015B4                     __ptext2:
   568                           	opt stack 0
   569  0015B4                     _setupOS:
   570                           	opt stack 19
   571                           
   572                           ;kernel.c: 85: T0CONbits.T0CS = 0;
   573                           
   574                           ;incstack = 0
   575  0015B4  9AD5               	bcf	4053,5,c	;volatile
   576                           
   577                           ;kernel.c: 86: T0CONbits.PSA = 0;
   578  0015B6  96D5               	bcf	4053,3,c	;volatile
   579                           
   580                           ;kernel.c: 87: T0CONbits.T0PS = 0b111;
   581  0015B8  80D5               	bsf	4053,0,c	;volatile
   582  0015BA  82D5               	bsf	4053,1,c	;volatile
   583  0015BC  84D5               	bsf	4053,2,c	;volatile
   584                           
   585                           ;kernel.c: 88: INTCONbits.PEIE = 1;
   586  0015BE  8CF2               	bsf	intcon,6,c	;volatile
   587                           
   588                           ;kernel.c: 89: INTCONbits.TMR0IE = 1;
   589  0015C0  8AF2               	bsf	intcon,5,c	;volatile
   590                           
   591                           ;kernel.c: 90: TMR0L = 252;
   592  0015C2  0EFC               	movlw	252
   593  0015C4  6ED6               	movwf	4054,c	;volatile
   594                           
   595                           ;kernel.c: 93: create_task(1,5, &task_idle);
   596  0015C6  0E00               	movlw	0
   597  0015C8  6E56               	movwf	create_task@id+1,c
   598  0015CA  0E01               	movlw	1
   599  0015CC  6E55               	movwf	create_task@id,c
   600  0015CE  0E00               	movlw	0
   601  0015D0  6E58               	movwf	create_task@prior+1,c
   602  0015D2  0E05               	movlw	5
   603  0015D4  6E57               	movwf	create_task@prior,c
   604  0015D6  0EEA               	movlw	low _task_idle
   605  0015D8  6E59               	movwf	create_task@task_f,c
   606  0015DA  0E15               	movlw	high _task_idle
   607  0015DC  6E5A               	movwf	create_task@task_f+1,c
   608  0015DE  ECDC  F009         	call	_create_task	;wreg free
   609                           
   610                           ;kernel.c: 97: SRAMInitHeap();
   611  0015E2  EC09  F00A         	call	_SRAMInitHeap	;wreg free
   612                           
   613                           ;kernel.c: 99: (INTCONbits.GIE = 1);
   614  0015E6  8EF2               	bsf	intcon,7,c	;volatile
   615  0015E8  0012               	return		;funcret
   616  0015EA                     __end_of_setupOS:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           intcon	equ	0xFF2
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postinc1	equ	0xFE6
   626                           postdec2	equ	0xFDD
   627                           fsr2h	equ	0xFDA
   628                           fsr2l	equ	0xFD9
   629                           
   630 ;; *************** function _create_task *****************
   631 ;; Defined at:
   632 ;;		line 19 in file "kernel.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  id              2   17[COMRAM] unsigned int 
   635 ;;  prior           2   19[COMRAM] unsigned int 
   636 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   637 ;;		 -> task_idle(1), aviao2(1), aviao1(1), ctpista(1), 
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  task          110    0[BANK0 ] struct tcb
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   649 ;;      Params:         6       0       0       0       0       0       0
   650 ;;      Locals:         0     110       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0
   652 ;;      Totals:         6     110       0       0       0       0       0
   653 ;;Total ram usage:      116 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:   10
   656 ;; This function calls:
   657 ;;		___wmul
   658 ;; This function is called by:
   659 ;;		_main
   660 ;;		_setupOS
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text3
   665  0013B8                     __ptext3:
   666                           	opt stack 0
   667  0013B8                     _create_task:
   668                           	opt stack 19
   669                           
   670                           ;kernel.c: 21: tcb_t task;
   671                           ;kernel.c: 23: task.task_id = id;
   672                           
   673                           ;incstack = 0
   674  0013B8  C055  F080         	movff	create_task@id,create_task@task
   675  0013BC  C056  F081         	movff	create_task@id+1,create_task@task+1
   676                           
   677                           ;kernel.c: 24: task.task_prior = prior;
   678  0013C0  C057  F082         	movff	create_task@prior,create_task@task+2
   679  0013C4  C058  F083         	movff	create_task@prior+1,create_task@task+3
   680                           
   681                           ;kernel.c: 25: task.task_f = task_f;
   682  0013C8  C059  F084         	movff	create_task@task_f,create_task@task+4
   683  0013CC  C05A  F085         	movff	create_task@task_f+1,create_task@task+5
   684                           
   685                           ;kernel.c: 26: task.task_stack.stack_size = 0;
   686  0013D0  0E00               	movlw	0
   687  0013D2  0100               	movlb	0	; () banked
   688  0013D4  6FEA               	movwf	(create_task@task+106)& (0+255),b
   689  0013D6  0E00               	movlw	0
   690  0013D8  6FE9               	movwf	(create_task@task+105)& (0+255),b
   691                           
   692                           ; BSR set to: 0
   693                           ;kernel.c: 27: task.task_state = READY;
   694  0013DA  0E01               	movlw	1
   695  0013DC  6F88               	movwf	(create_task@task+8)& (0+255),b
   696                           
   697                           ; BSR set to: 0
   698                           ;kernel.c: 29: F_APTOS[tasks_installed] = task;
   699  0013DE  0E6E               	movlw	110
   700  0013E0  6EE6               	movwf	postinc1,c
   701  0013E2  0E00               	movlw	0
   702  0013E4  6EE6               	movwf	postinc1,c
   703  0013E6  C003  FFE6         	movff	_tasks_installed,postinc1
   704  0013EA  C004  FFE6         	movff	_tasks_installed+1,postinc1
   705  0013EE  EC0C  F009         	call	___wmul	;wreg free
   706  0013F2  0EEE               	movlw	low _F_APTOS
   707  0013F4  245D               	addwf	btemp,w,c
   708  0013F6  6EE9               	movwf	fsr0l,c
   709  0013F8  0E00               	movlw	high _F_APTOS
   710  0013FA  205E               	addwfc	btemp+1,w,c
   711  0013FC  6EEA               	movwf	fsr0h,c
   712  0013FE  EE20  F080         	lfsr	2,create_task@task
   713  001402  0E6D               	movlw	109
   714  001404                     u411:
   715  001404  CFDB FFEB          	movff	plusw2,plusw0
   716  001408  06E8               	decf	wreg,f,c
   717  00140A  E2FC               	bc	u411
   718                           
   719                           ;kernel.c: 30: tasks_installed++;
   720  00140C  4A03               	infsnz	_tasks_installed,f,c
   721  00140E  2A04               	incf	_tasks_installed+1,f,c
   722  001410  0012               	return		;funcret
   723  001412                     __end_of_create_task:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           intcon	equ	0xFF2
   730                           postinc0	equ	0xFEE
   731                           plusw0	equ	0xFEB
   732                           fsr0h	equ	0xFEA
   733                           fsr0l	equ	0xFE9
   734                           wreg	equ	0xFE8
   735                           postinc1	equ	0xFE6
   736                           postdec2	equ	0xFDD
   737                           plusw2	equ	0xFDB
   738                           fsr2h	equ	0xFDA
   739                           fsr2l	equ	0xFD9
   740                           
   741 ;; *************** function ___wmul *****************
   742 ;; Defined at:
   743 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  multiplier      2  [STACK] unsigned int 
   746 ;;  multiplicand    2  [STACK] unsigned int 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  product         2  [STACK] unsigned int 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  2  [STACK] unsigned int 
   751 ;; Registers used:
   752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   758 ;;      Params:         0       0       0       0       0       0       0
   759 ;;      Locals:         0       0       0       0       0       0       0
   760 ;;      Temps:          0       0       0       0       0       0       0
   761 ;;      Totals:         0       0       0       0       0       0       0
   762 ;;Total ram usage:        0 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; Hardware stack levels required when called:    9
   765 ;; This function calls:
   766 ;;		Nothing
   767 ;; This function is called by:
   768 ;;		_create_task
   769 ;;		_dispatcher
   770 ;;		_delay
   771 ;;		_int_high
   772 ;;		_rr_scheduler
   773 ;;		_sem_post
   774 ;;		_write_pipe
   775 ;;		_read_pipe
   776 ;;		_get_id
   777 ;;		_prior_scheduler
   778 ;; This function uses a reentrant model
   779 ;;
   780                           
   781                           	psect	text4
   782  001218                     __ptext4:
   783                           	opt stack 0
   784  001218                     ___wmul:
   785                           	opt stack 0
   786                           
   787                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   788  001218  52E6               	movf	postinc1,f,c
   789  00121A  52E6               	movf	postinc1,f,c
   790                           
   791                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   792                           
   793                           ;incstack = 0
   794  00121C  0EFA               	movlw	-6
   795  00121E  CFE3 F068          	movff	plusw1,btemp+11
   796                           
   797                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   798  001222  0EFC               	movlw	-4
   799  001224  50E3               	movf	plusw1,w,c
   800  001226  0268               	mulwf	btemp+11,c
   801                           
   802                           ;stkvar	___wmul@product @ sp[(-2)+0]
   803  001228  0EFE               	movlw	-2
   804  00122A  CFF3 FFE3          	movff	prodl,plusw1
   805  00122E  0EFF               	movlw	-1
   806  001230  CFF4 FFE3          	movff	prodh,plusw1
   807                           
   808                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   809  001234  0EFB               	movlw	251
   810  001236  24E1               	addwf	fsr1l,w,c
   811  001238  6ED9               	movwf	fsr2l,c
   812  00123A  0EFF               	movlw	255
   813  00123C  20E2               	addwfc	fsr1h,w,c
   814  00123E  6EDA               	movwf	fsr2h,c
   815  001240  50DF               	movf	indf2,w,c
   816  001242  6E68               	movwf	btemp+11,c
   817                           
   818                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   819  001244  0EFC               	movlw	-4
   820  001246  50E3               	movf	plusw1,w,c
   821  001248  0268               	mulwf	btemp+11,c
   822  00124A  CFF3 FFF4          	movff	prodl,prodh
   823  00124E  6AF3               	clrf	prodl,c
   824                           
   825                           ;stkvar	___wmul@product @ sp[(-2)+0]
   826  001250  50E1               	movf	fsr1l,w,c
   827  001252  0FFE               	addlw	-2
   828  001254  6ED9               	movwf	fsr2l,c
   829  001256  50E2               	movf	fsr1h,w,c
   830  001258  6EDA               	movwf	fsr2h,c
   831  00125A  0EFF               	movlw	255
   832  00125C  22DA               	addwfc	fsr2h,f,c
   833  00125E  50F3               	movf	prodl,w,c
   834  001260  26DE               	addwf	postinc2,f,c
   835  001262  50F4               	movf	prodh,w,c
   836  001264  22DD               	addwfc	postdec2,f,c
   837                           
   838                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   839  001266  0EFA               	movlw	-6
   840  001268  CFE3 F068          	movff	plusw1,btemp+11
   841                           
   842                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   843  00126C  0EFD               	movlw	253
   844  00126E  24E1               	addwf	fsr1l,w,c
   845  001270  6ED9               	movwf	fsr2l,c
   846  001272  0EFF               	movlw	255
   847  001274  20E2               	addwfc	fsr1h,w,c
   848  001276  6EDA               	movwf	fsr2h,c
   849  001278  50DF               	movf	indf2,w,c
   850  00127A  0268               	mulwf	btemp+11,c
   851  00127C  CFF3 FFF4          	movff	prodl,prodh
   852  001280  6AF3               	clrf	prodl,c
   853                           
   854                           ;stkvar	___wmul@product @ sp[(-2)+0]
   855  001282  50E1               	movf	fsr1l,w,c
   856  001284  0FFE               	addlw	-2
   857  001286  6ED9               	movwf	fsr2l,c
   858  001288  50E2               	movf	fsr1h,w,c
   859  00128A  6EDA               	movwf	fsr2h,c
   860  00128C  0EFF               	movlw	255
   861  00128E  22DA               	addwfc	fsr2h,f,c
   862  001290  50F3               	movf	prodl,w,c
   863  001292  26DE               	addwf	postinc2,f,c
   864  001294  50F4               	movf	prodh,w,c
   865  001296  22DD               	addwfc	postdec2,f,c
   866                           
   867                           ;stkvar	___wmul@product @ sp[(-2)+0]
   868  001298  0EFE               	movlw	-2
   869  00129A  CFE3 F05D          	movff	plusw1,btemp
   870  00129E  0EFF               	movlw	-1
   871  0012A0  CFE3 F05E          	movff	plusw1,btemp+1
   872                           
   873                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   874  0012A4  0EFA               	movlw	250
   875  0012A6  26E1               	addwf	fsr1l,f,c
   876  0012A8  0EFF               	movlw	255
   877  0012AA  22E2               	addwfc	fsr1h,f,c
   878  0012AC  0012               	return		;funcret
   879  0012AE                     __end_of___wmul:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           prodh	equ	0xFF4
   886                           prodl	equ	0xFF3
   887                           intcon	equ	0xFF2
   888                           postinc0	equ	0xFEE
   889                           plusw0	equ	0xFEB
   890                           fsr0h	equ	0xFEA
   891                           fsr0l	equ	0xFE9
   892                           wreg	equ	0xFE8
   893                           postinc1	equ	0xFE6
   894                           plusw1	equ	0xFE3
   895                           fsr1h	equ	0xFE2
   896                           fsr1l	equ	0xFE1
   897                           indf2	equ	0xFDF
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           plusw2	equ	0xFDB
   901                           fsr2h	equ	0xFDA
   902                           fsr2l	equ	0xFD9
   903                           
   904 ;; *************** function _SRAMInitHeap *****************
   905 ;; Defined at:
   906 ;;		line 300 in file "memory.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  count           2   17[COMRAM] unsigned int 
   911 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   912 ;;		 -> _uDynamicHeap(512), 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   922 ;;      Params:         0       0       0       0       0       0       0
   923 ;;      Locals:         4       0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0
   925 ;;      Totals:         4       0       0       0       0       0       0
   926 ;;Total ram usage:        4 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    9
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;;		_setupOS
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text5
   938  001412                     __ptext5:
   939                           	opt stack 0
   940  001412                     _SRAMInitHeap:
   941                           	opt stack 20
   942                           
   943                           ;memory.c: 302: unsigned char * near pHeap;
   944                           ;memory.c: 303: near unsigned int count;
   945                           ;memory.c: 305: pHeap = _uDynamicHeap;
   946                           
   947                           ;incstack = 0
   948  001412  0E14               	movlw	low __uDynamicHeap
   949  001414  6E57               	movwf	SRAMInitHeap@pHeap,c
   950  001416  0E03               	movlw	high __uDynamicHeap
   951  001418  6E58               	movwf	SRAMInitHeap@pHeap+1,c
   952                           
   953                           ;memory.c: 306: count = 0x200-1;
   954  00141A  0E01               	movlw	1
   955  00141C  6E56               	movwf	SRAMInitHeap@count+1,c
   956  00141E  6855               	setf	SRAMInitHeap@count,c
   957  001420                     
   958                           ;memory.c: 309: {
   959                           ;memory.c: 310: if (count > 0x7F)
   960  001420  5056               	movf	SRAMInitHeap@count+1,w,c
   961  001422  E104               	bnz	u100
   962  001424  0E80               	movlw	128
   963  001426  5C55               	subwf	SRAMInitHeap@count,w,c
   964  001428  A0D8               	btfss	status,0,c
   965  00142A  D011               	goto	l247
   966  00142C                     u100:
   967                           
   968                           ;memory.c: 311: {
   969                           ;memory.c: 312: *pHeap = 0x7F;
   970  00142C  C057  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   971  001430  C058  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   972  001434  0E7F               	movlw	127
   973  001436  6EDF               	movwf	indf2,c
   974                           
   975                           ;memory.c: 313: pHeap += 0x7F;
   976  001438  0E7F               	movlw	127
   977  00143A  2657               	addwf	SRAMInitHeap@pHeap,f,c
   978  00143C  0E00               	movlw	0
   979  00143E  2258               	addwfc	SRAMInitHeap@pHeap+1,f,c
   980                           
   981                           ;memory.c: 314: count = count - 0x7F;
   982  001440  0E81               	movlw	129
   983  001442  2455               	addwf	SRAMInitHeap@count,w,c
   984  001444  6E55               	movwf	SRAMInitHeap@count,c
   985  001446  0EFF               	movlw	255
   986  001448  2056               	addwfc	SRAMInitHeap@count+1,w,c
   987  00144A  6E56               	movwf	SRAMInitHeap@count+1,c
   988                           
   989                           ;memory.c: 315: }
   990  00144C  D7E9               	goto	l246
   991  00144E                     l247:
   992                           
   993                           ;memory.c: 316: else
   994                           ;memory.c: 317: {
   995                           ;memory.c: 318: *pHeap = count;
   996  00144E  C057  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   997  001452  C058  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   998  001456  C055  FFDF         	movff	SRAMInitHeap@count,indf2
   999                           
  1000                           ;memory.c: 319: *(pHeap + count) = 0;
  1001  00145A  5055               	movf	SRAMInitHeap@count,w,c
  1002  00145C  2457               	addwf	SRAMInitHeap@pHeap,w,c
  1003  00145E  6ED9               	movwf	fsr2l,c
  1004  001460  5056               	movf	SRAMInitHeap@count+1,w,c
  1005  001462  2058               	addwfc	SRAMInitHeap@pHeap+1,w,c
  1006  001464  6EDA               	movwf	fsr2h,c
  1007  001466  0E00               	movlw	0
  1008  001468  6EDF               	movwf	indf2,c
  1009                           
  1010                           ;memory.c: 320: return;
  1011  00146A  0012               	return	
  1012  00146C                     __end_of_SRAMInitHeap:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           prodh	equ	0xFF4
  1019                           prodl	equ	0xFF3
  1020                           intcon	equ	0xFF2
  1021                           postinc0	equ	0xFEE
  1022                           plusw0	equ	0xFEB
  1023                           fsr0h	equ	0xFEA
  1024                           fsr0l	equ	0xFE9
  1025                           wreg	equ	0xFE8
  1026                           postinc1	equ	0xFE6
  1027                           plusw1	equ	0xFE3
  1028                           fsr1h	equ	0xFE2
  1029                           fsr1l	equ	0xFE1
  1030                           indf2	equ	0xFDF
  1031                           postinc2	equ	0xFDE
  1032                           postdec2	equ	0xFDD
  1033                           plusw2	equ	0xFDB
  1034                           fsr2h	equ	0xFDA
  1035                           fsr2l	equ	0xFD9
  1036                           status	equ	0xFD8
  1037                           
  1038 ;; *************** function _sem_init *****************
  1039 ;; Defined at:
  1040 ;;		line 6 in file "semaphore.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  s               2   17[COMRAM] PTR struct sem
  1043 ;;		 -> semafaro(16), 
  1044 ;;  value           2   19[COMRAM] int 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1056 ;;      Params:         4       0       0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0       0       0
  1059 ;;      Totals:         4       0       0       0       0       0       0
  1060 ;;Total ram usage:        4 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    9
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text6
  1071  001576                     __ptext6:
  1072                           	opt stack 0
  1073  001576                     _sem_init:
  1074                           	opt stack 21
  1075                           
  1076                           ;semaphore.c: 8: (INTCONbits.GIE = 0);
  1077                           
  1078                           ;incstack = 0
  1079  001576  9EF2               	bcf	intcon,7,c	;volatile
  1080                           
  1081                           ;semaphore.c: 10: s->contador = value;
  1082  001578  C055  FFD9         	movff	sem_init@s,fsr2l
  1083  00157C  C056  FFDA         	movff	sem_init@s+1,fsr2h
  1084  001580  C057  FFDE         	movff	sem_init@value,postinc2
  1085  001584  C058  FFDD         	movff	sem_init@value+1,postdec2
  1086                           
  1087                           ;semaphore.c: 11: s->queue.s_queue_pos_in = 0;
  1088  001588  EE20 F00C          	lfsr	2,12
  1089  00158C  5055               	movf	sem_init@s,w,c
  1090  00158E  26D9               	addwf	fsr2l,f,c
  1091  001590  5056               	movf	sem_init@s+1,w,c
  1092  001592  22DA               	addwfc	fsr2h,f,c
  1093  001594  0E00               	movlw	0
  1094  001596  6EDE               	movwf	postinc2,c
  1095  001598  0E00               	movlw	0
  1096  00159A  6EDD               	movwf	postdec2,c
  1097                           
  1098                           ;semaphore.c: 12: s->queue.s_queue_pos_out = 0;
  1099  00159C  EE20 F00E          	lfsr	2,14
  1100  0015A0  5055               	movf	sem_init@s,w,c
  1101  0015A2  26D9               	addwf	fsr2l,f,c
  1102  0015A4  5056               	movf	sem_init@s+1,w,c
  1103  0015A6  22DA               	addwfc	fsr2h,f,c
  1104  0015A8  0E00               	movlw	0
  1105  0015AA  6EDE               	movwf	postinc2,c
  1106  0015AC  0E00               	movlw	0
  1107  0015AE  6EDD               	movwf	postdec2,c
  1108                           
  1109                           ;semaphore.c: 14: (INTCONbits.GIE = 1);
  1110  0015B0  8EF2               	bsf	intcon,7,c	;volatile
  1111  0015B2  0012               	return		;funcret
  1112  0015B4                     __end_of_sem_init:
  1113                           	opt stack 0
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           prodh	equ	0xFF4
  1119                           prodl	equ	0xFF3
  1120                           intcon	equ	0xFF2
  1121                           postinc0	equ	0xFEE
  1122                           plusw0	equ	0xFEB
  1123                           fsr0h	equ	0xFEA
  1124                           fsr0l	equ	0xFE9
  1125                           wreg	equ	0xFE8
  1126                           postinc1	equ	0xFE6
  1127                           plusw1	equ	0xFE3
  1128                           fsr1h	equ	0xFE2
  1129                           fsr1l	equ	0xFE1
  1130                           indf2	equ	0xFDF
  1131                           postinc2	equ	0xFDE
  1132                           postdec2	equ	0xFDD
  1133                           plusw2	equ	0xFDB
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _SRAMalloc *****************
  1139 ;; Defined at:
  1140 ;;		line 178 in file "memory.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  nBytes          1  [STACK] near unsigned char 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  pHeap           2  [STACK] near PTR struct _SALLOC
  1145 ;;		 -> _uDynamicHeap(512), 
  1146 ;;  temp            2  [STACK] near PTR struct _SALLOC
  1147 ;;		 -> _uDynamicHeap(512), 
  1148 ;;  segHeader       1  [STACK] struct _SALLOC
  1149 ;;  segLen          1  [STACK] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  2  [STACK] PTR unsigned char 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1159 ;;      Params:         0       0       0       0       0       0       0
  1160 ;;      Locals:         0       0       0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0
  1162 ;;      Totals:         0       0       0       0       0       0       0
  1163 ;;Total ram usage:        0 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:   10
  1166 ;; This function calls:
  1167 ;;		__SRAMmerge
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;;		_createAviao
  1171 ;; This function uses a reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text7
  1175  000702                     __ptext7:
  1176                           	opt stack 0
  1177  000702                     _SRAMalloc:
  1178                           	opt stack 0
  1179                           
  1180                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1181  000702  0E06               	movlw	6
  1182  000704  26E1               	addwf	fsr1l,f,c
  1183  000706  0E00               	movlw	0
  1184  000708  22E2               	addwfc	fsr1h,f,c
  1185                           
  1186                           ;memory.c: 180: SALLOC * near pHeap;
  1187                           ;memory.c: 181: SALLOC * near temp;
  1188                           ;memory.c: 182: near SALLOC segHeader;
  1189                           ;memory.c: 183: near unsigned char segLen;
  1190                           ;memory.c: 186: if (nBytes > (0x7F - 1)) return (0);
  1191                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1192                           
  1193                           ;incstack = 0
  1194  00070A  0EF9               	movlw	-7
  1195  00070C  CFE3 F05D          	movff	plusw1,btemp
  1196  000710  0E7E               	movlw	126
  1197  000712  645D               	cpfsgt	btemp,c
  1198  000714  D004               	goto	l999
  1199  000716                     u120:
  1200  000716  0E00               	movlw	0
  1201  000718  6E5D               	movwf	btemp,c
  1202  00071A  0E00               	movlw	0
  1203  00071C  D07B               	goto	L1
  1204  00071E                     l999:
  1205                           
  1206                           ;memory.c: 189: pHeap = (SALLOC *)_uDynamicHeap;
  1207                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1208  00071E  0E03               	movlw	high __uDynamicHeap
  1209  000720  6E5D               	movwf	btemp,c
  1210  000722  0EFB               	movlw	-5
  1211  000724  C05D  FFE3         	movff	btemp,plusw1
  1212  000728  0E14               	movlw	low __uDynamicHeap
  1213  00072A  6E5D               	movwf	btemp,c
  1214  00072C  0EFA               	movlw	-6
  1215  00072E  C05D  FFE3         	movff	btemp,plusw1
  1216  000732                     l1001:
  1217                           
  1218                           ;memory.c: 192: {
  1219                           ;memory.c: 194: segHeader = *pHeap;
  1220                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1221  000732  0EFA               	movlw	-6
  1222  000734  CFE3 FFD9          	movff	plusw1,fsr2l
  1223  000738  0EFB               	movlw	-5
  1224  00073A  CFE3 FFDA          	movff	plusw1,fsr2h
  1225  00073E  50DF               	movf	indf2,w,c
  1226  000740  6E68               	movwf	btemp+11,c
  1227                           
  1228                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1229  000742  0EFE               	movlw	-2
  1230  000744  C068  FFE3         	movff	btemp+11,plusw1
  1231                           
  1232                           ;memory.c: 197: segLen = segHeader.bits.count - 1;
  1233                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1234  000748  50E1               	movf	fsr1l,w,c
  1235  00074A  0FFE               	addlw	-2
  1236  00074C  6ED9               	movwf	fsr2l,c
  1237  00074E  50E2               	movf	fsr1h,w,c
  1238  000750  6EDA               	movwf	fsr2h,c
  1239  000752  0EFF               	movlw	255
  1240  000754  22DA               	addwfc	fsr2h,f,c
  1241  000756  50DF               	movf	223,w,c
  1242  000758  0B7F               	andlw	127
  1243  00075A  6E68               	movwf	btemp+11,c
  1244  00075C  0EFF               	movlw	255
  1245  00075E  2668               	addwf	btemp+11,f,c
  1246                           
  1247                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1248  000760  0EFF               	movlw	-1
  1249  000762  C068  FFE3         	movff	btemp+11,plusw1
  1250                           
  1251                           ;memory.c: 200: if (segHeader.byte == 0) return (0);
  1252                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1253  000766  0EFE               	movlw	-2
  1254  000768  50E3               	movf	plusw1,w,c
  1255  00076A  B4D8               	btfsc	status,2,c
  1256  00076C  D7D4               	goto	u120
  1257                           
  1258                           ;memory.c: 203: if (!(segHeader.bits.alloc))
  1259                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1260  00076E  50E1               	movf	fsr1l,w,c
  1261  000770  0FFE               	addlw	-2
  1262  000772  6ED9               	movwf	fsr2l,c
  1263  000774  50E2               	movf	fsr1h,w,c
  1264  000776  6EDA               	movwf	fsr2h,c
  1265  000778  0EFF               	movlw	255
  1266  00077A  22DA               	addwfc	fsr2h,f,c
  1267  00077C  BEDF               	btfsc	indf2,7,c
  1268  00077E  D016               	goto	u160
  1269                           
  1270                           ;memory.c: 204: {
  1271                           ;memory.c: 206: if (nBytes > segLen)
  1272                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1273                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1274  000780  50E1               	movf	fsr1l,w,c
  1275  000782  0FFF               	addlw	-1
  1276  000784  6ED9               	movwf	fsr2l,c
  1277  000786  50E2               	movf	fsr1h,w,c
  1278  000788  6EDA               	movwf	fsr2h,c
  1279  00078A  0EFF               	movlw	255
  1280  00078C  22DA               	addwfc	fsr2h,f,c
  1281  00078E  0EF9               	movlw	-7
  1282  000790  50E3               	movf	plusw1,w,c
  1283  000792  5CDE               	subwf	postinc2,w,c
  1284  000794  B0D8               	btfsc	status,0,c
  1285  000796  D020               	goto	l1019
  1286                           
  1287                           ;memory.c: 207: {
  1288                           ;memory.c: 209: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  1289                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1290  000798  0EFA               	movlw	-6
  1291  00079A  CFE3 FFE6          	movff	plusw1,postinc1
  1292  00079E  CFE3 FFE6          	movff	plusw1,postinc1
  1293  0007A2  EC60  F006         	call	__SRAMmerge	;wreg free
  1294  0007A6  505D               	movf	btemp,w,c
  1295  0007A8  A4D8               	btfss	status,2,c
  1296  0007AA  D7C3               	goto	l1001
  1297  0007AC                     u160:
  1298                           
  1299                           ;stkvar	SRAMalloc@segHeader @ sp[(-6)+4]
  1300  0007AC  50E1               	movf	fsr1l,w,c
  1301  0007AE  0FFE               	addlw	-2
  1302  0007B0  6ED9               	movwf	fsr2l,c
  1303  0007B2  50E2               	movf	fsr1h,w,c
  1304  0007B4  6EDA               	movwf	fsr2h,c
  1305  0007B6  0EFF               	movlw	255
  1306  0007B8  22DA               	addwfc	fsr2h,f,c
  1307  0007BA  50DF               	movf	223,w,c
  1308  0007BC  0B7F               	andlw	127
  1309  0007BE  0D01               	mullw	1
  1310                           
  1311                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1312  0007C0  50E1               	movf	fsr1l,w,c
  1313  0007C2  0FFA               	addlw	-6
  1314  0007C4  6ED9               	movwf	fsr2l,c
  1315  0007C6  50E2               	movf	fsr1h,w,c
  1316  0007C8  6EDA               	movwf	fsr2h,c
  1317  0007CA  0EFF               	movlw	255
  1318  0007CC  22DA               	addwfc	fsr2h,f,c
  1319  0007CE  50F3               	movf	prodl,w,c
  1320  0007D0  26DE               	addwf	postinc2,f,c
  1321  0007D2  50F4               	movf	prodh,w,c
  1322  0007D4  22DD               	addwfc	postdec2,f,c
  1323  0007D6  D7AD               	goto	l1001
  1324  0007D8                     l1019:
  1325                           
  1326                           ;memory.c: 211: else
  1327                           ;memory.c: 215: if (nBytes == segLen)
  1328                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1329                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1330  0007D8  50E1               	movf	fsr1l,w,c
  1331  0007DA  0FF9               	addlw	-7
  1332  0007DC  6ED9               	movwf	fsr2l,c
  1333  0007DE  50E2               	movf	fsr1h,w,c
  1334  0007E0  6EDA               	movwf	fsr2h,c
  1335  0007E2  0EFF               	movlw	255
  1336  0007E4  22DA               	addwfc	fsr2h,f,c
  1337  0007E6  0EFF               	movlw	-1
  1338  0007E8  50E3               	movf	plusw1,w,c
  1339  0007EA  18DE               	xorwf	postinc2,w,c
  1340  0007EC  A4D8               	btfss	status,2,c
  1341  0007EE  D014               	goto	l1029
  1342                           
  1343                           ;memory.c: 216: {
  1344                           ;memory.c: 218: (*pHeap).bits.alloc = 1;
  1345                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1346  0007F0  0EFA               	movlw	-6
  1347  0007F2  CFE3 FFD9          	movff	plusw1,fsr2l
  1348  0007F6  0EFB               	movlw	-5
  1349  0007F8  CFE3 FFDA          	movff	plusw1,fsr2h
  1350  0007FC  8EDF               	bsf	indf2,7,c
  1351                           
  1352                           ;memory.c: 221: return ((unsigned char *)(pHeap + 1));
  1353                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1354  0007FE  0EFA               	movlw	-6
  1355  000800  CFE3 F067          	movff	plusw1,btemp+10
  1356  000804  0EFB               	movlw	-5
  1357  000806  CFE3 F068          	movff	plusw1,btemp+11
  1358  00080A  0E01               	movlw	1
  1359  00080C  2467               	addwf	btemp+10,w,c
  1360  00080E  6E5D               	movwf	btemp,c
  1361  000810  0E00               	movlw	0
  1362  000812  2068               	addwfc	btemp+11,w,c
  1363  000814                     L1:
  1364  000814  6E5E               	movwf	btemp+1,c
  1365  000816  D041               	goto	l229
  1366  000818                     l1029:
  1367                           
  1368                           ;memory.c: 225: else
  1369                           ;memory.c: 226: {
  1370                           ;memory.c: 228: (*pHeap).byte = nBytes + 0x81;
  1371                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1372  000818  0EFA               	movlw	-6
  1373  00081A  CFE3 FFD9          	movff	plusw1,fsr2l
  1374  00081E  0EFB               	movlw	-5
  1375  000820  CFE3 FFDA          	movff	plusw1,fsr2h
  1376                           
  1377                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1378  000824  0EF9               	movlw	-7
  1379  000826  50E3               	movf	plusw1,w,c
  1380  000828  0F81               	addlw	129
  1381  00082A  6EDF               	movwf	indf2,c
  1382                           
  1383                           ;memory.c: 231: temp = pHeap + 1;
  1384                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1385  00082C  0EFA               	movlw	-6
  1386  00082E  50E3               	movf	plusw1,w,c
  1387  000830  0F01               	addlw	1
  1388  000832  6E5E               	movwf	btemp+1,c
  1389  000834  0EFB               	movlw	-5
  1390  000836  CFE3 F05F          	movff	plusw1,btemp+2
  1391  00083A  0E00               	movlw	0
  1392  00083C  225F               	addwfc	btemp+2,f,c
  1393                           
  1394                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  1395  00083E  0EFD               	movlw	-3
  1396  000840  C05F  FFE3         	movff	btemp+2,plusw1
  1397  000844  0EFC               	movlw	-4
  1398  000846  C05E  FFE3         	movff	btemp+1,plusw1
  1399                           
  1400                           ;memory.c: 234: pHeap += (nBytes + 1);
  1401                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1402  00084A  0EF9               	movlw	-7
  1403  00084C  50E3               	movf	plusw1,w,c
  1404  00084E  6E5E               	movwf	btemp+1,c
  1405  000850  6A5F               	clrf	btemp+2,c
  1406  000852  0E01               	movlw	1
  1407  000854  265E               	addwf	btemp+1,f,c
  1408  000856  0E00               	movlw	0
  1409  000858  225F               	addwfc	btemp+2,f,c
  1410                           
  1411                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1412  00085A  50E1               	movf	fsr1l,w,c
  1413  00085C  0FFA               	addlw	-6
  1414  00085E  6ED9               	movwf	fsr2l,c
  1415  000860  50E2               	movf	fsr1h,w,c
  1416  000862  6EDA               	movwf	fsr2h,c
  1417  000864  0EFF               	movlw	255
  1418  000866  22DA               	addwfc	fsr2h,f,c
  1419  000868  505E               	movf	btemp+1,w,c
  1420  00086A  26DE               	addwf	postinc2,f,c
  1421  00086C  505F               	movf	btemp+2,w,c
  1422  00086E  22DD               	addwfc	postdec2,f,c
  1423                           
  1424                           ;memory.c: 237: (*pHeap).byte = segLen - nBytes;
  1425                           ;stkvar	SRAMalloc@pHeap @ sp[(-6)+0]
  1426  000870  0EFA               	movlw	-6
  1427  000872  CFE3 FFD9          	movff	plusw1,fsr2l
  1428  000876  0EFB               	movlw	-5
  1429  000878  CFE3 FFDA          	movff	plusw1,fsr2h
  1430                           
  1431                           ;stkvar	SRAMalloc@nBytes @ sp[(-6)+-1]
  1432  00087C  0EF9               	movlw	-7
  1433  00087E  CFE3 F068          	movff	plusw1,btemp+11
  1434                           
  1435                           ;stkvar	SRAMalloc@segLen @ sp[(-6)+5]
  1436  000882  0EFF               	movlw	-1
  1437  000884  CFE3 F067          	movff	plusw1,btemp+10
  1438  000888  5068               	movf	btemp+11,w,c
  1439  00088A  5C67               	subwf	btemp+10,w,c
  1440  00088C  6EDF               	movwf	indf2,c
  1441                           
  1442                           ;memory.c: 240: return ((unsigned char *) temp);
  1443                           ;stkvar	SRAMalloc@temp @ sp[(-6)+2]
  1444  00088E  0EFC               	movlw	-4
  1445  000890  CFE3 F05D          	movff	plusw1,btemp
  1446  000894  0EFD               	movlw	-3
  1447  000896  CFE3 F05E          	movff	plusw1,btemp+1
  1448  00089A                     l229:
  1449                           
  1450                           ; _SRAMalloc: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
  1451  00089A  0EF9               	movlw	249
  1452  00089C  26E1               	addwf	fsr1l,f,c
  1453  00089E  0EFF               	movlw	255
  1454  0008A0  22E2               	addwfc	fsr1h,f,c
  1455  0008A2  0012               	return		;funcret
  1456  0008A4                     __end_of_SRAMalloc:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           prodh	equ	0xFF4
  1463                           prodl	equ	0xFF3
  1464                           intcon	equ	0xFF2
  1465                           postinc0	equ	0xFEE
  1466                           plusw0	equ	0xFEB
  1467                           fsr0h	equ	0xFEA
  1468                           fsr0l	equ	0xFE9
  1469                           wreg	equ	0xFE8
  1470                           postinc1	equ	0xFE6
  1471                           plusw1	equ	0xFE3
  1472                           fsr1h	equ	0xFE2
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           plusw2	equ	0xFDB
  1478                           fsr2h	equ	0xFDA
  1479                           fsr2l	equ	0xFD9
  1480                           status	equ	0xFD8
  1481                           
  1482 ;; *************** function __SRAMmerge *****************
  1483 ;; Defined at:
  1484 ;;		line 346 in file "memory.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  pSegA           2  [STACK] near PTR struct _SALLOC
  1487 ;;		 -> _uDynamicHeap(512), 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  pSegB           2  [STACK] near PTR struct _SALLOC
  1490 ;;		 -> _uDynamicHeap(512), 
  1491 ;;  uSegB           1  [STACK] struct _SALLOC
  1492 ;;  uSegA           1  [STACK] struct _SALLOC
  1493 ;;  uSum            1  [STACK] struct _SALLOC
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1  [STACK] unsigned char 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1503 ;;      Params:         0       0       0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0
  1506 ;;      Totals:         0       0       0       0       0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    9
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_SRAMalloc
  1514 ;; This function uses a reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text8
  1518  000CC0                     __ptext8:
  1519                           	opt stack 0
  1520  000CC0                     __SRAMmerge:
  1521                           	opt stack 0
  1522                           
  1523                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  1524  000CC0  0E05               	movlw	5
  1525  000CC2  26E1               	addwf	fsr1l,f,c
  1526  000CC4  0E00               	movlw	0
  1527  000CC6  22E2               	addwfc	fsr1h,f,c
  1528                           
  1529                           ;memory.c: 348: SALLOC * near pSegB;
  1530                           ;memory.c: 349: near SALLOC uSegA, uSegB, uSum;
  1531                           ;memory.c: 353: pSegB = pSegA + (*pSegA).byte;
  1532                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1533                           
  1534                           ;incstack = 0
  1535  000CC8  0EF9               	movlw	-7
  1536  000CCA  CFE3 FFD9          	movff	plusw1,fsr2l
  1537  000CCE  0EFA               	movlw	-6
  1538  000CD0  CFE3 FFDA          	movff	plusw1,fsr2h
  1539  000CD4  50DF               	movf	indf2,w,c
  1540  000CD6  6E5E               	movwf	btemp+1,c
  1541  000CD8  6A5F               	clrf	btemp+2,c
  1542                           
  1543                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1544  000CDA  0EF9               	movlw	-7
  1545  000CDC  50E3               	movf	plusw1,w,c
  1546  000CDE  265E               	addwf	btemp+1,f,c
  1547  000CE0  0EFA               	movlw	-6
  1548  000CE2  50E3               	movf	plusw1,w,c
  1549  000CE4  225F               	addwfc	btemp+2,f,c
  1550                           
  1551                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1552  000CE6  0EFC               	movlw	-4
  1553  000CE8  C05F  FFE3         	movff	btemp+2,plusw1
  1554  000CEC  0EFB               	movlw	-5
  1555  000CEE  C05E  FFE3         	movff	btemp+1,plusw1
  1556                           
  1557                           ;memory.c: 356: uSegA = *pSegA;
  1558                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1559  000CF2  0EF9               	movlw	-7
  1560  000CF4  CFE3 FFD9          	movff	plusw1,fsr2l
  1561  000CF8  0EFA               	movlw	-6
  1562  000CFA  CFE3 FFDA          	movff	plusw1,fsr2h
  1563  000CFE  50DF               	movf	indf2,w,c
  1564  000D00  6E68               	movwf	btemp+11,c
  1565                           
  1566                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1567  000D02  0EFE               	movlw	-2
  1568  000D04  C068  FFE3         	movff	btemp+11,plusw1
  1569                           
  1570                           ;memory.c: 357: uSegB = *pSegB;
  1571                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1572  000D08  0EFB               	movlw	-5
  1573  000D0A  CFE3 FFD9          	movff	plusw1,fsr2l
  1574  000D0E  0EFC               	movlw	-4
  1575  000D10  CFE3 FFDA          	movff	plusw1,fsr2h
  1576  000D14  50DF               	movf	indf2,w,c
  1577  000D16  6E68               	movwf	btemp+11,c
  1578                           
  1579                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1580  000D18  0EFD               	movlw	-3
  1581  000D1A  C068  FFE3         	movff	btemp+11,plusw1
  1582                           
  1583                           ;memory.c: 360: if (uSegB.byte == 0) return (0);
  1584                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1585  000D1E  0EFD               	movlw	-3
  1586  000D20  50E3               	movf	plusw1,w,c
  1587  000D22  A4D8               	btfss	status,2,c
  1588  000D24  D002               	goto	l895
  1589  000D26                     u10:
  1590  000D26  0E00               	movlw	0
  1591  000D28  D06E               	goto	L2
  1592  000D2A                     l895:
  1593                           
  1594                           ;memory.c: 363: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  1595                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1596  000D2A  50E1               	movf	fsr1l,w,c
  1597  000D2C  0FFE               	addlw	-2
  1598  000D2E  6ED9               	movwf	fsr2l,c
  1599  000D30  50E2               	movf	fsr1h,w,c
  1600  000D32  6EDA               	movwf	fsr2h,c
  1601  000D34  0EFF               	movlw	255
  1602  000D36  22DA               	addwfc	fsr2h,f,c
  1603  000D38  BEDF               	btfsc	indf2,7,c
  1604  000D3A  D7F5               	goto	u10
  1605                           
  1606                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1607  000D3C  50E1               	movf	fsr1l,w,c
  1608  000D3E  0FFD               	addlw	-3
  1609  000D40  6ED9               	movwf	fsr2l,c
  1610  000D42  50E2               	movf	fsr1h,w,c
  1611  000D44  6EDA               	movwf	fsr2h,c
  1612  000D46  0EFF               	movlw	255
  1613  000D48  22DA               	addwfc	fsr2h,f,c
  1614  000D4A  BEDF               	btfsc	indf2,7,c
  1615  000D4C  D7EC               	goto	u10
  1616                           
  1617                           ;memory.c: 366: if (uSegA.bits.count == 0x7F) return (0);
  1618                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1619  000D4E  50E1               	movf	fsr1l,w,c
  1620  000D50  0FFE               	addlw	-2
  1621  000D52  6ED9               	movwf	fsr2l,c
  1622  000D54  50E2               	movf	fsr1h,w,c
  1623  000D56  6EDA               	movwf	fsr2h,c
  1624  000D58  0EFF               	movlw	255
  1625  000D5A  22DA               	addwfc	fsr2h,f,c
  1626  000D5C  50DF               	movf	223,w,c
  1627  000D5E  0B7F               	andlw	127
  1628  000D60  0A7F               	xorlw	127
  1629  000D62  B4D8               	btfsc	status,2,c
  1630  000D64  D7E0               	goto	u10
  1631                           
  1632                           ;memory.c: 369: uSum.byte = uSegA.byte + uSegB.byte;
  1633                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1634  000D66  0EFD               	movlw	-3
  1635  000D68  CFE3 F068          	movff	plusw1,btemp+11
  1636                           
  1637                           ;stkvar	__SRAMmerge@uSegA @ sp[(-5)+3]
  1638  000D6C  0EFE               	movlw	-2
  1639  000D6E  50E3               	movf	plusw1,w,c
  1640  000D70  2468               	addwf	btemp+11,w,c
  1641  000D72  6E67               	movwf	btemp+10,c
  1642                           
  1643                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1644  000D74  0EFF               	movlw	-1
  1645  000D76  C067  FFE3         	movff	btemp+10,plusw1
  1646                           
  1647                           ;memory.c: 375: if ((uSum.byte) > 0x7F)
  1648                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1649  000D7A  0EFF               	movlw	-1
  1650  000D7C  CFE3 F05D          	movff	plusw1,btemp
  1651  000D80  0E7F               	movlw	127
  1652  000D82  645D               	cpfsgt	btemp,c
  1653  000D84  D036               	goto	l927
  1654                           
  1655                           ;memory.c: 376: {
  1656                           ;memory.c: 377: (*pSegA).byte = 0x7F;
  1657                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1658  000D86  0EF9               	movlw	-7
  1659  000D88  CFE3 FFD9          	movff	plusw1,fsr2l
  1660  000D8C  0EFA               	movlw	-6
  1661  000D8E  CFE3 FFDA          	movff	plusw1,fsr2h
  1662  000D92  0E7F               	movlw	127
  1663  000D94  6EDF               	movwf	indf2,c
  1664                           
  1665                           ;memory.c: 378: pSegA += 0x7F;
  1666                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1667  000D96  0EF9               	movlw	-7
  1668  000D98  50E3               	movf	plusw1,w,c
  1669  000D9A  0F7F               	addlw	127
  1670  000D9C  6E5D               	movwf	btemp,c
  1671  000D9E  0EF9               	movlw	-7
  1672  000DA0  C05D  FFE3         	movff	btemp,plusw1
  1673  000DA4  6A5D               	clrf	btemp,c
  1674  000DA6  0EFA               	movlw	-6
  1675  000DA8  50E3               	movf	plusw1,w,c
  1676  000DAA  205D               	addwfc	btemp,w,c
  1677  000DAC  6E5D               	movwf	btemp,c
  1678  000DAE  0EFA               	movlw	-6
  1679  000DB0  C05D  FFE3         	movff	btemp,plusw1
  1680                           
  1681                           ;memory.c: 379: pSegB += uSegB.byte;
  1682                           ;stkvar	__SRAMmerge@uSegB @ sp[(-5)+2]
  1683  000DB4  0EFD               	movlw	-3
  1684  000DB6  50E3               	movf	plusw1,w,c
  1685  000DB8  0D01               	mullw	1
  1686                           
  1687                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1688  000DBA  50E1               	movf	fsr1l,w,c
  1689  000DBC  0FFB               	addlw	-5
  1690  000DBE  6ED9               	movwf	fsr2l,c
  1691  000DC0  50E2               	movf	fsr1h,w,c
  1692  000DC2  6EDA               	movwf	fsr2h,c
  1693  000DC4  0EFF               	movlw	255
  1694  000DC6  22DA               	addwfc	fsr2h,f,c
  1695  000DC8  50F3               	movf	prodl,w,c
  1696  000DCA  26DE               	addwf	postinc2,f,c
  1697  000DCC  50F4               	movf	prodh,w,c
  1698  000DCE  22DD               	addwfc	postdec2,f,c
  1699                           
  1700                           ;memory.c: 380: (*pSegA).byte = pSegB - pSegA;
  1701                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1702  000DD0  0EF9               	movlw	-7
  1703  000DD2  CFE3 FFD9          	movff	plusw1,fsr2l
  1704  000DD6  0EFA               	movlw	-6
  1705  000DD8  CFE3 FFDA          	movff	plusw1,fsr2h
  1706                           
  1707                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1708  000DDC  0EF9               	movlw	-7
  1709  000DDE  CFE3 F068          	movff	plusw1,btemp+11
  1710                           
  1711                           ;stkvar	__SRAMmerge@pSegB @ sp[(-5)+0]
  1712  000DE2  0EFB               	movlw	-5
  1713  000DE4  CFE3 F067          	movff	plusw1,btemp+10
  1714  000DE8  5068               	movf	btemp+11,w,c
  1715  000DEA  5C67               	subwf	btemp+10,w,c
  1716  000DEC  6EDF               	movwf	indf2,c
  1717                           
  1718                           ;memory.c: 382: return (0x7F);
  1719  000DEE  0E7F               	movlw	127
  1720  000DF0  D00A               	goto	L2
  1721  000DF2                     l927:
  1722                           
  1723                           ;memory.c: 386: else
  1724                           ;memory.c: 387: {
  1725                           ;memory.c: 388: return ((*pSegA).byte = uSum.byte);
  1726                           ;stkvar	__SRAMmerge@uSum @ sp[(-5)+4]
  1727                           ;stkvar	__SRAMmerge@pSegA @ sp[(-5)+-2]
  1728  000DF2  0EF9               	movlw	-7
  1729  000DF4  CFE3 FFD9          	movff	plusw1,fsr2l
  1730  000DF8  0EFA               	movlw	-6
  1731  000DFA  CFE3 FFDA          	movff	plusw1,fsr2h
  1732  000DFE  0EFF               	movlw	-1
  1733  000E00  CFE3 FFDF          	movff	plusw1,indf2
  1734  000E04  50DF               	movf	indf2,w,c
  1735  000E06                     L2:
  1736  000E06  6E5D               	movwf	btemp,c
  1737                           
  1738                           ; __SRAMmerge: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  1739  000E08  0EF9               	movlw	249
  1740  000E0A  26E1               	addwf	fsr1l,f,c
  1741  000E0C  0EFF               	movlw	255
  1742  000E0E  22E2               	addwfc	fsr1h,f,c
  1743  000E10  0012               	return		;funcret
  1744  000E12                     __end_of__SRAMmerge:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           postinc0	equ	0xFEE
  1754                           plusw0	equ	0xFEB
  1755                           fsr0h	equ	0xFEA
  1756                           fsr0l	equ	0xFE9
  1757                           wreg	equ	0xFE8
  1758                           postinc1	equ	0xFE6
  1759                           plusw1	equ	0xFE3
  1760                           fsr1h	equ	0xFE2
  1761                           fsr1l	equ	0xFE1
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           plusw2	equ	0xFDB
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _aviao1 *****************
  1771 ;; Defined at:
  1772 ;;		line 27 in file "tasks.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1  [STACK] void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1786 ;;      Params:         0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    8
  1793 ;; This function calls:
  1794 ;;		_createAviao
  1795 ;;		_create_pipe
  1796 ;;		_write_pipe
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text9
  1803  0014B4                     __ptext9:
  1804                           	opt stack 0
  1805  0014B4                     _aviao1:
  1806                           	opt stack 19
  1807                           
  1808                           ;tasks.c: 30: createAviao(&aviaozinho1,100,100, 1);
  1809                           
  1810                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1811                           ;incstack = 0
  1812  0014B4  0E01               	movlw	1
  1813  0014B6  6EE6               	movwf	postinc1,c
  1814  0014B8  0E00               	movlw	0
  1815  0014BA  6EE6               	movwf	postinc1,c
  1816  0014BC  0E64               	movlw	100
  1817  0014BE  6EE6               	movwf	postinc1,c
  1818  0014C0  0E00               	movlw	0
  1819  0014C2  6EE6               	movwf	postinc1,c
  1820  0014C4  0E64               	movlw	100
  1821  0014C6  6EE6               	movwf	postinc1,c
  1822  0014C8  0E00               	movlw	0
  1823  0014CA  6EE6               	movwf	postinc1,c
  1824  0014CC  0E3E               	movlw	low _aviaozinho1
  1825  0014CE  6EE6               	movwf	postinc1,c
  1826  0014D0  0E00               	movlw	high _aviaozinho1
  1827  0014D2  6EE6               	movwf	postinc1,c
  1828  0014D4  ECBE  F008         	call	_createAviao	;wreg free
  1829                           
  1830                           ;tasks.c: 36: create_pipe(&pipe1);
  1831  0014D8  0E2D               	movlw	low _pipe1
  1832  0014DA  6EE6               	movwf	postinc1,c
  1833  0014DC  0E00               	movlw	high _pipe1
  1834  0014DE  6EE6               	movwf	postinc1,c
  1835  0014E0  EC6B  F008         	call	_create_pipe	;wreg free
  1836  0014E4                     l1545:
  1837                           
  1838                           ;tasks.c: 41: write_pipe(&pipe1, 'l');
  1839  0014E4  0E6C               	movlw	108
  1840  0014E6  6EE6               	movwf	postinc1,c
  1841  0014E8  0E2D               	movlw	low _pipe1
  1842  0014EA  6EE6               	movwf	postinc1,c
  1843  0014EC  0E00               	movlw	high _pipe1
  1844  0014EE  6EE6               	movwf	postinc1,c
  1845  0014F0  ECB6  F005         	call	_write_pipe	;wreg free
  1846  0014F4  D7F7               	goto	l1545
  1847  0014F6                     __end_of_aviao1:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           plusw0	equ	0xFEB
  1858                           fsr0h	equ	0xFEA
  1859                           fsr0l	equ	0xFE9
  1860                           wreg	equ	0xFE8
  1861                           postinc1	equ	0xFE6
  1862                           plusw1	equ	0xFE3
  1863                           fsr1h	equ	0xFE2
  1864                           fsr1l	equ	0xFE1
  1865                           indf2	equ	0xFDF
  1866                           postinc2	equ	0xFDE
  1867                           postdec2	equ	0xFDD
  1868                           plusw2	equ	0xFDB
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _write_pipe *****************
  1874 ;; Defined at:
  1875 ;;		line 21 in file "pipe.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  pipe            2  [STACK] PTR struct pipe
  1878 ;;		 -> pipe1(11), 
  1879 ;;  data            1  [STACK] unsigned char 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1  [STACK] void 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1891 ;;      Params:         0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    7
  1898 ;; This function calls:
  1899 ;;		___wmul
  1900 ;;		_dispatcher
  1901 ;; This function is called by:
  1902 ;;		_aviao1
  1903 ;;		_aviao2
  1904 ;; This function uses a reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text10
  1908  000B6C                     __ptext10:
  1909                           	opt stack 0
  1910  000B6C                     _write_pipe:
  1911                           	opt stack 19
  1912                           
  1913                           ;pipe.c: 23: (INTCONbits.GIE = 0);
  1914                           
  1915                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  1916                           ;incstack = 0
  1917  000B6C  9EF2               	bcf	intcon,7,c	;volatile
  1918                           
  1919                           ;pipe.c: 26: if (pipe->pipe_itens == 1) {
  1920                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1921  000B6E  0EFE               	movlw	-2
  1922  000B70  CFE3 F05E          	movff	plusw1,btemp+1
  1923  000B74  0EFF               	movlw	-1
  1924  000B76  CFE3 F05F          	movff	plusw1,btemp+2
  1925  000B7A  0E05               	movlw	5
  1926  000B7C  245E               	addwf	btemp+1,w,c
  1927  000B7E  6ED9               	movwf	fsr2l,c
  1928  000B80  0E00               	movlw	0
  1929  000B82  205F               	addwfc	btemp+2,w,c
  1930  000B84  6EDA               	movwf	fsr2h,c
  1931  000B86  04DE               	decf	postinc2,w,c
  1932  000B88  10DE               	iorwf	postinc2,w,c
  1933  000B8A  A4D8               	btfss	status,2,c
  1934  000B8C  D014               	goto	l1439
  1935                           
  1936                           ;pipe.c: 28: pipe->pos_bloqued_write = task_running;
  1937                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1938  000B8E  0EFE               	movlw	-2
  1939  000B90  CFE3 F05E          	movff	plusw1,btemp+1
  1940  000B94  0EFF               	movlw	-1
  1941  000B96  CFE3 F05F          	movff	plusw1,btemp+2
  1942  000B9A  0E09               	movlw	9
  1943  000B9C  245E               	addwf	btemp+1,w,c
  1944  000B9E  6ED9               	movwf	fsr2l,c
  1945  000BA0  0E00               	movlw	0
  1946  000BA2  205F               	addwfc	btemp+2,w,c
  1947  000BA4  6EDA               	movwf	fsr2h,c
  1948  000BA6  C001  FFDE         	movff	_task_running,postinc2
  1949  000BAA  C002  FFDD         	movff	_task_running+1,postdec2
  1950                           
  1951                           ;pipe.c: 30: dispatcher(WAITING_PIPE);
  1952  000BAE  0E06               	movlw	6
  1953  000BB0  6EE6               	movwf	postinc1,c
  1954  000BB2  EC0A  F000         	call	_dispatcher	;wreg free
  1955  000BB6                     l1439:
  1956                           
  1957                           ;pipe.c: 31: }
  1958                           ;pipe.c: 33: pipe->pipe_queue[pipe->pos_write_pipe] = data;
  1959                           ;stkvar	write_pipe@data @ sp[(0)+-3]
  1960                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1961  000BB6  0EFE               	movlw	-2
  1962  000BB8  CFE3 F05E          	movff	plusw1,btemp+1
  1963  000BBC  0EFF               	movlw	-1
  1964  000BBE  CFE3 F05F          	movff	plusw1,btemp+2
  1965  000BC2  0E03               	movlw	3
  1966  000BC4  245E               	addwf	btemp+1,w,c
  1967  000BC6  6ED9               	movwf	fsr2l,c
  1968  000BC8  0E00               	movlw	0
  1969  000BCA  205F               	addwfc	btemp+2,w,c
  1970  000BCC  6EDA               	movwf	fsr2h,c
  1971  000BCE  CFDE F05E          	movff	postinc2,btemp+1
  1972  000BD2  CFDD F05F          	movff	postdec2,btemp+2
  1973                           
  1974                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1975  000BD6  0EFE               	movlw	-2
  1976  000BD8  CFE3 F067          	movff	plusw1,btemp+10
  1977  000BDC  0EFF               	movlw	-1
  1978  000BDE  CFE3 F068          	movff	plusw1,btemp+11
  1979  000BE2  505E               	movf	btemp+1,w,c
  1980  000BE4  2467               	addwf	btemp+10,w,c
  1981  000BE6  6ED9               	movwf	fsr2l,c
  1982  000BE8  505F               	movf	btemp+2,w,c
  1983  000BEA  2068               	addwfc	btemp+11,w,c
  1984  000BEC  6EDA               	movwf	fsr2h,c
  1985  000BEE  0EFD               	movlw	-3
  1986  000BF0  CFE3 FFDF          	movff	plusw1,indf2
  1987                           
  1988                           ;pipe.c: 34: pipe->pos_write_pipe = (pipe->pos_write_pipe + 1) % 1;
  1989                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1990  000BF4  0EFE               	movlw	-2
  1991  000BF6  CFE3 F05E          	movff	plusw1,btemp+1
  1992  000BFA  0EFF               	movlw	-1
  1993  000BFC  CFE3 F05F          	movff	plusw1,btemp+2
  1994  000C00  0E03               	movlw	3
  1995  000C02  245E               	addwf	btemp+1,w,c
  1996  000C04  6ED9               	movwf	fsr2l,c
  1997  000C06  0E00               	movlw	0
  1998  000C08  205F               	addwfc	btemp+2,w,c
  1999  000C0A  6EDA               	movwf	fsr2h,c
  2000  000C0C  0E00               	movlw	0
  2001  000C0E  6EDE               	movwf	postinc2,c
  2002  000C10  0E00               	movlw	0
  2003  000C12  6EDD               	movwf	postdec2,c
  2004                           
  2005                           ;pipe.c: 35: pipe->pipe_itens++;
  2006                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2007  000C14  0EFE               	movlw	-2
  2008  000C16  CFE3 F05E          	movff	plusw1,btemp+1
  2009  000C1A  0EFF               	movlw	-1
  2010  000C1C  CFE3 F05F          	movff	plusw1,btemp+2
  2011  000C20  0E05               	movlw	5
  2012  000C22  245E               	addwf	btemp+1,w,c
  2013  000C24  6ED9               	movwf	fsr2l,c
  2014  000C26  0E00               	movlw	0
  2015  000C28  205F               	addwfc	btemp+2,w,c
  2016  000C2A  6EDA               	movwf	fsr2h,c
  2017  000C2C  2ADE               	incf	postinc2,f,c
  2018  000C2E  0E00               	movlw	0
  2019  000C30  22DD               	addwfc	postdec2,f,c
  2020                           
  2021                           ;pipe.c: 38: if (pipe->pos_bloqued_read > 0) {
  2022                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2023  000C32  0EFE               	movlw	-2
  2024  000C34  CFE3 F05E          	movff	plusw1,btemp+1
  2025  000C38  0EFF               	movlw	-1
  2026  000C3A  CFE3 F05F          	movff	plusw1,btemp+2
  2027  000C3E  0E07               	movlw	7
  2028  000C40  245E               	addwf	btemp+1,w,c
  2029  000C42  6ED9               	movwf	fsr2l,c
  2030  000C44  0E00               	movlw	0
  2031  000C46  205F               	addwfc	btemp+2,w,c
  2032  000C48  6EDA               	movwf	fsr2h,c
  2033  000C4A  50DE               	movf	postinc2,w,c
  2034  000C4C  10DE               	iorwf	postinc2,w,c
  2035  000C4E  B4D8               	btfsc	status,2,c
  2036  000C50  D032               	goto	l1451
  2037                           
  2038                           ;pipe.c: 39: F_APTOS[pipe->pos_bloqued_read].task_state = READY;
  2039  000C52  0E6E               	movlw	110
  2040  000C54  6EE6               	movwf	postinc1,c
  2041  000C56  0E00               	movlw	0
  2042  000C58  6EE6               	movwf	postinc1,c
  2043                           
  2044                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  2045  000C5A  0EFC               	movlw	-4
  2046  000C5C  CFE3 F05E          	movff	plusw1,btemp+1
  2047  000C60  0EFD               	movlw	-3
  2048  000C62  CFE3 F05F          	movff	plusw1,btemp+2
  2049  000C66  0E07               	movlw	7
  2050  000C68  245E               	addwf	btemp+1,w,c
  2051  000C6A  6ED9               	movwf	fsr2l,c
  2052  000C6C  0E00               	movlw	0
  2053  000C6E  205F               	addwfc	btemp+2,w,c
  2054  000C70  6EDA               	movwf	fsr2h,c
  2055  000C72  CFDE F05E          	movff	postinc2,btemp+1
  2056  000C76  CFDD F05F          	movff	postdec2,btemp+2
  2057  000C7A  C05E  FFE6         	movff	btemp+1,postinc1
  2058  000C7E  C05F  FFE6         	movff	btemp+2,postinc1
  2059  000C82  EC0C  F009         	call	___wmul	;wreg free
  2060  000C86  0EF6               	movlw	low (_F_APTOS+8)
  2061  000C88  245D               	addwf	btemp,w,c
  2062  000C8A  6ED9               	movwf	fsr2l,c
  2063  000C8C  0E00               	movlw	high (_F_APTOS+8)
  2064  000C8E  205E               	addwfc	btemp+1,w,c
  2065  000C90  6EDA               	movwf	fsr2h,c
  2066  000C92  0E01               	movlw	1
  2067  000C94  6EDF               	movwf	indf2,c
  2068                           
  2069                           ;pipe.c: 40: pipe->pos_bloqued_read = 0;
  2070                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  2071  000C96  0EFE               	movlw	-2
  2072  000C98  CFE3 F05E          	movff	plusw1,btemp+1
  2073  000C9C  0EFF               	movlw	-1
  2074  000C9E  CFE3 F05F          	movff	plusw1,btemp+2
  2075  000CA2  0E07               	movlw	7
  2076  000CA4  245E               	addwf	btemp+1,w,c
  2077  000CA6  6ED9               	movwf	fsr2l,c
  2078  000CA8  0E00               	movlw	0
  2079  000CAA  205F               	addwfc	btemp+2,w,c
  2080  000CAC  6EDA               	movwf	fsr2h,c
  2081  000CAE  0E00               	movlw	0
  2082  000CB0  6EDE               	movwf	postinc2,c
  2083  000CB2  0E00               	movlw	0
  2084  000CB4  6EDD               	movwf	postdec2,c
  2085  000CB6                     l1451:
  2086                           
  2087                           ;pipe.c: 44: }
  2088                           ;pipe.c: 47: (INTCONbits.GIE = 1);
  2089  000CB6  8EF2               	bsf	intcon,7,c	;volatile
  2090                           
  2091                           ; _write_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
  2092  000CB8  52E5               	movf	postdec1,f,c
  2093  000CBA  52E5               	movf	postdec1,f,c
  2094  000CBC  52E5               	movf	postdec1,f,c
  2095  000CBE  0012               	return		;funcret
  2096  000CC0                     __end_of_write_pipe:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           prodh	equ	0xFF4
  2103                           prodl	equ	0xFF3
  2104                           intcon	equ	0xFF2
  2105                           postinc0	equ	0xFEE
  2106                           plusw0	equ	0xFEB
  2107                           fsr0h	equ	0xFEA
  2108                           fsr0l	equ	0xFE9
  2109                           wreg	equ	0xFE8
  2110                           postinc1	equ	0xFE6
  2111                           postdec1	equ	0xFE5
  2112                           plusw1	equ	0xFE3
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           postdec2	equ	0xFDD
  2118                           plusw2	equ	0xFDB
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _dispatcher *****************
  2124 ;; Defined at:
  2125 ;;		line 33 in file "kernel.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  state           1  [STACK] enum E3015
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1  [STACK] void 
  2132 ;; Registers used:
  2133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2139 ;;      Params:         0       0       0       0       0       0       0
  2140 ;;      Locals:         0       0       0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0
  2142 ;;      Totals:         0       0       0       0       0       0       0
  2143 ;;Total ram usage:        0 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    6
  2146 ;; This function calls:
  2147 ;;		___wmul
  2148 ;;		_rr_scheduler
  2149 ;; This function is called by:
  2150 ;;		_delay
  2151 ;;		_int_high
  2152 ;;		_sem_wait
  2153 ;;		_sem_post
  2154 ;;		_write_pipe
  2155 ;;		_read_pipe
  2156 ;; This function uses a reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text11
  2160  000014                     __ptext11:
  2161                           	opt stack 0
  2162  000014                     _dispatcher:
  2163                           	opt stack 15
  2164                           
  2165                           ;kernel.c: 35: (INTCONbits.GIE = 0);
  2166                           
  2167                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  2168                           ;incstack = 0
  2169  000014  9EF2               	bcf	intcon,7,c	;volatile
  2170                           
  2171                           ;kernel.c: 38: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  2172                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  2173  000016  0E6E               	movlw	110
  2174  000018  6EE6               	movwf	postinc1,c
  2175  00001A  0E00               	movlw	0
  2176  00001C  6EE6               	movwf	postinc1,c
  2177  00001E  C001  FFE6         	movff	_task_running,postinc1
  2178  000022  C002  FFE6         	movff	_task_running+1,postinc1
  2179  000026  EC0C  F009         	call	___wmul	;wreg free
  2180  00002A  0EF6               	movlw	low (_F_APTOS+8)
  2181  00002C  245D               	addwf	btemp,w,c
  2182  00002E  6ED9               	movwf	fsr2l,c
  2183  000030  0E00               	movlw	high (_F_APTOS+8)
  2184  000032  205E               	addwfc	btemp+1,w,c
  2185  000034  6EDA               	movwf	fsr2h,c
  2186  000036  0EFF               	movlw	-1
  2187  000038  CFE3 FFDF          	movff	plusw1,indf2
  2188  00003C  0E6E               	movlw	110
  2189  00003E  6EE6               	movwf	postinc1,c
  2190  000040  0E00               	movlw	0
  2191  000042  6EE6               	movwf	postinc1,c
  2192  000044  C001  FFE6         	movff	_task_running,postinc1
  2193  000048  C002  FFE6         	movff	_task_running+1,postinc1
  2194  00004C  EC0C  F009         	call	___wmul	;wreg free
  2195  000050  0E59               	movlw	low (_F_APTOS+107)
  2196  000052  245D               	addwf	btemp,w,c
  2197  000054  6ED9               	movwf	fsr2l,c
  2198  000056  0E01               	movlw	high (_F_APTOS+107)
  2199  000058  205E               	addwfc	btemp+1,w,c
  2200  00005A  6EDA               	movwf	fsr2h,c
  2201  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  2202  000060  0E6E               	movlw	110
  2203  000062  6EE6               	movwf	postinc1,c
  2204  000064  0E00               	movlw	0
  2205  000066  6EE6               	movwf	postinc1,c
  2206  000068  C001  FFE6         	movff	_task_running,postinc1
  2207  00006C  C002  FFE6         	movff	_task_running+1,postinc1
  2208  000070  EC0C  F009         	call	___wmul	;wreg free
  2209  000074  0E5A               	movlw	low (_F_APTOS+108)
  2210  000076  245D               	addwf	btemp,w,c
  2211  000078  6ED9               	movwf	fsr2l,c
  2212  00007A  0E01               	movlw	high (_F_APTOS+108)
  2213  00007C  205E               	addwfc	btemp+1,w,c
  2214  00007E  6EDA               	movwf	fsr2h,c
  2215  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  2216  000084  0E6E               	movlw	110
  2217  000086  6EE6               	movwf	postinc1,c
  2218  000088  0E00               	movlw	0
  2219  00008A  6EE6               	movwf	postinc1,c
  2220  00008C  C001  FFE6         	movff	_task_running,postinc1
  2221  000090  C002  FFE6         	movff	_task_running+1,postinc1
  2222  000094  EC0C  F009         	call	___wmul	;wreg free
  2223  000098  0E5B               	movlw	low (_F_APTOS+109)
  2224  00009A  245D               	addwf	btemp,w,c
  2225  00009C  6ED9               	movwf	fsr2l,c
  2226  00009E  0E01               	movlw	high (_F_APTOS+109)
  2227  0000A0  205E               	addwfc	btemp+1,w,c
  2228  0000A2  6EDA               	movwf	fsr2h,c
  2229  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  2230  0000A8  0E6E               	movlw	110
  2231  0000AA  6EE6               	movwf	postinc1,c
  2232  0000AC  0E00               	movlw	0
  2233  0000AE  6EE6               	movwf	postinc1,c
  2234  0000B0  C001  FFE6         	movff	_task_running,postinc1
  2235  0000B4  C002  FFE6         	movff	_task_running+1,postinc1
  2236  0000B8  EC0C  F009         	call	___wmul	;wreg free
  2237  0000BC  0E57               	movlw	low (_F_APTOS+105)
  2238  0000BE  245D               	addwf	btemp,w,c
  2239  0000C0  6ED9               	movwf	fsr2l,c
  2240  0000C2  0E01               	movlw	high (_F_APTOS+105)
  2241  0000C4  205E               	addwfc	btemp+1,w,c
  2242  0000C6  6EDA               	movwf	fsr2h,c
  2243  0000C8  0E00               	movlw	0
  2244  0000CA  6EDE               	movwf	postinc2,c
  2245  0000CC  0E00               	movlw	0
  2246  0000CE  6EDD               	movwf	postdec2,c
  2247  0000D0                     l1387:
  2248  0000D0  0E03               	movlw	3
  2249  0000D2  6EE6               	movwf	postinc1,c
  2250  0000D4  0E00               	movlw	0
  2251  0000D6  6EE6               	movwf	postinc1,c
  2252  0000D8  0E6E               	movlw	110
  2253  0000DA  6EE6               	movwf	postinc1,c
  2254  0000DC  0E00               	movlw	0
  2255  0000DE  6EE6               	movwf	postinc1,c
  2256  0000E0  C001  FFE6         	movff	_task_running,postinc1
  2257  0000E4  C002  FFE6         	movff	_task_running+1,postinc1
  2258  0000E8  EC0C  F009         	call	___wmul	;wreg free
  2259  0000EC  0E57               	movlw	low (_F_APTOS+105)
  2260  0000EE  245D               	addwf	btemp,w,c
  2261  0000F0  6ED9               	movwf	fsr2l,c
  2262  0000F2  0E01               	movlw	high (_F_APTOS+105)
  2263  0000F4  205E               	addwfc	btemp+1,w,c
  2264  0000F6  6EDA               	movwf	fsr2h,c
  2265  0000F8  CFDE F05E          	movff	postinc2,btemp+1
  2266  0000FC  CFDD F05F          	movff	postdec2,btemp+2
  2267  000100  C05E  FFE6         	movff	btemp+1,postinc1
  2268  000104  C05F  FFE6         	movff	btemp+2,postinc1
  2269  000108  EC0C  F009         	call	___wmul	;wreg free
  2270  00010C  C05D  F065         	movff	btemp,btemp+8
  2271  000110  C05E  F066         	movff	btemp+1,btemp+9
  2272  000114  0E6E               	movlw	110
  2273  000116  6EE6               	movwf	postinc1,c
  2274  000118  0E00               	movlw	0
  2275  00011A  6EE6               	movwf	postinc1,c
  2276  00011C  C001  FFE6         	movff	_task_running,postinc1
  2277  000120  C002  FFE6         	movff	_task_running+1,postinc1
  2278  000124  EC0C  F009         	call	___wmul	;wreg free
  2279  000128  0EEE               	movlw	low _F_APTOS
  2280  00012A  6E67               	movwf	btemp+10,c
  2281  00012C  0E00               	movlw	high _F_APTOS
  2282  00012E  6E68               	movwf	btemp+11,c
  2283  000130  0E09               	movlw	9
  2284  000132  2667               	addwf	btemp+10,f,c
  2285  000134  0E00               	movlw	0
  2286  000136  2268               	addwfc	btemp+11,f,c
  2287  000138  505D               	movf	btemp,w,c
  2288  00013A  2667               	addwf	btemp+10,f,c
  2289  00013C  505E               	movf	btemp+1,w,c
  2290  00013E  2268               	addwfc	btemp+11,f,c
  2291  000140  5065               	movf	btemp+8,w,c
  2292  000142  2467               	addwf	btemp+10,w,c
  2293  000144  6ED9               	movwf	fsr2l,c
  2294  000146  5066               	movf	btemp+9,w,c
  2295  000148  2068               	addwfc	btemp+11,w,c
  2296  00014A  6EDA               	movwf	fsr2h,c
  2297  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  2298  000150  0E03               	movlw	3
  2299  000152  6EE6               	movwf	postinc1,c
  2300  000154  0E00               	movlw	0
  2301  000156  6EE6               	movwf	postinc1,c
  2302  000158  0E6E               	movlw	110
  2303  00015A  6EE6               	movwf	postinc1,c
  2304  00015C  0E00               	movlw	0
  2305  00015E  6EE6               	movwf	postinc1,c
  2306  000160  C001  FFE6         	movff	_task_running,postinc1
  2307  000164  C002  FFE6         	movff	_task_running+1,postinc1
  2308  000168  EC0C  F009         	call	___wmul	;wreg free
  2309  00016C  0E57               	movlw	low (_F_APTOS+105)
  2310  00016E  245D               	addwf	btemp,w,c
  2311  000170  6ED9               	movwf	fsr2l,c
  2312  000172  0E01               	movlw	high (_F_APTOS+105)
  2313  000174  205E               	addwfc	btemp+1,w,c
  2314  000176  6EDA               	movwf	fsr2h,c
  2315  000178  CFDE F05E          	movff	postinc2,btemp+1
  2316  00017C  CFDD F05F          	movff	postdec2,btemp+2
  2317  000180  C05E  FFE6         	movff	btemp+1,postinc1
  2318  000184  C05F  FFE6         	movff	btemp+2,postinc1
  2319  000188  EC0C  F009         	call	___wmul	;wreg free
  2320  00018C  C05D  F065         	movff	btemp,btemp+8
  2321  000190  C05E  F066         	movff	btemp+1,btemp+9
  2322  000194  0E6E               	movlw	110
  2323  000196  6EE6               	movwf	postinc1,c
  2324  000198  0E00               	movlw	0
  2325  00019A  6EE6               	movwf	postinc1,c
  2326  00019C  C001  FFE6         	movff	_task_running,postinc1
  2327  0001A0  C002  FFE6         	movff	_task_running+1,postinc1
  2328  0001A4  EC0C  F009         	call	___wmul	;wreg free
  2329  0001A8  0EEE               	movlw	low _F_APTOS
  2330  0001AA  6E67               	movwf	btemp+10,c
  2331  0001AC  0E00               	movlw	high _F_APTOS
  2332  0001AE  6E68               	movwf	btemp+11,c
  2333  0001B0  0E0A               	movlw	10
  2334  0001B2  2667               	addwf	btemp+10,f,c
  2335  0001B4  0E00               	movlw	0
  2336  0001B6  2268               	addwfc	btemp+11,f,c
  2337  0001B8  505D               	movf	btemp,w,c
  2338  0001BA  2667               	addwf	btemp+10,f,c
  2339  0001BC  505E               	movf	btemp+1,w,c
  2340  0001BE  2268               	addwfc	btemp+11,f,c
  2341  0001C0  5065               	movf	btemp+8,w,c
  2342  0001C2  2467               	addwf	btemp+10,w,c
  2343  0001C4  6ED9               	movwf	fsr2l,c
  2344  0001C6  5066               	movf	btemp+9,w,c
  2345  0001C8  2068               	addwfc	btemp+11,w,c
  2346  0001CA  6EDA               	movwf	fsr2h,c
  2347  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2348  0001D0  0E03               	movlw	3
  2349  0001D2  6EE6               	movwf	postinc1,c
  2350  0001D4  0E00               	movlw	0
  2351  0001D6  6EE6               	movwf	postinc1,c
  2352  0001D8  0E6E               	movlw	110
  2353  0001DA  6EE6               	movwf	postinc1,c
  2354  0001DC  0E00               	movlw	0
  2355  0001DE  6EE6               	movwf	postinc1,c
  2356  0001E0  C001  FFE6         	movff	_task_running,postinc1
  2357  0001E4  C002  FFE6         	movff	_task_running+1,postinc1
  2358  0001E8  EC0C  F009         	call	___wmul	;wreg free
  2359  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2360  0001EE  245D               	addwf	btemp,w,c
  2361  0001F0  6ED9               	movwf	fsr2l,c
  2362  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2363  0001F4  205E               	addwfc	btemp+1,w,c
  2364  0001F6  6EDA               	movwf	fsr2h,c
  2365  0001F8  CFDE F05E          	movff	postinc2,btemp+1
  2366  0001FC  CFDD F05F          	movff	postdec2,btemp+2
  2367  000200  C05E  FFE6         	movff	btemp+1,postinc1
  2368  000204  C05F  FFE6         	movff	btemp+2,postinc1
  2369  000208  EC0C  F009         	call	___wmul	;wreg free
  2370  00020C  C05D  F065         	movff	btemp,btemp+8
  2371  000210  C05E  F066         	movff	btemp+1,btemp+9
  2372  000214  0E6E               	movlw	110
  2373  000216  6EE6               	movwf	postinc1,c
  2374  000218  0E00               	movlw	0
  2375  00021A  6EE6               	movwf	postinc1,c
  2376  00021C  C001  FFE6         	movff	_task_running,postinc1
  2377  000220  C002  FFE6         	movff	_task_running+1,postinc1
  2378  000224  EC0C  F009         	call	___wmul	;wreg free
  2379  000228  0EEE               	movlw	low _F_APTOS
  2380  00022A  6E67               	movwf	btemp+10,c
  2381  00022C  0E00               	movlw	high _F_APTOS
  2382  00022E  6E68               	movwf	btemp+11,c
  2383  000230  0E0B               	movlw	11
  2384  000232  2667               	addwf	btemp+10,f,c
  2385  000234  0E00               	movlw	0
  2386  000236  2268               	addwfc	btemp+11,f,c
  2387  000238  505D               	movf	btemp,w,c
  2388  00023A  2667               	addwf	btemp+10,f,c
  2389  00023C  505E               	movf	btemp+1,w,c
  2390  00023E  2268               	addwfc	btemp+11,f,c
  2391  000240  5065               	movf	btemp+8,w,c
  2392  000242  2467               	addwf	btemp+10,w,c
  2393  000244  6ED9               	movwf	fsr2l,c
  2394  000246  5066               	movf	btemp+9,w,c
  2395  000248  2068               	addwfc	btemp+11,w,c
  2396  00024A  6EDA               	movwf	fsr2h,c
  2397  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2398  000250  0E6E               	movlw	110
  2399  000252  6EE6               	movwf	postinc1,c
  2400  000254  0E00               	movlw	0
  2401  000256  6EE6               	movwf	postinc1,c
  2402  000258  C001  FFE6         	movff	_task_running,postinc1
  2403  00025C  C002  FFE6         	movff	_task_running+1,postinc1
  2404  000260  EC0C  F009         	call	___wmul	;wreg free
  2405  000264  0E57               	movlw	low (_F_APTOS+105)
  2406  000266  245D               	addwf	btemp,w,c
  2407  000268  6ED9               	movwf	fsr2l,c
  2408  00026A  0E01               	movlw	high (_F_APTOS+105)
  2409  00026C  205E               	addwfc	btemp+1,w,c
  2410  00026E  6EDA               	movwf	fsr2h,c
  2411  000270  2ADE               	incf	postinc2,f,c
  2412  000272  0E00               	movlw	0
  2413  000274  22DD               	addwfc	postdec2,f,c
  2414  000276  0006               	pop		;# 
  2415  000278  50FC               	movf	stkptr,w,c	;volatile
  2416  00027A  A4D8               	btfss	status,2,c
  2417  00027C  D729               	goto	l1387
  2418                           
  2419                           ;kernel.c: 42: task_running = rr_scheduler();
  2420  00027E  EC9A  F009         	call	_rr_scheduler	;wreg free
  2421  000282  C05D  F001         	movff	btemp,_task_running
  2422  000286  C05E  F002         	movff	btemp+1,_task_running+1
  2423                           
  2424                           ;kernel.c: 48: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2425  00028A  6AFC               	clrf	stkptr,c	;volatile
  2426  00028C  0E6E               	movlw	110
  2427  00028E  6EE6               	movwf	postinc1,c
  2428  000290  0E00               	movlw	0
  2429  000292  6EE6               	movwf	postinc1,c
  2430  000294  C001  FFE6         	movff	_task_running,postinc1
  2431  000298  C002  FFE6         	movff	_task_running+1,postinc1
  2432  00029C  EC0C  F009         	call	___wmul	;wreg free
  2433  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2434  0002A2  245D               	addwf	btemp,w,c
  2435  0002A4  6ED9               	movwf	fsr2l,c
  2436  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2437  0002A8  205E               	addwfc	btemp+1,w,c
  2438  0002AA  6EDA               	movwf	fsr2h,c
  2439  0002AC  50DE               	movf	postinc2,w,c
  2440  0002AE  10DE               	iorwf	postinc2,w,c
  2441  0002B0  A4D8               	btfss	status,2,c
  2442  0002B2  D01B               	goto	l1407
  2443  0002B4  0005               	push		;# 
  2444  0002B6  0E6E               	movlw	110
  2445  0002B8  6EE6               	movwf	postinc1,c
  2446  0002BA  0E00               	movlw	0
  2447  0002BC  6EE6               	movwf	postinc1,c
  2448  0002BE  C001  FFE6         	movff	_task_running,postinc1
  2449  0002C2  C002  FFE6         	movff	_task_running+1,postinc1
  2450  0002C6  EC0C  F009         	call	___wmul	;wreg free
  2451  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2452  0002CC  245D               	addwf	btemp,w,c
  2453  0002CE  6ED9               	movwf	fsr2l,c
  2454  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2455  0002D2  205E               	addwfc	btemp+1,w,c
  2456  0002D4  6EDA               	movwf	fsr2h,c
  2457  0002D6  CFDE F05E          	movff	postinc2,btemp+1
  2458  0002DA  CFDD F05F          	movff	postdec2,btemp+2
  2459  0002DE  C05E  FFFD         	movff	btemp+1,tosl	;volatile
  2460  0002E2  C05F  FFFE         	movff	btemp+2,tosh	;volatile
  2461  0002E6  6AFF               	clrf	tosu,c	;volatile
  2462  0002E8  D11F               	goto	u45_20
  2463  0002EA                     l1407:
  2464  0002EA  0E6E               	movlw	110
  2465  0002EC  6EE6               	movwf	postinc1,c
  2466  0002EE  0E00               	movlw	0
  2467  0002F0  6EE6               	movwf	postinc1,c
  2468  0002F2  C001  FFE6         	movff	_task_running,postinc1
  2469  0002F6  C002  FFE6         	movff	_task_running+1,postinc1
  2470  0002FA  EC0C  F009         	call	___wmul	;wreg free
  2471  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2472  000300  245D               	addwf	btemp,w,c
  2473  000302  6ED9               	movwf	fsr2l,c
  2474  000304  0E01               	movlw	high (_F_APTOS+107)
  2475  000306  205E               	addwfc	btemp+1,w,c
  2476  000308  6EDA               	movwf	fsr2h,c
  2477  00030A  50DF               	movf	indf2,w,c
  2478  00030C  6EE0               	movwf	bsr,c	;volatile
  2479  00030E  0E6E               	movlw	110
  2480  000310  6EE6               	movwf	postinc1,c
  2481  000312  0E00               	movlw	0
  2482  000314  6EE6               	movwf	postinc1,c
  2483  000316  C001  FFE6         	movff	_task_running,postinc1
  2484  00031A  C002  FFE6         	movff	_task_running+1,postinc1
  2485  00031E  EC0C  F009         	call	___wmul	;wreg free
  2486  000322  0E5A               	movlw	low (_F_APTOS+108)
  2487  000324  245D               	addwf	btemp,w,c
  2488  000326  6ED9               	movwf	fsr2l,c
  2489  000328  0E01               	movlw	high (_F_APTOS+108)
  2490  00032A  205E               	addwfc	btemp+1,w,c
  2491  00032C  6EDA               	movwf	fsr2h,c
  2492  00032E  50DF               	movf	indf2,w,c
  2493  000330  6ED8               	movwf	status,c	;volatile
  2494  000332  0E6E               	movlw	110
  2495  000334  6EE6               	movwf	postinc1,c
  2496  000336  0E00               	movlw	0
  2497  000338  6EE6               	movwf	postinc1,c
  2498  00033A  C001  FFE6         	movff	_task_running,postinc1
  2499  00033E  C002  FFE6         	movff	_task_running+1,postinc1
  2500  000342  EC0C  F009         	call	___wmul	;wreg free
  2501  000346  0E5B               	movlw	low (_F_APTOS+109)
  2502  000348  245D               	addwf	btemp,w,c
  2503  00034A  6ED9               	movwf	fsr2l,c
  2504  00034C  0E01               	movlw	high (_F_APTOS+109)
  2505  00034E  205E               	addwfc	btemp+1,w,c
  2506  000350  6EDA               	movwf	fsr2h,c
  2507  000352  50DF               	movf	indf2,w,c
  2508  000354  6E68               	movwf	btemp+11,c
  2509  000356  5068               	movf	btemp+11,w,c
  2510  000358                     l78:
  2511  000358  0005               	push		;# 
  2512  00035A  0E6E               	movlw	110
  2513  00035C  6EE6               	movwf	postinc1,c
  2514  00035E  0E00               	movlw	0
  2515  000360  6EE6               	movwf	postinc1,c
  2516  000362  C001  FFE6         	movff	_task_running,postinc1
  2517  000366  C002  FFE6         	movff	_task_running+1,postinc1
  2518  00036A  EC0C  F009         	call	___wmul	;wreg free
  2519  00036E  0E57               	movlw	low (_F_APTOS+105)
  2520  000370  245D               	addwf	btemp,w,c
  2521  000372  6ED9               	movwf	fsr2l,c
  2522  000374  0E01               	movlw	high (_F_APTOS+105)
  2523  000376  205E               	addwfc	btemp+1,w,c
  2524  000378  6EDA               	movwf	fsr2h,c
  2525  00037A  06DE               	decf	postinc2,f,c
  2526  00037C  0E00               	movlw	0
  2527  00037E  5ADD               	subwfb	postdec2,f,c
  2528  000380  0E03               	movlw	3
  2529  000382  6EE6               	movwf	postinc1,c
  2530  000384  0E00               	movlw	0
  2531  000386  6EE6               	movwf	postinc1,c
  2532  000388  0E6E               	movlw	110
  2533  00038A  6EE6               	movwf	postinc1,c
  2534  00038C  0E00               	movlw	0
  2535  00038E  6EE6               	movwf	postinc1,c
  2536  000390  C001  FFE6         	movff	_task_running,postinc1
  2537  000394  C002  FFE6         	movff	_task_running+1,postinc1
  2538  000398  EC0C  F009         	call	___wmul	;wreg free
  2539  00039C  0E57               	movlw	low (_F_APTOS+105)
  2540  00039E  245D               	addwf	btemp,w,c
  2541  0003A0  6ED9               	movwf	fsr2l,c
  2542  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2543  0003A4  205E               	addwfc	btemp+1,w,c
  2544  0003A6  6EDA               	movwf	fsr2h,c
  2545  0003A8  CFDE F05E          	movff	postinc2,btemp+1
  2546  0003AC  CFDD F05F          	movff	postdec2,btemp+2
  2547  0003B0  C05E  FFE6         	movff	btemp+1,postinc1
  2548  0003B4  C05F  FFE6         	movff	btemp+2,postinc1
  2549  0003B8  EC0C  F009         	call	___wmul	;wreg free
  2550  0003BC  C05D  F065         	movff	btemp,btemp+8
  2551  0003C0  C05E  F066         	movff	btemp+1,btemp+9
  2552  0003C4  0E6E               	movlw	110
  2553  0003C6  6EE6               	movwf	postinc1,c
  2554  0003C8  0E00               	movlw	0
  2555  0003CA  6EE6               	movwf	postinc1,c
  2556  0003CC  C001  FFE6         	movff	_task_running,postinc1
  2557  0003D0  C002  FFE6         	movff	_task_running+1,postinc1
  2558  0003D4  EC0C  F009         	call	___wmul	;wreg free
  2559  0003D8  0EEE               	movlw	low _F_APTOS
  2560  0003DA  6E67               	movwf	btemp+10,c
  2561  0003DC  0E00               	movlw	high _F_APTOS
  2562  0003DE  6E68               	movwf	btemp+11,c
  2563  0003E0  0E09               	movlw	9
  2564  0003E2  2667               	addwf	btemp+10,f,c
  2565  0003E4  0E00               	movlw	0
  2566  0003E6  2268               	addwfc	btemp+11,f,c
  2567  0003E8  505D               	movf	btemp,w,c
  2568  0003EA  2667               	addwf	btemp+10,f,c
  2569  0003EC  505E               	movf	btemp+1,w,c
  2570  0003EE  2268               	addwfc	btemp+11,f,c
  2571  0003F0  5065               	movf	btemp+8,w,c
  2572  0003F2  2467               	addwf	btemp+10,w,c
  2573  0003F4  6ED9               	movwf	fsr2l,c
  2574  0003F6  5066               	movf	btemp+9,w,c
  2575  0003F8  2068               	addwfc	btemp+11,w,c
  2576  0003FA  6EDA               	movwf	fsr2h,c
  2577  0003FC  50DF               	movf	indf2,w,c
  2578  0003FE  6EFF               	movwf	tosu,c	;volatile
  2579  000400  0E03               	movlw	3
  2580  000402  6EE6               	movwf	postinc1,c
  2581  000404  0E00               	movlw	0
  2582  000406  6EE6               	movwf	postinc1,c
  2583  000408  0E6E               	movlw	110
  2584  00040A  6EE6               	movwf	postinc1,c
  2585  00040C  0E00               	movlw	0
  2586  00040E  6EE6               	movwf	postinc1,c
  2587  000410  C001  FFE6         	movff	_task_running,postinc1
  2588  000414  C002  FFE6         	movff	_task_running+1,postinc1
  2589  000418  EC0C  F009         	call	___wmul	;wreg free
  2590  00041C  0E57               	movlw	low (_F_APTOS+105)
  2591  00041E  245D               	addwf	btemp,w,c
  2592  000420  6ED9               	movwf	fsr2l,c
  2593  000422  0E01               	movlw	high (_F_APTOS+105)
  2594  000424  205E               	addwfc	btemp+1,w,c
  2595  000426  6EDA               	movwf	fsr2h,c
  2596  000428  CFDE F05E          	movff	postinc2,btemp+1
  2597  00042C  CFDD F05F          	movff	postdec2,btemp+2
  2598  000430  C05E  FFE6         	movff	btemp+1,postinc1
  2599  000434  C05F  FFE6         	movff	btemp+2,postinc1
  2600  000438  EC0C  F009         	call	___wmul	;wreg free
  2601  00043C  C05D  F065         	movff	btemp,btemp+8
  2602  000440  C05E  F066         	movff	btemp+1,btemp+9
  2603  000444  0E6E               	movlw	110
  2604  000446  6EE6               	movwf	postinc1,c
  2605  000448  0E00               	movlw	0
  2606  00044A  6EE6               	movwf	postinc1,c
  2607  00044C  C001  FFE6         	movff	_task_running,postinc1
  2608  000450  C002  FFE6         	movff	_task_running+1,postinc1
  2609  000454  EC0C  F009         	call	___wmul	;wreg free
  2610  000458  0EEE               	movlw	low _F_APTOS
  2611  00045A  6E67               	movwf	btemp+10,c
  2612  00045C  0E00               	movlw	high _F_APTOS
  2613  00045E  6E68               	movwf	btemp+11,c
  2614  000460  0E0A               	movlw	10
  2615  000462  2667               	addwf	btemp+10,f,c
  2616  000464  0E00               	movlw	0
  2617  000466  2268               	addwfc	btemp+11,f,c
  2618  000468  505D               	movf	btemp,w,c
  2619  00046A  2667               	addwf	btemp+10,f,c
  2620  00046C  505E               	movf	btemp+1,w,c
  2621  00046E  2268               	addwfc	btemp+11,f,c
  2622  000470  5065               	movf	btemp+8,w,c
  2623  000472  2467               	addwf	btemp+10,w,c
  2624  000474  6ED9               	movwf	fsr2l,c
  2625  000476  5066               	movf	btemp+9,w,c
  2626  000478  2068               	addwfc	btemp+11,w,c
  2627  00047A  6EDA               	movwf	fsr2h,c
  2628  00047C  50DF               	movf	indf2,w,c
  2629  00047E  6EFD               	movwf	tosl,c	;volatile
  2630  000480  0E03               	movlw	3
  2631  000482  6EE6               	movwf	postinc1,c
  2632  000484  0E00               	movlw	0
  2633  000486  6EE6               	movwf	postinc1,c
  2634  000488  0E6E               	movlw	110
  2635  00048A  6EE6               	movwf	postinc1,c
  2636  00048C  0E00               	movlw	0
  2637  00048E  6EE6               	movwf	postinc1,c
  2638  000490  C001  FFE6         	movff	_task_running,postinc1
  2639  000494  C002  FFE6         	movff	_task_running+1,postinc1
  2640  000498  EC0C  F009         	call	___wmul	;wreg free
  2641  00049C  0E57               	movlw	low (_F_APTOS+105)
  2642  00049E  245D               	addwf	btemp,w,c
  2643  0004A0  6ED9               	movwf	fsr2l,c
  2644  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2645  0004A4  205E               	addwfc	btemp+1,w,c
  2646  0004A6  6EDA               	movwf	fsr2h,c
  2647  0004A8  CFDE F05E          	movff	postinc2,btemp+1
  2648  0004AC  CFDD F05F          	movff	postdec2,btemp+2
  2649  0004B0  C05E  FFE6         	movff	btemp+1,postinc1
  2650  0004B4  C05F  FFE6         	movff	btemp+2,postinc1
  2651  0004B8  EC0C  F009         	call	___wmul	;wreg free
  2652  0004BC  C05D  F065         	movff	btemp,btemp+8
  2653  0004C0  C05E  F066         	movff	btemp+1,btemp+9
  2654  0004C4  0E6E               	movlw	110
  2655  0004C6  6EE6               	movwf	postinc1,c
  2656  0004C8  0E00               	movlw	0
  2657  0004CA  6EE6               	movwf	postinc1,c
  2658  0004CC  C001  FFE6         	movff	_task_running,postinc1
  2659  0004D0  C002  FFE6         	movff	_task_running+1,postinc1
  2660  0004D4  EC0C  F009         	call	___wmul	;wreg free
  2661  0004D8  0EEE               	movlw	low _F_APTOS
  2662  0004DA  6E67               	movwf	btemp+10,c
  2663  0004DC  0E00               	movlw	high _F_APTOS
  2664  0004DE  6E68               	movwf	btemp+11,c
  2665  0004E0  0E0B               	movlw	11
  2666  0004E2  2667               	addwf	btemp+10,f,c
  2667  0004E4  0E00               	movlw	0
  2668  0004E6  2268               	addwfc	btemp+11,f,c
  2669  0004E8  505D               	movf	btemp,w,c
  2670  0004EA  2667               	addwf	btemp+10,f,c
  2671  0004EC  505E               	movf	btemp+1,w,c
  2672  0004EE  2268               	addwfc	btemp+11,f,c
  2673  0004F0  5065               	movf	btemp+8,w,c
  2674  0004F2  2467               	addwf	btemp+10,w,c
  2675  0004F4  6ED9               	movwf	fsr2l,c
  2676  0004F6  5066               	movf	btemp+9,w,c
  2677  0004F8  2068               	addwfc	btemp+11,w,c
  2678  0004FA  6EDA               	movwf	fsr2h,c
  2679  0004FC  50DF               	movf	indf2,w,c
  2680  0004FE  6EFE               	movwf	tosh,c	;volatile
  2681  000500  0E6E               	movlw	110
  2682  000502  6EE6               	movwf	postinc1,c
  2683  000504  0E00               	movlw	0
  2684  000506  6EE6               	movwf	postinc1,c
  2685  000508  C001  FFE6         	movff	_task_running,postinc1
  2686  00050C  C002  FFE6         	movff	_task_running+1,postinc1
  2687  000510  EC0C  F009         	call	___wmul	;wreg free
  2688  000514  0E57               	movlw	low (_F_APTOS+105)
  2689  000516  245D               	addwf	btemp,w,c
  2690  000518  6ED9               	movwf	fsr2l,c
  2691  00051A  0E01               	movlw	high (_F_APTOS+105)
  2692  00051C  205E               	addwfc	btemp+1,w,c
  2693  00051E  6EDA               	movwf	fsr2h,c
  2694  000520  50DE               	movf	postinc2,w,c
  2695  000522  10DE               	iorwf	postinc2,w,c
  2696  000524  A4D8               	btfss	status,2,c
  2697  000526  D718               	goto	l78
  2698  000528                     u45_20:
  2699  000528  0E6E               	movlw	110
  2700  00052A  6EE6               	movwf	postinc1,c
  2701  00052C  0E00               	movlw	0
  2702  00052E  6EE6               	movwf	postinc1,c
  2703  000530  C001  FFE6         	movff	_task_running,postinc1
  2704  000534  C002  FFE6         	movff	_task_running+1,postinc1
  2705  000538  EC0C  F009         	call	___wmul	;wreg free
  2706  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2707  00053E  245D               	addwf	btemp,w,c
  2708  000540  6ED9               	movwf	fsr2l,c
  2709  000542  0E00               	movlw	high (_F_APTOS+8)
  2710  000544  205E               	addwfc	btemp+1,w,c
  2711  000546  6EDA               	movwf	fsr2h,c
  2712  000548  0E02               	movlw	2
  2713  00054A  6EDF               	movwf	indf2,c
  2714  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2715                           
  2716                           ;kernel.c: 50: (INTCONbits.GIE = 1);
  2717  00054E  8EF2               	bsf	intcon,7,c	;volatile
  2718                           
  2719                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2720  000550  52E5               	movf	postdec1,f,c
  2721  000552  0012               	return		;funcret
  2722  000554                     __end_of_dispatcher:
  2723                           	opt stack 0
  2724                           tosu	equ	0xFFF
  2725                           tosh	equ	0xFFE
  2726                           tosl	equ	0xFFD
  2727                           stkptr	equ	0xFFC
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon	equ	0xFF2
  2735                           postinc0	equ	0xFEE
  2736                           plusw0	equ	0xFEB
  2737                           fsr0h	equ	0xFEA
  2738                           fsr0l	equ	0xFE9
  2739                           wreg	equ	0xFE8
  2740                           postinc1	equ	0xFE6
  2741                           postdec1	equ	0xFE5
  2742                           plusw1	equ	0xFE3
  2743                           fsr1h	equ	0xFE2
  2744                           fsr1l	equ	0xFE1
  2745                           bsr	equ	0xFE0
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           plusw2	equ	0xFDB
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _rr_scheduler *****************
  2755 ;; Defined at:
  2756 ;;		line 12 in file "scheduler.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  next_task_to    2  [STACK] unsigned int 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2  [STACK] unsigned int 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2770 ;;      Params:         0       0       0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    5
  2777 ;; This function calls:
  2778 ;;		___lwmod
  2779 ;;		___wmul
  2780 ;; This function is called by:
  2781 ;;		_dispatcher
  2782 ;; This function uses a reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text12
  2786  001334                     __ptext12:
  2787                           	opt stack 0
  2788  001334                     _rr_scheduler:
  2789                           	opt stack 0
  2790                           
  2791                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2792  001334  52E6               	movf	postinc1,f,c
  2793  001336  52E6               	movf	postinc1,f,c
  2794                           
  2795                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2796                           
  2797                           ;incstack = 0
  2798  001338  C001  F05E         	movff	_task_running,btemp+1
  2799  00133C  C002  F05F         	movff	_task_running+1,btemp+2
  2800                           
  2801                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2802  001340  0EFE               	movlw	-2
  2803  001342  C05E  FFE3         	movff	btemp+1,plusw1
  2804  001346  0EFF               	movlw	-1
  2805  001348  C05F  FFE3         	movff	btemp+2,plusw1
  2806  00134C                     l1355:
  2807                           
  2808                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2809  00134C  C003  FFE6         	movff	_tasks_installed,postinc1
  2810  001350  C004  FFE6         	movff	_tasks_installed+1,postinc1
  2811                           
  2812                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2813  001354  0EFC               	movlw	-4
  2814  001356  50E3               	movf	plusw1,w,c
  2815  001358  0F01               	addlw	1
  2816  00135A  6E5E               	movwf	btemp+1,c
  2817  00135C  0EFD               	movlw	-3
  2818  00135E  CFE3 F05F          	movff	plusw1,btemp+2
  2819  001362  0E00               	movlw	0
  2820  001364  225F               	addwfc	btemp+2,f,c
  2821  001366  C05E  FFE6         	movff	btemp+1,postinc1
  2822  00136A  C05F  FFE6         	movff	btemp+2,postinc1
  2823  00136E  EC0D  F008         	call	___lwmod	;wreg free
  2824                           
  2825                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2826  001372  0EFE               	movlw	-2
  2827  001374  C05D  FFE3         	movff	btemp,plusw1
  2828  001378  0EFF               	movlw	-1
  2829  00137A  C05E  FFE3         	movff	btemp+1,plusw1
  2830                           
  2831                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2832  00137E  0E6E               	movlw	110
  2833  001380  6EE6               	movwf	postinc1,c
  2834  001382  0E00               	movlw	0
  2835  001384  6EE6               	movwf	postinc1,c
  2836                           
  2837                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2838  001386  0EFC               	movlw	-4
  2839  001388  CFE3 FFE6          	movff	plusw1,postinc1
  2840  00138C  CFE3 FFE6          	movff	plusw1,postinc1
  2841  001390  EC0C  F009         	call	___wmul	;wreg free
  2842  001394  0EF6               	movlw	low (_F_APTOS+8)
  2843  001396  245D               	addwf	btemp,w,c
  2844  001398  6ED9               	movwf	fsr2l,c
  2845  00139A  0E00               	movlw	high (_F_APTOS+8)
  2846  00139C  205E               	addwfc	btemp+1,w,c
  2847  00139E  6EDA               	movwf	fsr2h,c
  2848  0013A0  04DE               	decf	postinc2,w,c
  2849  0013A2  A4D8               	btfss	status,2,c
  2850  0013A4  D7D3               	goto	l1355
  2851                           
  2852                           ;scheduler.c: 20: return next_task_to_run;
  2853                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2854  0013A6  0EFE               	movlw	-2
  2855  0013A8  CFE3 F05D          	movff	plusw1,btemp
  2856  0013AC  0EFF               	movlw	-1
  2857  0013AE  CFE3 F05E          	movff	plusw1,btemp+1
  2858                           
  2859                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2860  0013B2  52E5               	movf	postdec1,f,c
  2861  0013B4  52E5               	movf	postdec1,f,c
  2862  0013B6  0012               	return		;funcret
  2863  0013B8                     __end_of_rr_scheduler:
  2864                           	opt stack 0
  2865                           tosu	equ	0xFFF
  2866                           tosh	equ	0xFFE
  2867                           tosl	equ	0xFFD
  2868                           stkptr	equ	0xFFC
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           postinc0	equ	0xFEE
  2877                           plusw0	equ	0xFEB
  2878                           fsr0h	equ	0xFEA
  2879                           fsr0l	equ	0xFE9
  2880                           wreg	equ	0xFE8
  2881                           postinc1	equ	0xFE6
  2882                           postdec1	equ	0xFE5
  2883                           plusw1	equ	0xFE3
  2884                           fsr1h	equ	0xFE2
  2885                           fsr1l	equ	0xFE1
  2886                           bsr	equ	0xFE0
  2887                           indf2	equ	0xFDF
  2888                           postinc2	equ	0xFDE
  2889                           postdec2	equ	0xFDD
  2890                           plusw2	equ	0xFDB
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function ___lwmod *****************
  2896 ;; Defined at:
  2897 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  dividend        2  [STACK] unsigned int 
  2900 ;;  divisor         2  [STACK] unsigned int 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  counter         1  [STACK] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  2  [STACK] unsigned int 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2912 ;;      Params:         0       0       0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0
  2915 ;;      Totals:         0       0       0       0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    4
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_rr_scheduler
  2923 ;;		_sem_wait
  2924 ;;		_sem_post
  2925 ;; This function uses a reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text13
  2929  00101A                     __ptext13:
  2930                           	opt stack 0
  2931  00101A                     ___lwmod:
  2932                           	opt stack 0
  2933                           
  2934                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2935  00101A  52E6               	movf	postinc1,f,c
  2936                           
  2937                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2938                           
  2939                           ;incstack = 0
  2940  00101C  0EFB               	movlw	-5
  2941  00101E  CFE3 F05D          	movff	plusw1,btemp
  2942  001022  0EFC               	movlw	-4
  2943  001024  50E3               	movf	plusw1,w,c
  2944  001026  105D               	iorwf	btemp,w,c
  2945  001028  B4D8               	btfsc	status,2,c
  2946  00102A  D04A               	goto	u9_20
  2947                           
  2948                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2949  00102C  0EFF               	movlw	-1
  2950  00102E  6AE3               	clrf	plusw1,c
  2951  001030  D010               	goto	L3
  2952  001032                     l945:
  2953                           
  2954                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2955  001032  0EFB               	movlw	-5
  2956  001034  50E3               	movf	plusw1,w,c
  2957  001036  90D8               	bcf	status,0,c
  2958  001038  34E8               	rlcf	wreg,w,c
  2959  00103A  6E5D               	movwf	btemp,c
  2960  00103C  0EFB               	movlw	-5
  2961  00103E  C05D  FFE3         	movff	btemp,plusw1
  2962  001042  0EFC               	movlw	-4
  2963  001044  50E3               	movf	plusw1,w,c
  2964  001046  34E8               	rlcf	wreg,w,c
  2965  001048  6E5D               	movwf	btemp,c
  2966  00104A  0EFC               	movlw	-4
  2967  00104C  C05D  FFE3         	movff	btemp,plusw1
  2968                           
  2969                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2970  001050  0EFF               	movlw	-1
  2971  001052                     L3:
  2972  001052  2AE3               	incf	plusw1,f,c
  2973                           
  2974                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2975  001054  0EFC               	movlw	-4
  2976  001056  AEE3               	btfss	plusw1,7,c
  2977  001058  D7EC               	goto	l945
  2978  00105A                     u7_20:
  2979                           
  2980                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2981  00105A  0EFB               	movlw	-5
  2982  00105C  CFE3 F05E          	movff	plusw1,btemp+1
  2983  001060  0EFC               	movlw	-4
  2984  001062  CFE3 F05F          	movff	plusw1,btemp+2
  2985                           
  2986                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2987  001066  0EFD               	movlw	-3
  2988  001068  CFE3 F067          	movff	plusw1,btemp+10
  2989  00106C  0EFE               	movlw	-2
  2990  00106E  CFE3 F068          	movff	plusw1,btemp+11
  2991  001072  505E               	movf	btemp+1,w,c
  2992  001074  5C67               	subwf	btemp+10,w,c
  2993  001076  505F               	movf	btemp+2,w,c
  2994  001078  5868               	subwfb	btemp+11,w,c
  2995  00107A  A0D8               	btfss	status,0,c
  2996  00107C  D012               	goto	l955
  2997                           
  2998                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2999                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3000  00107E  0EFD               	movlw	-3
  3001  001080  50E3               	movf	plusw1,w,c
  3002  001082  6E5D               	movwf	btemp,c
  3003  001084  0EFB               	movlw	-5
  3004  001086  50E3               	movf	plusw1,w,c
  3005  001088  5E5D               	subwf	btemp,f,c
  3006  00108A  0EFD               	movlw	-3
  3007  00108C  C05D  FFE3         	movff	btemp,plusw1
  3008  001090  0EFE               	movlw	-2
  3009  001092  50E3               	movf	plusw1,w,c
  3010  001094  6E5D               	movwf	btemp,c
  3011  001096  0EFC               	movlw	-4
  3012  001098  50E3               	movf	plusw1,w,c
  3013  00109A  5A5D               	subwfb	btemp,f,c
  3014  00109C  0EFE               	movlw	-2
  3015  00109E  C05D  FFE3         	movff	btemp,plusw1
  3016  0010A2                     l955:
  3017                           
  3018                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  3019  0010A2  90D8               	bcf	status,0,c
  3020  0010A4  0EFC               	movlw	-4
  3021  0010A6  32E3               	rrcf	plusw1,f,c
  3022  0010A8  0EFB               	movlw	-5
  3023  0010AA  32E3               	rrcf	plusw1,f,c
  3024                           
  3025                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  3026  0010AC  0EFF               	movlw	-1
  3027  0010AE  50E3               	movf	plusw1,w,c
  3028  0010B0  6E5D               	movwf	btemp,c
  3029  0010B2  0E01               	movlw	1
  3030  0010B4  5E5D               	subwf	btemp,f,c
  3031  0010B6  0EFF               	movlw	-1
  3032  0010B8  C05D  FFE3         	movff	btemp,plusw1
  3033  0010BC  A4D8               	btfss	status,2,c
  3034  0010BE  D7CD               	goto	u7_20
  3035  0010C0                     u9_20:
  3036                           
  3037                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  3038  0010C0  0EFD               	movlw	-3
  3039  0010C2  CFE3 F05D          	movff	plusw1,btemp
  3040  0010C6  0EFE               	movlw	-2
  3041  0010C8  CFE3 F05E          	movff	plusw1,btemp+1
  3042                           
  3043                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  3044  0010CC  0EFB               	movlw	251
  3045  0010CE  26E1               	addwf	fsr1l,f,c
  3046  0010D0  0EFF               	movlw	255
  3047  0010D2  22E2               	addwfc	fsr1h,f,c
  3048  0010D4  0012               	return		;funcret
  3049  0010D6                     __end_of___lwmod:
  3050                           	opt stack 0
  3051                           tosu	equ	0xFFF
  3052                           tosh	equ	0xFFE
  3053                           tosl	equ	0xFFD
  3054                           stkptr	equ	0xFFC
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon	equ	0xFF2
  3062                           postinc0	equ	0xFEE
  3063                           plusw0	equ	0xFEB
  3064                           fsr0h	equ	0xFEA
  3065                           fsr0l	equ	0xFE9
  3066                           wreg	equ	0xFE8
  3067                           postinc1	equ	0xFE6
  3068                           postdec1	equ	0xFE5
  3069                           plusw1	equ	0xFE3
  3070                           fsr1h	equ	0xFE2
  3071                           fsr1l	equ	0xFE1
  3072                           bsr	equ	0xFE0
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           plusw2	equ	0xFDB
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _create_pipe *****************
  3082 ;; Defined at:
  3083 ;;		line 10 in file "pipe.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  pipe            2  [STACK] PTR struct pipe
  3086 ;;		 -> pipe1(11), 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;		None
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1  [STACK] void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3098 ;;      Params:         0       0       0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0
  3101 ;;      Totals:         0       0       0       0       0       0       0
  3102 ;;Total ram usage:        0 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    4
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_aviao1
  3109 ;;		_aviao2
  3110 ;; This function uses a reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text14
  3114  0010D6                     __ptext14:
  3115                           	opt stack 0
  3116  0010D6                     _create_pipe:
  3117                           	opt stack 22
  3118                           
  3119                           ;pipe.c: 12: pipe->pos_read_pipe = 0;
  3120                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3121                           
  3122                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3123                           ;incstack = 0
  3124  0010D6  0EFE               	movlw	-2
  3125  0010D8  CFE3 F05E          	movff	plusw1,btemp+1
  3126  0010DC  0EFF               	movlw	-1
  3127  0010DE  CFE3 F05F          	movff	plusw1,btemp+2
  3128  0010E2  0E01               	movlw	1
  3129  0010E4  245E               	addwf	btemp+1,w,c
  3130  0010E6  6ED9               	movwf	fsr2l,c
  3131  0010E8  0E00               	movlw	0
  3132  0010EA  205F               	addwfc	btemp+2,w,c
  3133  0010EC  6EDA               	movwf	fsr2h,c
  3134  0010EE  0E00               	movlw	0
  3135  0010F0  6EDE               	movwf	postinc2,c
  3136  0010F2  0E00               	movlw	0
  3137  0010F4  6EDD               	movwf	postdec2,c
  3138                           
  3139                           ;pipe.c: 13: pipe->pos_write_pipe = 0;
  3140                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3141  0010F6  0EFE               	movlw	-2
  3142  0010F8  CFE3 F05E          	movff	plusw1,btemp+1
  3143  0010FC  0EFF               	movlw	-1
  3144  0010FE  CFE3 F05F          	movff	plusw1,btemp+2
  3145  001102  0E03               	movlw	3
  3146  001104  245E               	addwf	btemp+1,w,c
  3147  001106  6ED9               	movwf	fsr2l,c
  3148  001108  0E00               	movlw	0
  3149  00110A  205F               	addwfc	btemp+2,w,c
  3150  00110C  6EDA               	movwf	fsr2h,c
  3151  00110E  0E00               	movlw	0
  3152  001110  6EDE               	movwf	postinc2,c
  3153  001112  0E00               	movlw	0
  3154  001114  6EDD               	movwf	postdec2,c
  3155                           
  3156                           ;pipe.c: 14: pipe->pipe_itens = 0;
  3157                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3158  001116  0EFE               	movlw	-2
  3159  001118  CFE3 F05E          	movff	plusw1,btemp+1
  3160  00111C  0EFF               	movlw	-1
  3161  00111E  CFE3 F05F          	movff	plusw1,btemp+2
  3162  001122  0E05               	movlw	5
  3163  001124  245E               	addwf	btemp+1,w,c
  3164  001126  6ED9               	movwf	fsr2l,c
  3165  001128  0E00               	movlw	0
  3166  00112A  205F               	addwfc	btemp+2,w,c
  3167  00112C  6EDA               	movwf	fsr2h,c
  3168  00112E  0E00               	movlw	0
  3169  001130  6EDE               	movwf	postinc2,c
  3170  001132  0E00               	movlw	0
  3171  001134  6EDD               	movwf	postdec2,c
  3172                           
  3173                           ;pipe.c: 17: pipe->pos_bloqued_read = 0;
  3174                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3175  001136  0EFE               	movlw	-2
  3176  001138  CFE3 F05E          	movff	plusw1,btemp+1
  3177  00113C  0EFF               	movlw	-1
  3178  00113E  CFE3 F05F          	movff	plusw1,btemp+2
  3179  001142  0E07               	movlw	7
  3180  001144  245E               	addwf	btemp+1,w,c
  3181  001146  6ED9               	movwf	fsr2l,c
  3182  001148  0E00               	movlw	0
  3183  00114A  205F               	addwfc	btemp+2,w,c
  3184  00114C  6EDA               	movwf	fsr2h,c
  3185  00114E  0E00               	movlw	0
  3186  001150  6EDE               	movwf	postinc2,c
  3187  001152  0E00               	movlw	0
  3188  001154  6EDD               	movwf	postdec2,c
  3189                           
  3190                           ;pipe.c: 18: pipe->pos_bloqued_write = 0;
  3191                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  3192  001156  0EFE               	movlw	-2
  3193  001158  CFE3 F05E          	movff	plusw1,btemp+1
  3194  00115C  0EFF               	movlw	-1
  3195  00115E  CFE3 F05F          	movff	plusw1,btemp+2
  3196  001162  0E09               	movlw	9
  3197  001164  245E               	addwf	btemp+1,w,c
  3198  001166  6ED9               	movwf	fsr2l,c
  3199  001168  0E00               	movlw	0
  3200  00116A  205F               	addwfc	btemp+2,w,c
  3201  00116C  6EDA               	movwf	fsr2h,c
  3202  00116E  0E00               	movlw	0
  3203  001170  6EDE               	movwf	postinc2,c
  3204  001172  0E00               	movlw	0
  3205  001174  6EDD               	movwf	postdec2,c
  3206                           
  3207                           ; _create_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, a
      +                          rgsize = 2, vargsize = 0
  3208  001176  52E5               	movf	postdec1,f,c
  3209  001178  52E5               	movf	postdec1,f,c
  3210  00117A  0012               	return		;funcret
  3211  00117C                     __end_of_create_pipe:
  3212                           	opt stack 0
  3213                           tosu	equ	0xFFF
  3214                           tosh	equ	0xFFE
  3215                           tosl	equ	0xFFD
  3216                           stkptr	equ	0xFFC
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           postinc0	equ	0xFEE
  3225                           plusw0	equ	0xFEB
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           postinc1	equ	0xFE6
  3230                           postdec1	equ	0xFE5
  3231                           plusw1	equ	0xFE3
  3232                           fsr1h	equ	0xFE2
  3233                           fsr1l	equ	0xFE1
  3234                           bsr	equ	0xFE0
  3235                           indf2	equ	0xFDF
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           plusw2	equ	0xFDB
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _createAviao *****************
  3244 ;; Defined at:
  3245 ;;		line 17 in file "tasks.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  av              2  [STACK] PTR struct aviao
  3248 ;;		 -> _uDynamicHeap(512), NULL(0), aviaozinho2(6), aviaozinho1(6), 
  3249 ;;  tempo_v         2  [STACK] unsigned int 
  3250 ;;  tempo_p         2  [STACK] unsigned int 
  3251 ;;  numero          2  [STACK] unsigned int 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  6  [STACK] struct aviao
  3256 ;; Registers used:
  3257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, pro
      +dl, prodh
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3263 ;;      Params:         0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    6
  3270 ;; This function calls:
  3271 ;;		_SRAMalloc
  3272 ;; This function is called by:
  3273 ;;		_aviao1
  3274 ;;		_aviao2
  3275 ;; This function uses a reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text15
  3279  00117C                     __ptext15:
  3280                           	opt stack 0
  3281  00117C                     _createAviao:
  3282                           	opt stack 20
  3283                           
  3284                           ;tasks.c: 19: av = (aviao_t*) SRAMalloc(sizeof(aviao_t));
  3285                           
  3286                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
  3287                           ;incstack = 0
  3288  00117C  0E06               	movlw	6
  3289  00117E  6EE6               	movwf	postinc1,c
  3290  001180  EC81  F003         	call	_SRAMalloc	;wreg free
  3291                           
  3292                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3293  001184  0EFF               	movlw	-1
  3294  001186  C05E  FFE3         	movff	btemp+1,plusw1
  3295  00118A  0EFE               	movlw	-2
  3296  00118C  C05D  FFE3         	movff	btemp,plusw1
  3297                           
  3298                           ;tasks.c: 21: av->numero =numero;
  3299                           ;stkvar	createAviao@numero @ sp[(0)+-8]
  3300  001190  50E1               	movf	fsr1l,w,c
  3301  001192  0FF8               	addlw	-8
  3302  001194  6ED9               	movwf	fsr2l,c
  3303  001196  50E2               	movf	fsr1h,w,c
  3304  001198  6EDA               	movwf	fsr2h,c
  3305  00119A  0EFF               	movlw	255
  3306  00119C  22DA               	addwfc	fsr2h,f,c
  3307                           
  3308                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3309  00119E  0EFE               	movlw	-2
  3310  0011A0  CFE3 FFE9          	movff	plusw1,fsr0l
  3311  0011A4  0EFF               	movlw	-1
  3312  0011A6  CFE3 FFEA          	movff	plusw1,fsr0h
  3313  0011AA  CFDE FFEE          	movff	postinc2,postinc0
  3314  0011AE  CFDD FFED          	movff	postdec2,postdec0
  3315                           
  3316                           ;tasks.c: 22: av->tempo_p = tempo_p;
  3317                           ;stkvar	createAviao@tempo_p @ sp[(0)+-6]
  3318  0011B2  50E1               	movf	fsr1l,w,c
  3319  0011B4  0FFA               	addlw	-6
  3320  0011B6  6ED9               	movwf	fsr2l,c
  3321  0011B8  50E2               	movf	fsr1h,w,c
  3322  0011BA  6EDA               	movwf	fsr2h,c
  3323  0011BC  0EFF               	movlw	255
  3324  0011BE  22DA               	addwfc	fsr2h,f,c
  3325                           
  3326                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3327  0011C0  0EFE               	movlw	-2
  3328  0011C2  CFE3 F05E          	movff	plusw1,btemp+1
  3329  0011C6  0EFF               	movlw	-1
  3330  0011C8  CFE3 F05F          	movff	plusw1,btemp+2
  3331  0011CC  0E04               	movlw	4
  3332  0011CE  245E               	addwf	btemp+1,w,c
  3333  0011D0  6EE9               	movwf	fsr0l,c
  3334  0011D2  0E00               	movlw	0
  3335  0011D4  205F               	addwfc	btemp+2,w,c
  3336  0011D6  6EEA               	movwf	fsr0h,c
  3337  0011D8  CFDE FFEE          	movff	postinc2,postinc0
  3338  0011DC  CFDD FFED          	movff	postdec2,postdec0
  3339                           
  3340                           ;tasks.c: 23: av->tempo_v = tempo_v;
  3341                           ;stkvar	createAviao@tempo_v @ sp[(0)+-4]
  3342  0011E0  50E1               	movf	fsr1l,w,c
  3343  0011E2  0FFC               	addlw	-4
  3344  0011E4  6ED9               	movwf	fsr2l,c
  3345  0011E6  50E2               	movf	fsr1h,w,c
  3346  0011E8  6EDA               	movwf	fsr2h,c
  3347  0011EA  0EFF               	movlw	255
  3348  0011EC  22DA               	addwfc	fsr2h,f,c
  3349                           
  3350                           ;stkvar	createAviao@av @ sp[(0)+-2]
  3351  0011EE  0EFE               	movlw	-2
  3352  0011F0  CFE3 F05E          	movff	plusw1,btemp+1
  3353  0011F4  0EFF               	movlw	-1
  3354  0011F6  CFE3 F05F          	movff	plusw1,btemp+2
  3355  0011FA  0E02               	movlw	2
  3356  0011FC  245E               	addwf	btemp+1,w,c
  3357  0011FE  6EE9               	movwf	fsr0l,c
  3358  001200  0E00               	movlw	0
  3359  001202  205F               	addwfc	btemp+2,w,c
  3360  001204  6EEA               	movwf	fsr0h,c
  3361  001206  CFDE FFEE          	movff	postinc2,postinc0
  3362  00120A  CFDD FFED          	movff	postdec2,postdec0
  3363                           
  3364                           ; _createAviao: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, a
      +                          rgsize = 8, vargsize = 0
  3365  00120E  0EF8               	movlw	248
  3366  001210  26E1               	addwf	fsr1l,f,c
  3367  001212  0EFF               	movlw	255
  3368  001214  22E2               	addwfc	fsr1h,f,c
  3369  001216  0012               	return		;funcret
  3370  001218                     __end_of_createAviao:
  3371                           	opt stack 0
  3372                           tosu	equ	0xFFF
  3373                           tosh	equ	0xFFE
  3374                           tosl	equ	0xFFD
  3375                           stkptr	equ	0xFFC
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           intcon	equ	0xFF2
  3383                           postinc0	equ	0xFEE
  3384                           postdec0	equ	0xFED
  3385                           plusw0	equ	0xFEB
  3386                           fsr0h	equ	0xFEA
  3387                           fsr0l	equ	0xFE9
  3388                           wreg	equ	0xFE8
  3389                           postinc1	equ	0xFE6
  3390                           postdec1	equ	0xFE5
  3391                           plusw1	equ	0xFE3
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           bsr	equ	0xFE0
  3395                           indf2	equ	0xFDF
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           plusw2	equ	0xFDB
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _aviao2 *****************
  3404 ;; Defined at:
  3405 ;;		line 47 in file "tasks.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1  [STACK] void 
  3412 ;; Registers used:
  3413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         0       0       0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    8
  3426 ;; This function calls:
  3427 ;;		_createAviao
  3428 ;;		_create_pipe
  3429 ;;		_write_pipe
  3430 ;; This function is called by:
  3431 ;;		_main
  3432 ;; This function uses a reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text16
  3436  0014F6                     __ptext16:
  3437                           	opt stack 0
  3438  0014F6                     _aviao2:
  3439                           	opt stack 19
  3440                           
  3441                           ;tasks.c: 51: createAviao(&aviaozinho2,1000,200, 1);
  3442                           
  3443                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3444                           ;incstack = 0
  3445  0014F6  0E01               	movlw	1
  3446  0014F8  6EE6               	movwf	postinc1,c
  3447  0014FA  0E00               	movlw	0
  3448  0014FC  6EE6               	movwf	postinc1,c
  3449  0014FE  0EC8               	movlw	200
  3450  001500  6EE6               	movwf	postinc1,c
  3451  001502  0E00               	movlw	0
  3452  001504  6EE6               	movwf	postinc1,c
  3453  001506  0EE8               	movlw	232
  3454  001508  6EE6               	movwf	postinc1,c
  3455  00150A  0E03               	movlw	3
  3456  00150C  6EE6               	movwf	postinc1,c
  3457  00150E  0E38               	movlw	low _aviaozinho2
  3458  001510  6EE6               	movwf	postinc1,c
  3459  001512  0E00               	movlw	high _aviaozinho2
  3460  001514  6EE6               	movwf	postinc1,c
  3461  001516  ECBE  F008         	call	_createAviao	;wreg free
  3462                           
  3463                           ;tasks.c: 59: create_pipe(&pipe1);
  3464  00151A  0E2D               	movlw	low _pipe1
  3465  00151C  6EE6               	movwf	postinc1,c
  3466  00151E  0E00               	movlw	high _pipe1
  3467  001520  6EE6               	movwf	postinc1,c
  3468  001522  EC6B  F008         	call	_create_pipe	;wreg free
  3469  001526                     l1551:
  3470                           
  3471                           ;tasks.c: 64: write_pipe(&pipe1, 'm');
  3472  001526  0E6D               	movlw	109
  3473  001528  6EE6               	movwf	postinc1,c
  3474  00152A  0E2D               	movlw	low _pipe1
  3475  00152C  6EE6               	movwf	postinc1,c
  3476  00152E  0E00               	movlw	high _pipe1
  3477  001530  6EE6               	movwf	postinc1,c
  3478  001532  ECB6  F005         	call	_write_pipe	;wreg free
  3479  001536  D7F7               	goto	l1551
  3480  001538                     __end_of_aviao2:
  3481                           	opt stack 0
  3482                           tosu	equ	0xFFF
  3483                           tosh	equ	0xFFE
  3484                           tosl	equ	0xFFD
  3485                           stkptr	equ	0xFFC
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           postdec0	equ	0xFED
  3495                           plusw0	equ	0xFEB
  3496                           fsr0h	equ	0xFEA
  3497                           fsr0l	equ	0xFE9
  3498                           wreg	equ	0xFE8
  3499                           postinc1	equ	0xFE6
  3500                           postdec1	equ	0xFE5
  3501                           plusw1	equ	0xFE3
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           bsr	equ	0xFE0
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           plusw2	equ	0xFDB
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _ctpista *****************
  3514 ;; Defined at:
  3515 ;;		line 70 in file "tasks.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  tp              2  [STACK] unsigned int 
  3520 ;;  tv              2  [STACK] unsigned int 
  3521 ;;  n               2  [STACK] unsigned int 
  3522 ;;  tp              2  [STACK] unsigned int 
  3523 ;;  tv              2  [STACK] unsigned int 
  3524 ;;  n               2  [STACK] unsigned int 
  3525 ;;  dado            1  [STACK] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1  [STACK] void 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3535 ;;      Params:         0       0       0       0       0       0       0
  3536 ;;      Locals:         0       0       0       0       0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0
  3538 ;;      Totals:         0       0       0       0       0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    8
  3542 ;; This function calls:
  3543 ;;		_delay
  3544 ;;		_read_pipe
  3545 ;;		_sem_post
  3546 ;;		_sem_wait
  3547 ;; This function is called by:
  3548 ;;		_main
  3549 ;; This function uses a reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text17
  3553  000554                     __ptext17:
  3554                           	opt stack 0
  3555  000554                     _ctpista:
  3556                           	opt stack 0
  3557                           
  3558                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0
  3559  000554  0E0D               	movlw	13
  3560  000556  26E1               	addwf	fsr1l,f,c
  3561  000558  0E00               	movlw	0
  3562  00055A  22E2               	addwfc	fsr1h,f,c
  3563  00055C                     l154:
  3564                           
  3565                           ;tasks.c: 75: {
  3566                           ;tasks.c: 76: byte dado = read_pipe(&pipe1);
  3567  00055C  0E2D               	movlw	low _pipe1
  3568  00055E  6EE6               	movwf	postinc1,c
  3569  000560  0E00               	movlw	high _pipe1
  3570  000562  6EE6               	movwf	postinc1,c
  3571  000564  EC08  F005         	call	_read_pipe	;wreg free
  3572                           
  3573                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3574  000568  0EFF               	movlw	-1
  3575  00056A  C05D  FFE3         	movff	btemp,plusw1
  3576                           
  3577                           ;tasks.c: 77: if(dado== 'l')
  3578                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3579  00056E  0EFF               	movlw	-1
  3580  000570  CFE3 F05D          	movff	plusw1,btemp
  3581  000574  0E6C               	movlw	108
  3582  000576  185D               	xorwf	btemp,w,c
  3583  000578  A4D8               	btfss	status,2,c
  3584  00057A  D05D               	goto	l1581
  3585                           
  3586                           ;tasks.c: 78: {
  3587                           ;tasks.c: 80: TRISDbits.RD1 = 0;
  3588  00057C  9295               	bcf	3989,1,c	;volatile
  3589                           
  3590                           ;tasks.c: 81: PORTDbits.RD1 = 0;
  3591  00057E  9283               	bcf	3971,1,c	;volatile
  3592                           
  3593                           ;tasks.c: 82: u_int n = aviaozinho1.numero;
  3594  000580  C03E  F05E         	movff	_aviaozinho1,btemp+1
  3595  000584  C03F  F05F         	movff	_aviaozinho1+1,btemp+2
  3596                           
  3597                           ;stkvar	ctpista@n @ sp[(-13)+10]
  3598  000588  0EFD               	movlw	-3
  3599  00058A  C05E  FFE3         	movff	btemp+1,plusw1
  3600  00058E  0EFE               	movlw	-2
  3601  000590  C05F  FFE3         	movff	btemp+2,plusw1
  3602                           
  3603                           ;tasks.c: 83: u_int tv = aviaozinho1.tempo_v;
  3604  000594  EE20  F040         	lfsr	2,_aviaozinho1+2
  3605  000598  CFDE F05E          	movff	postinc2,btemp+1
  3606  00059C  CFDD F05F          	movff	postdec2,btemp+2
  3607                           
  3608                           ;stkvar	ctpista@tv @ sp[(-13)+8]
  3609  0005A0  0EFB               	movlw	-5
  3610  0005A2  C05E  FFE3         	movff	btemp+1,plusw1
  3611  0005A6  0EFC               	movlw	-4
  3612  0005A8  C05F  FFE3         	movff	btemp+2,plusw1
  3613                           
  3614                           ;tasks.c: 84: u_int tp = aviaozinho1.tempo_p;
  3615  0005AC  EE20  F042         	lfsr	2,_aviaozinho1+4
  3616  0005B0  CFDE F05E          	movff	postinc2,btemp+1
  3617  0005B4  CFDD F05F          	movff	postdec2,btemp+2
  3618                           
  3619                           ;stkvar	ctpista@tp @ sp[(-13)+6]
  3620  0005B8  0EF9               	movlw	-7
  3621  0005BA  C05E  FFE3         	movff	btemp+1,plusw1
  3622  0005BE  0EFA               	movlw	-6
  3623  0005C0  C05F  FFE3         	movff	btemp+2,plusw1
  3624                           
  3625                           ;tasks.c: 85: PORTDbits.RD1 = ~PORTDbits.RD1;
  3626  0005C4  A283               	btfss	3971,1,c	;volatile
  3627  0005C6  D002               	goto	u58_20
  3628  0005C8  0E01               	movlw	1
  3629  0005CA  D001               	goto	u58_26
  3630  0005CC                     u58_20:
  3631  0005CC  0E00               	movlw	0
  3632  0005CE                     u58_26:
  3633  0005CE  0AFF               	xorlw	255
  3634  0005D0  6E68               	movwf	btemp+11,c
  3635  0005D2  4668               	rlncf	btemp+11,f,c
  3636  0005D4  5083               	movf	3971,w,c	;volatile
  3637  0005D6  1868               	xorwf	btemp+11,w,c
  3638  0005D8  0BFD               	andlw	-3
  3639  0005DA  1868               	xorwf	btemp+11,w,c
  3640  0005DC  6E83               	movwf	3971,c	;volatile
  3641                           
  3642                           ;tasks.c: 86: pista.aviaozinho.numero=n;
  3643                           ;stkvar	ctpista@n @ sp[(-13)+10]
  3644  0005DE  0EFD               	movlw	-3
  3645  0005E0  CFE3 F005          	movff	plusw1,_pista
  3646  0005E4  0EFE               	movlw	-2
  3647  0005E6  CFE3 F006          	movff	plusw1,_pista+1
  3648                           
  3649                           ;tasks.c: 87: pista.status = 1;
  3650  0005EA  0E00               	movlw	0
  3651  0005EC  6E0C               	movwf	_pista+7,c
  3652  0005EE  0E01               	movlw	1
  3653  0005F0  6E0B               	movwf	_pista+6,c
  3654                           
  3655                           ;tasks.c: 88: sem_wait(&pista.s);
  3656  0005F2  0E0D               	movlw	low (_pista+8)
  3657  0005F4  6EE6               	movwf	postinc1,c
  3658  0005F6  0E00               	movlw	high (_pista+8)
  3659  0005F8  6EE6               	movwf	postinc1,c
  3660  0005FA  EC9F  F007         	call	_sem_wait	;wreg free
  3661                           
  3662                           ;tasks.c: 89: delay(tv+tp);
  3663                           ;stkvar	ctpista@tp @ sp[(-13)+6]
  3664                           ;stkvar	ctpista@tv @ sp[(-13)+8]
  3665  0005FE  0EFB               	movlw	-5
  3666  000600  CFE3 F05E          	movff	plusw1,btemp+1
  3667  000604  0EFC               	movlw	-4
  3668  000606  CFE3 F05F          	movff	plusw1,btemp+2
  3669  00060A  0EF9               	movlw	-7
  3670  00060C  50E3               	movf	plusw1,w,c
  3671  00060E  265E               	addwf	btemp+1,f,c
  3672  000610  0EFA               	movlw	-6
  3673  000612  50E3               	movf	plusw1,w,c
  3674  000614  225F               	addwfc	btemp+2,f,c
  3675  000616  C05E  FFE6         	movff	btemp+1,postinc1
  3676  00061A  C05F  FFE6         	movff	btemp+2,postinc1
  3677  00061E  EC36  F00A         	call	_delay	;wreg free
  3678                           
  3679                           ;tasks.c: 90: sem_post(&pista.s);
  3680  000622  0E0D               	movlw	low (_pista+8)
  3681  000624  6EE6               	movwf	postinc1,c
  3682  000626  0E00               	movlw	high (_pista+8)
  3683  000628  6EE6               	movwf	postinc1,c
  3684  00062A  EC09  F007         	call	_sem_post	;wreg free
  3685                           
  3686                           ;tasks.c: 91: pista.status = 0;
  3687  00062E  6A0B               	clrf	_pista+6,c
  3688  000630  6A0C               	clrf	_pista+7,c
  3689                           
  3690                           ;tasks.c: 92: pista.aviaozinho.numero= 0;
  3691  000632  6A05               	clrf	_pista,c
  3692  000634  6A06               	clrf	_pista+1,c
  3693  000636                     l1581:
  3694                           
  3695                           ;tasks.c: 97: }
  3696                           ;tasks.c: 98: if(dado=='m')
  3697                           ;stkvar	ctpista@dado @ sp[(-13)+12]
  3698  000636  0EFF               	movlw	-1
  3699  000638  CFE3 F05D          	movff	plusw1,btemp
  3700  00063C  0E6D               	movlw	109
  3701  00063E  185D               	xorwf	btemp,w,c
  3702  000640  A4D8               	btfss	status,2,c
  3703  000642  D78C               	goto	l154
  3704                           
  3705                           ;tasks.c: 99: {
  3706                           ;tasks.c: 100: TRISDbits.RD2 = 0;
  3707  000644  9495               	bcf	3989,2,c	;volatile
  3708                           
  3709                           ;tasks.c: 101: PORTDbits.RD2 = 0;
  3710  000646  9483               	bcf	3971,2,c	;volatile
  3711                           
  3712                           ;tasks.c: 102: u_int n = aviaozinho2.numero;
  3713  000648  C038  F05E         	movff	_aviaozinho2,btemp+1
  3714  00064C  C039  F05F         	movff	_aviaozinho2+1,btemp+2
  3715                           
  3716                           ;stkvar	ctpista@n_547 @ sp[(-13)+4]
  3717  000650  0EF7               	movlw	-9
  3718  000652  C05E  FFE3         	movff	btemp+1,plusw1
  3719  000656  0EF8               	movlw	-8
  3720  000658  C05F  FFE3         	movff	btemp+2,plusw1
  3721                           
  3722                           ;tasks.c: 103: u_int tv = aviaozinho2.tempo_v;
  3723  00065C  EE20  F03A         	lfsr	2,_aviaozinho2+2
  3724  000660  CFDE F05E          	movff	postinc2,btemp+1
  3725  000664  CFDD F05F          	movff	postdec2,btemp+2
  3726                           
  3727                           ;stkvar	ctpista@tv_548 @ sp[(-13)+2]
  3728  000668  0EF5               	movlw	-11
  3729  00066A  C05E  FFE3         	movff	btemp+1,plusw1
  3730  00066E  0EF6               	movlw	-10
  3731  000670  C05F  FFE3         	movff	btemp+2,plusw1
  3732                           
  3733                           ;tasks.c: 104: u_int tp = aviaozinho2.tempo_p;
  3734  000674  EE20  F03C         	lfsr	2,_aviaozinho2+4
  3735  000678  CFDE F05E          	movff	postinc2,btemp+1
  3736  00067C  CFDD F05F          	movff	postdec2,btemp+2
  3737                           
  3738                           ;stkvar	ctpista@tp_549 @ sp[(-13)+0]
  3739  000680  0EF3               	movlw	-13
  3740  000682  C05E  FFE3         	movff	btemp+1,plusw1
  3741  000686  0EF4               	movlw	-12
  3742  000688  C05F  FFE3         	movff	btemp+2,plusw1
  3743                           
  3744                           ;tasks.c: 105: PORTDbits.RD2 = ~PORTDbits.RD2;
  3745  00068C  A483               	btfss	3971,2,c	;volatile
  3746  00068E  D002               	goto	u60_20
  3747  000690  0E01               	movlw	1
  3748  000692  D001               	goto	u60_26
  3749  000694                     u60_20:
  3750  000694  0E00               	movlw	0
  3751  000696                     u60_26:
  3752  000696  0AFF               	xorlw	255
  3753  000698  6E68               	movwf	btemp+11,c
  3754  00069A  4668               	rlncf	btemp+11,f,c
  3755  00069C  4668               	rlncf	btemp+11,f,c
  3756  00069E  5083               	movf	3971,w,c	;volatile
  3757  0006A0  1868               	xorwf	btemp+11,w,c
  3758  0006A2  0BFB               	andlw	-5
  3759  0006A4  1868               	xorwf	btemp+11,w,c
  3760  0006A6  6E83               	movwf	3971,c	;volatile
  3761                           
  3762                           ;tasks.c: 106: pista.aviaozinho.numero=n;
  3763                           ;stkvar	ctpista@n_547 @ sp[(-13)+4]
  3764  0006A8  0EF7               	movlw	-9
  3765  0006AA  CFE3 F005          	movff	plusw1,_pista
  3766  0006AE  0EF8               	movlw	-8
  3767  0006B0  CFE3 F006          	movff	plusw1,_pista+1
  3768                           
  3769                           ;tasks.c: 107: pista.status = 1;
  3770  0006B4  0E00               	movlw	0
  3771  0006B6  6E0C               	movwf	_pista+7,c
  3772  0006B8  0E01               	movlw	1
  3773  0006BA  6E0B               	movwf	_pista+6,c
  3774                           
  3775                           ;tasks.c: 108: sem_wait(&pista.s);
  3776  0006BC  0E0D               	movlw	low (_pista+8)
  3777  0006BE  6EE6               	movwf	postinc1,c
  3778  0006C0  0E00               	movlw	high (_pista+8)
  3779  0006C2  6EE6               	movwf	postinc1,c
  3780  0006C4  EC9F  F007         	call	_sem_wait	;wreg free
  3781                           
  3782                           ;tasks.c: 109: delay(tv+tp);
  3783                           ;stkvar	ctpista@tp_549 @ sp[(-13)+0]
  3784                           ;stkvar	ctpista@tv_548 @ sp[(-13)+2]
  3785  0006C8  0EF5               	movlw	-11
  3786  0006CA  CFE3 F05E          	movff	plusw1,btemp+1
  3787  0006CE  0EF6               	movlw	-10
  3788  0006D0  CFE3 F05F          	movff	plusw1,btemp+2
  3789  0006D4  0EF3               	movlw	-13
  3790  0006D6  50E3               	movf	plusw1,w,c
  3791  0006D8  265E               	addwf	btemp+1,f,c
  3792  0006DA  0EF4               	movlw	-12
  3793  0006DC  50E3               	movf	plusw1,w,c
  3794  0006DE  225F               	addwfc	btemp+2,f,c
  3795  0006E0  C05E  FFE6         	movff	btemp+1,postinc1
  3796  0006E4  C05F  FFE6         	movff	btemp+2,postinc1
  3797  0006E8  EC36  F00A         	call	_delay	;wreg free
  3798                           
  3799                           ;tasks.c: 110: sem_post(&pista.s);
  3800  0006EC  0E0D               	movlw	low (_pista+8)
  3801  0006EE  6EE6               	movwf	postinc1,c
  3802  0006F0  0E00               	movlw	high (_pista+8)
  3803  0006F2  6EE6               	movwf	postinc1,c
  3804  0006F4  EC09  F007         	call	_sem_post	;wreg free
  3805                           
  3806                           ;tasks.c: 111: pista.status = 0;
  3807  0006F8  6A0B               	clrf	_pista+6,c
  3808  0006FA  6A0C               	clrf	_pista+7,c
  3809                           
  3810                           ;tasks.c: 112: pista.aviaozinho.numero= 0;
  3811  0006FC  6A05               	clrf	_pista,c
  3812  0006FE  6A06               	clrf	_pista+1,c
  3813  000700  D72D               	goto	l154
  3814  000702                     __end_of_ctpista:
  3815                           	opt stack 0
  3816                           tosu	equ	0xFFF
  3817                           tosh	equ	0xFFE
  3818                           tosl	equ	0xFFD
  3819                           stkptr	equ	0xFFC
  3820                           tblptru	equ	0xFF8
  3821                           tblptrh	equ	0xFF7
  3822                           tblptrl	equ	0xFF6
  3823                           tablat	equ	0xFF5
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           intcon	equ	0xFF2
  3827                           postinc0	equ	0xFEE
  3828                           postdec0	equ	0xFED
  3829                           plusw0	equ	0xFEB
  3830                           fsr0h	equ	0xFEA
  3831                           fsr0l	equ	0xFE9
  3832                           wreg	equ	0xFE8
  3833                           postinc1	equ	0xFE6
  3834                           postdec1	equ	0xFE5
  3835                           plusw1	equ	0xFE3
  3836                           fsr1h	equ	0xFE2
  3837                           fsr1l	equ	0xFE1
  3838                           bsr	equ	0xFE0
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           plusw2	equ	0xFDB
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _sem_wait *****************
  3848 ;; Defined at:
  3849 ;;		line 17 in file "semaphore.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  s               2  [STACK] PTR struct sem
  3852 ;;		 -> pista(24), 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1  [STACK] void 
  3857 ;; Registers used:
  3858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3864 ;;      Params:         0       0       0       0       0       0       0
  3865 ;;      Locals:         0       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0
  3867 ;;      Totals:         0       0       0       0       0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    7
  3871 ;; This function calls:
  3872 ;;		___lwmod
  3873 ;;		_dispatcher
  3874 ;; This function is called by:
  3875 ;;		_ctpista
  3876 ;; This function uses a reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text18
  3880  000F3E                     __ptext18:
  3881                           	opt stack 0
  3882  000F3E                     _sem_wait:
  3883                           	opt stack 19
  3884                           
  3885                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  3886                           
  3887                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3888                           ;incstack = 0
  3889  000F3E  9EF2               	bcf	intcon,7,c	;volatile
  3890                           
  3891                           ;semaphore.c: 22: s->contador--;
  3892                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3893  000F40  0EFE               	movlw	-2
  3894  000F42  CFE3 FFD9          	movff	plusw1,fsr2l
  3895  000F46  0EFF               	movlw	-1
  3896  000F48  CFE3 FFDA          	movff	plusw1,fsr2h
  3897  000F4C  06DE               	decf	postinc2,f,c
  3898  000F4E  0E00               	movlw	0
  3899  000F50  5ADD               	subwfb	postdec2,f,c
  3900                           
  3901                           ;semaphore.c: 23: if (s->contador < 0) {
  3902                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3903  000F52  0EFE               	movlw	-2
  3904  000F54  CFE3 FFD9          	movff	plusw1,fsr2l
  3905  000F58  0EFF               	movlw	-1
  3906  000F5A  CFE3 FFDA          	movff	plusw1,fsr2h
  3907  000F5E  0E01               	movlw	1
  3908  000F60  AEDB               	btfss	plusw2,7,c
  3909  000F62  D057               	goto	l1487
  3910                           
  3911                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  3912                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3913  000F64  0EFE               	movlw	-2
  3914  000F66  CFE3 F05E          	movff	plusw1,btemp+1
  3915  000F6A  0EFF               	movlw	-1
  3916  000F6C  CFE3 F05F          	movff	plusw1,btemp+2
  3917  000F70  0E0C               	movlw	12
  3918  000F72  245E               	addwf	btemp+1,w,c
  3919  000F74  6ED9               	movwf	fsr2l,c
  3920  000F76  0E00               	movlw	0
  3921  000F78  205F               	addwfc	btemp+2,w,c
  3922  000F7A  6EDA               	movwf	fsr2h,c
  3923  000F7C  CFDE F067          	movff	postinc2,btemp+10
  3924  000F80  CFDD F068          	movff	postdec2,btemp+11
  3925  000F84  90D8               	bcf	status,0,c
  3926  000F86  3467               	rlcf	btemp+10,w,c
  3927  000F88  6E5E               	movwf	btemp+1,c
  3928  000F8A  3468               	rlcf	btemp+11,w,c
  3929  000F8C  6E5F               	movwf	btemp+2,c
  3930                           
  3931                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3932  000F8E  0EFE               	movlw	-2
  3933  000F90  50E3               	movf	plusw1,w,c
  3934  000F92  265E               	addwf	btemp+1,f,c
  3935  000F94  0EFF               	movlw	-1
  3936  000F96  50E3               	movf	plusw1,w,c
  3937  000F98  225F               	addwfc	btemp+2,f,c
  3938  000F9A  0E02               	movlw	2
  3939  000F9C  245E               	addwf	btemp+1,w,c
  3940  000F9E  6ED9               	movwf	fsr2l,c
  3941  000FA0  0E00               	movlw	0
  3942  000FA2  205F               	addwfc	btemp+2,w,c
  3943  000FA4  6EDA               	movwf	fsr2h,c
  3944  000FA6  C001  FFDE         	movff	_task_running,postinc2
  3945  000FAA  C002  FFDD         	movff	_task_running+1,postdec2
  3946                           
  3947                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 5;
  3948  000FAE  0E05               	movlw	5
  3949  000FB0  6EE6               	movwf	postinc1,c
  3950  000FB2  0E00               	movlw	0
  3951  000FB4  6EE6               	movwf	postinc1,c
  3952                           
  3953                           ;stkvar	sem_wait@s @ sp[(-2)+-2]
  3954  000FB6  0EFC               	movlw	-4
  3955  000FB8  CFE3 F05E          	movff	plusw1,btemp+1
  3956  000FBC  0EFD               	movlw	-3
  3957  000FBE  CFE3 F05F          	movff	plusw1,btemp+2
  3958  000FC2  0E0C               	movlw	12
  3959  000FC4  245E               	addwf	btemp+1,w,c
  3960  000FC6  6ED9               	movwf	fsr2l,c
  3961  000FC8  0E00               	movlw	0
  3962  000FCA  205F               	addwfc	btemp+2,w,c
  3963  000FCC  6EDA               	movwf	fsr2h,c
  3964  000FCE  CFDE F05E          	movff	postinc2,btemp+1
  3965  000FD2  CFDD F05F          	movff	postdec2,btemp+2
  3966  000FD6  0E01               	movlw	1
  3967  000FD8  265E               	addwf	btemp+1,f,c
  3968  000FDA  0E00               	movlw	0
  3969  000FDC  225F               	addwfc	btemp+2,f,c
  3970  000FDE  C05E  FFE6         	movff	btemp+1,postinc1
  3971  000FE2  C05F  FFE6         	movff	btemp+2,postinc1
  3972  000FE6  EC0D  F008         	call	___lwmod	;wreg free
  3973                           
  3974                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3975  000FEA  0EFE               	movlw	-2
  3976  000FEC  CFE3 F067          	movff	plusw1,btemp+10
  3977  000FF0  0EFF               	movlw	-1
  3978  000FF2  CFE3 F068          	movff	plusw1,btemp+11
  3979  000FF6  0E0C               	movlw	12
  3980  000FF8  2467               	addwf	btemp+10,w,c
  3981  000FFA  6ED9               	movwf	fsr2l,c
  3982  000FFC  0E00               	movlw	0
  3983  000FFE  2068               	addwfc	btemp+11,w,c
  3984  001000  6EDA               	movwf	fsr2h,c
  3985  001002  C05D  FFDE         	movff	btemp,postinc2
  3986  001006  C05E  FFDD         	movff	btemp+1,postdec2
  3987                           
  3988                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  3989  00100A  0E05               	movlw	5
  3990  00100C  6EE6               	movwf	postinc1,c
  3991  00100E  EC0A  F000         	call	_dispatcher	;wreg free
  3992  001012                     l1487:
  3993                           
  3994                           ;semaphore.c: 27: }
  3995                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  3996  001012  8EF2               	bsf	intcon,7,c	;volatile
  3997                           
  3998                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  3999  001014  52E5               	movf	postdec1,f,c
  4000  001016  52E5               	movf	postdec1,f,c
  4001  001018  0012               	return		;funcret
  4002  00101A                     __end_of_sem_wait:
  4003                           	opt stack 0
  4004                           tosu	equ	0xFFF
  4005                           tosh	equ	0xFFE
  4006                           tosl	equ	0xFFD
  4007                           stkptr	equ	0xFFC
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           postinc0	equ	0xFEE
  4016                           postdec0	equ	0xFED
  4017                           plusw0	equ	0xFEB
  4018                           fsr0h	equ	0xFEA
  4019                           fsr0l	equ	0xFE9
  4020                           wreg	equ	0xFE8
  4021                           postinc1	equ	0xFE6
  4022                           postdec1	equ	0xFE5
  4023                           plusw1	equ	0xFE3
  4024                           fsr1h	equ	0xFE2
  4025                           fsr1l	equ	0xFE1
  4026                           bsr	equ	0xFE0
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           plusw2	equ	0xFDB
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _sem_post *****************
  4036 ;; Defined at:
  4037 ;;		line 32 in file "semaphore.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  s               2  [STACK] PTR struct sem
  4040 ;;		 -> pista(24), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1  [STACK] void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4052 ;;      Params:         0       0       0       0       0       0       0
  4053 ;;      Locals:         0       0       0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0       0
  4055 ;;      Totals:         0       0       0       0       0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    7
  4059 ;; This function calls:
  4060 ;;		___lwmod
  4061 ;;		___wmul
  4062 ;;		_dispatcher
  4063 ;; This function is called by:
  4064 ;;		_ctpista
  4065 ;; This function uses a reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text19
  4069  000E12                     __ptext19:
  4070                           	opt stack 0
  4071  000E12                     _sem_post:
  4072                           	opt stack 19
  4073                           
  4074                           ;semaphore.c: 34: (INTCONbits.GIE = 0);
  4075                           
  4076                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4077                           ;incstack = 0
  4078  000E12  9EF2               	bcf	intcon,7,c	;volatile
  4079                           
  4080                           ;semaphore.c: 36: s->contador++;
  4081                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4082  000E14  0EFE               	movlw	-2
  4083  000E16  CFE3 FFD9          	movff	plusw1,fsr2l
  4084  000E1A  0EFF               	movlw	-1
  4085  000E1C  CFE3 FFDA          	movff	plusw1,fsr2h
  4086  000E20  2ADE               	incf	postinc2,f,c
  4087  000E22  0E00               	movlw	0
  4088  000E24  22DD               	addwfc	postdec2,f,c
  4089                           
  4090                           ;semaphore.c: 37: if (s->contador <= 0) {
  4091                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4092  000E26  0EFE               	movlw	-2
  4093  000E28  CFE3 FFD9          	movff	plusw1,fsr2l
  4094  000E2C  0EFF               	movlw	-1
  4095  000E2E  CFE3 FFDA          	movff	plusw1,fsr2h
  4096  000E32  0E01               	movlw	1
  4097  000E34  BEDB               	btfsc	plusw2,7,c
  4098  000E36  D006               	goto	u51_20
  4099  000E38  0E01               	movlw	1
  4100  000E3A  50DB               	movf	plusw2,w,c
  4101  000E3C  E17C               	bnz	l1501
  4102  000E3E  04DE               	decf	postinc2,w,c
  4103  000E40  B0D8               	btfsc	status,0,c
  4104  000E42  D079               	goto	l1501
  4105  000E44                     u51_20:
  4106                           
  4107                           ;semaphore.c: 38: F_APTOS[s->queue.s_queue[s->queue.s_queue_pos_out]].task_state = READY
      +                          ;
  4108  000E44  0E6E               	movlw	110
  4109  000E46  6EE6               	movwf	postinc1,c
  4110  000E48  0E00               	movlw	0
  4111  000E4A  6EE6               	movwf	postinc1,c
  4112                           
  4113                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4114  000E4C  0EFC               	movlw	-4
  4115  000E4E  CFE3 F05E          	movff	plusw1,btemp+1
  4116  000E52  0EFD               	movlw	-3
  4117  000E54  CFE3 F05F          	movff	plusw1,btemp+2
  4118  000E58  0E0E               	movlw	14
  4119  000E5A  245E               	addwf	btemp+1,w,c
  4120  000E5C  6ED9               	movwf	fsr2l,c
  4121  000E5E  0E00               	movlw	0
  4122  000E60  205F               	addwfc	btemp+2,w,c
  4123  000E62  6EDA               	movwf	fsr2h,c
  4124  000E64  CFDE F067          	movff	postinc2,btemp+10
  4125  000E68  CFDD F068          	movff	postdec2,btemp+11
  4126  000E6C  90D8               	bcf	status,0,c
  4127  000E6E  3467               	rlcf	btemp+10,w,c
  4128  000E70  6E5E               	movwf	btemp+1,c
  4129  000E72  3468               	rlcf	btemp+11,w,c
  4130  000E74  6E5F               	movwf	btemp+2,c
  4131                           
  4132                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4133  000E76  0EFC               	movlw	-4
  4134  000E78  50E3               	movf	plusw1,w,c
  4135  000E7A  265E               	addwf	btemp+1,f,c
  4136  000E7C  0EFD               	movlw	-3
  4137  000E7E  50E3               	movf	plusw1,w,c
  4138  000E80  225F               	addwfc	btemp+2,f,c
  4139  000E82  0E02               	movlw	2
  4140  000E84  245E               	addwf	btemp+1,w,c
  4141  000E86  6ED9               	movwf	fsr2l,c
  4142  000E88  0E00               	movlw	0
  4143  000E8A  205F               	addwfc	btemp+2,w,c
  4144  000E8C  6EDA               	movwf	fsr2h,c
  4145  000E8E  CFDE F05E          	movff	postinc2,btemp+1
  4146  000E92  CFDD F05F          	movff	postdec2,btemp+2
  4147  000E96  C05E  FFE6         	movff	btemp+1,postinc1
  4148  000E9A  C05F  FFE6         	movff	btemp+2,postinc1
  4149  000E9E  EC0C  F009         	call	___wmul	;wreg free
  4150  000EA2  0EF6               	movlw	low (_F_APTOS+8)
  4151  000EA4  245D               	addwf	btemp,w,c
  4152  000EA6  6ED9               	movwf	fsr2l,c
  4153  000EA8  0E00               	movlw	high (_F_APTOS+8)
  4154  000EAA  205E               	addwfc	btemp+1,w,c
  4155  000EAC  6EDA               	movwf	fsr2h,c
  4156  000EAE  0E01               	movlw	1
  4157  000EB0  6EDF               	movwf	indf2,c
  4158                           
  4159                           ;semaphore.c: 39: s->queue.s_queue_pos_out = (s->queue.s_queue_pos_out + 1) % s->queue.s
      +                          _queue_pos_in;
  4160                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4161  000EB2  0EFE               	movlw	-2
  4162  000EB4  CFE3 F05E          	movff	plusw1,btemp+1
  4163  000EB8  0EFF               	movlw	-1
  4164  000EBA  CFE3 F05F          	movff	plusw1,btemp+2
  4165  000EBE  0E0C               	movlw	12
  4166  000EC0  245E               	addwf	btemp+1,w,c
  4167  000EC2  6ED9               	movwf	fsr2l,c
  4168  000EC4  0E00               	movlw	0
  4169  000EC6  205F               	addwfc	btemp+2,w,c
  4170  000EC8  6EDA               	movwf	fsr2h,c
  4171  000ECA  CFDE F05E          	movff	postinc2,btemp+1
  4172  000ECE  CFDD F05F          	movff	postdec2,btemp+2
  4173  000ED2  C05E  FFE6         	movff	btemp+1,postinc1
  4174  000ED6  C05F  FFE6         	movff	btemp+2,postinc1
  4175                           
  4176                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  4177  000EDA  0EFC               	movlw	-4
  4178  000EDC  CFE3 F05E          	movff	plusw1,btemp+1
  4179  000EE0  0EFD               	movlw	-3
  4180  000EE2  CFE3 F05F          	movff	plusw1,btemp+2
  4181  000EE6  0E0E               	movlw	14
  4182  000EE8  245E               	addwf	btemp+1,w,c
  4183  000EEA  6ED9               	movwf	fsr2l,c
  4184  000EEC  0E00               	movlw	0
  4185  000EEE  205F               	addwfc	btemp+2,w,c
  4186  000EF0  6EDA               	movwf	fsr2h,c
  4187  000EF2  CFDE F05E          	movff	postinc2,btemp+1
  4188  000EF6  CFDD F05F          	movff	postdec2,btemp+2
  4189  000EFA  0E01               	movlw	1
  4190  000EFC  265E               	addwf	btemp+1,f,c
  4191  000EFE  0E00               	movlw	0
  4192  000F00  225F               	addwfc	btemp+2,f,c
  4193  000F02  C05E  FFE6         	movff	btemp+1,postinc1
  4194  000F06  C05F  FFE6         	movff	btemp+2,postinc1
  4195  000F0A  EC0D  F008         	call	___lwmod	;wreg free
  4196                           
  4197                           ;stkvar	sem_post@s @ sp[(0)+-2]
  4198  000F0E  0EFE               	movlw	-2
  4199  000F10  CFE3 F067          	movff	plusw1,btemp+10
  4200  000F14  0EFF               	movlw	-1
  4201  000F16  CFE3 F068          	movff	plusw1,btemp+11
  4202  000F1A  0E0E               	movlw	14
  4203  000F1C  2467               	addwf	btemp+10,w,c
  4204  000F1E  6ED9               	movwf	fsr2l,c
  4205  000F20  0E00               	movlw	0
  4206  000F22  2068               	addwfc	btemp+11,w,c
  4207  000F24  6EDA               	movwf	fsr2h,c
  4208  000F26  C05D  FFDE         	movff	btemp,postinc2
  4209  000F2A  C05E  FFDD         	movff	btemp+1,postdec2
  4210                           
  4211                           ;semaphore.c: 40: dispatcher(READY);
  4212  000F2E  0E01               	movlw	1
  4213  000F30  6EE6               	movwf	postinc1,c
  4214  000F32  EC0A  F000         	call	_dispatcher	;wreg free
  4215  000F36                     l1501:
  4216                           
  4217                           ;semaphore.c: 41: }
  4218                           ;semaphore.c: 43: (INTCONbits.GIE = 1);
  4219  000F36  8EF2               	bsf	intcon,7,c	;volatile
  4220                           
  4221                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  4222  000F38  52E5               	movf	postdec1,f,c
  4223  000F3A  52E5               	movf	postdec1,f,c
  4224  000F3C  0012               	return		;funcret
  4225  000F3E                     __end_of_sem_post:
  4226                           	opt stack 0
  4227                           tosu	equ	0xFFF
  4228                           tosh	equ	0xFFE
  4229                           tosl	equ	0xFFD
  4230                           stkptr	equ	0xFFC
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           postinc0	equ	0xFEE
  4239                           postdec0	equ	0xFED
  4240                           plusw0	equ	0xFEB
  4241                           fsr0h	equ	0xFEA
  4242                           fsr0l	equ	0xFE9
  4243                           wreg	equ	0xFE8
  4244                           postinc1	equ	0xFE6
  4245                           postdec1	equ	0xFE5
  4246                           plusw1	equ	0xFE3
  4247                           fsr1h	equ	0xFE2
  4248                           fsr1l	equ	0xFE1
  4249                           bsr	equ	0xFE0
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           plusw2	equ	0xFDB
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           
  4258 ;; *************** function _read_pipe *****************
  4259 ;; Defined at:
  4260 ;;		line 50 in file "pipe.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  pipe            2  [STACK] PTR struct pipe
  4263 ;;		 -> pipe1(11), 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  dado            1  [STACK] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1  [STACK] unsigned char 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4275 ;;      Params:         0       0       0       0       0       0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0
  4278 ;;      Totals:         0       0       0       0       0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    7
  4282 ;; This function calls:
  4283 ;;		___wmul
  4284 ;;		_dispatcher
  4285 ;; This function is called by:
  4286 ;;		_ctpista
  4287 ;; This function uses a reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text20
  4291  000A10                     __ptext20:
  4292                           	opt stack 0
  4293  000A10                     _read_pipe:
  4294                           	opt stack 0
  4295                           
  4296                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4297  000A10  52E6               	movf	postinc1,f,c
  4298                           
  4299                           ;pipe.c: 52: byte dado;
  4300                           ;pipe.c: 55: if (pipe->pipe_itens == 0) {
  4301                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4302                           
  4303                           ;incstack = 0
  4304  000A12  0EFD               	movlw	-3
  4305  000A14  CFE3 F05E          	movff	plusw1,btemp+1
  4306  000A18  0EFE               	movlw	-2
  4307  000A1A  CFE3 F05F          	movff	plusw1,btemp+2
  4308  000A1E  0E05               	movlw	5
  4309  000A20  245E               	addwf	btemp+1,w,c
  4310  000A22  6ED9               	movwf	fsr2l,c
  4311  000A24  0E00               	movlw	0
  4312  000A26  205F               	addwfc	btemp+2,w,c
  4313  000A28  6EDA               	movwf	fsr2h,c
  4314  000A2A  50DE               	movf	postinc2,w,c
  4315  000A2C  10DE               	iorwf	postinc2,w,c
  4316  000A2E  A4D8               	btfss	status,2,c
  4317  000A30  D014               	goto	l1459
  4318                           
  4319                           ;pipe.c: 58: pipe->pos_bloqued_read = task_running;
  4320                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4321  000A32  0EFD               	movlw	-3
  4322  000A34  CFE3 F05E          	movff	plusw1,btemp+1
  4323  000A38  0EFE               	movlw	-2
  4324  000A3A  CFE3 F05F          	movff	plusw1,btemp+2
  4325  000A3E  0E07               	movlw	7
  4326  000A40  245E               	addwf	btemp+1,w,c
  4327  000A42  6ED9               	movwf	fsr2l,c
  4328  000A44  0E00               	movlw	0
  4329  000A46  205F               	addwfc	btemp+2,w,c
  4330  000A48  6EDA               	movwf	fsr2h,c
  4331  000A4A  C001  FFDE         	movff	_task_running,postinc2
  4332  000A4E  C002  FFDD         	movff	_task_running+1,postdec2
  4333                           
  4334                           ;pipe.c: 59: dispatcher(WAITING_PIPE);
  4335  000A52  0E06               	movlw	6
  4336  000A54  6EE6               	movwf	postinc1,c
  4337  000A56  EC0A  F000         	call	_dispatcher	;wreg free
  4338  000A5A                     l1459:
  4339                           
  4340                           ;pipe.c: 60: }
  4341                           ;pipe.c: 62: dado = pipe->pipe_queue[pipe->pos_read_pipe];
  4342                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4343  000A5A  0EFD               	movlw	-3
  4344  000A5C  CFE3 F05E          	movff	plusw1,btemp+1
  4345  000A60  0EFE               	movlw	-2
  4346  000A62  CFE3 F05F          	movff	plusw1,btemp+2
  4347  000A66  0E01               	movlw	1
  4348  000A68  245E               	addwf	btemp+1,w,c
  4349  000A6A  6ED9               	movwf	fsr2l,c
  4350  000A6C  0E00               	movlw	0
  4351  000A6E  205F               	addwfc	btemp+2,w,c
  4352  000A70  6EDA               	movwf	fsr2h,c
  4353  000A72  CFDE F05E          	movff	postinc2,btemp+1
  4354  000A76  CFDD F05F          	movff	postdec2,btemp+2
  4355                           
  4356                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4357  000A7A  0EFD               	movlw	-3
  4358  000A7C  CFE3 F067          	movff	plusw1,btemp+10
  4359  000A80  0EFE               	movlw	-2
  4360  000A82  CFE3 F068          	movff	plusw1,btemp+11
  4361  000A86  505E               	movf	btemp+1,w,c
  4362  000A88  2467               	addwf	btemp+10,w,c
  4363  000A8A  6ED9               	movwf	fsr2l,c
  4364  000A8C  505F               	movf	btemp+2,w,c
  4365  000A8E  2068               	addwfc	btemp+11,w,c
  4366  000A90  6EDA               	movwf	fsr2h,c
  4367  000A92  50DF               	movf	indf2,w,c
  4368  000A94  6E68               	movwf	btemp+11,c
  4369                           
  4370                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  4371  000A96  0EFF               	movlw	-1
  4372  000A98  C068  FFE3         	movff	btemp+11,plusw1
  4373                           
  4374                           ;pipe.c: 63: pipe->pos_read_pipe = (pipe->pos_read_pipe + 1) % 1;
  4375                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4376  000A9C  0EFD               	movlw	-3
  4377  000A9E  CFE3 F05E          	movff	plusw1,btemp+1
  4378  000AA2  0EFE               	movlw	-2
  4379  000AA4  CFE3 F05F          	movff	plusw1,btemp+2
  4380  000AA8  0E01               	movlw	1
  4381  000AAA  245E               	addwf	btemp+1,w,c
  4382  000AAC  6ED9               	movwf	fsr2l,c
  4383  000AAE  0E00               	movlw	0
  4384  000AB0  205F               	addwfc	btemp+2,w,c
  4385  000AB2  6EDA               	movwf	fsr2h,c
  4386  000AB4  0E00               	movlw	0
  4387  000AB6  6EDE               	movwf	postinc2,c
  4388  000AB8  0E00               	movlw	0
  4389  000ABA  6EDD               	movwf	postdec2,c
  4390                           
  4391                           ;pipe.c: 64: pipe->pipe_itens--;
  4392                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4393  000ABC  0EFD               	movlw	-3
  4394  000ABE  CFE3 F05E          	movff	plusw1,btemp+1
  4395  000AC2  0EFE               	movlw	-2
  4396  000AC4  CFE3 F05F          	movff	plusw1,btemp+2
  4397  000AC8  0E05               	movlw	5
  4398  000ACA  245E               	addwf	btemp+1,w,c
  4399  000ACC  6ED9               	movwf	fsr2l,c
  4400  000ACE  0E00               	movlw	0
  4401  000AD0  205F               	addwfc	btemp+2,w,c
  4402  000AD2  6EDA               	movwf	fsr2h,c
  4403  000AD4  06DE               	decf	postinc2,f,c
  4404  000AD6  0E00               	movlw	0
  4405  000AD8  5ADD               	subwfb	postdec2,f,c
  4406                           
  4407                           ;pipe.c: 67: if (pipe->pos_bloqued_write > 0) {
  4408                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4409  000ADA  0EFD               	movlw	-3
  4410  000ADC  CFE3 F05E          	movff	plusw1,btemp+1
  4411  000AE0  0EFE               	movlw	-2
  4412  000AE2  CFE3 F05F          	movff	plusw1,btemp+2
  4413  000AE6  0E09               	movlw	9
  4414  000AE8  245E               	addwf	btemp+1,w,c
  4415  000AEA  6ED9               	movwf	fsr2l,c
  4416  000AEC  0E00               	movlw	0
  4417  000AEE  205F               	addwfc	btemp+2,w,c
  4418  000AF0  6EDA               	movwf	fsr2h,c
  4419  000AF2  50DE               	movf	postinc2,w,c
  4420  000AF4  10DE               	iorwf	postinc2,w,c
  4421  000AF6  B4D8               	btfsc	status,2,c
  4422  000AF8  D032               	goto	l1471
  4423                           
  4424                           ;pipe.c: 68: F_APTOS[pipe->pos_bloqued_write].task_state = READY;
  4425  000AFA  0E6E               	movlw	110
  4426  000AFC  6EE6               	movwf	postinc1,c
  4427  000AFE  0E00               	movlw	0
  4428  000B00  6EE6               	movwf	postinc1,c
  4429                           
  4430                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  4431  000B02  0EFB               	movlw	-5
  4432  000B04  CFE3 F05E          	movff	plusw1,btemp+1
  4433  000B08  0EFC               	movlw	-4
  4434  000B0A  CFE3 F05F          	movff	plusw1,btemp+2
  4435  000B0E  0E09               	movlw	9
  4436  000B10  245E               	addwf	btemp+1,w,c
  4437  000B12  6ED9               	movwf	fsr2l,c
  4438  000B14  0E00               	movlw	0
  4439  000B16  205F               	addwfc	btemp+2,w,c
  4440  000B18  6EDA               	movwf	fsr2h,c
  4441  000B1A  CFDE F05E          	movff	postinc2,btemp+1
  4442  000B1E  CFDD F05F          	movff	postdec2,btemp+2
  4443  000B22  C05E  FFE6         	movff	btemp+1,postinc1
  4444  000B26  C05F  FFE6         	movff	btemp+2,postinc1
  4445  000B2A  EC0C  F009         	call	___wmul	;wreg free
  4446  000B2E  0EF6               	movlw	low (_F_APTOS+8)
  4447  000B30  245D               	addwf	btemp,w,c
  4448  000B32  6ED9               	movwf	fsr2l,c
  4449  000B34  0E00               	movlw	high (_F_APTOS+8)
  4450  000B36  205E               	addwfc	btemp+1,w,c
  4451  000B38  6EDA               	movwf	fsr2h,c
  4452  000B3A  0E01               	movlw	1
  4453  000B3C  6EDF               	movwf	indf2,c
  4454                           
  4455                           ;pipe.c: 69: pipe->pos_bloqued_write = 0;
  4456                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  4457  000B3E  0EFD               	movlw	-3
  4458  000B40  CFE3 F05E          	movff	plusw1,btemp+1
  4459  000B44  0EFE               	movlw	-2
  4460  000B46  CFE3 F05F          	movff	plusw1,btemp+2
  4461  000B4A  0E09               	movlw	9
  4462  000B4C  245E               	addwf	btemp+1,w,c
  4463  000B4E  6ED9               	movwf	fsr2l,c
  4464  000B50  0E00               	movlw	0
  4465  000B52  205F               	addwfc	btemp+2,w,c
  4466  000B54  6EDA               	movwf	fsr2h,c
  4467  000B56  0E00               	movlw	0
  4468  000B58  6EDE               	movwf	postinc2,c
  4469  000B5A  0E00               	movlw	0
  4470  000B5C  6EDD               	movwf	postdec2,c
  4471  000B5E                     l1471:
  4472                           
  4473                           ;pipe.c: 73: }
  4474                           ;pipe.c: 75: return dado;
  4475                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  4476  000B5E  0EFF               	movlw	-1
  4477  000B60  CFE3 F05D          	movff	plusw1,btemp
  4478                           
  4479                           ; _read_pipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  4480  000B64  52E5               	movf	postdec1,f,c
  4481  000B66  52E5               	movf	postdec1,f,c
  4482  000B68  52E5               	movf	postdec1,f,c
  4483  000B6A  0012               	return		;funcret
  4484  000B6C                     __end_of_read_pipe:
  4485                           	opt stack 0
  4486                           tosu	equ	0xFFF
  4487                           tosh	equ	0xFFE
  4488                           tosl	equ	0xFFD
  4489                           stkptr	equ	0xFFC
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           postinc0	equ	0xFEE
  4498                           postdec0	equ	0xFED
  4499                           plusw0	equ	0xFEB
  4500                           fsr0h	equ	0xFEA
  4501                           fsr0l	equ	0xFE9
  4502                           wreg	equ	0xFE8
  4503                           postinc1	equ	0xFE6
  4504                           postdec1	equ	0xFE5
  4505                           plusw1	equ	0xFE3
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           bsr	equ	0xFE0
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           plusw2	equ	0xFDB
  4513                           fsr2h	equ	0xFDA
  4514                           fsr2l	equ	0xFD9
  4515                           status	equ	0xFD8
  4516                           
  4517 ;; *************** function _delay *****************
  4518 ;; Defined at:
  4519 ;;		line 58 in file "kernel.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  time_ms         2  [STACK] unsigned int 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;		None
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1  [STACK] void 
  4526 ;; Registers used:
  4527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4533 ;;      Params:         0       0       0       0       0       0       0
  4534 ;;      Locals:         0       0       0       0       0       0       0
  4535 ;;      Temps:          0       0       0       0       0       0       0
  4536 ;;      Totals:         0       0       0       0       0       0       0
  4537 ;;Total ram usage:        0 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    7
  4540 ;; This function calls:
  4541 ;;		___wmul
  4542 ;;		_dispatcher
  4543 ;; This function is called by:
  4544 ;;		_ctpista
  4545 ;; This function uses a reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text21
  4549  00146C                     __ptext21:
  4550                           	opt stack 0
  4551  00146C                     _delay:
  4552                           	opt stack 19
  4553                           
  4554                           ;kernel.c: 60: (INTCONbits.GIE = 0);
  4555                           
  4556                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4557                           ;incstack = 0
  4558  00146C  9EF2               	bcf	intcon,7,c	;volatile
  4559                           
  4560                           ;kernel.c: 62: F_APTOS[task_running].delay_time = time_ms;
  4561  00146E  0E6E               	movlw	110
  4562  001470  6EE6               	movwf	postinc1,c
  4563  001472  0E00               	movlw	0
  4564  001474  6EE6               	movwf	postinc1,c
  4565  001476  C001  FFE6         	movff	_task_running,postinc1
  4566  00147A  C002  FFE6         	movff	_task_running+1,postinc1
  4567  00147E  EC0C  F009         	call	___wmul	;wreg free
  4568  001482  0EF4               	movlw	low (_F_APTOS+6)
  4569  001484  245D               	addwf	btemp,w,c
  4570  001486  6EE9               	movwf	fsr0l,c
  4571  001488  0E00               	movlw	high (_F_APTOS+6)
  4572  00148A  205E               	addwfc	btemp+1,w,c
  4573  00148C  6EEA               	movwf	fsr0h,c
  4574                           
  4575                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  4576  00148E  50E1               	movf	fsr1l,w,c
  4577  001490  0FFE               	addlw	-2
  4578  001492  6ED9               	movwf	fsr2l,c
  4579  001494  50E2               	movf	fsr1h,w,c
  4580  001496  6EDA               	movwf	fsr2h,c
  4581  001498  0EFF               	movlw	255
  4582  00149A  22DA               	addwfc	fsr2h,f,c
  4583  00149C  CFDE FFEE          	movff	postinc2,postinc0
  4584  0014A0  CFDD FFED          	movff	postdec2,postdec0
  4585                           
  4586                           ;kernel.c: 63: dispatcher(SLEEPING);
  4587  0014A4  0E03               	movlw	3
  4588  0014A6  6EE6               	movwf	postinc1,c
  4589  0014A8  EC0A  F000         	call	_dispatcher	;wreg free
  4590                           
  4591                           ;kernel.c: 65: (INTCONbits.GIE = 1);
  4592  0014AC  8EF2               	bsf	intcon,7,c	;volatile
  4593                           
  4594                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  4595  0014AE  52E5               	movf	postdec1,f,c
  4596  0014B0  52E5               	movf	postdec1,f,c
  4597  0014B2  0012               	return		;funcret
  4598  0014B4                     __end_of_delay:
  4599                           	opt stack 0
  4600                           tosu	equ	0xFFF
  4601                           tosh	equ	0xFFE
  4602                           tosl	equ	0xFFD
  4603                           stkptr	equ	0xFFC
  4604                           tblptru	equ	0xFF8
  4605                           tblptrh	equ	0xFF7
  4606                           tblptrl	equ	0xFF6
  4607                           tablat	equ	0xFF5
  4608                           prodh	equ	0xFF4
  4609                           prodl	equ	0xFF3
  4610                           intcon	equ	0xFF2
  4611                           postinc0	equ	0xFEE
  4612                           postdec0	equ	0xFED
  4613                           plusw0	equ	0xFEB
  4614                           fsr0h	equ	0xFEA
  4615                           fsr0l	equ	0xFE9
  4616                           wreg	equ	0xFE8
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           plusw1	equ	0xFE3
  4620                           fsr1h	equ	0xFE2
  4621                           fsr1l	equ	0xFE1
  4622                           bsr	equ	0xFE0
  4623                           indf2	equ	0xFDF
  4624                           postinc2	equ	0xFDE
  4625                           postdec2	equ	0xFDD
  4626                           plusw2	equ	0xFDB
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _task_idle *****************
  4632 ;; Defined at:
  4633 ;;		line 68 in file "kernel.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1  [STACK] void 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0, btemp+11
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4647 ;;      Params:         0       0       0       0       0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0
  4650 ;;      Totals:         0       0       0       0       0       0       0
  4651 ;;Total ram usage:        0 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    4
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_setupOS
  4658 ;; This function uses a reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text22
  4662  0015EA                     __ptext22:
  4663                           	opt stack 0
  4664  0015EA                     _task_idle:
  4665                           	opt stack 23
  4666                           
  4667                           ;kernel.c: 70: TRISDbits.RD4 = 0;
  4668                           
  4669                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  4670                           ;incstack = 0
  4671  0015EA  9895               	bcf	3989,4,c	;volatile
  4672  0015EC                     l1221:
  4673                           
  4674                           ;kernel.c: 73: PORTDbits.RD4 = ~PORTDbits.RD4;
  4675  0015EC  A883               	btfss	3971,4,c	;volatile
  4676  0015EE  D002               	goto	u28_20
  4677  0015F0  0E01               	movlw	1
  4678  0015F2  D001               	goto	u28_26
  4679  0015F4                     u28_20:
  4680  0015F4  0E00               	movlw	0
  4681  0015F6                     u28_26:
  4682  0015F6  0AFF               	xorlw	255
  4683  0015F8  6E68               	movwf	btemp+11,c
  4684  0015FA  3A68               	swapf	btemp+11,f,c
  4685  0015FC  5083               	movf	3971,w,c	;volatile
  4686  0015FE  1868               	xorwf	btemp+11,w,c
  4687  001600  0BEF               	andlw	-17
  4688  001602  1868               	xorwf	btemp+11,w,c
  4689  001604  6E83               	movwf	3971,c	;volatile
  4690                           
  4691                           ;kernel.c: 74: __nop();
  4692  001606  F000               	nop	
  4693  001608  D7F1               	goto	l1221
  4694  00160A                     __end_of_task_idle:
  4695                           	opt stack 0
  4696                           tosu	equ	0xFFF
  4697                           tosh	equ	0xFFE
  4698                           tosl	equ	0xFFD
  4699                           stkptr	equ	0xFFC
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           postinc0	equ	0xFEE
  4708                           postdec0	equ	0xFED
  4709                           plusw0	equ	0xFEB
  4710                           fsr0h	equ	0xFEA
  4711                           fsr0l	equ	0xFE9
  4712                           wreg	equ	0xFE8
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           plusw1	equ	0xFE3
  4716                           fsr1h	equ	0xFE2
  4717                           fsr1l	equ	0xFE1
  4718                           bsr	equ	0xFE0
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           plusw2	equ	0xFDB
  4723                           fsr2h	equ	0xFDA
  4724                           fsr2l	equ	0xFD9
  4725                           status	equ	0xFD8
  4726                           
  4727 ;; *************** function _int_high *****************
  4728 ;; Defined at:
  4729 ;;		line 102 in file "kernel.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  i               2   15[COMRAM] unsigned int 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4743 ;;      Params:         0       0       0       0       0       0       0
  4744 ;;      Locals:         2       0       0       0       0       0       0
  4745 ;;      Temps:         15       0       0       0       0       0       0
  4746 ;;      Totals:        17       0       0       0       0       0       0
  4747 ;;Total ram usage:       17 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    3
  4750 ;; This function calls:
  4751 ;;		___wmul
  4752 ;;		_dispatcher
  4753 ;; This function is called by:
  4754 ;;		Interrupt level 2
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	intcode
  4759  000008                     __pintcode:
  4760                           	opt stack 0
  4761  000008                     _int_high:
  4762                           	opt stack 19
  4763                           
  4764                           ;incstack = 0
  4765  000008  ED52  F004         	call	int_func,f	;refresh shadow registers
  4766                           tosu	equ	0xFFF
  4767                           tosh	equ	0xFFE
  4768                           tosl	equ	0xFFD
  4769                           stkptr	equ	0xFFC
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           intcon	equ	0xFF2
  4777                           postinc0	equ	0xFEE
  4778                           postdec0	equ	0xFED
  4779                           plusw0	equ	0xFEB
  4780                           fsr0h	equ	0xFEA
  4781                           fsr0l	equ	0xFE9
  4782                           wreg	equ	0xFE8
  4783                           postinc1	equ	0xFE6
  4784                           postdec1	equ	0xFE5
  4785                           plusw1	equ	0xFE3
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           bsr	equ	0xFE0
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           postdec2	equ	0xFDD
  4792                           plusw2	equ	0xFDB
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797                           	psect	intcode_body
  4798  0008A4                     __pintcode_body:
  4799                           	opt stack 19
  4800  0008A4                     int_func:
  4801                           	opt stack 19
  4802  0008A4  0006               	pop		; remove dummy address from shadow register refresh
  4803  0008A6  CFE1 F046          	movff	fsr1l,??_int_high+2
  4804  0008AA  CFE2 F047          	movff	fsr1h,??_int_high+3
  4805  0008AE  CFD9 F048          	movff	fsr2l,??_int_high+4
  4806  0008B2  CFDA F049          	movff	fsr2h,??_int_high+5
  4807  0008B6  CFF3 F04A          	movff	prodl,??_int_high+6
  4808  0008BA  CFF4 F04B          	movff	prodh,??_int_high+7
  4809  0008BE  C05D  F04C         	movff	btemp,??_int_high+8
  4810  0008C2  C05E  F04D         	movff	btemp+1,??_int_high+9
  4811  0008C6  C05F  F04E         	movff	btemp+2,??_int_high+10
  4812  0008CA  C065  F04F         	movff	btemp+8,??_int_high+11
  4813  0008CE  C066  F050         	movff	btemp+9,??_int_high+12
  4814  0008D2  C067  F051         	movff	btemp+10,??_int_high+13
  4815  0008D6  C068  F052         	movff	btemp+11,??_int_high+14
  4816  0008DA  EE15  F064         	lfsr	1,___inthi_sp
  4817                           
  4818                           ;kernel.c: 104: u_int i;
  4819                           ;kernel.c: 106: if (INTCONbits.TMR0IF) {
  4820  0008DE  A4F2               	btfss	intcon,2,c	;volatile
  4821  0008E0  D07C               	goto	i2l106
  4822                           
  4823                           ;kernel.c: 107: INTCONbits.TMR0IF = 0;
  4824  0008E2  94F2               	bcf	intcon,2,c	;volatile
  4825                           
  4826                           ;kernel.c: 108: TMR0L = 252;
  4827  0008E4  0EFC               	movlw	252
  4828  0008E6  6ED6               	movwf	4054,c	;volatile
  4829                           
  4830                           ;kernel.c: 110: for (i = 1; i < tasks_installed; i++) {
  4831  0008E8  0E00               	movlw	0
  4832  0008EA  6E54               	movwf	int_high@i+1,c
  4833  0008EC  0E01               	movlw	1
  4834  0008EE  6E53               	movwf	int_high@i,c
  4835  0008F0  D05F               	goto	i2l101
  4836  0008F2                     
  4837                           ;kernel.c: 111: if (F_APTOS[i].task_state == SLEEPING) {
  4838  0008F2  0E6E               	movlw	110
  4839  0008F4  6EE6               	movwf	postinc1,c
  4840  0008F6  0E00               	movlw	0
  4841  0008F8  6EE6               	movwf	postinc1,c
  4842  0008FA  C053  FFE6         	movff	int_high@i,postinc1
  4843  0008FE  C054  FFE6         	movff	int_high@i+1,postinc1
  4844  000902  EC0C  F009         	call	___wmul	;wreg free
  4845  000906  0E08               	movlw	8
  4846  000908  265D               	addwf	btemp,f,c
  4847  00090A  0E00               	movlw	0
  4848  00090C  225E               	addwfc	btemp+1,f,c
  4849  00090E  0EEE               	movlw	low _F_APTOS
  4850  000910  245D               	addwf	btemp,w,c
  4851  000912  6ED9               	movwf	fsr2l,c
  4852  000914  0E00               	movlw	high _F_APTOS
  4853  000916  205E               	addwfc	btemp+1,w,c
  4854  000918  6EDA               	movwf	fsr2h,c
  4855  00091A  0E03               	movlw	3
  4856  00091C  18DE               	xorwf	postinc2,w,c
  4857  00091E  A4D8               	btfss	status,2,c
  4858  000920  D045               	goto	i2l104
  4859                           
  4860                           ;kernel.c: 112: F_APTOS[i].delay_time--;
  4861  000922  0E6E               	movlw	110
  4862  000924  6EE6               	movwf	postinc1,c
  4863  000926  0E00               	movlw	0
  4864  000928  6EE6               	movwf	postinc1,c
  4865  00092A  C053  FFE6         	movff	int_high@i,postinc1
  4866  00092E  C054  FFE6         	movff	int_high@i+1,postinc1
  4867  000932  EC0C  F009         	call	___wmul	;wreg free
  4868  000936  0E06               	movlw	6
  4869  000938  265D               	addwf	btemp,f,c
  4870  00093A  0E00               	movlw	0
  4871  00093C  225E               	addwfc	btemp+1,f,c
  4872  00093E  0EEE               	movlw	low _F_APTOS
  4873  000940  245D               	addwf	btemp,w,c
  4874  000942  6ED9               	movwf	fsr2l,c
  4875  000944  0E00               	movlw	high _F_APTOS
  4876  000946  205E               	addwfc	btemp+1,w,c
  4877  000948  6EDA               	movwf	fsr2h,c
  4878  00094A  06DE               	decf	postinc2,f,c
  4879  00094C  0E00               	movlw	0
  4880  00094E  5ADD               	subwfb	postdec2,f,c
  4881                           
  4882                           ;kernel.c: 113: if (F_APTOS[i].delay_time == 0) {
  4883  000950  0E6E               	movlw	110
  4884  000952  6EE6               	movwf	postinc1,c
  4885  000954  0E00               	movlw	0
  4886  000956  6EE6               	movwf	postinc1,c
  4887  000958  C053  FFE6         	movff	int_high@i,postinc1
  4888  00095C  C054  FFE6         	movff	int_high@i+1,postinc1
  4889  000960  EC0C  F009         	call	___wmul	;wreg free
  4890  000964  0E06               	movlw	6
  4891  000966  265D               	addwf	btemp,f,c
  4892  000968  0E00               	movlw	0
  4893  00096A  225E               	addwfc	btemp+1,f,c
  4894  00096C  0EEE               	movlw	low _F_APTOS
  4895  00096E  245D               	addwf	btemp,w,c
  4896  000970  6ED9               	movwf	fsr2l,c
  4897  000972  0E00               	movlw	high _F_APTOS
  4898  000974  205E               	addwfc	btemp+1,w,c
  4899  000976  6EDA               	movwf	fsr2h,c
  4900  000978  50DE               	movf	postinc2,w,c
  4901  00097A  10DE               	iorwf	postinc2,w,c
  4902  00097C  A4D8               	btfss	status,2,c
  4903  00097E  D016               	goto	i2l104
  4904                           
  4905                           ;kernel.c: 114: F_APTOS[i].task_state = READY;
  4906  000980  0E6E               	movlw	110
  4907  000982  6EE6               	movwf	postinc1,c
  4908  000984  0E00               	movlw	0
  4909  000986  6EE6               	movwf	postinc1,c
  4910  000988  C053  FFE6         	movff	int_high@i,postinc1
  4911  00098C  C054  FFE6         	movff	int_high@i+1,postinc1
  4912  000990  EC0C  F009         	call	___wmul	;wreg free
  4913  000994  0E08               	movlw	8
  4914  000996  265D               	addwf	btemp,f,c
  4915  000998  0E00               	movlw	0
  4916  00099A  225E               	addwfc	btemp+1,f,c
  4917  00099C  0EEE               	movlw	low _F_APTOS
  4918  00099E  245D               	addwf	btemp,w,c
  4919  0009A0  6ED9               	movwf	fsr2l,c
  4920  0009A2  0E00               	movlw	high _F_APTOS
  4921  0009A4  205E               	addwfc	btemp+1,w,c
  4922  0009A6  6EDA               	movwf	fsr2h,c
  4923  0009A8  0E01               	movlw	1
  4924  0009AA  6EDF               	movwf	indf2,c
  4925  0009AC                     i2l104:
  4926  0009AC  4A53               	infsnz	int_high@i,f,c
  4927  0009AE  2A54               	incf	int_high@i+1,f,c
  4928  0009B0                     i2l101:
  4929  0009B0  5003               	movf	_tasks_installed,w,c
  4930  0009B2  5C53               	subwf	int_high@i,w,c
  4931  0009B4  5004               	movf	_tasks_installed+1,w,c
  4932  0009B6  5854               	subwfb	int_high@i+1,w,c
  4933  0009B8  A0D8               	btfss	status,0,c
  4934  0009BA  D79B               	goto	i2l102
  4935                           
  4936                           ;kernel.c: 115: }
  4937                           ;kernel.c: 116: }
  4938                           ;kernel.c: 117: }
  4939                           ;kernel.c: 119: quantum--;
  4940  0009BC  0669               	decf	_quantum,f,c
  4941  0009BE  A0D8               	btfss	status,0,c
  4942  0009C0  066A               	decf	_quantum+1,f,c
  4943                           
  4944                           ;kernel.c: 120: if (quantum == 0) {
  4945  0009C2  5069               	movf	_quantum,w,c
  4946  0009C4  106A               	iorwf	_quantum+1,w,c
  4947  0009C6  A4D8               	btfss	status,2,c
  4948  0009C8  D008               	goto	i2l106
  4949                           
  4950                           ;kernel.c: 121: quantum = 4;
  4951  0009CA  0E00               	movlw	0
  4952  0009CC  6E6A               	movwf	_quantum+1,c
  4953  0009CE  0E04               	movlw	4
  4954  0009D0  6E69               	movwf	_quantum,c
  4955                           
  4956                           ;kernel.c: 122: dispatcher(READY);
  4957  0009D2  0E01               	movlw	1
  4958  0009D4  6EE6               	movwf	postinc1,c
  4959  0009D6  EC0A  F000         	call	_dispatcher	;wreg free
  4960  0009DA                     i2l106:
  4961  0009DA  C052  F068         	movff	??_int_high+14,btemp+11
  4962  0009DE  C051  F067         	movff	??_int_high+13,btemp+10
  4963  0009E2  C050  F066         	movff	??_int_high+12,btemp+9
  4964  0009E6  C04F  F065         	movff	??_int_high+11,btemp+8
  4965  0009EA  C04E  F05F         	movff	??_int_high+10,btemp+2
  4966  0009EE  C04D  F05E         	movff	??_int_high+9,btemp+1
  4967  0009F2  C04C  F05D         	movff	??_int_high+8,btemp
  4968  0009F6  C04B  FFF4         	movff	??_int_high+7,prodh
  4969  0009FA  C04A  FFF3         	movff	??_int_high+6,prodl
  4970  0009FE  C049  FFDA         	movff	??_int_high+5,fsr2h
  4971  000A02  C048  FFD9         	movff	??_int_high+4,fsr2l
  4972  000A06  C047  FFE2         	movff	??_int_high+3,fsr1h
  4973  000A0A  C046  FFE1         	movff	??_int_high+2,fsr1l
  4974  000A0E  0011               	retfie		f
  4975  000A10                     __end_of_int_high:
  4976                           	opt stack 0
  4977  0000                     tosu	equ	0xFFF
  4978                           tosh	equ	0xFFE
  4979                           tosl	equ	0xFFD
  4980                           stkptr	equ	0xFFC
  4981                           tblptru	equ	0xFF8
  4982                           tblptrh	equ	0xFF7
  4983                           tblptrl	equ	0xFF6
  4984                           tablat	equ	0xFF5
  4985                           prodh	equ	0xFF4
  4986                           prodl	equ	0xFF3
  4987                           intcon	equ	0xFF2
  4988                           postinc0	equ	0xFEE
  4989                           postdec0	equ	0xFED
  4990                           plusw0	equ	0xFEB
  4991                           fsr0h	equ	0xFEA
  4992                           fsr0l	equ	0xFE9
  4993                           wreg	equ	0xFE8
  4994                           postinc1	equ	0xFE6
  4995                           postdec1	equ	0xFE5
  4996                           plusw1	equ	0xFE3
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           bsr	equ	0xFE0
  5000                           indf2	equ	0xFDF
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           plusw2	equ	0xFDB
  5004                           fsr2h	equ	0xFDA
  5005                           fsr2l	equ	0xFD9
  5006                           status	equ	0xFD8
  5007                           tosu	equ	0xFFF
  5008                           tosh	equ	0xFFE
  5009                           tosl	equ	0xFFD
  5010                           stkptr	equ	0xFFC
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           intcon	equ	0xFF2
  5018                           postinc0	equ	0xFEE
  5019                           postdec0	equ	0xFED
  5020                           plusw0	equ	0xFEB
  5021                           fsr0h	equ	0xFEA
  5022                           fsr0l	equ	0xFE9
  5023                           wreg	equ	0xFE8
  5024                           postinc1	equ	0xFE6
  5025                           postdec1	equ	0xFE5
  5026                           plusw1	equ	0xFE3
  5027                           fsr1h	equ	0xFE2
  5028                           fsr1l	equ	0xFE1
  5029                           bsr	equ	0xFE0
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           plusw2	equ	0xFDB
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038                           	psect	rparam
  5039  0000                     tosu	equ	0xFFF
  5040                           tosh	equ	0xFFE
  5041                           tosl	equ	0xFFD
  5042                           stkptr	equ	0xFFC
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           postinc0	equ	0xFEE
  5051                           postdec0	equ	0xFED
  5052                           plusw0	equ	0xFEB
  5053                           fsr0h	equ	0xFEA
  5054                           fsr0l	equ	0xFE9
  5055                           wreg	equ	0xFE8
  5056                           postinc1	equ	0xFE6
  5057                           postdec1	equ	0xFE5
  5058                           plusw1	equ	0xFE3
  5059                           fsr1h	equ	0xFE2
  5060                           fsr1l	equ	0xFE1
  5061                           bsr	equ	0xFE0
  5062                           indf2	equ	0xFDF
  5063                           postinc2	equ	0xFDE
  5064                           postdec2	equ	0xFDD
  5065                           plusw2	equ	0xFDB
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070                           	psect	temp
  5071  00005D                     btemp:
  5072                           	opt stack 0
  5073  00005D                     	ds	12
  5074  0000                     wtemp0	set	btemp
  5075  0000                     wtemp1	set	btemp+2
  5076  0000                     wtemp2	set	btemp+4
  5077  0000                     wtemp3	set	btemp+6
  5078  0000                     wtemp4	set	btemp+8
  5079  0000                     wtemp5	set	btemp+10
  5080  0000                     wtemp6	set	btemp+1
  5081  0000                     ttemp0	set	btemp
  5082  0000                     ttemp1	set	btemp+3
  5083  0000                     ttemp2	set	btemp+6
  5084  0000                     ttemp3	set	btemp+9
  5085  0000                     ltemp0	set	btemp
  5086  0000                     ltemp1	set	btemp+4
  5087  0000                     ltemp2	set	btemp+8
  5088                           tosu	equ	0xFFF
  5089                           tosh	equ	0xFFE
  5090                           tosl	equ	0xFFD
  5091                           stkptr	equ	0xFFC
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodh	equ	0xFF4
  5097                           prodl	equ	0xFF3
  5098                           intcon	equ	0xFF2
  5099                           postinc0	equ	0xFEE
  5100                           postdec0	equ	0xFED
  5101                           plusw0	equ	0xFEB
  5102                           fsr0h	equ	0xFEA
  5103                           fsr0l	equ	0xFE9
  5104                           wreg	equ	0xFE8
  5105                           postinc1	equ	0xFE6
  5106                           postdec1	equ	0xFE5
  5107                           plusw1	equ	0xFE3
  5108                           fsr1h	equ	0xFE2
  5109                           fsr1l	equ	0xFE1
  5110                           bsr	equ	0xFE0
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           postdec2	equ	0xFDD
  5114                           plusw2	equ	0xFDB
  5115                           fsr2h	equ	0xFDA
  5116                           fsr2l	equ	0xFD9
  5117                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1129
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     25      94
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    read_pipe@pipe	PTR struct pipe size(2) Largest target is 11
		 -> pipe1(COMRAM[11]), 

    write_pipe@pipe	PTR struct pipe size(2) Largest target is 11
		 -> pipe1(COMRAM[11]), 

    create_pipe@pipe	PTR struct pipe size(2) Largest target is 11
		 -> pipe1(COMRAM[11]), 

    sem_post@s	PTR struct sem size(2) Largest target is 24
		 -> pista(COMRAM[24]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 24
		 -> pista(COMRAM[24]), 

    sem_init@s	PTR struct sem size(2) Largest target is 16
		 -> semafaro(COMRAM[16]), 

    createAviao@av	PTR struct aviao size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), aviaozinho2(COMRAM[6]), aviaozinho1(COMRAM[6]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    S100tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao2(), aviao1(), ctpista(), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    main@mem	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _aviao1 in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _aviao1 in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _aviao1 in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _aviao1 in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _aviao1 in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _aviao1 in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _aviao1 in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5782
                                             23 COMRAM     2     2      0
                       _SRAMInitHeap
                          _SRAMalloc
                        _create_task
                           _sem_init
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2465
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     105
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sem_init                                             4     0      4     240
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               0     0      0    5204
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4318
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               0     0      0    5204
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4318
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                             13    13      0   16075
                              _delay
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4283
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4096
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao1                                               0     0      0    5204
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4318
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               0     0      0    5204
                        _createAviao
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4318
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      97
 ---------------------------------------------------------------------------------
 (5) _createAviao                                          8     0      8     789
                          _SRAMalloc
 ---------------------------------------------------------------------------------
 (6) _SRAMalloc                                            7     6      1     611
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (7) __SRAMmerge                                           7     5      2     281
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                             13    13      0   16075
                              _delay
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4283
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4096
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4162
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMInitHeap
   _SRAMalloc
     __SRAMmerge
   _create_task
     ___wmul
   _sem_init
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _aviao1 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _aviao1 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao2 (ROOT)
   _createAviao
     _SRAMalloc
       __SRAMmerge
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     426      17       69.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     19      5E       1       81.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CC      15        0.0%
DATA                 0      0     4F7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Oct 28 00:15:08 2018

                     l25 1332                       l78 0358                       u10 0D26  
                    l154 055C                      l229 089A                      l246 1420  
                    l247 144E                      l927 0DF2                      l945 1032  
                    l955 10A2                      l895 0D2A                      l999 071E  
                    _BSR 000FE0                      u100 142C                      u120 0716  
                    u160 07AC                      u411 1404                      _TOS 000FFD  
          create_task@id 0055                      wreg 000FE8        SRAMInitHeap@pHeap 0057  
      SRAMInitHeap@count 0055                     l1001 0732                     l1019 07D8  
                   l1221 15EC                     l1029 0818                     l1501 0F36  
                   l1407 02EA                     l1355 134C                     l1451 0CB6  
                   l1471 0B5E                     l1551 1526                     l1439 0BB6  
                   l1545 14E4                     l1459 0A5A                     l1387 00D0  
                   l1581 0636                     l1487 1012                     _TOSH 000FFE  
                   _TOSL 000FFD                     _WREG 000FE8                     _TOSU 000FFF  
                   u7_20 105A                     u9_20 10C0                     _main 12AE  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 005D                     prodh 000FF4  
                   prodl 000FF3                     start 000C             ___param_bank 000000  
                  ?_main 0044          _tasks_installed 0003                    i2l101 09B0  
                  i2l102 08F2                    i2l104 09AC          __end_of___lwmod 10D6  
                  i2l106 09DA                    _TMR0L 000FD6                    u51_20 0E44  
                  u28_20 15F4                    u60_20 0694                    u28_26 15F6  
                  u60_26 0696                    u45_20 0528                    u58_20 05CC  
                  u58_26 05CE               __SRAMmerge 0CC0                    _delay 146C  
        __end_of_ctpista 0702                    _pipe1 002D                    _pista 0005  
        create_task@task 0080       __size_of_SRAMalloc 01A2                    tablat 000FF5  
                  ltemp0 005D                    ltemp1 0061                    ltemp2 0065  
        __end_of_setupOS 15EA                    plusw0 000FEB                    plusw1 000FE3  
                  plusw2 000FDB                    ttemp0 005D                    ttemp1 0060  
                  ttemp2 0063                    ttemp3 0066                    status 000FD8  
                  wtemp0 005D                    wtemp1 005F                    wtemp2 0061  
                  wtemp3 0063                    wtemp4 0065                    wtemp5 0067  
                  wtemp6 005E          __initialization 1538             __end_of_main 1334  
                 ??_main 005B            __activetblptr 000000                   _STATUS 000FD8  
   __size_of_createAviao 009C                   _STKPTR 000FFC     __size_of_create_pipe 00A6  
   __size_of_create_task 005A                   ___wmul 1218                   _aviao1 14B4  
                 _aviao2 14F6        __end_of_SRAMalloc 08A4                   clear_0 1558  
                 clear_1 156A         __end_of_int_high 0A10         create_task@prior 0057  
       __end_of_sem_init 15B4         __end_of_sem_wait 101A         __end_of_sem_post 0F3E  
           __pdataCOMRAM 0069                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_setupOS 005B         __end_of_start_os 160E  
             __accesstop 0080  __end_of__initialization 1570            ___rparam_used 000001  
         __pcstackCOMRAM 0044               ___inthi_sp 0564            __end_of_delay 14B4  
          __uDynamicHeap 0314       __size_of_read_pipe 015C      __size_of__SRAMmerge 0152  
     __size_of_task_idle 0020                  _F_APTOS 00EE               _dispatcher 0014  
              ?_int_high 0044                  __Hparam 0000                ?_sem_init 0055  
                __Lparam 0000          __size_of___wmul 0096                  ___lwmod 101A  
              ?_start_os 0044          __size_of_aviao1 0042          __size_of_aviao2 0042  
                __pcinit 1538                  __ramtop 0600            ?_SRAMInitHeap 0044  
                __ptext0 12AE                  __ptext1 160A                  __ptext2 15B4  
                __ptext3 13B8                  __ptext4 1218                  __ptext5 1412  
                __ptext6 1576                  __ptext7 0702                  __ptext8 0CC0  
                __ptext9 14B4                _T0CONbits 000FD5                  _ctpista 0554  
      __end_of_read_pipe 0B6C                  _setupOS 15B4        create_task@task_f 0059  
                _quantum 0069                  main@mem 005B           __pintcode_body 08A4  
   end_of_initialization 1570        __end_of_task_idle 160A                  int_func 08A4  
             ??_int_high 0044               ??_sem_init 0059                  postdec0 000FED  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_start_os 0055  
         ??_SRAMInitHeap 0055                _PORTDbits 000F83                _SRAMalloc 0702  
              _TRISDbits 000F95            sem_init@value 0057            ??_create_task 005B  
     __end_of__SRAMmerge 0E12           __end_of___wmul 12AE            __pidataCOMRAM 160E  
         __end_of_aviao1 14F6           __end_of_aviao2 1538               _write_pipe 0B6C  
    start_initialization 1538      __end_of_createAviao 1218      __end_of_create_pipe 117C  
    __end_of_create_task 1412      __size_of_dispatcher 0540              __pbssBIGRAM 00EE  
            __pbssCOMRAM 0001            __pcstackBANK0 0080     __end_of_SRAMInitHeap 146C  
      __size_of_int_high 0A08                __pintcode 0008        __size_of_sem_init 003E  
      __size_of_sem_wait 00DC        __size_of_sem_post 012C        __size_of_start_os 0004  
               ?_setupOS 0044           __size_of_delay 0048     __end_of_rr_scheduler 13B8  
              _read_pipe 0A10              _createAviao 117C              _create_pipe 10D6  
            _create_task 13B8                _task_idle 15EA              _aviaozinho1 003E  
            _aviaozinho2 0038      __size_of_write_pipe 0154                 __Hrparam 0000  
               __Lrparam 0000                int_high@i 0053       __end_of_dispatcher 0554  
       __size_of___lwmod 00BC         __size_of_ctpista 01AE    __size_of_SRAMInitHeap 005A  
               __ptext10 0B6C                 __ptext11 0014                 __ptext20 0A10  
               __ptext12 1334                 __ptext21 146C                 __ptext13 101A  
               __ptext22 15EA                 __ptext14 10D6                 __ptext15 117C  
               __ptext16 14F6                 __ptext17 0554                 __ptext18 0F3E  
               __ptext19 0E12         __size_of_setupOS 0036                sem_init@s 0055  
          __size_of_main 0086                 _int_high 0008                 _semafaro 001D  
               _sem_init 1576                 _sem_wait 0F3E                 _sem_post 0E12  
           _task_running 0001                 _start_os 160A             _SRAMInitHeap 1412  
  __size_of_rr_scheduler 0084               _INTCONbits 000FF2                 intlevel1 0000  
               intlevel2 0000             _rr_scheduler 1334             ?_create_task 0055  
     __end_of_write_pipe 0CC0  
