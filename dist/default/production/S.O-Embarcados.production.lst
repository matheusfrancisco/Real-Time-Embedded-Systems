

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Oct 27 11:01:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74 ;;___wmul@product	offset	0
    75 ;;___wmul@multiplier	offset=-2 (param)
    76 ;;___wmul@multiplicand	offset=-4 (param)
    77 ;;write_pipe@pipe	offset=-2 (param)
    78 ;;write_pipe@data	offset=-3 (param)
    79 ;;dispatcher@state	offset=-1 (param)
    80 ;;rr_scheduler@next_task_to_run	offset	0
    81 ;;___wmul@product	offset	0
    82 ;;___wmul@multiplier	offset=-2 (param)
    83 ;;___wmul@multiplicand	offset=-4 (param)
    84 ;;___lwmod@counter	offset	0
    85 ;;___lwmod@dividend	offset=-2 (param)
    86 ;;___lwmod@divisor	offset=-4 (param)
    87 ;;create_pipe@pipe	offset=-2 (param)
    88 ;;delay@time_ms	offset=-2 (param)
    89 ;;ctpista@dado	offset	0
    90 ;;sem_wait@s	offset=-2 (param)
    91 ;;sem_post@s	offset=-2 (param)
    92 ;;read_pipe@dado	offset	0
    93 ;;read_pipe@pipe	offset=-2 (param)
    94 ;;dispatcher@state	offset=-1 (param)
    95 ;;rr_scheduler@next_task_to_run	offset	0
    96 ;;___wmul@product	offset	0
    97 ;;___wmul@multiplier	offset=-2 (param)
    98 ;;___wmul@multiplicand	offset=-4 (param)
    99 ;;___lwmod@counter	offset	0
   100 ;;___lwmod@dividend	offset=-2 (param)
   101 ;;___lwmod@divisor	offset=-4 (param)
   102                           
   103                           	psect	idataCOMRAM
   104  0012B4                     __pidataCOMRAM:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _quantum
   108  0012B4  0004               	dw	4
   109  0000                     _TOS	set	4093
   110  0000                     _TMR0L	set	4054
   111  0000                     _T0CONbits	set	4053
   112  0000                     _PORTDbits	set	3971
   113  0000                     _TRISDbits	set	3989
   114  0000                     _STKPTR	set	4092
   115  0000                     _TOSH	set	4094
   116  0000                     _TOSL	set	4093
   117  0000                     _TOSU	set	4095
   118  0000                     _WREG	set	4072
   119  0000                     _STATUS	set	4056
   120  0000                     _BSR	set	4064
   121  0000                     _INTCONbits	set	4082
   122                           
   123                           ; #config settings
   124                           
   125                           	psect	cinit
   126  0011D8                     __pcinit:
   127                           	opt stack 0
   128  0011D8                     start_initialization:
   129                           	opt stack 0
   130  0011D8                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Initialize objects allocated to COMRAM (2 bytes)
   134                           ; load TBLPTR registers with __pidataCOMRAM
   135  0011D8  0EB4               	movlw	low __pidataCOMRAM
   136  0011DA  6EF6               	movwf	tblptrl,c
   137  0011DC  0E12               	movlw	high __pidataCOMRAM
   138  0011DE  6EF7               	movwf	tblptrh,c
   139  0011E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   140  0011E2  6EF8               	movwf	tblptru,c
   141  0011E4  0009               	tblrd		*+	;fetch initializer
   142  0011E6  CFF5 F047          	movff	tablat,__pdataCOMRAM
   143  0011EA  0009               	tblrd		*+	;fetch initializer
   144  0011EC  CFF5 F048          	movff	tablat,__pdataCOMRAM+1
   145                           
   146                           ; Clear objects allocated to BIGRAM (1062 bytes)
   147  0011F0  EE00  F0EE         	lfsr	0,__pbssBIGRAM
   148  0011F4  EE24 F026          	lfsr	2,1062
   149  0011F8                     clear_0:
   150  0011F8  6AEE               	clrf	postinc0,c
   151  0011FA  50DD               	movf	postdec2,w,c
   152  0011FC  50D9               	movf	fsr2l,w,c
   153  0011FE  E1FC               	bnz	clear_0
   154  001200  50DA               	movf	fsr2h,w,c
   155  001202  E1FA               	bnz	clear_0
   156                           
   157                           ; Clear objects allocated to COMRAM (20 bytes)
   158  001204  EE00  F027         	lfsr	0,__pbssCOMRAM
   159  001208  0E14               	movlw	20
   160  00120A                     clear_1:
   161  00120A  6AEE               	clrf	postinc0,c
   162  00120C  06E8               	decf	wreg,f,c
   163  00120E  E1FD               	bnz	clear_1
   164  001210                     end_of_initialization:
   165                           	opt stack 0
   166  001210                     __end_of__initialization:
   167                           	opt stack 0
   168  001210  0100               	movlb	0
   169  001212  EF38  F008         	goto	_main	;jump to C main() function
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           postdec2	equ	0xFDD
   177                           fsr2h	equ	0xFDA
   178                           fsr2l	equ	0xFD9
   179                           
   180                           	psect	bssCOMRAM
   181  000027                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000027                     _task_running:
   184                           	opt stack 0
   185  000027                     	ds	2
   186  000029                     _tasks_installed:
   187                           	opt stack 0
   188  000029                     	ds	2
   189  00002B                     _pipe:
   190                           	opt stack 0
   191  00002B                     	ds	14
   192  000039                     _s:
   193                           	opt stack 0
   194  000039                     	ds	2
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           postdec2	equ	0xFDD
   202                           fsr2h	equ	0xFDA
   203                           fsr2l	equ	0xFD9
   204                           
   205                           	psect	dataCOMRAM
   206  000047                     __pdataCOMRAM:
   207                           	opt stack 0
   208  000047                     _quantum:
   209                           	opt stack 0
   210  000047                     	ds	2
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           postdec2	equ	0xFDD
   218                           fsr2h	equ	0xFDA
   219                           fsr2l	equ	0xFD9
   220                           
   221                           	psect	bssBIGRAM
   222  0000EE                     __pbssBIGRAM:
   223                           	opt stack 0
   224  0000EE                     _F_APTOS:
   225                           	opt stack 0
   226  0000EE                     	ds	550
   227  000314                     __uDynamicHeap:
   228                           	opt stack 0
   229  000314                     	ds	512
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           postdec2	equ	0xFDD
   237                           fsr2h	equ	0xFDA
   238                           fsr2l	equ	0xFD9
   239                           
   240                           	psect	cstackBANK0
   241  000080                     __pcstackBANK0:
   242                           	opt stack 0
   243  000080                     create_task@task:
   244                           	opt stack 0
   245                           
   246                           ; 110 bytes @ 0x0
   247  000080                     	ds	110
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           postdec2	equ	0xFDD
   255                           fsr2h	equ	0xFDA
   256                           fsr2l	equ	0xFD9
   257                           
   258                           	psect	cstackCOMRAM
   259  000001                     __pcstackCOMRAM:
   260                           	opt stack 0
   261  000001                     ??_int_high:
   262                           
   263                           ; 1 bytes @ 0x0
   264  000001                     	ds	15
   265  000010                     int_high@i:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xF
   269  000010                     	ds	2
   270  000012                     create_task@id:
   271                           	opt stack 0
   272  000012                     SRAMInitHeap@count:
   273                           	opt stack 0
   274  000012                     __SRAMmerge@pSegA:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x11
   278  000012                     	ds	2
   279  000014                     ??__SRAMmerge:
   280  000014                     create_task@prior:
   281                           	opt stack 0
   282  000014                     SRAMInitHeap@pHeap:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x13
   286  000014                     	ds	1
   287  000015                     __SRAMmerge@uSum:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x14
   291  000015                     	ds	1
   292  000016                     __SRAMmerge@uSegA:
   293                           	opt stack 0
   294  000016                     create_task@task_f:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x15
   298  000016                     	ds	1
   299  000017                     __SRAMmerge@uSegB:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x16
   303  000017                     	ds	1
   304  000018                     __SRAMmerge@pSegB:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x17
   308  000018                     	ds	2
   309  00001A                     ?_SRAMalloc:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x19
   313  00001A                     	ds	2
   314  00001C                     ??_SRAMalloc:
   315                           
   316                           ; 1 bytes @ 0x1B
   317  00001C                     	ds	2
   318  00001E                     SRAMalloc@segLen:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x1D
   322  00001E                     	ds	1
   323  00001F                     SRAMalloc@segHeader:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x1E
   327  00001F                     	ds	1
   328  000020                     SRAMalloc@temp:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x1F
   332  000020                     	ds	2
   333  000022                     SRAMalloc@nBytes:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x21
   337  000022                     	ds	1
   338  000023                     SRAMalloc@pHeap:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x22
   342  000023                     	ds	2
   343  000025                     main@mem:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x24
   347  000025                     	ds	2
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           postdec2	equ	0xFDD
   355                           fsr2h	equ	0xFDA
   356                           fsr2l	equ	0xFD9
   357                           
   358 ;;
   359 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   360 ;;
   361 ;; *************** function _main *****************
   362 ;; Defined at:
   363 ;;		line 13 in file "main.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;  mem             2   36[COMRAM] PTR unsigned char 
   368 ;;		 -> _uDynamicHeap(512), NULL(0), 
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   378 ;;      Params:         0       0       0       0       0       0       0
   379 ;;      Locals:         2       0       0       0       0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0
   381 ;;      Totals:         2       0       0       0       0       0       0
   382 ;;Total ram usage:        2 bytes
   383 ;; Hardware stack levels required when called:   12
   384 ;; This function calls:
   385 ;;		_SRAMalloc
   386 ;;		_create_task
   387 ;;		_setupOS
   388 ;;		_start_os
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           	psect	text0
   395  001070                     __ptext0:
   396                           	opt stack 0
   397  001070                     _main:
   398                           	opt stack 19
   399                           
   400                           ;main.c: 15: setupOS();
   401                           
   402                           ;incstack = 0
   403  001070  EC0B  F009         	call	_setupOS	;wreg free
   404                           
   405                           ;main.c: 18: create_task(2, 3, &ctpista);
   406  001074  0E00               	movlw	0
   407  001076  6E13               	movwf	create_task@id+1,c
   408  001078  0E02               	movlw	2
   409  00107A  6E12               	movwf	create_task@id,c
   410  00107C  0E00               	movlw	0
   411  00107E  6E15               	movwf	create_task@prior+1,c
   412  001080  0E03               	movlw	3
   413  001082  6E14               	movwf	create_task@prior,c
   414  001084  0E58               	movlw	low _ctpista
   415  001086  6E16               	movwf	create_task@task_f,c
   416  001088  0E0F               	movlw	high _ctpista
   417  00108A  6E17               	movwf	create_task@task_f+1,c
   418  00108C  EC6E  F008         	call	_create_task	;wreg free
   419                           
   420                           ;main.c: 19: create_task(3, 3, &aviao2);
   421  001090  0E00               	movlw	0
   422  001092  6E13               	movwf	create_task@id+1,c
   423  001094  0E03               	movlw	3
   424  001096  6E12               	movwf	create_task@id,c
   425  001098  0E00               	movlw	0
   426  00109A  6E15               	movwf	create_task@prior+1,c
   427  00109C  0E03               	movlw	3
   428  00109E  6E14               	movwf	create_task@prior,c
   429  0010A0  0E4C               	movlw	low _aviao2
   430  0010A2  6E16               	movwf	create_task@task_f,c
   431  0010A4  0E12               	movlw	high _aviao2
   432  0010A6  6E17               	movwf	create_task@task_f+1,c
   433  0010A8  EC6E  F008         	call	_create_task	;wreg free
   434                           
   435                           ;main.c: 20: create_task(4, 3, &aviao3);
   436  0010AC  0E00               	movlw	0
   437  0010AE  6E13               	movwf	create_task@id+1,c
   438  0010B0  0E04               	movlw	4
   439  0010B2  6E12               	movwf	create_task@id,c
   440  0010B4  0E00               	movlw	0
   441  0010B6  6E15               	movwf	create_task@prior+1,c
   442  0010B8  0E03               	movlw	3
   443  0010BA  6E14               	movwf	create_task@prior,c
   444  0010BC  0E6E               	movlw	low _aviao3
   445  0010BE  6E16               	movwf	create_task@task_f,c
   446  0010C0  0E12               	movlw	high _aviao3
   447  0010C2  6E17               	movwf	create_task@task_f+1,c
   448  0010C4  EC6E  F008         	call	_create_task	;wreg free
   449                           
   450                           ;main.c: 24: start_os();
   451  0010C8  EC58  F009         	call	_start_os	;wreg free
   452                           
   453                           ;main.c: 28: byte *mem = SRAMalloc(100);
   454  0010CC  0E64               	movlw	100
   455  0010CE  EC7F  F005         	call	_SRAMalloc
   456  0010D2  C01A  F025         	movff	?_SRAMalloc,main@mem
   457  0010D6  C01B  F026         	movff	?_SRAMalloc+1,main@mem+1
   458  0010DA                     l19:
   459  0010DA  D7FF               	goto	l19
   460  0010DC                     __end_of_main:
   461                           	opt stack 0
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           postdec2	equ	0xFDD
   469                           fsr2h	equ	0xFDA
   470                           fsr2l	equ	0xFD9
   471                           
   472 ;; *************** function _start_os *****************
   473 ;; Defined at:
   474 ;;		line 127 in file "kernel.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		None
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   488 ;;      Params:         0       0       0       0       0       0       0
   489 ;;      Locals:         0       0       0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0
   491 ;;      Totals:         0       0       0       0       0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    9
   495 ;; This function calls:
   496 ;;		Nothing
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text1
   503  0012B0                     __ptext1:
   504                           	opt stack 0
   505  0012B0                     _start_os:
   506                           	opt stack 21
   507                           
   508                           ;kernel.c: 132: T0CONbits.TMR0ON = 1;
   509                           
   510                           ;incstack = 0
   511  0012B0  8ED5               	bsf	4053,7,c	;volatile
   512  0012B2  0012               	return		;funcret
   513  0012B4                     __end_of_start_os:
   514                           	opt stack 0
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec2	equ	0xFDD
   522                           fsr2h	equ	0xFDA
   523                           fsr2l	equ	0xFD9
   524                           
   525 ;; *************** function _setupOS *****************
   526 ;; Defined at:
   527 ;;		line 79 in file "kernel.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;		None
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   541 ;;      Params:         0       0       0       0       0       0       0
   542 ;;      Locals:         0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0
   544 ;;      Totals:         0       0       0       0       0       0       0
   545 ;;Total ram usage:        0 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:   11
   548 ;; This function calls:
   549 ;;		_SRAMInitHeap
   550 ;;		_create_task
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text2
   557  001216                     __ptext2:
   558                           	opt stack 0
   559  001216                     _setupOS:
   560                           	opt stack 19
   561                           
   562                           ;kernel.c: 85: T0CONbits.T0CS = 0;
   563                           
   564                           ;incstack = 0
   565  001216  9AD5               	bcf	4053,5,c	;volatile
   566                           
   567                           ;kernel.c: 86: T0CONbits.PSA = 0;
   568  001218  96D5               	bcf	4053,3,c	;volatile
   569                           
   570                           ;kernel.c: 87: T0CONbits.T0PS = 0b111;
   571  00121A  80D5               	bsf	4053,0,c	;volatile
   572  00121C  82D5               	bsf	4053,1,c	;volatile
   573  00121E  84D5               	bsf	4053,2,c	;volatile
   574                           
   575                           ;kernel.c: 88: INTCONbits.PEIE = 1;
   576  001220  8CF2               	bsf	intcon,6,c	;volatile
   577                           
   578                           ;kernel.c: 89: INTCONbits.TMR0IE = 1;
   579  001222  8AF2               	bsf	intcon,5,c	;volatile
   580                           
   581                           ;kernel.c: 90: TMR0L = 252;
   582  001224  0EFC               	movlw	252
   583  001226  6ED6               	movwf	4054,c	;volatile
   584                           
   585                           ;kernel.c: 93: create_task(1,5, &task_idle);
   586  001228  0E00               	movlw	0
   587  00122A  6E13               	movwf	create_task@id+1,c
   588  00122C  0E01               	movlw	1
   589  00122E  6E12               	movwf	create_task@id,c
   590  001230  0E00               	movlw	0
   591  001232  6E15               	movwf	create_task@prior+1,c
   592  001234  0E05               	movlw	5
   593  001236  6E14               	movwf	create_task@prior,c
   594  001238  0E90               	movlw	low _task_idle
   595  00123A  6E16               	movwf	create_task@task_f,c
   596  00123C  0E12               	movlw	high _task_idle
   597  00123E  6E17               	movwf	create_task@task_f+1,c
   598  001240  EC6E  F008         	call	_create_task	;wreg free
   599                           
   600                           ;kernel.c: 97: SRAMInitHeap();
   601  001244  EC9B  F008         	call	_SRAMInitHeap	;wreg free
   602                           
   603                           ;kernel.c: 99: (INTCONbits.GIE = 1);
   604  001248  8EF2               	bsf	intcon,7,c	;volatile
   605  00124A  0012               	return		;funcret
   606  00124C                     __end_of_setupOS:
   607                           	opt stack 0
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           intcon	equ	0xFF2
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec2	equ	0xFDD
   616                           fsr2h	equ	0xFDA
   617                           fsr2l	equ	0xFD9
   618                           
   619 ;; *************** function _create_task *****************
   620 ;; Defined at:
   621 ;;		line 19 in file "kernel.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;  id              2   17[COMRAM] unsigned int 
   624 ;;  prior           2   19[COMRAM] unsigned int 
   625 ;;  task_f          2   21[COMRAM] PTR FTN()void 
   626 ;;		 -> task_idle(1), aviao3(1), aviao2(1), ctpista(1), 
   627 ;; Auto vars:     Size  Location     Type
   628 ;;  task          110    0[BANK0 ] struct tcb
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   638 ;;      Params:         6       0       0       0       0       0       0
   639 ;;      Locals:         0     110       0       0       0       0       0
   640 ;;      Temps:          0       0       0       0       0       0       0
   641 ;;      Totals:         6     110       0       0       0       0       0
   642 ;;Total ram usage:      116 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:   10
   645 ;; This function calls:
   646 ;;		___wmul
   647 ;; This function is called by:
   648 ;;		_main
   649 ;;		_setupOS
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text3
   654  0010DC                     __ptext3:
   655                           	opt stack 0
   656  0010DC                     _create_task:
   657                           	opt stack 19
   658                           
   659                           ;kernel.c: 21: tcb_t task;
   660                           ;kernel.c: 23: task.task_id = id;
   661                           
   662                           ;incstack = 0
   663  0010DC  C012  F080         	movff	create_task@id,create_task@task
   664  0010E0  C013  F081         	movff	create_task@id+1,create_task@task+1
   665                           
   666                           ;kernel.c: 24: task.task_prior = prior;
   667  0010E4  C014  F082         	movff	create_task@prior,create_task@task+2
   668  0010E8  C015  F083         	movff	create_task@prior+1,create_task@task+3
   669                           
   670                           ;kernel.c: 25: task.task_f = task_f;
   671  0010EC  C016  F084         	movff	create_task@task_f,create_task@task+4
   672  0010F0  C017  F085         	movff	create_task@task_f+1,create_task@task+5
   673                           
   674                           ;kernel.c: 26: task.task_stack.stack_size = 0;
   675  0010F4  0E00               	movlw	0
   676  0010F6  0100               	movlb	0	; () banked
   677  0010F8  6FEA               	movwf	(create_task@task+106)& (0+255),b
   678  0010FA  0E00               	movlw	0
   679  0010FC  6FE9               	movwf	(create_task@task+105)& (0+255),b
   680                           
   681                           ; BSR set to: 0
   682                           ;kernel.c: 27: task.task_state = READY;
   683  0010FE  0E01               	movlw	1
   684  001100  6F88               	movwf	(create_task@task+8)& (0+255),b
   685                           
   686                           ; BSR set to: 0
   687                           ;kernel.c: 29: F_APTOS[tasks_installed] = task;
   688  001102  0E6E               	movlw	110
   689  001104  6EE6               	movwf	postinc1,c
   690  001106  0E00               	movlw	0
   691  001108  6EE6               	movwf	postinc1,c
   692  00110A  C029  FFE6         	movff	_tasks_installed,postinc1
   693  00110E  C02A  FFE6         	movff	_tasks_installed+1,postinc1
   694  001112  EC61  F007         	call	___wmul	;wreg free
   695  001116  0EEE               	movlw	low _F_APTOS
   696  001118  243B               	addwf	btemp,w,c
   697  00111A  6EE9               	movwf	fsr0l,c
   698  00111C  0E00               	movlw	high _F_APTOS
   699  00111E  203C               	addwfc	btemp+1,w,c
   700  001120  6EEA               	movwf	fsr0h,c
   701  001122  EE20  F080         	lfsr	2,create_task@task
   702  001126  0E6D               	movlw	109
   703  001128                     u401:
   704  001128  CFDB FFEB          	movff	plusw2,plusw0
   705  00112C  06E8               	decf	wreg,f,c
   706  00112E  E2FC               	bc	u401
   707                           
   708                           ;kernel.c: 30: tasks_installed++;
   709  001130  4A29               	infsnz	_tasks_installed,f,c
   710  001132  2A2A               	incf	_tasks_installed+1,f,c
   711  001134  0012               	return		;funcret
   712  001136                     __end_of_create_task:
   713                           	opt stack 0
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           intcon	equ	0xFF2
   719                           postinc0	equ	0xFEE
   720                           plusw0	equ	0xFEB
   721                           fsr0h	equ	0xFEA
   722                           fsr0l	equ	0xFE9
   723                           wreg	equ	0xFE8
   724                           postinc1	equ	0xFE6
   725                           postdec2	equ	0xFDD
   726                           plusw2	equ	0xFDB
   727                           fsr2h	equ	0xFDA
   728                           fsr2l	equ	0xFD9
   729                           
   730 ;; *************** function ___wmul *****************
   731 ;; Defined at:
   732 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;  multiplier      2  [STACK] unsigned int 
   735 ;;  multiplicand    2  [STACK] unsigned int 
   736 ;; Auto vars:     Size  Location     Type
   737 ;;  product         2  [STACK] unsigned int 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  2  [STACK] unsigned int 
   740 ;; Registers used:
   741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   747 ;;      Params:         0       0       0       0       0       0       0
   748 ;;      Locals:         0       0       0       0       0       0       0
   749 ;;      Temps:          0       0       0       0       0       0       0
   750 ;;      Totals:         0       0       0       0       0       0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    9
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_create_task
   758 ;;		_dispatcher
   759 ;;		_delay
   760 ;;		_int_high
   761 ;;		_rr_scheduler
   762 ;;		_sem_post
   763 ;;		_write_pipe
   764 ;;		_read_pipe
   765 ;;		_get_id
   766 ;;		_prior_scheduler
   767 ;; This function uses a reentrant model
   768 ;;
   769                           
   770                           	psect	text4
   771  000EC2                     __ptext4:
   772                           	opt stack 0
   773  000EC2                     ___wmul:
   774                           	opt stack 0
   775                           
   776                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
   777  000EC2  52E6               	movf	postinc1,f,c
   778  000EC4  52E6               	movf	postinc1,f,c
   779                           
   780                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   781                           
   782                           ;incstack = 0
   783  000EC6  0EFA               	movlw	-6
   784  000EC8  CFE3 F046          	movff	plusw1,btemp+11
   785                           
   786                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   787  000ECC  0EFC               	movlw	-4
   788  000ECE  50E3               	movf	plusw1,w,c
   789  000ED0  0246               	mulwf	btemp+11,c
   790                           
   791                           ;stkvar	___wmul@product @ sp[(-2)+0]
   792  000ED2  0EFE               	movlw	-2
   793  000ED4  CFF3 FFE3          	movff	prodl,plusw1
   794  000ED8  0EFF               	movlw	-1
   795  000EDA  CFF4 FFE3          	movff	prodh,plusw1
   796                           
   797                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   798  000EDE  0EFB               	movlw	251
   799  000EE0  24E1               	addwf	fsr1l,w,c
   800  000EE2  6ED9               	movwf	fsr2l,c
   801  000EE4  0EFF               	movlw	255
   802  000EE6  20E2               	addwfc	fsr1h,w,c
   803  000EE8  6EDA               	movwf	fsr2h,c
   804  000EEA  50DF               	movf	indf2,w,c
   805  000EEC  6E46               	movwf	btemp+11,c
   806                           
   807                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   808  000EEE  0EFC               	movlw	-4
   809  000EF0  50E3               	movf	plusw1,w,c
   810  000EF2  0246               	mulwf	btemp+11,c
   811  000EF4  CFF3 FFF4          	movff	prodl,prodh
   812  000EF8  6AF3               	clrf	prodl,c
   813                           
   814                           ;stkvar	___wmul@product @ sp[(-2)+0]
   815  000EFA  50E1               	movf	fsr1l,w,c
   816  000EFC  0FFE               	addlw	-2
   817  000EFE  6ED9               	movwf	fsr2l,c
   818  000F00  50E2               	movf	fsr1h,w,c
   819  000F02  6EDA               	movwf	fsr2h,c
   820  000F04  0EFF               	movlw	255
   821  000F06  22DA               	addwfc	fsr2h,f,c
   822  000F08  50F3               	movf	prodl,w,c
   823  000F0A  26DE               	addwf	postinc2,f,c
   824  000F0C  50F4               	movf	prodh,w,c
   825  000F0E  22DD               	addwfc	postdec2,f,c
   826                           
   827                           ;stkvar	___wmul@multiplicand @ sp[(-2)+-4]
   828  000F10  0EFA               	movlw	-6
   829  000F12  CFE3 F046          	movff	plusw1,btemp+11
   830                           
   831                           ;stkvar	___wmul@multiplier @ sp[(-2)+-2]
   832  000F16  0EFD               	movlw	253
   833  000F18  24E1               	addwf	fsr1l,w,c
   834  000F1A  6ED9               	movwf	fsr2l,c
   835  000F1C  0EFF               	movlw	255
   836  000F1E  20E2               	addwfc	fsr1h,w,c
   837  000F20  6EDA               	movwf	fsr2h,c
   838  000F22  50DF               	movf	indf2,w,c
   839  000F24  0246               	mulwf	btemp+11,c
   840  000F26  CFF3 FFF4          	movff	prodl,prodh
   841  000F2A  6AF3               	clrf	prodl,c
   842                           
   843                           ;stkvar	___wmul@product @ sp[(-2)+0]
   844  000F2C  50E1               	movf	fsr1l,w,c
   845  000F2E  0FFE               	addlw	-2
   846  000F30  6ED9               	movwf	fsr2l,c
   847  000F32  50E2               	movf	fsr1h,w,c
   848  000F34  6EDA               	movwf	fsr2h,c
   849  000F36  0EFF               	movlw	255
   850  000F38  22DA               	addwfc	fsr2h,f,c
   851  000F3A  50F3               	movf	prodl,w,c
   852  000F3C  26DE               	addwf	postinc2,f,c
   853  000F3E  50F4               	movf	prodh,w,c
   854  000F40  22DD               	addwfc	postdec2,f,c
   855                           
   856                           ;stkvar	___wmul@product @ sp[(-2)+0]
   857  000F42  0EFE               	movlw	-2
   858  000F44  CFE3 F03B          	movff	plusw1,btemp
   859  000F48  0EFF               	movlw	-1
   860  000F4A  CFE3 F03C          	movff	plusw1,btemp+1
   861                           
   862                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
   863  000F4E  0EFA               	movlw	250
   864  000F50  26E1               	addwf	fsr1l,f,c
   865  000F52  0EFF               	movlw	255
   866  000F54  22E2               	addwfc	fsr1h,f,c
   867  000F56  0012               	return		;funcret
   868  000F58                     __end_of___wmul:
   869                           	opt stack 0
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           prodh	equ	0xFF4
   875                           prodl	equ	0xFF3
   876                           intcon	equ	0xFF2
   877                           postinc0	equ	0xFEE
   878                           plusw0	equ	0xFEB
   879                           fsr0h	equ	0xFEA
   880                           fsr0l	equ	0xFE9
   881                           wreg	equ	0xFE8
   882                           postinc1	equ	0xFE6
   883                           plusw1	equ	0xFE3
   884                           fsr1h	equ	0xFE2
   885                           fsr1l	equ	0xFE1
   886                           indf2	equ	0xFDF
   887                           postinc2	equ	0xFDE
   888                           postdec2	equ	0xFDD
   889                           plusw2	equ	0xFDB
   890                           fsr2h	equ	0xFDA
   891                           fsr2l	equ	0xFD9
   892                           
   893 ;; *************** function _SRAMInitHeap *****************
   894 ;; Defined at:
   895 ;;		line 300 in file "memory.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;		None
   898 ;; Auto vars:     Size  Location     Type
   899 ;;  count           2   17[COMRAM] unsigned int 
   900 ;;  pHeap           2   19[COMRAM] near PTR unsigned char 
   901 ;;		 -> _uDynamicHeap(512), 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   911 ;;      Params:         0       0       0       0       0       0       0
   912 ;;      Locals:         4       0       0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0
   914 ;;      Totals:         4       0       0       0       0       0       0
   915 ;;Total ram usage:        4 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    9
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_setupOS
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text5
   926  001136                     __ptext5:
   927                           	opt stack 0
   928  001136                     _SRAMInitHeap:
   929                           	opt stack 20
   930                           
   931                           ;memory.c: 302: unsigned char * near pHeap;
   932                           ;memory.c: 303: near unsigned int count;
   933                           ;memory.c: 305: pHeap = _uDynamicHeap;
   934                           
   935                           ;incstack = 0
   936  001136  0E14               	movlw	low __uDynamicHeap
   937  001138  6E14               	movwf	SRAMInitHeap@pHeap,c
   938  00113A  0E03               	movlw	high __uDynamicHeap
   939  00113C  6E15               	movwf	SRAMInitHeap@pHeap+1,c
   940                           
   941                           ;memory.c: 306: count = 0x200-1;
   942  00113E  0E01               	movlw	1
   943  001140  6E13               	movwf	SRAMInitHeap@count+1,c
   944  001142  6812               	setf	SRAMInitHeap@count,c
   945  001144                     
   946                           ;memory.c: 309: {
   947                           ;memory.c: 310: if (count > 0x7F)
   948  001144  5013               	movf	SRAMInitHeap@count+1,w,c
   949  001146  E104               	bnz	u70
   950  001148  0E80               	movlw	128
   951  00114A  5C12               	subwf	SRAMInitHeap@count,w,c
   952  00114C  A0D8               	btfss	status,0,c
   953  00114E  D011               	goto	l232
   954  001150                     u70:
   955                           
   956                           ;memory.c: 311: {
   957                           ;memory.c: 312: *pHeap = 0x7F;
   958  001150  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   959  001154  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   960  001158  0E7F               	movlw	127
   961  00115A  6EDF               	movwf	indf2,c
   962                           
   963                           ;memory.c: 313: pHeap += 0x7F;
   964  00115C  0E7F               	movlw	127
   965  00115E  2614               	addwf	SRAMInitHeap@pHeap,f,c
   966  001160  0E00               	movlw	0
   967  001162  2215               	addwfc	SRAMInitHeap@pHeap+1,f,c
   968                           
   969                           ;memory.c: 314: count = count - 0x7F;
   970  001164  0E81               	movlw	129
   971  001166  2412               	addwf	SRAMInitHeap@count,w,c
   972  001168  6E12               	movwf	SRAMInitHeap@count,c
   973  00116A  0EFF               	movlw	255
   974  00116C  2013               	addwfc	SRAMInitHeap@count+1,w,c
   975  00116E  6E13               	movwf	SRAMInitHeap@count+1,c
   976                           
   977                           ;memory.c: 315: }
   978  001170  D7E9               	goto	l231
   979  001172                     l232:
   980                           
   981                           ;memory.c: 316: else
   982                           ;memory.c: 317: {
   983                           ;memory.c: 318: *pHeap = count;
   984  001172  C014  FFD9         	movff	SRAMInitHeap@pHeap,fsr2l
   985  001176  C015  FFDA         	movff	SRAMInitHeap@pHeap+1,fsr2h
   986  00117A  C012  FFDF         	movff	SRAMInitHeap@count,indf2
   987                           
   988                           ;memory.c: 319: *(pHeap + count) = 0;
   989  00117E  5012               	movf	SRAMInitHeap@count,w,c
   990  001180  2414               	addwf	SRAMInitHeap@pHeap,w,c
   991  001182  6ED9               	movwf	fsr2l,c
   992  001184  5013               	movf	SRAMInitHeap@count+1,w,c
   993  001186  2015               	addwfc	SRAMInitHeap@pHeap+1,w,c
   994  001188  6EDA               	movwf	fsr2h,c
   995  00118A  0E00               	movlw	0
   996  00118C  6EDF               	movwf	indf2,c
   997                           
   998                           ;memory.c: 320: return;
   999  00118E  0012               	return	
  1000  001190                     __end_of_SRAMInitHeap:
  1001                           	opt stack 0
  1002                           tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           prodh	equ	0xFF4
  1007                           prodl	equ	0xFF3
  1008                           intcon	equ	0xFF2
  1009                           postinc0	equ	0xFEE
  1010                           plusw0	equ	0xFEB
  1011                           fsr0h	equ	0xFEA
  1012                           fsr0l	equ	0xFE9
  1013                           wreg	equ	0xFE8
  1014                           postinc1	equ	0xFE6
  1015                           plusw1	equ	0xFE3
  1016                           fsr1h	equ	0xFE2
  1017                           fsr1l	equ	0xFE1
  1018                           indf2	equ	0xFDF
  1019                           postinc2	equ	0xFDE
  1020                           postdec2	equ	0xFDD
  1021                           plusw2	equ	0xFDB
  1022                           fsr2h	equ	0xFDA
  1023                           fsr2l	equ	0xFD9
  1024                           status	equ	0xFD8
  1025                           
  1026 ;; *************** function _SRAMalloc *****************
  1027 ;; Defined at:
  1028 ;;		line 178 in file "memory.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  nBytes          1    wreg     near unsigned char 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;  nBytes          1   33[COMRAM] near unsigned char 
  1033 ;;  pHeap           2   34[COMRAM] near PTR struct _SALLOC
  1034 ;;		 -> _uDynamicHeap(512), 
  1035 ;;  temp            2   31[COMRAM] near PTR struct _SALLOC
  1036 ;;		 -> _uDynamicHeap(512), 
  1037 ;;  segHeader       1   30[COMRAM] struct _SALLOC
  1038 ;;  segLen          1   29[COMRAM] unsigned char 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  2   25[COMRAM] PTR unsigned char 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1048 ;;      Params:         2       0       0       0       0       0       0
  1049 ;;      Locals:         7       0       0       0       0       0       0
  1050 ;;      Temps:          2       0       0       0       0       0       0
  1051 ;;      Totals:        11       0       0       0       0       0       0
  1052 ;;Total ram usage:       11 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:   10
  1055 ;; This function calls:
  1056 ;;		__SRAMmerge
  1057 ;; This function is called by:
  1058 ;;		_main
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text6
  1063  000AFE                     __ptext6:
  1064                           	opt stack 0
  1065  000AFE                     _SRAMalloc:
  1066                           	opt stack 20
  1067                           
  1068                           ;incstack = 0
  1069                           ;SRAMalloc@nBytes stored from wreg
  1070  000AFE  6E22               	movwf	SRAMalloc@nBytes,c
  1071                           
  1072                           ;memory.c: 180: SALLOC * near pHeap;
  1073                           ;memory.c: 181: SALLOC * near temp;
  1074                           ;memory.c: 182: near SALLOC segHeader;
  1075                           ;memory.c: 183: near unsigned char segLen;
  1076                           ;memory.c: 186: if (nBytes > (0x7F - 1)) return (0);
  1077  000B00  0E7E               	movlw	126
  1078  000B02  6422               	cpfsgt	SRAMalloc@nBytes,c
  1079  000B04  D005               	goto	l213
  1080  000B06  0E00               	movlw	0
  1081  000B08  6E1A               	movwf	?_SRAMalloc,c
  1082  000B0A  0E00               	movlw	0
  1083  000B0C  6E1B               	movwf	?_SRAMalloc+1,c
  1084  000B0E  0012               	return	
  1085  000B10                     l213:
  1086                           
  1087                           ;memory.c: 189: pHeap = (SALLOC *)_uDynamicHeap;
  1088  000B10  0E14               	movlw	low __uDynamicHeap
  1089  000B12  6E23               	movwf	SRAMalloc@pHeap,c
  1090  000B14  0E03               	movlw	high __uDynamicHeap
  1091  000B16  6E24               	movwf	SRAMalloc@pHeap+1,c
  1092  000B18                     
  1093                           ;memory.c: 192: {
  1094                           ;memory.c: 194: segHeader = *pHeap;
  1095  000B18  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1096  000B1C  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1097  000B20  50DF               	movf	indf2,w,c
  1098  000B22  6E1F               	movwf	SRAMalloc@segHeader,c
  1099                           
  1100                           ;memory.c: 197: segLen = segHeader.bits.count - 1;
  1101  000B24  501F               	movf	SRAMalloc@segHeader,w,c
  1102  000B26  0B7F               	andlw	127
  1103  000B28  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1104  000B2A  041C               	decf	??_SRAMalloc,w,c
  1105  000B2C  6E1E               	movwf	SRAMalloc@segLen,c
  1106                           
  1107                           ;memory.c: 200: if (segHeader.byte == 0) return (0);
  1108  000B2E  501F               	movf	SRAMalloc@segHeader,w,c
  1109  000B30  A4D8               	btfss	status,2,c
  1110  000B32  D005               	goto	l216
  1111  000B34  0E00               	movlw	0
  1112  000B36  6E1A               	movwf	?_SRAMalloc,c
  1113  000B38  0E00               	movlw	0
  1114  000B3A  6E1B               	movwf	?_SRAMalloc+1,c
  1115  000B3C  0012               	return	
  1116  000B3E                     l216:
  1117                           
  1118                           ;memory.c: 203: if (!(segHeader.bits.alloc))
  1119  000B3E  BE1F               	btfsc	SRAMalloc@segHeader,7,c
  1120  000B40  D043               	goto	l217
  1121                           
  1122                           ;memory.c: 204: {
  1123                           ;memory.c: 206: if (nBytes > segLen)
  1124  000B42  5022               	movf	SRAMalloc@nBytes,w,c
  1125  000B44  5C1E               	subwf	SRAMalloc@segLen,w,c
  1126  000B46  B0D8               	btfsc	status,0,c
  1127  000B48  D00A               	goto	l218
  1128                           
  1129                           ;memory.c: 207: {
  1130                           ;memory.c: 209: if (!(_SRAMmerge(pHeap))) pHeap += segHeader.bits.count;
  1131  000B4A  C023  F012         	movff	SRAMalloc@pHeap,__SRAMmerge@pSegA
  1132  000B4E  C024  F013         	movff	SRAMalloc@pHeap+1,__SRAMmerge@pSegA+1
  1133  000B52  ECBA  F006         	call	__SRAMmerge	;wreg free
  1134  000B56  0900               	iorlw	0
  1135  000B58  A4D8               	btfss	status,2,c
  1136  000B5A  D7DE               	goto	l215
  1137  000B5C  D035               	goto	l217
  1138  000B5E                     l218:
  1139                           
  1140                           ;memory.c: 211: else
  1141                           ;memory.c: 215: if (nBytes == segLen)
  1142  000B5E  501E               	movf	SRAMalloc@segLen,w,c
  1143  000B60  1822               	xorwf	SRAMalloc@nBytes,w,c
  1144  000B62  A4D8               	btfss	status,2,c
  1145  000B64  D00C               	goto	l221
  1146                           
  1147                           ;memory.c: 216: {
  1148                           ;memory.c: 218: (*pHeap).bits.alloc = 1;
  1149  000B66  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1150  000B6A  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1151  000B6E  8EDF               	bsf	indf2,7,c
  1152                           
  1153                           ;memory.c: 221: return ((unsigned char *)(pHeap + 1));
  1154  000B70  0E01               	movlw	1
  1155  000B72  2423               	addwf	SRAMalloc@pHeap,w,c
  1156  000B74  6E1A               	movwf	?_SRAMalloc,c
  1157  000B76  0E00               	movlw	0
  1158  000B78  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1159  000B7A  6E1B               	movwf	?_SRAMalloc+1,c
  1160  000B7C  0012               	return	
  1161  000B7E                     l221:
  1162                           
  1163                           ;memory.c: 225: else
  1164                           ;memory.c: 226: {
  1165                           ;memory.c: 228: (*pHeap).byte = nBytes + 0x81;
  1166  000B7E  5022               	movf	SRAMalloc@nBytes,w,c
  1167  000B80  0F81               	addlw	129
  1168  000B82  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1169  000B86  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1170  000B8A  6EDF               	movwf	indf2,c
  1171                           
  1172                           ;memory.c: 231: temp = pHeap + 1;
  1173  000B8C  0E01               	movlw	1
  1174  000B8E  2423               	addwf	SRAMalloc@pHeap,w,c
  1175  000B90  6E20               	movwf	SRAMalloc@temp,c
  1176  000B92  0E00               	movlw	0
  1177  000B94  2024               	addwfc	SRAMalloc@pHeap+1,w,c
  1178  000B96  6E21               	movwf	SRAMalloc@temp+1,c
  1179                           
  1180                           ;memory.c: 234: pHeap += (nBytes + 1);
  1181  000B98  5022               	movf	SRAMalloc@nBytes,w,c
  1182  000B9A  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1183  000B9C  6A1D               	clrf	(??_SRAMalloc+1)& (0+255),c
  1184  000B9E  0E01               	movlw	1
  1185  000BA0  261C               	addwf	??_SRAMalloc,f,c
  1186  000BA2  0E00               	movlw	0
  1187  000BA4  221D               	addwfc	??_SRAMalloc+1,f,c
  1188  000BA6  501C               	movf	??_SRAMalloc,w,c
  1189  000BA8  2623               	addwf	SRAMalloc@pHeap,f,c
  1190  000BAA  501D               	movf	??_SRAMalloc+1,w,c
  1191  000BAC  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1192                           
  1193                           ;memory.c: 237: (*pHeap).byte = segLen - nBytes;
  1194  000BAE  5022               	movf	SRAMalloc@nBytes,w,c
  1195  000BB0  0800               	sublw	0
  1196  000BB2  241E               	addwf	SRAMalloc@segLen,w,c
  1197  000BB4  C023  FFD9         	movff	SRAMalloc@pHeap,fsr2l
  1198  000BB8  C024  FFDA         	movff	SRAMalloc@pHeap+1,fsr2h
  1199  000BBC  6EDF               	movwf	indf2,c
  1200                           
  1201                           ;memory.c: 240: return ((unsigned char *) temp);
  1202  000BBE  C020  F01A         	movff	SRAMalloc@temp,?_SRAMalloc
  1203  000BC2  C021  F01B         	movff	SRAMalloc@temp+1,?_SRAMalloc+1
  1204  000BC6  0012               	return	
  1205  000BC8                     l217:
  1206                           
  1207                           ;memory.c: 245: else
  1208                           ;memory.c: 246: {
  1209                           ;memory.c: 247: pHeap += segHeader.bits.count;
  1210  000BC8  501F               	movf	SRAMalloc@segHeader,w,c
  1211  000BCA  0B7F               	andlw	127
  1212  000BCC  6E1C               	movwf	??_SRAMalloc& (0+255),c
  1213  000BCE  501C               	movf	??_SRAMalloc,w,c
  1214  000BD0  0D01               	mullw	1
  1215  000BD2  50F3               	movf	prodl,w,c
  1216  000BD4  2623               	addwf	SRAMalloc@pHeap,f,c
  1217  000BD6  50F4               	movf	prodh,w,c
  1218  000BD8  2224               	addwfc	SRAMalloc@pHeap+1,f,c
  1219  000BDA  D79E               	goto	l215
  1220  000BDC                     __end_of_SRAMalloc:
  1221                           	opt stack 0
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           prodh	equ	0xFF4
  1227                           prodl	equ	0xFF3
  1228                           intcon	equ	0xFF2
  1229                           postinc0	equ	0xFEE
  1230                           plusw0	equ	0xFEB
  1231                           fsr0h	equ	0xFEA
  1232                           fsr0l	equ	0xFE9
  1233                           wreg	equ	0xFE8
  1234                           postinc1	equ	0xFE6
  1235                           plusw1	equ	0xFE3
  1236                           fsr1h	equ	0xFE2
  1237                           fsr1l	equ	0xFE1
  1238                           indf2	equ	0xFDF
  1239                           postinc2	equ	0xFDE
  1240                           postdec2	equ	0xFDD
  1241                           plusw2	equ	0xFDB
  1242                           fsr2h	equ	0xFDA
  1243                           fsr2l	equ	0xFD9
  1244                           status	equ	0xFD8
  1245                           
  1246 ;; *************** function __SRAMmerge *****************
  1247 ;; Defined at:
  1248 ;;		line 346 in file "memory.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  pSegA           2   17[COMRAM] near PTR struct _SALLOC
  1251 ;;		 -> _uDynamicHeap(512), 
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  pSegB           2   23[COMRAM] near PTR struct _SALLOC
  1254 ;;		 -> _uDynamicHeap(512), 
  1255 ;;  uSegB           1   22[COMRAM] struct _SALLOC
  1256 ;;  uSegA           1   21[COMRAM] struct _SALLOC
  1257 ;;  uSum            1   20[COMRAM] struct _SALLOC
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      unsigned char 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1267 ;;      Params:         2       0       0       0       0       0       0
  1268 ;;      Locals:         5       0       0       0       0       0       0
  1269 ;;      Temps:          1       0       0       0       0       0       0
  1270 ;;      Totals:         8       0       0       0       0       0       0
  1271 ;;Total ram usage:        8 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    9
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_SRAMalloc
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text7
  1282  000D74                     __ptext7:
  1283                           	opt stack 0
  1284  000D74                     __SRAMmerge:
  1285                           	opt stack 20
  1286                           
  1287                           ;memory.c: 348: SALLOC * near pSegB;
  1288                           ;memory.c: 349: near SALLOC uSegA, uSegB, uSum;
  1289                           ;memory.c: 353: pSegB = pSegA + (*pSegA).byte;
  1290                           
  1291                           ;incstack = 0
  1292  000D74  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1293  000D78  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1294  000D7C  50DF               	movf	indf2,w,c
  1295  000D7E  6E14               	movwf	??__SRAMmerge& (0+255),c
  1296  000D80  5014               	movf	??__SRAMmerge,w,c
  1297  000D82  0D01               	mullw	1
  1298  000D84  50F3               	movf	prodl,w,c
  1299  000D86  2412               	addwf	__SRAMmerge@pSegA,w,c
  1300  000D88  6E18               	movwf	__SRAMmerge@pSegB,c
  1301  000D8A  50F4               	movf	prodh,w,c
  1302  000D8C  2013               	addwfc	__SRAMmerge@pSegA+1,w,c
  1303  000D8E  6E19               	movwf	__SRAMmerge@pSegB+1,c
  1304                           
  1305                           ;memory.c: 356: uSegA = *pSegA;
  1306  000D90  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1307  000D94  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1308  000D98  50DF               	movf	indf2,w,c
  1309  000D9A  6E16               	movwf	__SRAMmerge@uSegA,c
  1310                           
  1311                           ;memory.c: 357: uSegB = *pSegB;
  1312  000D9C  C018  FFD9         	movff	__SRAMmerge@pSegB,fsr2l
  1313  000DA0  C019  FFDA         	movff	__SRAMmerge@pSegB+1,fsr2h
  1314  000DA4  50DF               	movf	indf2,w,c
  1315  000DA6  6E17               	movwf	__SRAMmerge@uSegB,c
  1316                           
  1317                           ;memory.c: 360: if (uSegB.byte == 0) return (0);
  1318  000DA8  5017               	movf	__SRAMmerge@uSegB,w,c
  1319  000DAA  A4D8               	btfss	status,2,c
  1320  000DAC  D002               	goto	l239
  1321  000DAE  0E00               	movlw	0
  1322  000DB0  0012               	return	
  1323  000DB2                     l239:
  1324                           
  1325                           ;memory.c: 363: if (uSegA.bits.alloc || uSegB.bits.alloc) return (0);
  1326  000DB2  BE16               	btfsc	__SRAMmerge@uSegA,7,c
  1327  000DB4  D002               	goto	u440
  1328  000DB6  AE17               	btfss	__SRAMmerge@uSegB,7,c
  1329  000DB8  D002               	goto	l241
  1330  000DBA                     u440:
  1331  000DBA  0E00               	movlw	0
  1332  000DBC  0012               	return	
  1333  000DBE                     l241:
  1334                           
  1335                           ;memory.c: 366: if (uSegA.bits.count == 0x7F) return (0);
  1336  000DBE  5016               	movf	__SRAMmerge@uSegA,w,c
  1337  000DC0  0B7F               	andlw	127
  1338  000DC2  0A7F               	xorlw	127
  1339  000DC4  A4D8               	btfss	status,2,c
  1340  000DC6  D002               	goto	l244
  1341  000DC8  0E00               	movlw	0
  1342  000DCA  0012               	return	
  1343  000DCC                     l244:
  1344                           
  1345                           ;memory.c: 369: uSum.byte = uSegA.byte + uSegB.byte;
  1346  000DCC  5016               	movf	__SRAMmerge@uSegA,w,c
  1347  000DCE  2417               	addwf	__SRAMmerge@uSegB,w,c
  1348  000DD0  6E15               	movwf	__SRAMmerge@uSum,c
  1349                           
  1350                           ;memory.c: 375: if ((uSum.byte) > 0x7F)
  1351  000DD2  0E7F               	movlw	127
  1352  000DD4  6415               	cpfsgt	__SRAMmerge@uSum,c
  1353  000DD6  D01A               	goto	l245
  1354                           
  1355                           ;memory.c: 376: {
  1356                           ;memory.c: 377: (*pSegA).byte = 0x7F;
  1357  000DD8  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1358  000DDC  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1359  000DE0  0E7F               	movlw	127
  1360  000DE2  6EDF               	movwf	indf2,c
  1361                           
  1362                           ;memory.c: 378: pSegA += 0x7F;
  1363  000DE4  0E7F               	movlw	127
  1364  000DE6  2612               	addwf	__SRAMmerge@pSegA,f,c
  1365  000DE8  0E00               	movlw	0
  1366  000DEA  2213               	addwfc	__SRAMmerge@pSegA+1,f,c
  1367                           
  1368                           ;memory.c: 379: pSegB += uSegB.byte;
  1369  000DEC  5017               	movf	__SRAMmerge@uSegB,w,c
  1370  000DEE  0D01               	mullw	1
  1371  000DF0  50F3               	movf	prodl,w,c
  1372  000DF2  2618               	addwf	__SRAMmerge@pSegB,f,c
  1373  000DF4  50F4               	movf	prodh,w,c
  1374  000DF6  2219               	addwfc	__SRAMmerge@pSegB+1,f,c
  1375                           
  1376                           ;memory.c: 380: (*pSegA).byte = pSegB - pSegA;
  1377  000DF8  5012               	movf	__SRAMmerge@pSegA,w,c
  1378  000DFA  0800               	sublw	0
  1379  000DFC  2418               	addwf	__SRAMmerge@pSegB,w,c
  1380  000DFE  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1381  000E02  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1382  000E06  6EDF               	movwf	indf2,c
  1383                           
  1384                           ;memory.c: 382: return (0x7F);
  1385  000E08  0E7F               	movlw	127
  1386                           
  1387                           ;memory.c: 383: }
  1388  000E0A  0012               	return	
  1389  000E0C                     l245:
  1390                           
  1391                           ;memory.c: 386: else
  1392                           ;memory.c: 387: {
  1393                           ;memory.c: 388: return ((*pSegA).byte = uSum.byte);
  1394  000E0C  C012  FFD9         	movff	__SRAMmerge@pSegA,fsr2l
  1395  000E10  C013  FFDA         	movff	__SRAMmerge@pSegA+1,fsr2h
  1396  000E14  C015  FFDF         	movff	__SRAMmerge@uSum,indf2
  1397  000E18  50DF               	movf	indf2,w,c
  1398  000E1A  0012               	return	
  1399  000E1C                     __end_of__SRAMmerge:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           intcon	equ	0xFF2
  1408                           postinc0	equ	0xFEE
  1409                           plusw0	equ	0xFEB
  1410                           fsr0h	equ	0xFEA
  1411                           fsr0l	equ	0xFE9
  1412                           wreg	equ	0xFE8
  1413                           postinc1	equ	0xFE6
  1414                           plusw1	equ	0xFE3
  1415                           fsr1h	equ	0xFE2
  1416                           fsr1l	equ	0xFE1
  1417                           indf2	equ	0xFDF
  1418                           postinc2	equ	0xFDE
  1419                           postdec2	equ	0xFDD
  1420                           plusw2	equ	0xFDB
  1421                           fsr2h	equ	0xFDA
  1422                           fsr2l	equ	0xFD9
  1423                           status	equ	0xFD8
  1424                           
  1425 ;; *************** function _aviao2 *****************
  1426 ;; Defined at:
  1427 ;;		line 17 in file "tasks.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;		None
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  dado            1    0        unsigned char 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1  [STACK] void 
  1434 ;; Registers used:
  1435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1441 ;;      Params:         0       0       0       0       0       0       0
  1442 ;;      Locals:         0       0       0       0       0       0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0
  1444 ;;      Totals:         0       0       0       0       0       0       0
  1445 ;;Total ram usage:        0 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    8
  1448 ;; This function calls:
  1449 ;;		_create_pipe
  1450 ;;		_write_pipe
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text8
  1457  00124C                     __ptext8:
  1458                           	opt stack 0
  1459  00124C                     _aviao2:
  1460                           	opt stack 19
  1461                           
  1462                           ;tasks.c: 19: byte dado;
  1463                           ;tasks.c: 21: TRISDbits.RD1 = 0;
  1464                           
  1465                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1466                           ;incstack = 0
  1467  00124C  9295               	bcf	3989,1,c	;volatile
  1468                           
  1469                           ;tasks.c: 22: PORTDbits.RD1 = 0;
  1470  00124E  9283               	bcf	3971,1,c	;volatile
  1471                           
  1472                           ;tasks.c: 23: create_pipe(&pipe);
  1473  001250  0E2B               	movlw	low _pipe
  1474  001252  6EE6               	movwf	postinc1,c
  1475  001254  0E00               	movlw	high _pipe
  1476  001256  6EE6               	movwf	postinc1,c
  1477  001258  EC0E  F007         	call	_create_pipe	;wreg free
  1478  00125C                     l1540:
  1479                           
  1480                           ;tasks.c: 28: write_pipe(&pipe, 2);
  1481  00125C  0E02               	movlw	2
  1482  00125E  6EE6               	movwf	postinc1,c
  1483  001260  0E2B               	movlw	low _pipe
  1484  001262  6EE6               	movwf	postinc1,c
  1485  001264  0E00               	movlw	high _pipe
  1486  001266  6EE6               	movwf	postinc1,c
  1487  001268  EC70  F003         	call	_write_pipe	;wreg free
  1488  00126C  D7F7               	goto	l1540
  1489  00126E                     __end_of_aviao2:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           plusw0	equ	0xFEB
  1500                           fsr0h	equ	0xFEA
  1501                           fsr0l	equ	0xFE9
  1502                           wreg	equ	0xFE8
  1503                           postinc1	equ	0xFE6
  1504                           plusw1	equ	0xFE3
  1505                           fsr1h	equ	0xFE2
  1506                           fsr1l	equ	0xFE1
  1507                           indf2	equ	0xFDF
  1508                           postinc2	equ	0xFDE
  1509                           postdec2	equ	0xFDD
  1510                           plusw2	equ	0xFDB
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _write_pipe *****************
  1516 ;; Defined at:
  1517 ;;		line 21 in file "pipe.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  pipe            2  [STACK] PTR struct pipe
  1520 ;;		 -> pipe(14), 
  1521 ;;  data            1  [STACK] unsigned char 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1  [STACK] void 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1533 ;;      Params:         0       0       0       0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0
  1536 ;;      Totals:         0       0       0       0       0       0       0
  1537 ;;Total ram usage:        0 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    7
  1540 ;; This function calls:
  1541 ;;		___wmul
  1542 ;;		_dispatcher
  1543 ;; This function is called by:
  1544 ;;		_aviao2
  1545 ;;		_aviao3
  1546 ;; This function uses a reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text9
  1550  0006E0                     __ptext9:
  1551                           	opt stack 0
  1552  0006E0                     _write_pipe:
  1553                           	opt stack 19
  1554                           
  1555                           ;pipe.c: 23: (INTCONbits.GIE = 0);
  1556                           
  1557                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  1558                           ;incstack = 0
  1559  0006E0  9EF2               	bcf	intcon,7,c	;volatile
  1560                           
  1561                           ;pipe.c: 26: if (pipe->pipe_itens == 4) {
  1562                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1563  0006E2  0EFE               	movlw	-2
  1564  0006E4  CFE3 F03C          	movff	plusw1,btemp+1
  1565  0006E8  0EFF               	movlw	-1
  1566  0006EA  CFE3 F03D          	movff	plusw1,btemp+2
  1567  0006EE  0E08               	movlw	8
  1568  0006F0  243C               	addwf	btemp+1,w,c
  1569  0006F2  6ED9               	movwf	fsr2l,c
  1570  0006F4  0E00               	movlw	0
  1571  0006F6  203D               	addwfc	btemp+2,w,c
  1572  0006F8  6EDA               	movwf	fsr2h,c
  1573  0006FA  0E04               	movlw	4
  1574  0006FC  18DE               	xorwf	postinc2,w,c
  1575  0006FE  10DE               	iorwf	postinc2,w,c
  1576  000700  A4D8               	btfss	status,2,c
  1577  000702  D014               	goto	l1438
  1578                           
  1579                           ;pipe.c: 28: pipe->pos_bloqued_write = task_running;
  1580                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1581  000704  0EFE               	movlw	-2
  1582  000706  CFE3 F03C          	movff	plusw1,btemp+1
  1583  00070A  0EFF               	movlw	-1
  1584  00070C  CFE3 F03D          	movff	plusw1,btemp+2
  1585  000710  0E0C               	movlw	12
  1586  000712  243C               	addwf	btemp+1,w,c
  1587  000714  6ED9               	movwf	fsr2l,c
  1588  000716  0E00               	movlw	0
  1589  000718  203D               	addwfc	btemp+2,w,c
  1590  00071A  6EDA               	movwf	fsr2h,c
  1591  00071C  C027  FFDE         	movff	_task_running,postinc2
  1592  000720  C028  FFDD         	movff	_task_running+1,postdec2
  1593                           
  1594                           ;pipe.c: 30: dispatcher(WAITING_PIPE);
  1595  000724  0E06               	movlw	6
  1596  000726  6EE6               	movwf	postinc1,c
  1597  000728  EC0A  F000         	call	_dispatcher	;wreg free
  1598  00072C                     l1438:
  1599                           
  1600                           ;pipe.c: 31: }
  1601                           ;pipe.c: 33: pipe->pipe_queue[pipe->pos_write_pipe] = data;
  1602                           ;stkvar	write_pipe@data @ sp[(0)+-3]
  1603                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1604  00072C  0EFE               	movlw	-2
  1605  00072E  CFE3 F03C          	movff	plusw1,btemp+1
  1606  000732  0EFF               	movlw	-1
  1607  000734  CFE3 F03D          	movff	plusw1,btemp+2
  1608  000738  0E06               	movlw	6
  1609  00073A  243C               	addwf	btemp+1,w,c
  1610  00073C  6ED9               	movwf	fsr2l,c
  1611  00073E  0E00               	movlw	0
  1612  000740  203D               	addwfc	btemp+2,w,c
  1613  000742  6EDA               	movwf	fsr2h,c
  1614  000744  CFDE F03C          	movff	postinc2,btemp+1
  1615  000748  CFDD F03D          	movff	postdec2,btemp+2
  1616                           
  1617                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1618  00074C  0EFE               	movlw	-2
  1619  00074E  CFE3 F045          	movff	plusw1,btemp+10
  1620  000752  0EFF               	movlw	-1
  1621  000754  CFE3 F046          	movff	plusw1,btemp+11
  1622  000758  503C               	movf	btemp+1,w,c
  1623  00075A  2445               	addwf	btemp+10,w,c
  1624  00075C  6ED9               	movwf	fsr2l,c
  1625  00075E  503D               	movf	btemp+2,w,c
  1626  000760  2046               	addwfc	btemp+11,w,c
  1627  000762  6EDA               	movwf	fsr2h,c
  1628  000764  0EFD               	movlw	-3
  1629  000766  CFE3 FFDF          	movff	plusw1,indf2
  1630                           
  1631                           ;pipe.c: 34: pipe->pos_write_pipe = (pipe->pos_write_pipe + 1) % 4;
  1632                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1633  00076A  0EFE               	movlw	-2
  1634  00076C  CFE3 F03C          	movff	plusw1,btemp+1
  1635  000770  0EFF               	movlw	-1
  1636  000772  CFE3 F03D          	movff	plusw1,btemp+2
  1637  000776  0E06               	movlw	6
  1638  000778  243C               	addwf	btemp+1,w,c
  1639  00077A  6ED9               	movwf	fsr2l,c
  1640  00077C  0E00               	movlw	0
  1641  00077E  203D               	addwfc	btemp+2,w,c
  1642  000780  6EDA               	movwf	fsr2h,c
  1643  000782  CFDE F03C          	movff	postinc2,btemp+1
  1644  000786  CFDD F03D          	movff	postdec2,btemp+2
  1645  00078A  0E01               	movlw	1
  1646  00078C  263C               	addwf	btemp+1,f,c
  1647  00078E  0E00               	movlw	0
  1648  000790  223D               	addwfc	btemp+2,f,c
  1649  000792  0E03               	movlw	3
  1650  000794  163C               	andwf	btemp+1,f,c
  1651  000796  0E00               	movlw	0
  1652  000798  163D               	andwf	btemp+2,f,c
  1653                           
  1654                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1655  00079A  0EFE               	movlw	-2
  1656  00079C  CFE3 F045          	movff	plusw1,btemp+10
  1657  0007A0  0EFF               	movlw	-1
  1658  0007A2  CFE3 F046          	movff	plusw1,btemp+11
  1659  0007A6  0E06               	movlw	6
  1660  0007A8  2445               	addwf	btemp+10,w,c
  1661  0007AA  6ED9               	movwf	fsr2l,c
  1662  0007AC  0E00               	movlw	0
  1663  0007AE  2046               	addwfc	btemp+11,w,c
  1664  0007B0  6EDA               	movwf	fsr2h,c
  1665  0007B2  C03C  FFDE         	movff	btemp+1,postinc2
  1666  0007B6  C03D  FFDD         	movff	btemp+2,postdec2
  1667                           
  1668                           ;pipe.c: 35: pipe->pipe_itens++;
  1669                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1670  0007BA  0EFE               	movlw	-2
  1671  0007BC  CFE3 F03C          	movff	plusw1,btemp+1
  1672  0007C0  0EFF               	movlw	-1
  1673  0007C2  CFE3 F03D          	movff	plusw1,btemp+2
  1674  0007C6  0E08               	movlw	8
  1675  0007C8  243C               	addwf	btemp+1,w,c
  1676  0007CA  6ED9               	movwf	fsr2l,c
  1677  0007CC  0E00               	movlw	0
  1678  0007CE  203D               	addwfc	btemp+2,w,c
  1679  0007D0  6EDA               	movwf	fsr2h,c
  1680  0007D2  2ADE               	incf	postinc2,f,c
  1681  0007D4  0E00               	movlw	0
  1682  0007D6  22DD               	addwfc	postdec2,f,c
  1683                           
  1684                           ;pipe.c: 38: if (pipe->pos_bloqued_read > 0) {
  1685                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1686  0007D8  0EFE               	movlw	-2
  1687  0007DA  CFE3 F03C          	movff	plusw1,btemp+1
  1688  0007DE  0EFF               	movlw	-1
  1689  0007E0  CFE3 F03D          	movff	plusw1,btemp+2
  1690  0007E4  0E0A               	movlw	10
  1691  0007E6  243C               	addwf	btemp+1,w,c
  1692  0007E8  6ED9               	movwf	fsr2l,c
  1693  0007EA  0E00               	movlw	0
  1694  0007EC  203D               	addwfc	btemp+2,w,c
  1695  0007EE  6EDA               	movwf	fsr2h,c
  1696  0007F0  50DE               	movf	postinc2,w,c
  1697  0007F2  10DE               	iorwf	postinc2,w,c
  1698  0007F4  B4D8               	btfsc	status,2,c
  1699  0007F6  D032               	goto	l1450
  1700                           
  1701                           ;pipe.c: 39: F_APTOS[pipe->pos_bloqued_read].task_state = READY;
  1702  0007F8  0E6E               	movlw	110
  1703  0007FA  6EE6               	movwf	postinc1,c
  1704  0007FC  0E00               	movlw	0
  1705  0007FE  6EE6               	movwf	postinc1,c
  1706                           
  1707                           ;stkvar	write_pipe@pipe @ sp[(-2)+-2]
  1708  000800  0EFC               	movlw	-4
  1709  000802  CFE3 F03C          	movff	plusw1,btemp+1
  1710  000806  0EFD               	movlw	-3
  1711  000808  CFE3 F03D          	movff	plusw1,btemp+2
  1712  00080C  0E0A               	movlw	10
  1713  00080E  243C               	addwf	btemp+1,w,c
  1714  000810  6ED9               	movwf	fsr2l,c
  1715  000812  0E00               	movlw	0
  1716  000814  203D               	addwfc	btemp+2,w,c
  1717  000816  6EDA               	movwf	fsr2h,c
  1718  000818  CFDE F03C          	movff	postinc2,btemp+1
  1719  00081C  CFDD F03D          	movff	postdec2,btemp+2
  1720  000820  C03C  FFE6         	movff	btemp+1,postinc1
  1721  000824  C03D  FFE6         	movff	btemp+2,postinc1
  1722  000828  EC61  F007         	call	___wmul	;wreg free
  1723  00082C  0EF6               	movlw	low (_F_APTOS+8)
  1724  00082E  243B               	addwf	btemp,w,c
  1725  000830  6ED9               	movwf	fsr2l,c
  1726  000832  0E00               	movlw	high (_F_APTOS+8)
  1727  000834  203C               	addwfc	btemp+1,w,c
  1728  000836  6EDA               	movwf	fsr2h,c
  1729  000838  0E01               	movlw	1
  1730  00083A  6EDF               	movwf	indf2,c
  1731                           
  1732                           ;pipe.c: 40: pipe->pos_bloqued_read = 0;
  1733                           ;stkvar	write_pipe@pipe @ sp[(0)+-2]
  1734  00083C  0EFE               	movlw	-2
  1735  00083E  CFE3 F03C          	movff	plusw1,btemp+1
  1736  000842  0EFF               	movlw	-1
  1737  000844  CFE3 F03D          	movff	plusw1,btemp+2
  1738  000848  0E0A               	movlw	10
  1739  00084A  243C               	addwf	btemp+1,w,c
  1740  00084C  6ED9               	movwf	fsr2l,c
  1741  00084E  0E00               	movlw	0
  1742  000850  203D               	addwfc	btemp+2,w,c
  1743  000852  6EDA               	movwf	fsr2h,c
  1744  000854  0E00               	movlw	0
  1745  000856  6EDE               	movwf	postinc2,c
  1746  000858  0E00               	movlw	0
  1747  00085A  6EDD               	movwf	postdec2,c
  1748  00085C                     l1450:
  1749                           
  1750                           ;pipe.c: 44: }
  1751                           ;pipe.c: 47: (INTCONbits.GIE = 1);
  1752  00085C  8EF2               	bsf	intcon,7,c	;volatile
  1753                           
  1754                           ; _write_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
  1755  00085E  52E5               	movf	postdec1,f,c
  1756  000860  52E5               	movf	postdec1,f,c
  1757  000862  52E5               	movf	postdec1,f,c
  1758  000864  0012               	return		;funcret
  1759  000866                     __end_of_write_pipe:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           plusw0	equ	0xFEB
  1770                           fsr0h	equ	0xFEA
  1771                           fsr0l	equ	0xFE9
  1772                           wreg	equ	0xFE8
  1773                           postinc1	equ	0xFE6
  1774                           postdec1	equ	0xFE5
  1775                           plusw1	equ	0xFE3
  1776                           fsr1h	equ	0xFE2
  1777                           fsr1l	equ	0xFE1
  1778                           indf2	equ	0xFDF
  1779                           postinc2	equ	0xFDE
  1780                           postdec2	equ	0xFDD
  1781                           plusw2	equ	0xFDB
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _dispatcher *****************
  1787 ;; Defined at:
  1788 ;;		line 33 in file "kernel.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  state           1  [STACK] enum E3007
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1  [STACK] void 
  1795 ;; Registers used:
  1796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1802 ;;      Params:         0       0       0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    6
  1809 ;; This function calls:
  1810 ;;		___wmul
  1811 ;;		_rr_scheduler
  1812 ;; This function is called by:
  1813 ;;		_delay
  1814 ;;		_int_high
  1815 ;;		_sem_wait
  1816 ;;		_sem_post
  1817 ;;		_write_pipe
  1818 ;;		_read_pipe
  1819 ;; This function uses a reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text10
  1823  000014                     __ptext10:
  1824                           	opt stack 0
  1825  000014                     _dispatcher:
  1826                           	opt stack 15
  1827                           
  1828                           ;kernel.c: 35: (INTCONbits.GIE = 0);
  1829                           
  1830                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  1831                           ;incstack = 0
  1832  000014  9EF2               	bcf	intcon,7,c	;volatile
  1833                           
  1834                           ;kernel.c: 38: F_APTOS[task_running].task_state = state; F_APTOS[task_running].BSR_regis
      +                          ter = BSR; F_APTOS[task_running].STATUS_register = STATUS; F_APTOS[task_running].WORK_re
      +                          gister = WREG; F_APTOS[task_running].task_stack.stack_size = 0; do { \F_APTOS[task_runni
      +                          n
  1835                           ;stkvar	dispatcher@state @ sp[(0)+-1]
  1836  000016  0E6E               	movlw	110
  1837  000018  6EE6               	movwf	postinc1,c
  1838  00001A  0E00               	movlw	0
  1839  00001C  6EE6               	movwf	postinc1,c
  1840  00001E  C027  FFE6         	movff	_task_running,postinc1
  1841  000022  C028  FFE6         	movff	_task_running+1,postinc1
  1842  000026  EC61  F007         	call	___wmul	;wreg free
  1843  00002A  0EF6               	movlw	low (_F_APTOS+8)
  1844  00002C  243B               	addwf	btemp,w,c
  1845  00002E  6ED9               	movwf	fsr2l,c
  1846  000030  0E00               	movlw	high (_F_APTOS+8)
  1847  000032  203C               	addwfc	btemp+1,w,c
  1848  000034  6EDA               	movwf	fsr2h,c
  1849  000036  0EFF               	movlw	-1
  1850  000038  CFE3 FFDF          	movff	plusw1,indf2
  1851  00003C  0E6E               	movlw	110
  1852  00003E  6EE6               	movwf	postinc1,c
  1853  000040  0E00               	movlw	0
  1854  000042  6EE6               	movwf	postinc1,c
  1855  000044  C027  FFE6         	movff	_task_running,postinc1
  1856  000048  C028  FFE6         	movff	_task_running+1,postinc1
  1857  00004C  EC61  F007         	call	___wmul	;wreg free
  1858  000050  0E59               	movlw	low (_F_APTOS+107)
  1859  000052  243B               	addwf	btemp,w,c
  1860  000054  6ED9               	movwf	fsr2l,c
  1861  000056  0E01               	movlw	high (_F_APTOS+107)
  1862  000058  203C               	addwfc	btemp+1,w,c
  1863  00005A  6EDA               	movwf	fsr2h,c
  1864  00005C  CFE0 FFDF          	movff	bsr,indf2	;volatile
  1865  000060  0E6E               	movlw	110
  1866  000062  6EE6               	movwf	postinc1,c
  1867  000064  0E00               	movlw	0
  1868  000066  6EE6               	movwf	postinc1,c
  1869  000068  C027  FFE6         	movff	_task_running,postinc1
  1870  00006C  C028  FFE6         	movff	_task_running+1,postinc1
  1871  000070  EC61  F007         	call	___wmul	;wreg free
  1872  000074  0E5A               	movlw	low (_F_APTOS+108)
  1873  000076  243B               	addwf	btemp,w,c
  1874  000078  6ED9               	movwf	fsr2l,c
  1875  00007A  0E01               	movlw	high (_F_APTOS+108)
  1876  00007C  203C               	addwfc	btemp+1,w,c
  1877  00007E  6EDA               	movwf	fsr2h,c
  1878  000080  CFD8 FFDF          	movff	status,indf2	;volatile
  1879  000084  0E6E               	movlw	110
  1880  000086  6EE6               	movwf	postinc1,c
  1881  000088  0E00               	movlw	0
  1882  00008A  6EE6               	movwf	postinc1,c
  1883  00008C  C027  FFE6         	movff	_task_running,postinc1
  1884  000090  C028  FFE6         	movff	_task_running+1,postinc1
  1885  000094  EC61  F007         	call	___wmul	;wreg free
  1886  000098  0E5B               	movlw	low (_F_APTOS+109)
  1887  00009A  243B               	addwf	btemp,w,c
  1888  00009C  6ED9               	movwf	fsr2l,c
  1889  00009E  0E01               	movlw	high (_F_APTOS+109)
  1890  0000A0  203C               	addwfc	btemp+1,w,c
  1891  0000A2  6EDA               	movwf	fsr2h,c
  1892  0000A4  CFE8 FFDF          	movff	wreg,indf2	;volatile
  1893  0000A8  0E6E               	movlw	110
  1894  0000AA  6EE6               	movwf	postinc1,c
  1895  0000AC  0E00               	movlw	0
  1896  0000AE  6EE6               	movwf	postinc1,c
  1897  0000B0  C027  FFE6         	movff	_task_running,postinc1
  1898  0000B4  C028  FFE6         	movff	_task_running+1,postinc1
  1899  0000B8  EC61  F007         	call	___wmul	;wreg free
  1900  0000BC  0E57               	movlw	low (_F_APTOS+105)
  1901  0000BE  243B               	addwf	btemp,w,c
  1902  0000C0  6ED9               	movwf	fsr2l,c
  1903  0000C2  0E01               	movlw	high (_F_APTOS+105)
  1904  0000C4  203C               	addwfc	btemp+1,w,c
  1905  0000C6  6EDA               	movwf	fsr2h,c
  1906  0000C8  0E00               	movlw	0
  1907  0000CA  6EDE               	movwf	postinc2,c
  1908  0000CC  0E00               	movlw	0
  1909  0000CE  6EDD               	movwf	postdec2,c
  1910  0000D0                     l1386:
  1911  0000D0  0E03               	movlw	3
  1912  0000D2  6EE6               	movwf	postinc1,c
  1913  0000D4  0E00               	movlw	0
  1914  0000D6  6EE6               	movwf	postinc1,c
  1915  0000D8  0E6E               	movlw	110
  1916  0000DA  6EE6               	movwf	postinc1,c
  1917  0000DC  0E00               	movlw	0
  1918  0000DE  6EE6               	movwf	postinc1,c
  1919  0000E0  C027  FFE6         	movff	_task_running,postinc1
  1920  0000E4  C028  FFE6         	movff	_task_running+1,postinc1
  1921  0000E8  EC61  F007         	call	___wmul	;wreg free
  1922  0000EC  0E57               	movlw	low (_F_APTOS+105)
  1923  0000EE  243B               	addwf	btemp,w,c
  1924  0000F0  6ED9               	movwf	fsr2l,c
  1925  0000F2  0E01               	movlw	high (_F_APTOS+105)
  1926  0000F4  203C               	addwfc	btemp+1,w,c
  1927  0000F6  6EDA               	movwf	fsr2h,c
  1928  0000F8  CFDE F03C          	movff	postinc2,btemp+1
  1929  0000FC  CFDD F03D          	movff	postdec2,btemp+2
  1930  000100  C03C  FFE6         	movff	btemp+1,postinc1
  1931  000104  C03D  FFE6         	movff	btemp+2,postinc1
  1932  000108  EC61  F007         	call	___wmul	;wreg free
  1933  00010C  C03B  F043         	movff	btemp,btemp+8
  1934  000110  C03C  F044         	movff	btemp+1,btemp+9
  1935  000114  0E6E               	movlw	110
  1936  000116  6EE6               	movwf	postinc1,c
  1937  000118  0E00               	movlw	0
  1938  00011A  6EE6               	movwf	postinc1,c
  1939  00011C  C027  FFE6         	movff	_task_running,postinc1
  1940  000120  C028  FFE6         	movff	_task_running+1,postinc1
  1941  000124  EC61  F007         	call	___wmul	;wreg free
  1942  000128  0EEE               	movlw	low _F_APTOS
  1943  00012A  6E45               	movwf	btemp+10,c
  1944  00012C  0E00               	movlw	high _F_APTOS
  1945  00012E  6E46               	movwf	btemp+11,c
  1946  000130  0E09               	movlw	9
  1947  000132  2645               	addwf	btemp+10,f,c
  1948  000134  0E00               	movlw	0
  1949  000136  2246               	addwfc	btemp+11,f,c
  1950  000138  503B               	movf	btemp,w,c
  1951  00013A  2645               	addwf	btemp+10,f,c
  1952  00013C  503C               	movf	btemp+1,w,c
  1953  00013E  2246               	addwfc	btemp+11,f,c
  1954  000140  5043               	movf	btemp+8,w,c
  1955  000142  2445               	addwf	btemp+10,w,c
  1956  000144  6ED9               	movwf	fsr2l,c
  1957  000146  5044               	movf	btemp+9,w,c
  1958  000148  2046               	addwfc	btemp+11,w,c
  1959  00014A  6EDA               	movwf	fsr2h,c
  1960  00014C  CFFF FFDF          	movff	tosu,indf2	;volatile
  1961  000150  0E03               	movlw	3
  1962  000152  6EE6               	movwf	postinc1,c
  1963  000154  0E00               	movlw	0
  1964  000156  6EE6               	movwf	postinc1,c
  1965  000158  0E6E               	movlw	110
  1966  00015A  6EE6               	movwf	postinc1,c
  1967  00015C  0E00               	movlw	0
  1968  00015E  6EE6               	movwf	postinc1,c
  1969  000160  C027  FFE6         	movff	_task_running,postinc1
  1970  000164  C028  FFE6         	movff	_task_running+1,postinc1
  1971  000168  EC61  F007         	call	___wmul	;wreg free
  1972  00016C  0E57               	movlw	low (_F_APTOS+105)
  1973  00016E  243B               	addwf	btemp,w,c
  1974  000170  6ED9               	movwf	fsr2l,c
  1975  000172  0E01               	movlw	high (_F_APTOS+105)
  1976  000174  203C               	addwfc	btemp+1,w,c
  1977  000176  6EDA               	movwf	fsr2h,c
  1978  000178  CFDE F03C          	movff	postinc2,btemp+1
  1979  00017C  CFDD F03D          	movff	postdec2,btemp+2
  1980  000180  C03C  FFE6         	movff	btemp+1,postinc1
  1981  000184  C03D  FFE6         	movff	btemp+2,postinc1
  1982  000188  EC61  F007         	call	___wmul	;wreg free
  1983  00018C  C03B  F043         	movff	btemp,btemp+8
  1984  000190  C03C  F044         	movff	btemp+1,btemp+9
  1985  000194  0E6E               	movlw	110
  1986  000196  6EE6               	movwf	postinc1,c
  1987  000198  0E00               	movlw	0
  1988  00019A  6EE6               	movwf	postinc1,c
  1989  00019C  C027  FFE6         	movff	_task_running,postinc1
  1990  0001A0  C028  FFE6         	movff	_task_running+1,postinc1
  1991  0001A4  EC61  F007         	call	___wmul	;wreg free
  1992  0001A8  0EEE               	movlw	low _F_APTOS
  1993  0001AA  6E45               	movwf	btemp+10,c
  1994  0001AC  0E00               	movlw	high _F_APTOS
  1995  0001AE  6E46               	movwf	btemp+11,c
  1996  0001B0  0E0A               	movlw	10
  1997  0001B2  2645               	addwf	btemp+10,f,c
  1998  0001B4  0E00               	movlw	0
  1999  0001B6  2246               	addwfc	btemp+11,f,c
  2000  0001B8  503B               	movf	btemp,w,c
  2001  0001BA  2645               	addwf	btemp+10,f,c
  2002  0001BC  503C               	movf	btemp+1,w,c
  2003  0001BE  2246               	addwfc	btemp+11,f,c
  2004  0001C0  5043               	movf	btemp+8,w,c
  2005  0001C2  2445               	addwf	btemp+10,w,c
  2006  0001C4  6ED9               	movwf	fsr2l,c
  2007  0001C6  5044               	movf	btemp+9,w,c
  2008  0001C8  2046               	addwfc	btemp+11,w,c
  2009  0001CA  6EDA               	movwf	fsr2h,c
  2010  0001CC  CFFD FFDF          	movff	tosl,indf2	;volatile
  2011  0001D0  0E03               	movlw	3
  2012  0001D2  6EE6               	movwf	postinc1,c
  2013  0001D4  0E00               	movlw	0
  2014  0001D6  6EE6               	movwf	postinc1,c
  2015  0001D8  0E6E               	movlw	110
  2016  0001DA  6EE6               	movwf	postinc1,c
  2017  0001DC  0E00               	movlw	0
  2018  0001DE  6EE6               	movwf	postinc1,c
  2019  0001E0  C027  FFE6         	movff	_task_running,postinc1
  2020  0001E4  C028  FFE6         	movff	_task_running+1,postinc1
  2021  0001E8  EC61  F007         	call	___wmul	;wreg free
  2022  0001EC  0E57               	movlw	low (_F_APTOS+105)
  2023  0001EE  243B               	addwf	btemp,w,c
  2024  0001F0  6ED9               	movwf	fsr2l,c
  2025  0001F2  0E01               	movlw	high (_F_APTOS+105)
  2026  0001F4  203C               	addwfc	btemp+1,w,c
  2027  0001F6  6EDA               	movwf	fsr2h,c
  2028  0001F8  CFDE F03C          	movff	postinc2,btemp+1
  2029  0001FC  CFDD F03D          	movff	postdec2,btemp+2
  2030  000200  C03C  FFE6         	movff	btemp+1,postinc1
  2031  000204  C03D  FFE6         	movff	btemp+2,postinc1
  2032  000208  EC61  F007         	call	___wmul	;wreg free
  2033  00020C  C03B  F043         	movff	btemp,btemp+8
  2034  000210  C03C  F044         	movff	btemp+1,btemp+9
  2035  000214  0E6E               	movlw	110
  2036  000216  6EE6               	movwf	postinc1,c
  2037  000218  0E00               	movlw	0
  2038  00021A  6EE6               	movwf	postinc1,c
  2039  00021C  C027  FFE6         	movff	_task_running,postinc1
  2040  000220  C028  FFE6         	movff	_task_running+1,postinc1
  2041  000224  EC61  F007         	call	___wmul	;wreg free
  2042  000228  0EEE               	movlw	low _F_APTOS
  2043  00022A  6E45               	movwf	btemp+10,c
  2044  00022C  0E00               	movlw	high _F_APTOS
  2045  00022E  6E46               	movwf	btemp+11,c
  2046  000230  0E0B               	movlw	11
  2047  000232  2645               	addwf	btemp+10,f,c
  2048  000234  0E00               	movlw	0
  2049  000236  2246               	addwfc	btemp+11,f,c
  2050  000238  503B               	movf	btemp,w,c
  2051  00023A  2645               	addwf	btemp+10,f,c
  2052  00023C  503C               	movf	btemp+1,w,c
  2053  00023E  2246               	addwfc	btemp+11,f,c
  2054  000240  5043               	movf	btemp+8,w,c
  2055  000242  2445               	addwf	btemp+10,w,c
  2056  000244  6ED9               	movwf	fsr2l,c
  2057  000246  5044               	movf	btemp+9,w,c
  2058  000248  2046               	addwfc	btemp+11,w,c
  2059  00024A  6EDA               	movwf	fsr2h,c
  2060  00024C  CFFE FFDF          	movff	tosh,indf2	;volatile
  2061  000250  0E6E               	movlw	110
  2062  000252  6EE6               	movwf	postinc1,c
  2063  000254  0E00               	movlw	0
  2064  000256  6EE6               	movwf	postinc1,c
  2065  000258  C027  FFE6         	movff	_task_running,postinc1
  2066  00025C  C028  FFE6         	movff	_task_running+1,postinc1
  2067  000260  EC61  F007         	call	___wmul	;wreg free
  2068  000264  0E57               	movlw	low (_F_APTOS+105)
  2069  000266  243B               	addwf	btemp,w,c
  2070  000268  6ED9               	movwf	fsr2l,c
  2071  00026A  0E01               	movlw	high (_F_APTOS+105)
  2072  00026C  203C               	addwfc	btemp+1,w,c
  2073  00026E  6EDA               	movwf	fsr2h,c
  2074  000270  2ADE               	incf	postinc2,f,c
  2075  000272  0E00               	movlw	0
  2076  000274  22DD               	addwfc	postdec2,f,c
  2077  000276  0006               	pop		;# 
  2078  000278  50FC               	movf	stkptr,w,c	;volatile
  2079  00027A  A4D8               	btfss	status,2,c
  2080  00027C  D729               	goto	l1386
  2081                           
  2082                           ;kernel.c: 42: task_running = rr_scheduler();
  2083  00027E  ECF6  F007         	call	_rr_scheduler	;wreg free
  2084  000282  C03B  F027         	movff	btemp,_task_running
  2085  000286  C03C  F028         	movff	btemp+1,_task_running+1
  2086                           
  2087                           ;kernel.c: 48: \STKPTR = 0;\if (F_APTOS[task_running].task_stack.stack_size == 0) {\asm(
      +                          "PUSH");\TOS = F_APTOS[task_running].task_f;\}\else {\BSR = F_APTOS[task_running].BSR_re
      +                          gister;\STATUS = F_APTOS[task_running].STATUS_register;\WREG = F_APTOS[task_running].WOR
      +                          K
  2088  00028A  6AFC               	clrf	stkptr,c	;volatile
  2089  00028C  0E6E               	movlw	110
  2090  00028E  6EE6               	movwf	postinc1,c
  2091  000290  0E00               	movlw	0
  2092  000292  6EE6               	movwf	postinc1,c
  2093  000294  C027  FFE6         	movff	_task_running,postinc1
  2094  000298  C028  FFE6         	movff	_task_running+1,postinc1
  2095  00029C  EC61  F007         	call	___wmul	;wreg free
  2096  0002A0  0E57               	movlw	low (_F_APTOS+105)
  2097  0002A2  243B               	addwf	btemp,w,c
  2098  0002A4  6ED9               	movwf	fsr2l,c
  2099  0002A6  0E01               	movlw	high (_F_APTOS+105)
  2100  0002A8  203C               	addwfc	btemp+1,w,c
  2101  0002AA  6EDA               	movwf	fsr2h,c
  2102  0002AC  50DE               	movf	postinc2,w,c
  2103  0002AE  10DE               	iorwf	postinc2,w,c
  2104  0002B0  A4D8               	btfss	status,2,c
  2105  0002B2  D01B               	goto	l1406
  2106  0002B4  0005               	push		;# 
  2107  0002B6  0E6E               	movlw	110
  2108  0002B8  6EE6               	movwf	postinc1,c
  2109  0002BA  0E00               	movlw	0
  2110  0002BC  6EE6               	movwf	postinc1,c
  2111  0002BE  C027  FFE6         	movff	_task_running,postinc1
  2112  0002C2  C028  FFE6         	movff	_task_running+1,postinc1
  2113  0002C6  EC61  F007         	call	___wmul	;wreg free
  2114  0002CA  0EF2               	movlw	low (_F_APTOS+4)
  2115  0002CC  243B               	addwf	btemp,w,c
  2116  0002CE  6ED9               	movwf	fsr2l,c
  2117  0002D0  0E00               	movlw	high (_F_APTOS+4)
  2118  0002D2  203C               	addwfc	btemp+1,w,c
  2119  0002D4  6EDA               	movwf	fsr2h,c
  2120  0002D6  CFDE F03C          	movff	postinc2,btemp+1
  2121  0002DA  CFDD F03D          	movff	postdec2,btemp+2
  2122  0002DE  C03C  FFFD         	movff	btemp+1,tosl	;volatile
  2123  0002E2  C03D  FFFE         	movff	btemp+2,tosh	;volatile
  2124  0002E6  6AFF               	clrf	tosu,c	;volatile
  2125  0002E8  D11F               	goto	u55_20
  2126  0002EA                     l1406:
  2127  0002EA  0E6E               	movlw	110
  2128  0002EC  6EE6               	movwf	postinc1,c
  2129  0002EE  0E00               	movlw	0
  2130  0002F0  6EE6               	movwf	postinc1,c
  2131  0002F2  C027  FFE6         	movff	_task_running,postinc1
  2132  0002F6  C028  FFE6         	movff	_task_running+1,postinc1
  2133  0002FA  EC61  F007         	call	___wmul	;wreg free
  2134  0002FE  0E59               	movlw	low (_F_APTOS+107)
  2135  000300  243B               	addwf	btemp,w,c
  2136  000302  6ED9               	movwf	fsr2l,c
  2137  000304  0E01               	movlw	high (_F_APTOS+107)
  2138  000306  203C               	addwfc	btemp+1,w,c
  2139  000308  6EDA               	movwf	fsr2h,c
  2140  00030A  50DF               	movf	indf2,w,c
  2141  00030C  6EE0               	movwf	bsr,c	;volatile
  2142  00030E  0E6E               	movlw	110
  2143  000310  6EE6               	movwf	postinc1,c
  2144  000312  0E00               	movlw	0
  2145  000314  6EE6               	movwf	postinc1,c
  2146  000316  C027  FFE6         	movff	_task_running,postinc1
  2147  00031A  C028  FFE6         	movff	_task_running+1,postinc1
  2148  00031E  EC61  F007         	call	___wmul	;wreg free
  2149  000322  0E5A               	movlw	low (_F_APTOS+108)
  2150  000324  243B               	addwf	btemp,w,c
  2151  000326  6ED9               	movwf	fsr2l,c
  2152  000328  0E01               	movlw	high (_F_APTOS+108)
  2153  00032A  203C               	addwfc	btemp+1,w,c
  2154  00032C  6EDA               	movwf	fsr2h,c
  2155  00032E  50DF               	movf	indf2,w,c
  2156  000330  6ED8               	movwf	status,c	;volatile
  2157  000332  0E6E               	movlw	110
  2158  000334  6EE6               	movwf	postinc1,c
  2159  000336  0E00               	movlw	0
  2160  000338  6EE6               	movwf	postinc1,c
  2161  00033A  C027  FFE6         	movff	_task_running,postinc1
  2162  00033E  C028  FFE6         	movff	_task_running+1,postinc1
  2163  000342  EC61  F007         	call	___wmul	;wreg free
  2164  000346  0E5B               	movlw	low (_F_APTOS+109)
  2165  000348  243B               	addwf	btemp,w,c
  2166  00034A  6ED9               	movwf	fsr2l,c
  2167  00034C  0E01               	movlw	high (_F_APTOS+109)
  2168  00034E  203C               	addwfc	btemp+1,w,c
  2169  000350  6EDA               	movwf	fsr2h,c
  2170  000352  50DF               	movf	indf2,w,c
  2171  000354  6E46               	movwf	btemp+11,c
  2172  000356  5046               	movf	btemp+11,w,c
  2173  000358                     l72:
  2174  000358  0005               	push		;# 
  2175  00035A  0E6E               	movlw	110
  2176  00035C  6EE6               	movwf	postinc1,c
  2177  00035E  0E00               	movlw	0
  2178  000360  6EE6               	movwf	postinc1,c
  2179  000362  C027  FFE6         	movff	_task_running,postinc1
  2180  000366  C028  FFE6         	movff	_task_running+1,postinc1
  2181  00036A  EC61  F007         	call	___wmul	;wreg free
  2182  00036E  0E57               	movlw	low (_F_APTOS+105)
  2183  000370  243B               	addwf	btemp,w,c
  2184  000372  6ED9               	movwf	fsr2l,c
  2185  000374  0E01               	movlw	high (_F_APTOS+105)
  2186  000376  203C               	addwfc	btemp+1,w,c
  2187  000378  6EDA               	movwf	fsr2h,c
  2188  00037A  06DE               	decf	postinc2,f,c
  2189  00037C  0E00               	movlw	0
  2190  00037E  5ADD               	subwfb	postdec2,f,c
  2191  000380  0E03               	movlw	3
  2192  000382  6EE6               	movwf	postinc1,c
  2193  000384  0E00               	movlw	0
  2194  000386  6EE6               	movwf	postinc1,c
  2195  000388  0E6E               	movlw	110
  2196  00038A  6EE6               	movwf	postinc1,c
  2197  00038C  0E00               	movlw	0
  2198  00038E  6EE6               	movwf	postinc1,c
  2199  000390  C027  FFE6         	movff	_task_running,postinc1
  2200  000394  C028  FFE6         	movff	_task_running+1,postinc1
  2201  000398  EC61  F007         	call	___wmul	;wreg free
  2202  00039C  0E57               	movlw	low (_F_APTOS+105)
  2203  00039E  243B               	addwf	btemp,w,c
  2204  0003A0  6ED9               	movwf	fsr2l,c
  2205  0003A2  0E01               	movlw	high (_F_APTOS+105)
  2206  0003A4  203C               	addwfc	btemp+1,w,c
  2207  0003A6  6EDA               	movwf	fsr2h,c
  2208  0003A8  CFDE F03C          	movff	postinc2,btemp+1
  2209  0003AC  CFDD F03D          	movff	postdec2,btemp+2
  2210  0003B0  C03C  FFE6         	movff	btemp+1,postinc1
  2211  0003B4  C03D  FFE6         	movff	btemp+2,postinc1
  2212  0003B8  EC61  F007         	call	___wmul	;wreg free
  2213  0003BC  C03B  F043         	movff	btemp,btemp+8
  2214  0003C0  C03C  F044         	movff	btemp+1,btemp+9
  2215  0003C4  0E6E               	movlw	110
  2216  0003C6  6EE6               	movwf	postinc1,c
  2217  0003C8  0E00               	movlw	0
  2218  0003CA  6EE6               	movwf	postinc1,c
  2219  0003CC  C027  FFE6         	movff	_task_running,postinc1
  2220  0003D0  C028  FFE6         	movff	_task_running+1,postinc1
  2221  0003D4  EC61  F007         	call	___wmul	;wreg free
  2222  0003D8  0EEE               	movlw	low _F_APTOS
  2223  0003DA  6E45               	movwf	btemp+10,c
  2224  0003DC  0E00               	movlw	high _F_APTOS
  2225  0003DE  6E46               	movwf	btemp+11,c
  2226  0003E0  0E09               	movlw	9
  2227  0003E2  2645               	addwf	btemp+10,f,c
  2228  0003E4  0E00               	movlw	0
  2229  0003E6  2246               	addwfc	btemp+11,f,c
  2230  0003E8  503B               	movf	btemp,w,c
  2231  0003EA  2645               	addwf	btemp+10,f,c
  2232  0003EC  503C               	movf	btemp+1,w,c
  2233  0003EE  2246               	addwfc	btemp+11,f,c
  2234  0003F0  5043               	movf	btemp+8,w,c
  2235  0003F2  2445               	addwf	btemp+10,w,c
  2236  0003F4  6ED9               	movwf	fsr2l,c
  2237  0003F6  5044               	movf	btemp+9,w,c
  2238  0003F8  2046               	addwfc	btemp+11,w,c
  2239  0003FA  6EDA               	movwf	fsr2h,c
  2240  0003FC  50DF               	movf	indf2,w,c
  2241  0003FE  6EFF               	movwf	tosu,c	;volatile
  2242  000400  0E03               	movlw	3
  2243  000402  6EE6               	movwf	postinc1,c
  2244  000404  0E00               	movlw	0
  2245  000406  6EE6               	movwf	postinc1,c
  2246  000408  0E6E               	movlw	110
  2247  00040A  6EE6               	movwf	postinc1,c
  2248  00040C  0E00               	movlw	0
  2249  00040E  6EE6               	movwf	postinc1,c
  2250  000410  C027  FFE6         	movff	_task_running,postinc1
  2251  000414  C028  FFE6         	movff	_task_running+1,postinc1
  2252  000418  EC61  F007         	call	___wmul	;wreg free
  2253  00041C  0E57               	movlw	low (_F_APTOS+105)
  2254  00041E  243B               	addwf	btemp,w,c
  2255  000420  6ED9               	movwf	fsr2l,c
  2256  000422  0E01               	movlw	high (_F_APTOS+105)
  2257  000424  203C               	addwfc	btemp+1,w,c
  2258  000426  6EDA               	movwf	fsr2h,c
  2259  000428  CFDE F03C          	movff	postinc2,btemp+1
  2260  00042C  CFDD F03D          	movff	postdec2,btemp+2
  2261  000430  C03C  FFE6         	movff	btemp+1,postinc1
  2262  000434  C03D  FFE6         	movff	btemp+2,postinc1
  2263  000438  EC61  F007         	call	___wmul	;wreg free
  2264  00043C  C03B  F043         	movff	btemp,btemp+8
  2265  000440  C03C  F044         	movff	btemp+1,btemp+9
  2266  000444  0E6E               	movlw	110
  2267  000446  6EE6               	movwf	postinc1,c
  2268  000448  0E00               	movlw	0
  2269  00044A  6EE6               	movwf	postinc1,c
  2270  00044C  C027  FFE6         	movff	_task_running,postinc1
  2271  000450  C028  FFE6         	movff	_task_running+1,postinc1
  2272  000454  EC61  F007         	call	___wmul	;wreg free
  2273  000458  0EEE               	movlw	low _F_APTOS
  2274  00045A  6E45               	movwf	btemp+10,c
  2275  00045C  0E00               	movlw	high _F_APTOS
  2276  00045E  6E46               	movwf	btemp+11,c
  2277  000460  0E0A               	movlw	10
  2278  000462  2645               	addwf	btemp+10,f,c
  2279  000464  0E00               	movlw	0
  2280  000466  2246               	addwfc	btemp+11,f,c
  2281  000468  503B               	movf	btemp,w,c
  2282  00046A  2645               	addwf	btemp+10,f,c
  2283  00046C  503C               	movf	btemp+1,w,c
  2284  00046E  2246               	addwfc	btemp+11,f,c
  2285  000470  5043               	movf	btemp+8,w,c
  2286  000472  2445               	addwf	btemp+10,w,c
  2287  000474  6ED9               	movwf	fsr2l,c
  2288  000476  5044               	movf	btemp+9,w,c
  2289  000478  2046               	addwfc	btemp+11,w,c
  2290  00047A  6EDA               	movwf	fsr2h,c
  2291  00047C  50DF               	movf	indf2,w,c
  2292  00047E  6EFD               	movwf	tosl,c	;volatile
  2293  000480  0E03               	movlw	3
  2294  000482  6EE6               	movwf	postinc1,c
  2295  000484  0E00               	movlw	0
  2296  000486  6EE6               	movwf	postinc1,c
  2297  000488  0E6E               	movlw	110
  2298  00048A  6EE6               	movwf	postinc1,c
  2299  00048C  0E00               	movlw	0
  2300  00048E  6EE6               	movwf	postinc1,c
  2301  000490  C027  FFE6         	movff	_task_running,postinc1
  2302  000494  C028  FFE6         	movff	_task_running+1,postinc1
  2303  000498  EC61  F007         	call	___wmul	;wreg free
  2304  00049C  0E57               	movlw	low (_F_APTOS+105)
  2305  00049E  243B               	addwf	btemp,w,c
  2306  0004A0  6ED9               	movwf	fsr2l,c
  2307  0004A2  0E01               	movlw	high (_F_APTOS+105)
  2308  0004A4  203C               	addwfc	btemp+1,w,c
  2309  0004A6  6EDA               	movwf	fsr2h,c
  2310  0004A8  CFDE F03C          	movff	postinc2,btemp+1
  2311  0004AC  CFDD F03D          	movff	postdec2,btemp+2
  2312  0004B0  C03C  FFE6         	movff	btemp+1,postinc1
  2313  0004B4  C03D  FFE6         	movff	btemp+2,postinc1
  2314  0004B8  EC61  F007         	call	___wmul	;wreg free
  2315  0004BC  C03B  F043         	movff	btemp,btemp+8
  2316  0004C0  C03C  F044         	movff	btemp+1,btemp+9
  2317  0004C4  0E6E               	movlw	110
  2318  0004C6  6EE6               	movwf	postinc1,c
  2319  0004C8  0E00               	movlw	0
  2320  0004CA  6EE6               	movwf	postinc1,c
  2321  0004CC  C027  FFE6         	movff	_task_running,postinc1
  2322  0004D0  C028  FFE6         	movff	_task_running+1,postinc1
  2323  0004D4  EC61  F007         	call	___wmul	;wreg free
  2324  0004D8  0EEE               	movlw	low _F_APTOS
  2325  0004DA  6E45               	movwf	btemp+10,c
  2326  0004DC  0E00               	movlw	high _F_APTOS
  2327  0004DE  6E46               	movwf	btemp+11,c
  2328  0004E0  0E0B               	movlw	11
  2329  0004E2  2645               	addwf	btemp+10,f,c
  2330  0004E4  0E00               	movlw	0
  2331  0004E6  2246               	addwfc	btemp+11,f,c
  2332  0004E8  503B               	movf	btemp,w,c
  2333  0004EA  2645               	addwf	btemp+10,f,c
  2334  0004EC  503C               	movf	btemp+1,w,c
  2335  0004EE  2246               	addwfc	btemp+11,f,c
  2336  0004F0  5043               	movf	btemp+8,w,c
  2337  0004F2  2445               	addwf	btemp+10,w,c
  2338  0004F4  6ED9               	movwf	fsr2l,c
  2339  0004F6  5044               	movf	btemp+9,w,c
  2340  0004F8  2046               	addwfc	btemp+11,w,c
  2341  0004FA  6EDA               	movwf	fsr2h,c
  2342  0004FC  50DF               	movf	indf2,w,c
  2343  0004FE  6EFE               	movwf	tosh,c	;volatile
  2344  000500  0E6E               	movlw	110
  2345  000502  6EE6               	movwf	postinc1,c
  2346  000504  0E00               	movlw	0
  2347  000506  6EE6               	movwf	postinc1,c
  2348  000508  C027  FFE6         	movff	_task_running,postinc1
  2349  00050C  C028  FFE6         	movff	_task_running+1,postinc1
  2350  000510  EC61  F007         	call	___wmul	;wreg free
  2351  000514  0E57               	movlw	low (_F_APTOS+105)
  2352  000516  243B               	addwf	btemp,w,c
  2353  000518  6ED9               	movwf	fsr2l,c
  2354  00051A  0E01               	movlw	high (_F_APTOS+105)
  2355  00051C  203C               	addwfc	btemp+1,w,c
  2356  00051E  6EDA               	movwf	fsr2h,c
  2357  000520  50DE               	movf	postinc2,w,c
  2358  000522  10DE               	iorwf	postinc2,w,c
  2359  000524  A4D8               	btfss	status,2,c
  2360  000526  D718               	goto	l72
  2361  000528                     u55_20:
  2362  000528  0E6E               	movlw	110
  2363  00052A  6EE6               	movwf	postinc1,c
  2364  00052C  0E00               	movlw	0
  2365  00052E  6EE6               	movwf	postinc1,c
  2366  000530  C027  FFE6         	movff	_task_running,postinc1
  2367  000534  C028  FFE6         	movff	_task_running+1,postinc1
  2368  000538  EC61  F007         	call	___wmul	;wreg free
  2369  00053C  0EF6               	movlw	low (_F_APTOS+8)
  2370  00053E  243B               	addwf	btemp,w,c
  2371  000540  6ED9               	movwf	fsr2l,c
  2372  000542  0E00               	movlw	high (_F_APTOS+8)
  2373  000544  203C               	addwfc	btemp+1,w,c
  2374  000546  6EDA               	movwf	fsr2h,c
  2375  000548  0E02               	movlw	2
  2376  00054A  6EDF               	movwf	indf2,c
  2377  00054C  8EF2               	bsf	intcon,7,c	;volatile
  2378                           
  2379                           ;kernel.c: 50: (INTCONbits.GIE = 1);
  2380  00054E  8EF2               	bsf	intcon,7,c	;volatile
  2381                           
  2382                           ; _dispatcher: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, ar
      +                          gsize = 1, vargsize = 0
  2383  000550  52E5               	movf	postdec1,f,c
  2384  000552  0012               	return		;funcret
  2385  000554                     __end_of_dispatcher:
  2386                           	opt stack 0
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           stkptr	equ	0xFFC
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           postinc0	equ	0xFEE
  2399                           plusw0	equ	0xFEB
  2400                           fsr0h	equ	0xFEA
  2401                           fsr0l	equ	0xFE9
  2402                           wreg	equ	0xFE8
  2403                           postinc1	equ	0xFE6
  2404                           postdec1	equ	0xFE5
  2405                           plusw1	equ	0xFE3
  2406                           fsr1h	equ	0xFE2
  2407                           fsr1l	equ	0xFE1
  2408                           bsr	equ	0xFE0
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           plusw2	equ	0xFDB
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _rr_scheduler *****************
  2418 ;; Defined at:
  2419 ;;		line 12 in file "scheduler.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  next_task_to    2  [STACK] unsigned int 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  2  [STACK] unsigned int 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl, prodh
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2433 ;;      Params:         0       0       0       0       0       0       0
  2434 ;;      Locals:         0       0       0       0       0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0
  2436 ;;      Totals:         0       0       0       0       0       0       0
  2437 ;;Total ram usage:        0 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    5
  2440 ;; This function calls:
  2441 ;;		___lwmod
  2442 ;;		___wmul
  2443 ;; This function is called by:
  2444 ;;		_dispatcher
  2445 ;; This function uses a reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text11
  2449  000FEC                     __ptext11:
  2450                           	opt stack 0
  2451  000FEC                     _rr_scheduler:
  2452                           	opt stack 0
  2453                           
  2454                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2455  000FEC  52E6               	movf	postinc1,f,c
  2456  000FEE  52E6               	movf	postinc1,f,c
  2457                           
  2458                           ;scheduler.c: 14: u_int next_task_to_run = task_running;
  2459                           
  2460                           ;incstack = 0
  2461  000FF0  C027  F03C         	movff	_task_running,btemp+1
  2462  000FF4  C028  F03D         	movff	_task_running+1,btemp+2
  2463                           
  2464                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2465  000FF8  0EFE               	movlw	-2
  2466  000FFA  C03C  FFE3         	movff	btemp+1,plusw1
  2467  000FFE  0EFF               	movlw	-1
  2468  001000  C03D  FFE3         	movff	btemp+2,plusw1
  2469  001004                     l1274:
  2470                           
  2471                           ;scheduler.c: 17: next_task_to_run = (next_task_to_run + 1) % tasks_installed;
  2472  001004  C029  FFE6         	movff	_tasks_installed,postinc1
  2473  001008  C02A  FFE6         	movff	_tasks_installed+1,postinc1
  2474                           
  2475                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2476  00100C  0EFC               	movlw	-4
  2477  00100E  50E3               	movf	plusw1,w,c
  2478  001010  0F01               	addlw	1
  2479  001012  6E3C               	movwf	btemp+1,c
  2480  001014  0EFD               	movlw	-3
  2481  001016  CFE3 F03D          	movff	plusw1,btemp+2
  2482  00101A  0E00               	movlw	0
  2483  00101C  223D               	addwfc	btemp+2,f,c
  2484  00101E  C03C  FFE6         	movff	btemp+1,postinc1
  2485  001022  C03D  FFE6         	movff	btemp+2,postinc1
  2486  001026  EC5C  F006         	call	___lwmod	;wreg free
  2487                           
  2488                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2489  00102A  0EFE               	movlw	-2
  2490  00102C  C03B  FFE3         	movff	btemp,plusw1
  2491  001030  0EFF               	movlw	-1
  2492  001032  C03C  FFE3         	movff	btemp+1,plusw1
  2493                           
  2494                           ;scheduler.c: 18: } while (F_APTOS[next_task_to_run].task_state != READY);
  2495  001036  0E6E               	movlw	110
  2496  001038  6EE6               	movwf	postinc1,c
  2497  00103A  0E00               	movlw	0
  2498  00103C  6EE6               	movwf	postinc1,c
  2499                           
  2500                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-4)+0]
  2501  00103E  0EFC               	movlw	-4
  2502  001040  CFE3 FFE6          	movff	plusw1,postinc1
  2503  001044  CFE3 FFE6          	movff	plusw1,postinc1
  2504  001048  EC61  F007         	call	___wmul	;wreg free
  2505  00104C  0EF6               	movlw	low (_F_APTOS+8)
  2506  00104E  243B               	addwf	btemp,w,c
  2507  001050  6ED9               	movwf	fsr2l,c
  2508  001052  0E00               	movlw	high (_F_APTOS+8)
  2509  001054  203C               	addwfc	btemp+1,w,c
  2510  001056  6EDA               	movwf	fsr2h,c
  2511  001058  04DE               	decf	postinc2,w,c
  2512  00105A  A4D8               	btfss	status,2,c
  2513  00105C  D7D3               	goto	l1274
  2514                           
  2515                           ;scheduler.c: 20: return next_task_to_run;
  2516                           ;stkvar	rr_scheduler@next_task_to_run @ sp[(-2)+0]
  2517  00105E  0EFE               	movlw	-2
  2518  001060  CFE3 F03B          	movff	plusw1,btemp
  2519  001064  0EFF               	movlw	-1
  2520  001066  CFE3 F03C          	movff	plusw1,btemp+1
  2521                           
  2522                           ; _rr_scheduler: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, 
      +                          argsize = 0, vargsize = 0
  2523  00106A  52E5               	movf	postdec1,f,c
  2524  00106C  52E5               	movf	postdec1,f,c
  2525  00106E  0012               	return		;funcret
  2526  001070                     __end_of_rr_scheduler:
  2527                           	opt stack 0
  2528                           tosu	equ	0xFFF
  2529                           tosh	equ	0xFFE
  2530                           tosl	equ	0xFFD
  2531                           stkptr	equ	0xFFC
  2532                           tblptru	equ	0xFF8
  2533                           tblptrh	equ	0xFF7
  2534                           tblptrl	equ	0xFF6
  2535                           tablat	equ	0xFF5
  2536                           prodh	equ	0xFF4
  2537                           prodl	equ	0xFF3
  2538                           intcon	equ	0xFF2
  2539                           postinc0	equ	0xFEE
  2540                           plusw0	equ	0xFEB
  2541                           fsr0h	equ	0xFEA
  2542                           fsr0l	equ	0xFE9
  2543                           wreg	equ	0xFE8
  2544                           postinc1	equ	0xFE6
  2545                           postdec1	equ	0xFE5
  2546                           plusw1	equ	0xFE3
  2547                           fsr1h	equ	0xFE2
  2548                           fsr1l	equ	0xFE1
  2549                           bsr	equ	0xFE0
  2550                           indf2	equ	0xFDF
  2551                           postinc2	equ	0xFDE
  2552                           postdec2	equ	0xFDD
  2553                           plusw2	equ	0xFDB
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function ___lwmod *****************
  2559 ;; Defined at:
  2560 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  dividend        2  [STACK] unsigned int 
  2563 ;;  divisor         2  [STACK] unsigned int 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  counter         1  [STACK] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  2  [STACK] unsigned int 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2575 ;;      Params:         0       0       0       0       0       0       0
  2576 ;;      Locals:         0       0       0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0
  2578 ;;      Totals:         0       0       0       0       0       0       0
  2579 ;;Total ram usage:        0 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    4
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_rr_scheduler
  2586 ;;		_sem_wait
  2587 ;;		_sem_post
  2588 ;; This function uses a reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text12
  2592  000CB8                     __ptext12:
  2593                           	opt stack 0
  2594  000CB8                     ___lwmod:
  2595                           	opt stack 0
  2596                           
  2597                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  2598  000CB8  52E6               	movf	postinc1,f,c
  2599                           
  2600                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2601                           
  2602                           ;incstack = 0
  2603  000CBA  0EFB               	movlw	-5
  2604  000CBC  CFE3 F03B          	movff	plusw1,btemp
  2605  000CC0  0EFC               	movlw	-4
  2606  000CC2  50E3               	movf	plusw1,w,c
  2607  000CC4  103B               	iorwf	btemp,w,c
  2608  000CC6  B4D8               	btfsc	status,2,c
  2609  000CC8  D04A               	goto	u4_20
  2610                           
  2611                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2612  000CCA  0EFF               	movlw	-1
  2613  000CCC  6AE3               	clrf	plusw1,c
  2614  000CCE  D010               	goto	L1
  2615  000CD0                     l882:
  2616                           
  2617                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2618  000CD0  0EFB               	movlw	-5
  2619  000CD2  50E3               	movf	plusw1,w,c
  2620  000CD4  90D8               	bcf	status,0,c
  2621  000CD6  34E8               	rlcf	wreg,w,c
  2622  000CD8  6E3B               	movwf	btemp,c
  2623  000CDA  0EFB               	movlw	-5
  2624  000CDC  C03B  FFE3         	movff	btemp,plusw1
  2625  000CE0  0EFC               	movlw	-4
  2626  000CE2  50E3               	movf	plusw1,w,c
  2627  000CE4  34E8               	rlcf	wreg,w,c
  2628  000CE6  6E3B               	movwf	btemp,c
  2629  000CE8  0EFC               	movlw	-4
  2630  000CEA  C03B  FFE3         	movff	btemp,plusw1
  2631                           
  2632                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2633  000CEE  0EFF               	movlw	-1
  2634  000CF0                     L1:
  2635  000CF0  2AE3               	incf	plusw1,f,c
  2636                           
  2637                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2638  000CF2  0EFC               	movlw	-4
  2639  000CF4  AEE3               	btfss	plusw1,7,c
  2640  000CF6  D7EC               	goto	l882
  2641  000CF8                     u2_20:
  2642                           
  2643                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2644  000CF8  0EFB               	movlw	-5
  2645  000CFA  CFE3 F03C          	movff	plusw1,btemp+1
  2646  000CFE  0EFC               	movlw	-4
  2647  000D00  CFE3 F03D          	movff	plusw1,btemp+2
  2648                           
  2649                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2650  000D04  0EFD               	movlw	-3
  2651  000D06  CFE3 F045          	movff	plusw1,btemp+10
  2652  000D0A  0EFE               	movlw	-2
  2653  000D0C  CFE3 F046          	movff	plusw1,btemp+11
  2654  000D10  503C               	movf	btemp+1,w,c
  2655  000D12  5C45               	subwf	btemp+10,w,c
  2656  000D14  503D               	movf	btemp+2,w,c
  2657  000D16  5846               	subwfb	btemp+11,w,c
  2658  000D18  A0D8               	btfss	status,0,c
  2659  000D1A  D012               	goto	l892
  2660                           
  2661                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2662                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2663  000D1C  0EFD               	movlw	-3
  2664  000D1E  50E3               	movf	plusw1,w,c
  2665  000D20  6E3B               	movwf	btemp,c
  2666  000D22  0EFB               	movlw	-5
  2667  000D24  50E3               	movf	plusw1,w,c
  2668  000D26  5E3B               	subwf	btemp,f,c
  2669  000D28  0EFD               	movlw	-3
  2670  000D2A  C03B  FFE3         	movff	btemp,plusw1
  2671  000D2E  0EFE               	movlw	-2
  2672  000D30  50E3               	movf	plusw1,w,c
  2673  000D32  6E3B               	movwf	btemp,c
  2674  000D34  0EFC               	movlw	-4
  2675  000D36  50E3               	movf	plusw1,w,c
  2676  000D38  5A3B               	subwfb	btemp,f,c
  2677  000D3A  0EFE               	movlw	-2
  2678  000D3C  C03B  FFE3         	movff	btemp,plusw1
  2679  000D40                     l892:
  2680                           
  2681                           ;stkvar	___lwmod@divisor @ sp[(-1)+-4]
  2682  000D40  90D8               	bcf	status,0,c
  2683  000D42  0EFC               	movlw	-4
  2684  000D44  32E3               	rrcf	plusw1,f,c
  2685  000D46  0EFB               	movlw	-5
  2686  000D48  32E3               	rrcf	plusw1,f,c
  2687                           
  2688                           ;stkvar	___lwmod@counter @ sp[(-1)+0]
  2689  000D4A  0EFF               	movlw	-1
  2690  000D4C  50E3               	movf	plusw1,w,c
  2691  000D4E  6E3B               	movwf	btemp,c
  2692  000D50  0E01               	movlw	1
  2693  000D52  5E3B               	subwf	btemp,f,c
  2694  000D54  0EFF               	movlw	-1
  2695  000D56  C03B  FFE3         	movff	btemp,plusw1
  2696  000D5A  A4D8               	btfss	status,2,c
  2697  000D5C  D7CD               	goto	u2_20
  2698  000D5E                     u4_20:
  2699                           
  2700                           ;stkvar	___lwmod@dividend @ sp[(-1)+-2]
  2701  000D5E  0EFD               	movlw	-3
  2702  000D60  CFE3 F03B          	movff	plusw1,btemp
  2703  000D64  0EFE               	movlw	-2
  2704  000D66  CFE3 F03C          	movff	plusw1,btemp+1
  2705                           
  2706                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  2707  000D6A  0EFB               	movlw	251
  2708  000D6C  26E1               	addwf	fsr1l,f,c
  2709  000D6E  0EFF               	movlw	255
  2710  000D70  22E2               	addwfc	fsr1h,f,c
  2711  000D72  0012               	return		;funcret
  2712  000D74                     __end_of___lwmod:
  2713                           	opt stack 0
  2714                           tosu	equ	0xFFF
  2715                           tosh	equ	0xFFE
  2716                           tosl	equ	0xFFD
  2717                           stkptr	equ	0xFFC
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           prodh	equ	0xFF4
  2723                           prodl	equ	0xFF3
  2724                           intcon	equ	0xFF2
  2725                           postinc0	equ	0xFEE
  2726                           plusw0	equ	0xFEB
  2727                           fsr0h	equ	0xFEA
  2728                           fsr0l	equ	0xFE9
  2729                           wreg	equ	0xFE8
  2730                           postinc1	equ	0xFE6
  2731                           postdec1	equ	0xFE5
  2732                           plusw1	equ	0xFE3
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           bsr	equ	0xFE0
  2736                           indf2	equ	0xFDF
  2737                           postinc2	equ	0xFDE
  2738                           postdec2	equ	0xFDD
  2739                           plusw2	equ	0xFDB
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _create_pipe *****************
  2745 ;; Defined at:
  2746 ;;		line 10 in file "pipe.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  pipe            2  [STACK] PTR struct pipe
  2749 ;;		 -> pipe(14), 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1  [STACK] void 
  2754 ;; Registers used:
  2755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2761 ;;      Params:         0       0       0       0       0       0       0
  2762 ;;      Locals:         0       0       0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0
  2764 ;;      Totals:         0       0       0       0       0       0       0
  2765 ;;Total ram usage:        0 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    4
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_aviao2
  2772 ;; This function uses a reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text13
  2776  000E1C                     __ptext13:
  2777                           	opt stack 0
  2778  000E1C                     _create_pipe:
  2779                           	opt stack 22
  2780                           
  2781                           ;pipe.c: 12: pipe->pos_read_pipe = 0;
  2782                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2783                           
  2784                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2785                           ;incstack = 0
  2786  000E1C  0EFE               	movlw	-2
  2787  000E1E  CFE3 F03C          	movff	plusw1,btemp+1
  2788  000E22  0EFF               	movlw	-1
  2789  000E24  CFE3 F03D          	movff	plusw1,btemp+2
  2790  000E28  0E04               	movlw	4
  2791  000E2A  243C               	addwf	btemp+1,w,c
  2792  000E2C  6ED9               	movwf	fsr2l,c
  2793  000E2E  0E00               	movlw	0
  2794  000E30  203D               	addwfc	btemp+2,w,c
  2795  000E32  6EDA               	movwf	fsr2h,c
  2796  000E34  0E00               	movlw	0
  2797  000E36  6EDE               	movwf	postinc2,c
  2798  000E38  0E00               	movlw	0
  2799  000E3A  6EDD               	movwf	postdec2,c
  2800                           
  2801                           ;pipe.c: 13: pipe->pos_write_pipe = 0;
  2802                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2803  000E3C  0EFE               	movlw	-2
  2804  000E3E  CFE3 F03C          	movff	plusw1,btemp+1
  2805  000E42  0EFF               	movlw	-1
  2806  000E44  CFE3 F03D          	movff	plusw1,btemp+2
  2807  000E48  0E06               	movlw	6
  2808  000E4A  243C               	addwf	btemp+1,w,c
  2809  000E4C  6ED9               	movwf	fsr2l,c
  2810  000E4E  0E00               	movlw	0
  2811  000E50  203D               	addwfc	btemp+2,w,c
  2812  000E52  6EDA               	movwf	fsr2h,c
  2813  000E54  0E00               	movlw	0
  2814  000E56  6EDE               	movwf	postinc2,c
  2815  000E58  0E00               	movlw	0
  2816  000E5A  6EDD               	movwf	postdec2,c
  2817                           
  2818                           ;pipe.c: 14: pipe->pipe_itens = 0;
  2819                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2820  000E5C  0EFE               	movlw	-2
  2821  000E5E  CFE3 F03C          	movff	plusw1,btemp+1
  2822  000E62  0EFF               	movlw	-1
  2823  000E64  CFE3 F03D          	movff	plusw1,btemp+2
  2824  000E68  0E08               	movlw	8
  2825  000E6A  243C               	addwf	btemp+1,w,c
  2826  000E6C  6ED9               	movwf	fsr2l,c
  2827  000E6E  0E00               	movlw	0
  2828  000E70  203D               	addwfc	btemp+2,w,c
  2829  000E72  6EDA               	movwf	fsr2h,c
  2830  000E74  0E00               	movlw	0
  2831  000E76  6EDE               	movwf	postinc2,c
  2832  000E78  0E00               	movlw	0
  2833  000E7A  6EDD               	movwf	postdec2,c
  2834                           
  2835                           ;pipe.c: 17: pipe->pos_bloqued_read = 0;
  2836                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2837  000E7C  0EFE               	movlw	-2
  2838  000E7E  CFE3 F03C          	movff	plusw1,btemp+1
  2839  000E82  0EFF               	movlw	-1
  2840  000E84  CFE3 F03D          	movff	plusw1,btemp+2
  2841  000E88  0E0A               	movlw	10
  2842  000E8A  243C               	addwf	btemp+1,w,c
  2843  000E8C  6ED9               	movwf	fsr2l,c
  2844  000E8E  0E00               	movlw	0
  2845  000E90  203D               	addwfc	btemp+2,w,c
  2846  000E92  6EDA               	movwf	fsr2h,c
  2847  000E94  0E00               	movlw	0
  2848  000E96  6EDE               	movwf	postinc2,c
  2849  000E98  0E00               	movlw	0
  2850  000E9A  6EDD               	movwf	postdec2,c
  2851                           
  2852                           ;pipe.c: 18: pipe->pos_bloqued_write = 0;
  2853                           ;stkvar	create_pipe@pipe @ sp[(0)+-2]
  2854  000E9C  0EFE               	movlw	-2
  2855  000E9E  CFE3 F03C          	movff	plusw1,btemp+1
  2856  000EA2  0EFF               	movlw	-1
  2857  000EA4  CFE3 F03D          	movff	plusw1,btemp+2
  2858  000EA8  0E0C               	movlw	12
  2859  000EAA  243C               	addwf	btemp+1,w,c
  2860  000EAC  6ED9               	movwf	fsr2l,c
  2861  000EAE  0E00               	movlw	0
  2862  000EB0  203D               	addwfc	btemp+2,w,c
  2863  000EB2  6EDA               	movwf	fsr2h,c
  2864  000EB4  0E00               	movlw	0
  2865  000EB6  6EDE               	movwf	postinc2,c
  2866  000EB8  0E00               	movlw	0
  2867  000EBA  6EDD               	movwf	postdec2,c
  2868                           
  2869                           ; _create_pipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, a
      +                          rgsize = 2, vargsize = 0
  2870  000EBC  52E5               	movf	postdec1,f,c
  2871  000EBE  52E5               	movf	postdec1,f,c
  2872  000EC0  0012               	return		;funcret
  2873  000EC2                     __end_of_create_pipe:
  2874                           	opt stack 0
  2875                           tosu	equ	0xFFF
  2876                           tosh	equ	0xFFE
  2877                           tosl	equ	0xFFD
  2878                           stkptr	equ	0xFFC
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           prodh	equ	0xFF4
  2884                           prodl	equ	0xFF3
  2885                           intcon	equ	0xFF2
  2886                           postinc0	equ	0xFEE
  2887                           plusw0	equ	0xFEB
  2888                           fsr0h	equ	0xFEA
  2889                           fsr0l	equ	0xFE9
  2890                           wreg	equ	0xFE8
  2891                           postinc1	equ	0xFE6
  2892                           postdec1	equ	0xFE5
  2893                           plusw1	equ	0xFE3
  2894                           fsr1h	equ	0xFE2
  2895                           fsr1l	equ	0xFE1
  2896                           bsr	equ	0xFE0
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           plusw2	equ	0xFDB
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _aviao3 *****************
  2906 ;; Defined at:
  2907 ;;		line 34 in file "tasks.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1  [STACK] void 
  2914 ;; Registers used:
  2915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2921 ;;      Params:         0       0       0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    8
  2928 ;; This function calls:
  2929 ;;		_delay
  2930 ;;		_write_pipe
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text14
  2937  00126E                     __ptext14:
  2938                           	opt stack 0
  2939  00126E                     _aviao3:
  2940                           	opt stack 19
  2941                           
  2942                           ;tasks.c: 36: TRISDbits.RD3 = 0;
  2943                           
  2944                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  2945                           ;incstack = 0
  2946  00126E  9695               	bcf	3989,3,c	;volatile
  2947                           
  2948                           ;tasks.c: 37: PORTDbits.RD3 = 0;
  2949  001270  9683               	bcf	3971,3,c	;volatile
  2950  001272                     l1544:
  2951                           
  2952                           ;tasks.c: 41: write_pipe(&pipe, 3);
  2953  001272  0E03               	movlw	3
  2954  001274  6EE6               	movwf	postinc1,c
  2955  001276  0E2B               	movlw	low _pipe
  2956  001278  6EE6               	movwf	postinc1,c
  2957  00127A  0E00               	movlw	high _pipe
  2958  00127C  6EE6               	movwf	postinc1,c
  2959  00127E  EC70  F003         	call	_write_pipe	;wreg free
  2960                           
  2961                           ;tasks.c: 42: delay(100);
  2962  001282  0E64               	movlw	100
  2963  001284  6EE6               	movwf	postinc1,c
  2964  001286  0E00               	movlw	0
  2965  001288  6EE6               	movwf	postinc1,c
  2966  00128A  ECC8  F008         	call	_delay	;wreg free
  2967  00128E  D7F1               	goto	l1544
  2968  001290                     __end_of_aviao3:
  2969                           	opt stack 0
  2970                           tosu	equ	0xFFF
  2971                           tosh	equ	0xFFE
  2972                           tosl	equ	0xFFD
  2973                           stkptr	equ	0xFFC
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           intcon	equ	0xFF2
  2981                           postinc0	equ	0xFEE
  2982                           plusw0	equ	0xFEB
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           wreg	equ	0xFE8
  2986                           postinc1	equ	0xFE6
  2987                           postdec1	equ	0xFE5
  2988                           plusw1	equ	0xFE3
  2989                           fsr1h	equ	0xFE2
  2990                           fsr1l	equ	0xFE1
  2991                           bsr	equ	0xFE0
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           plusw2	equ	0xFDB
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _delay *****************
  3001 ;; Defined at:
  3002 ;;		line 58 in file "kernel.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  time_ms         2  [STACK] unsigned int 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1  [STACK] void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, prodl, prodh
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3016 ;;      Params:         0       0       0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0
  3019 ;;      Totals:         0       0       0       0       0       0       0
  3020 ;;Total ram usage:        0 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    7
  3023 ;; This function calls:
  3024 ;;		___wmul
  3025 ;;		_dispatcher
  3026 ;; This function is called by:
  3027 ;;		_aviao3
  3028 ;; This function uses a reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text15
  3032  001190                     __ptext15:
  3033                           	opt stack 0
  3034  001190                     _delay:
  3035                           	opt stack 19
  3036                           
  3037                           ;kernel.c: 60: (INTCONbits.GIE = 0);
  3038                           
  3039                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3040                           ;incstack = 0
  3041  001190  9EF2               	bcf	intcon,7,c	;volatile
  3042                           
  3043                           ;kernel.c: 62: F_APTOS[task_running].delay_time = time_ms;
  3044  001192  0E6E               	movlw	110
  3045  001194  6EE6               	movwf	postinc1,c
  3046  001196  0E00               	movlw	0
  3047  001198  6EE6               	movwf	postinc1,c
  3048  00119A  C027  FFE6         	movff	_task_running,postinc1
  3049  00119E  C028  FFE6         	movff	_task_running+1,postinc1
  3050  0011A2  EC61  F007         	call	___wmul	;wreg free
  3051  0011A6  0EF4               	movlw	low (_F_APTOS+6)
  3052  0011A8  243B               	addwf	btemp,w,c
  3053  0011AA  6EE9               	movwf	fsr0l,c
  3054  0011AC  0E00               	movlw	high (_F_APTOS+6)
  3055  0011AE  203C               	addwfc	btemp+1,w,c
  3056  0011B0  6EEA               	movwf	fsr0h,c
  3057                           
  3058                           ;stkvar	delay@time_ms @ sp[(0)+-2]
  3059  0011B2  50E1               	movf	fsr1l,w,c
  3060  0011B4  0FFE               	addlw	-2
  3061  0011B6  6ED9               	movwf	fsr2l,c
  3062  0011B8  50E2               	movf	fsr1h,w,c
  3063  0011BA  6EDA               	movwf	fsr2h,c
  3064  0011BC  0EFF               	movlw	255
  3065  0011BE  22DA               	addwfc	fsr2h,f,c
  3066  0011C0  CFDE FFEE          	movff	postinc2,postinc0
  3067  0011C4  CFDD FFED          	movff	postdec2,postdec0
  3068                           
  3069                           ;kernel.c: 63: dispatcher(SLEEPING);
  3070  0011C8  0E03               	movlw	3
  3071  0011CA  6EE6               	movwf	postinc1,c
  3072  0011CC  EC0A  F000         	call	_dispatcher	;wreg free
  3073                           
  3074                           ;kernel.c: 65: (INTCONbits.GIE = 1);
  3075  0011D0  8EF2               	bsf	intcon,7,c	;volatile
  3076                           
  3077                           ; _delay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
  3078  0011D2  52E5               	movf	postdec1,f,c
  3079  0011D4  52E5               	movf	postdec1,f,c
  3080  0011D6  0012               	return		;funcret
  3081  0011D8                     __end_of_delay:
  3082                           	opt stack 0
  3083                           tosu	equ	0xFFF
  3084                           tosh	equ	0xFFE
  3085                           tosl	equ	0xFFD
  3086                           stkptr	equ	0xFFC
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           postinc0	equ	0xFEE
  3095                           postdec0	equ	0xFED
  3096                           plusw0	equ	0xFEB
  3097                           fsr0h	equ	0xFEA
  3098                           fsr0l	equ	0xFE9
  3099                           wreg	equ	0xFE8
  3100                           postinc1	equ	0xFE6
  3101                           postdec1	equ	0xFE5
  3102                           plusw1	equ	0xFE3
  3103                           fsr1h	equ	0xFE2
  3104                           fsr1l	equ	0xFE1
  3105                           bsr	equ	0xFE0
  3106                           indf2	equ	0xFDF
  3107                           postinc2	equ	0xFDE
  3108                           postdec2	equ	0xFDD
  3109                           plusw2	equ	0xFDB
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _ctpista *****************
  3115 ;; Defined at:
  3116 ;;		line 47 in file "tasks.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  dado            2  [STACK] int 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1  [STACK] void 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0       0       0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0
  3133 ;;      Totals:         0       0       0       0       0       0       0
  3134 ;;Total ram usage:        0 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    8
  3137 ;; This function calls:
  3138 ;;		_read_pipe
  3139 ;;		_sem_post
  3140 ;;		_sem_wait
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text16
  3147  000F58                     __ptext16:
  3148                           	opt stack 0
  3149  000F58                     _ctpista:
  3150                           	opt stack 0
  3151                           
  3152                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3153  000F58  52E6               	movf	postinc1,f,c
  3154  000F5A  52E6               	movf	postinc1,f,c
  3155  000F5C                     l139:
  3156                           
  3157                           ;tasks.c: 50: {
  3158                           ;tasks.c: 51: int dado = read_pipe(&pipe);
  3159  000F5C  0E2B               	movlw	low _pipe
  3160  000F5E  6EE6               	movwf	postinc1,c
  3161  000F60  0E00               	movlw	high _pipe
  3162  000F62  6EE6               	movwf	postinc1,c
  3163  000F64  ECAA  F002         	call	_read_pipe	;wreg free
  3164  000F68  503B               	movf	btemp,w,c
  3165  000F6A  6E3C               	movwf	btemp+1,c
  3166  000F6C  6A3D               	clrf	btemp+2,c
  3167                           
  3168                           ;stkvar	ctpista@dado @ sp[(-2)+0]
  3169  000F6E  0EFE               	movlw	-2
  3170  000F70  C03C  FFE3         	movff	btemp+1,plusw1
  3171  000F74  0EFF               	movlw	-1
  3172  000F76  C03D  FFE3         	movff	btemp+2,plusw1
  3173                           
  3174                           ;tasks.c: 52: if(dado== 2)
  3175                           ;stkvar	ctpista@dado @ sp[(-2)+0]
  3176  000F7A  0EFE               	movlw	-2
  3177  000F7C  CFE3 F03B          	movff	plusw1,btemp
  3178  000F80  0E02               	movlw	2
  3179  000F82  183B               	xorwf	btemp,w,c
  3180  000F84  E120               	bnz	l1558
  3181  000F86  0EFF               	movlw	-1
  3182  000F88  50E3               	movf	plusw1,w,c
  3183  000F8A  A4D8               	btfss	status,2,c
  3184  000F8C  D01C               	goto	l1558
  3185                           
  3186                           ;tasks.c: 53: {
  3187                           ;tasks.c: 54: sem_post(&s);
  3188  000F8E  0E39               	movlw	low _s
  3189  000F90  6EE6               	movwf	postinc1,c
  3190  000F92  0E00               	movlw	high _s
  3191  000F94  6EE6               	movwf	postinc1,c
  3192  000F96  ECE9  F004         	call	_sem_post	;wreg free
  3193                           
  3194                           ;tasks.c: 55: PORTDbits.RD3 = ~PORTDbits.RD3;
  3195  000F9A  A683               	btfss	3971,3,c	;volatile
  3196  000F9C  D002               	goto	u68_20
  3197  000F9E  0E01               	movlw	1
  3198  000FA0  D001               	goto	u68_26
  3199  000FA2                     u68_20:
  3200  000FA2  0E00               	movlw	0
  3201  000FA4                     u68_26:
  3202  000FA4  0AFF               	xorlw	255
  3203  000FA6  6E46               	movwf	btemp+11,c
  3204  000FA8  4646               	rlncf	btemp+11,f,c
  3205  000FAA  4646               	rlncf	btemp+11,f,c
  3206  000FAC  4646               	rlncf	btemp+11,f,c
  3207  000FAE  5083               	movf	3971,w,c	;volatile
  3208  000FB0  1846               	xorwf	btemp+11,w,c
  3209  000FB2  0BF7               	andlw	-9
  3210  000FB4  1846               	xorwf	btemp+11,w,c
  3211  000FB6  6E83               	movwf	3971,c	;volatile
  3212                           
  3213                           ;tasks.c: 56: sem_wait(&s);
  3214  000FB8  0E39               	movlw	low _s
  3215  000FBA  6EE6               	movwf	postinc1,c
  3216  000FBC  0E00               	movlw	high _s
  3217  000FBE  6EE6               	movwf	postinc1,c
  3218  000FC0  ECEE  F005         	call	_sem_wait	;wreg free
  3219                           
  3220                           ;tasks.c: 58: }else
  3221  000FC4  D7CB               	goto	l139
  3222  000FC6                     l1558:
  3223                           
  3224                           ;tasks.c: 59: {
  3225                           ;tasks.c: 60: sem_post(&s);
  3226  000FC6  0E39               	movlw	low _s
  3227  000FC8  6EE6               	movwf	postinc1,c
  3228  000FCA  0E00               	movlw	high _s
  3229  000FCC  6EE6               	movwf	postinc1,c
  3230  000FCE  ECE9  F004         	call	_sem_post	;wreg free
  3231                           
  3232                           ;tasks.c: 61: PORTDbits.RD2 = ~PORTDbits.RD2;
  3233  000FD2  A483               	btfss	3971,2,c	;volatile
  3234  000FD4  D002               	goto	u69_20
  3235  000FD6  0E01               	movlw	1
  3236  000FD8  D001               	goto	u69_26
  3237  000FDA                     u69_20:
  3238  000FDA  0E00               	movlw	0
  3239  000FDC                     u69_26:
  3240  000FDC  0AFF               	xorlw	255
  3241  000FDE  6E46               	movwf	btemp+11,c
  3242  000FE0  4646               	rlncf	btemp+11,f,c
  3243  000FE2  4646               	rlncf	btemp+11,f,c
  3244  000FE4  5083               	movf	3971,w,c	;volatile
  3245  000FE6  1846               	xorwf	btemp+11,w,c
  3246  000FE8  0BFB               	andlw	-5
  3247  000FEA  D7E4               	goto	L2
  3248  000FEC                     __end_of_ctpista:
  3249                           	opt stack 0
  3250                           tosu	equ	0xFFF
  3251                           tosh	equ	0xFFE
  3252                           tosl	equ	0xFFD
  3253                           stkptr	equ	0xFFC
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           postinc0	equ	0xFEE
  3262                           postdec0	equ	0xFED
  3263                           plusw0	equ	0xFEB
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           postinc1	equ	0xFE6
  3268                           postdec1	equ	0xFE5
  3269                           plusw1	equ	0xFE3
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           bsr	equ	0xFE0
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           plusw2	equ	0xFDB
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _sem_wait *****************
  3282 ;; Defined at:
  3283 ;;		line 17 in file "semaphore.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  s               2  [STACK] PTR struct sem
  3286 ;;		 -> s(2), 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1  [STACK] void 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3298 ;;      Params:         0       0       0       0       0       0       0
  3299 ;;      Locals:         0       0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0
  3301 ;;      Totals:         0       0       0       0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    7
  3305 ;; This function calls:
  3306 ;;		___lwmod
  3307 ;;		_dispatcher
  3308 ;; This function is called by:
  3309 ;;		_ctpista
  3310 ;; This function uses a reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text17
  3314  000BDC                     __ptext17:
  3315                           	opt stack 0
  3316  000BDC                     _sem_wait:
  3317                           	opt stack 19
  3318                           
  3319                           ;semaphore.c: 19: (INTCONbits.GIE = 0);
  3320                           
  3321                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3322                           ;incstack = 0
  3323  000BDC  9EF2               	bcf	intcon,7,c	;volatile
  3324                           
  3325                           ;semaphore.c: 22: s->contador--;
  3326                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3327  000BDE  0EFE               	movlw	-2
  3328  000BE0  CFE3 FFD9          	movff	plusw1,fsr2l
  3329  000BE4  0EFF               	movlw	-1
  3330  000BE6  CFE3 FFDA          	movff	plusw1,fsr2h
  3331  000BEA  06DE               	decf	postinc2,f,c
  3332  000BEC  0E00               	movlw	0
  3333  000BEE  5ADD               	subwfb	postdec2,f,c
  3334                           
  3335                           ;semaphore.c: 23: if (s->contador < 0) {
  3336                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3337  000BF0  0EFE               	movlw	-2
  3338  000BF2  CFE3 FFD9          	movff	plusw1,fsr2l
  3339  000BF6  0EFF               	movlw	-1
  3340  000BF8  CFE3 FFDA          	movff	plusw1,fsr2h
  3341  000BFC  0E01               	movlw	1
  3342  000BFE  AEDB               	btfss	plusw2,7,c
  3343  000C00  D057               	goto	l1500
  3344                           
  3345                           ;semaphore.c: 24: s->queue.s_queue[s->queue.s_queue_pos_in] = task_running;
  3346                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3347  000C02  0EFE               	movlw	-2
  3348  000C04  CFE3 F03C          	movff	plusw1,btemp+1
  3349  000C08  0EFF               	movlw	-1
  3350  000C0A  CFE3 F03D          	movff	plusw1,btemp+2
  3351  000C0E  0E0C               	movlw	12
  3352  000C10  243C               	addwf	btemp+1,w,c
  3353  000C12  6ED9               	movwf	fsr2l,c
  3354  000C14  0E00               	movlw	0
  3355  000C16  203D               	addwfc	btemp+2,w,c
  3356  000C18  6EDA               	movwf	fsr2h,c
  3357  000C1A  CFDE F045          	movff	postinc2,btemp+10
  3358  000C1E  CFDD F046          	movff	postdec2,btemp+11
  3359  000C22  90D8               	bcf	status,0,c
  3360  000C24  3445               	rlcf	btemp+10,w,c
  3361  000C26  6E3C               	movwf	btemp+1,c
  3362  000C28  3446               	rlcf	btemp+11,w,c
  3363  000C2A  6E3D               	movwf	btemp+2,c
  3364                           
  3365                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3366  000C2C  0EFE               	movlw	-2
  3367  000C2E  50E3               	movf	plusw1,w,c
  3368  000C30  263C               	addwf	btemp+1,f,c
  3369  000C32  0EFF               	movlw	-1
  3370  000C34  50E3               	movf	plusw1,w,c
  3371  000C36  223D               	addwfc	btemp+2,f,c
  3372  000C38  0E02               	movlw	2
  3373  000C3A  243C               	addwf	btemp+1,w,c
  3374  000C3C  6ED9               	movwf	fsr2l,c
  3375  000C3E  0E00               	movlw	0
  3376  000C40  203D               	addwfc	btemp+2,w,c
  3377  000C42  6EDA               	movwf	fsr2h,c
  3378  000C44  C027  FFDE         	movff	_task_running,postinc2
  3379  000C48  C028  FFDD         	movff	_task_running+1,postdec2
  3380                           
  3381                           ;semaphore.c: 25: s->queue.s_queue_pos_in = (s->queue.s_queue_pos_in + 1) % 5;
  3382  000C4C  0E05               	movlw	5
  3383  000C4E  6EE6               	movwf	postinc1,c
  3384  000C50  0E00               	movlw	0
  3385  000C52  6EE6               	movwf	postinc1,c
  3386                           
  3387                           ;stkvar	sem_wait@s @ sp[(-2)+-2]
  3388  000C54  0EFC               	movlw	-4
  3389  000C56  CFE3 F03C          	movff	plusw1,btemp+1
  3390  000C5A  0EFD               	movlw	-3
  3391  000C5C  CFE3 F03D          	movff	plusw1,btemp+2
  3392  000C60  0E0C               	movlw	12
  3393  000C62  243C               	addwf	btemp+1,w,c
  3394  000C64  6ED9               	movwf	fsr2l,c
  3395  000C66  0E00               	movlw	0
  3396  000C68  203D               	addwfc	btemp+2,w,c
  3397  000C6A  6EDA               	movwf	fsr2h,c
  3398  000C6C  CFDE F03C          	movff	postinc2,btemp+1
  3399  000C70  CFDD F03D          	movff	postdec2,btemp+2
  3400  000C74  0E01               	movlw	1
  3401  000C76  263C               	addwf	btemp+1,f,c
  3402  000C78  0E00               	movlw	0
  3403  000C7A  223D               	addwfc	btemp+2,f,c
  3404  000C7C  C03C  FFE6         	movff	btemp+1,postinc1
  3405  000C80  C03D  FFE6         	movff	btemp+2,postinc1
  3406  000C84  EC5C  F006         	call	___lwmod	;wreg free
  3407                           
  3408                           ;stkvar	sem_wait@s @ sp[(0)+-2]
  3409  000C88  0EFE               	movlw	-2
  3410  000C8A  CFE3 F045          	movff	plusw1,btemp+10
  3411  000C8E  0EFF               	movlw	-1
  3412  000C90  CFE3 F046          	movff	plusw1,btemp+11
  3413  000C94  0E0C               	movlw	12
  3414  000C96  2445               	addwf	btemp+10,w,c
  3415  000C98  6ED9               	movwf	fsr2l,c
  3416  000C9A  0E00               	movlw	0
  3417  000C9C  2046               	addwfc	btemp+11,w,c
  3418  000C9E  6EDA               	movwf	fsr2h,c
  3419  000CA0  C03B  FFDE         	movff	btemp,postinc2
  3420  000CA4  C03C  FFDD         	movff	btemp+1,postdec2
  3421                           
  3422                           ;semaphore.c: 26: dispatcher(WAITING_SEM);
  3423  000CA8  0E05               	movlw	5
  3424  000CAA  6EE6               	movwf	postinc1,c
  3425  000CAC  EC0A  F000         	call	_dispatcher	;wreg free
  3426  000CB0                     l1500:
  3427                           
  3428                           ;semaphore.c: 27: }
  3429                           ;semaphore.c: 29: (INTCONbits.GIE = 1);
  3430  000CB0  8EF2               	bsf	intcon,7,c	;volatile
  3431                           
  3432                           ; _sem_wait: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  3433  000CB2  52E5               	movf	postdec1,f,c
  3434  000CB4  52E5               	movf	postdec1,f,c
  3435  000CB6  0012               	return		;funcret
  3436  000CB8                     __end_of_sem_wait:
  3437                           	opt stack 0
  3438                           tosu	equ	0xFFF
  3439                           tosh	equ	0xFFE
  3440                           tosl	equ	0xFFD
  3441                           stkptr	equ	0xFFC
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           intcon	equ	0xFF2
  3449                           postinc0	equ	0xFEE
  3450                           postdec0	equ	0xFED
  3451                           plusw0	equ	0xFEB
  3452                           fsr0h	equ	0xFEA
  3453                           fsr0l	equ	0xFE9
  3454                           wreg	equ	0xFE8
  3455                           postinc1	equ	0xFE6
  3456                           postdec1	equ	0xFE5
  3457                           plusw1	equ	0xFE3
  3458                           fsr1h	equ	0xFE2
  3459                           fsr1l	equ	0xFE1
  3460                           bsr	equ	0xFE0
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           plusw2	equ	0xFDB
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _sem_post *****************
  3470 ;; Defined at:
  3471 ;;		line 32 in file "semaphore.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  s               2  [STACK] PTR struct sem
  3474 ;;		 -> s(2), 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1  [STACK] void 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         0       0       0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    7
  3493 ;; This function calls:
  3494 ;;		___lwmod
  3495 ;;		___wmul
  3496 ;;		_dispatcher
  3497 ;; This function is called by:
  3498 ;;		_ctpista
  3499 ;; This function uses a reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text18
  3503  0009D2                     __ptext18:
  3504                           	opt stack 0
  3505  0009D2                     _sem_post:
  3506                           	opt stack 19
  3507                           
  3508                           ;semaphore.c: 34: (INTCONbits.GIE = 0);
  3509                           
  3510                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3511                           ;incstack = 0
  3512  0009D2  9EF2               	bcf	intcon,7,c	;volatile
  3513                           
  3514                           ;semaphore.c: 36: s->contador++;
  3515                           ;stkvar	sem_post@s @ sp[(0)+-2]
  3516  0009D4  0EFE               	movlw	-2
  3517  0009D6  CFE3 FFD9          	movff	plusw1,fsr2l
  3518  0009DA  0EFF               	movlw	-1
  3519  0009DC  CFE3 FFDA          	movff	plusw1,fsr2h
  3520  0009E0  2ADE               	incf	postinc2,f,c
  3521  0009E2  0E00               	movlw	0
  3522  0009E4  22DD               	addwfc	postdec2,f,c
  3523                           
  3524                           ;semaphore.c: 37: if (s->contador <= 0) {
  3525                           ;stkvar	sem_post@s @ sp[(0)+-2]
  3526  0009E6  0EFE               	movlw	-2
  3527  0009E8  CFE3 FFD9          	movff	plusw1,fsr2l
  3528  0009EC  0EFF               	movlw	-1
  3529  0009EE  CFE3 FFDA          	movff	plusw1,fsr2h
  3530  0009F2  0E01               	movlw	1
  3531  0009F4  BEDB               	btfsc	plusw2,7,c
  3532  0009F6  D006               	goto	u60_20
  3533  0009F8  0E01               	movlw	1
  3534  0009FA  50DB               	movf	plusw2,w,c
  3535  0009FC  E17C               	bnz	l1486
  3536  0009FE  04DE               	decf	postinc2,w,c
  3537  000A00  B0D8               	btfsc	status,0,c
  3538  000A02  D079               	goto	l1486
  3539  000A04                     u60_20:
  3540                           
  3541                           ;semaphore.c: 38: F_APTOS[s->queue.s_queue[s->queue.s_queue_pos_out]].task_state = READY
      +                          ;
  3542  000A04  0E6E               	movlw	110
  3543  000A06  6EE6               	movwf	postinc1,c
  3544  000A08  0E00               	movlw	0
  3545  000A0A  6EE6               	movwf	postinc1,c
  3546                           
  3547                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  3548  000A0C  0EFC               	movlw	-4
  3549  000A0E  CFE3 F03C          	movff	plusw1,btemp+1
  3550  000A12  0EFD               	movlw	-3
  3551  000A14  CFE3 F03D          	movff	plusw1,btemp+2
  3552  000A18  0E0E               	movlw	14
  3553  000A1A  243C               	addwf	btemp+1,w,c
  3554  000A1C  6ED9               	movwf	fsr2l,c
  3555  000A1E  0E00               	movlw	0
  3556  000A20  203D               	addwfc	btemp+2,w,c
  3557  000A22  6EDA               	movwf	fsr2h,c
  3558  000A24  CFDE F045          	movff	postinc2,btemp+10
  3559  000A28  CFDD F046          	movff	postdec2,btemp+11
  3560  000A2C  90D8               	bcf	status,0,c
  3561  000A2E  3445               	rlcf	btemp+10,w,c
  3562  000A30  6E3C               	movwf	btemp+1,c
  3563  000A32  3446               	rlcf	btemp+11,w,c
  3564  000A34  6E3D               	movwf	btemp+2,c
  3565                           
  3566                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  3567  000A36  0EFC               	movlw	-4
  3568  000A38  50E3               	movf	plusw1,w,c
  3569  000A3A  263C               	addwf	btemp+1,f,c
  3570  000A3C  0EFD               	movlw	-3
  3571  000A3E  50E3               	movf	plusw1,w,c
  3572  000A40  223D               	addwfc	btemp+2,f,c
  3573  000A42  0E02               	movlw	2
  3574  000A44  243C               	addwf	btemp+1,w,c
  3575  000A46  6ED9               	movwf	fsr2l,c
  3576  000A48  0E00               	movlw	0
  3577  000A4A  203D               	addwfc	btemp+2,w,c
  3578  000A4C  6EDA               	movwf	fsr2h,c
  3579  000A4E  CFDE F03C          	movff	postinc2,btemp+1
  3580  000A52  CFDD F03D          	movff	postdec2,btemp+2
  3581  000A56  C03C  FFE6         	movff	btemp+1,postinc1
  3582  000A5A  C03D  FFE6         	movff	btemp+2,postinc1
  3583  000A5E  EC61  F007         	call	___wmul	;wreg free
  3584  000A62  0EF6               	movlw	low (_F_APTOS+8)
  3585  000A64  243B               	addwf	btemp,w,c
  3586  000A66  6ED9               	movwf	fsr2l,c
  3587  000A68  0E00               	movlw	high (_F_APTOS+8)
  3588  000A6A  203C               	addwfc	btemp+1,w,c
  3589  000A6C  6EDA               	movwf	fsr2h,c
  3590  000A6E  0E01               	movlw	1
  3591  000A70  6EDF               	movwf	indf2,c
  3592                           
  3593                           ;semaphore.c: 39: s->queue.s_queue_pos_out = (s->queue.s_queue_pos_out + 1) % s->queue.s
      +                          _queue_pos_in;
  3594                           ;stkvar	sem_post@s @ sp[(0)+-2]
  3595  000A72  0EFE               	movlw	-2
  3596  000A74  CFE3 F03C          	movff	plusw1,btemp+1
  3597  000A78  0EFF               	movlw	-1
  3598  000A7A  CFE3 F03D          	movff	plusw1,btemp+2
  3599  000A7E  0E0C               	movlw	12
  3600  000A80  243C               	addwf	btemp+1,w,c
  3601  000A82  6ED9               	movwf	fsr2l,c
  3602  000A84  0E00               	movlw	0
  3603  000A86  203D               	addwfc	btemp+2,w,c
  3604  000A88  6EDA               	movwf	fsr2h,c
  3605  000A8A  CFDE F03C          	movff	postinc2,btemp+1
  3606  000A8E  CFDD F03D          	movff	postdec2,btemp+2
  3607  000A92  C03C  FFE6         	movff	btemp+1,postinc1
  3608  000A96  C03D  FFE6         	movff	btemp+2,postinc1
  3609                           
  3610                           ;stkvar	sem_post@s @ sp[(-2)+-2]
  3611  000A9A  0EFC               	movlw	-4
  3612  000A9C  CFE3 F03C          	movff	plusw1,btemp+1
  3613  000AA0  0EFD               	movlw	-3
  3614  000AA2  CFE3 F03D          	movff	plusw1,btemp+2
  3615  000AA6  0E0E               	movlw	14
  3616  000AA8  243C               	addwf	btemp+1,w,c
  3617  000AAA  6ED9               	movwf	fsr2l,c
  3618  000AAC  0E00               	movlw	0
  3619  000AAE  203D               	addwfc	btemp+2,w,c
  3620  000AB0  6EDA               	movwf	fsr2h,c
  3621  000AB2  CFDE F03C          	movff	postinc2,btemp+1
  3622  000AB6  CFDD F03D          	movff	postdec2,btemp+2
  3623  000ABA  0E01               	movlw	1
  3624  000ABC  263C               	addwf	btemp+1,f,c
  3625  000ABE  0E00               	movlw	0
  3626  000AC0  223D               	addwfc	btemp+2,f,c
  3627  000AC2  C03C  FFE6         	movff	btemp+1,postinc1
  3628  000AC6  C03D  FFE6         	movff	btemp+2,postinc1
  3629  000ACA  EC5C  F006         	call	___lwmod	;wreg free
  3630                           
  3631                           ;stkvar	sem_post@s @ sp[(0)+-2]
  3632  000ACE  0EFE               	movlw	-2
  3633  000AD0  CFE3 F045          	movff	plusw1,btemp+10
  3634  000AD4  0EFF               	movlw	-1
  3635  000AD6  CFE3 F046          	movff	plusw1,btemp+11
  3636  000ADA  0E0E               	movlw	14
  3637  000ADC  2445               	addwf	btemp+10,w,c
  3638  000ADE  6ED9               	movwf	fsr2l,c
  3639  000AE0  0E00               	movlw	0
  3640  000AE2  2046               	addwfc	btemp+11,w,c
  3641  000AE4  6EDA               	movwf	fsr2h,c
  3642  000AE6  C03B  FFDE         	movff	btemp,postinc2
  3643  000AEA  C03C  FFDD         	movff	btemp+1,postdec2
  3644                           
  3645                           ;semaphore.c: 40: dispatcher(READY);
  3646  000AEE  0E01               	movlw	1
  3647  000AF0  6EE6               	movwf	postinc1,c
  3648  000AF2  EC0A  F000         	call	_dispatcher	;wreg free
  3649  000AF6                     l1486:
  3650                           
  3651                           ;semaphore.c: 41: }
  3652                           ;semaphore.c: 43: (INTCONbits.GIE = 1);
  3653  000AF6  8EF2               	bsf	intcon,7,c	;volatile
  3654                           
  3655                           ; _sem_post: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
  3656  000AF8  52E5               	movf	postdec1,f,c
  3657  000AFA  52E5               	movf	postdec1,f,c
  3658  000AFC  0012               	return		;funcret
  3659  000AFE                     __end_of_sem_post:
  3660                           	opt stack 0
  3661                           tosu	equ	0xFFF
  3662                           tosh	equ	0xFFE
  3663                           tosl	equ	0xFFD
  3664                           stkptr	equ	0xFFC
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           postinc0	equ	0xFEE
  3673                           postdec0	equ	0xFED
  3674                           plusw0	equ	0xFEB
  3675                           fsr0h	equ	0xFEA
  3676                           fsr0l	equ	0xFE9
  3677                           wreg	equ	0xFE8
  3678                           postinc1	equ	0xFE6
  3679                           postdec1	equ	0xFE5
  3680                           plusw1	equ	0xFE3
  3681                           fsr1h	equ	0xFE2
  3682                           fsr1l	equ	0xFE1
  3683                           bsr	equ	0xFE0
  3684                           indf2	equ	0xFDF
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           plusw2	equ	0xFDB
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _read_pipe *****************
  3693 ;; Defined at:
  3694 ;;		line 50 in file "pipe.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  pipe            2  [STACK] PTR struct pipe
  3697 ;;		 -> pipe(14), 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  dado            1  [STACK] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1  [STACK] unsigned char 
  3702 ;; Registers used:
  3703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3709 ;;      Params:         0       0       0       0       0       0       0
  3710 ;;      Locals:         0       0       0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0
  3712 ;;      Totals:         0       0       0       0       0       0       0
  3713 ;;Total ram usage:        0 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    7
  3716 ;; This function calls:
  3717 ;;		___wmul
  3718 ;;		_dispatcher
  3719 ;; This function is called by:
  3720 ;;		_ctpista
  3721 ;; This function uses a reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text19
  3725  000554                     __ptext19:
  3726                           	opt stack 0
  3727  000554                     _read_pipe:
  3728                           	opt stack 0
  3729                           
  3730                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3731  000554  52E6               	movf	postinc1,f,c
  3732                           
  3733                           ;pipe.c: 52: byte dado;
  3734                           ;pipe.c: 55: if (pipe->pipe_itens == 0) {
  3735                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3736                           
  3737                           ;incstack = 0
  3738  000556  0EFD               	movlw	-3
  3739  000558  CFE3 F03C          	movff	plusw1,btemp+1
  3740  00055C  0EFE               	movlw	-2
  3741  00055E  CFE3 F03D          	movff	plusw1,btemp+2
  3742  000562  0E08               	movlw	8
  3743  000564  243C               	addwf	btemp+1,w,c
  3744  000566  6ED9               	movwf	fsr2l,c
  3745  000568  0E00               	movlw	0
  3746  00056A  203D               	addwfc	btemp+2,w,c
  3747  00056C  6EDA               	movwf	fsr2h,c
  3748  00056E  50DE               	movf	postinc2,w,c
  3749  000570  10DE               	iorwf	postinc2,w,c
  3750  000572  A4D8               	btfss	status,2,c
  3751  000574  D014               	goto	l1458
  3752                           
  3753                           ;pipe.c: 58: pipe->pos_bloqued_read = task_running;
  3754                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3755  000576  0EFD               	movlw	-3
  3756  000578  CFE3 F03C          	movff	plusw1,btemp+1
  3757  00057C  0EFE               	movlw	-2
  3758  00057E  CFE3 F03D          	movff	plusw1,btemp+2
  3759  000582  0E0A               	movlw	10
  3760  000584  243C               	addwf	btemp+1,w,c
  3761  000586  6ED9               	movwf	fsr2l,c
  3762  000588  0E00               	movlw	0
  3763  00058A  203D               	addwfc	btemp+2,w,c
  3764  00058C  6EDA               	movwf	fsr2h,c
  3765  00058E  C027  FFDE         	movff	_task_running,postinc2
  3766  000592  C028  FFDD         	movff	_task_running+1,postdec2
  3767                           
  3768                           ;pipe.c: 59: dispatcher(WAITING_PIPE);
  3769  000596  0E06               	movlw	6
  3770  000598  6EE6               	movwf	postinc1,c
  3771  00059A  EC0A  F000         	call	_dispatcher	;wreg free
  3772  00059E                     l1458:
  3773                           
  3774                           ;pipe.c: 60: }
  3775                           ;pipe.c: 62: dado = pipe->pipe_queue[pipe->pos_read_pipe];
  3776                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3777  00059E  0EFD               	movlw	-3
  3778  0005A0  CFE3 F03C          	movff	plusw1,btemp+1
  3779  0005A4  0EFE               	movlw	-2
  3780  0005A6  CFE3 F03D          	movff	plusw1,btemp+2
  3781  0005AA  0E04               	movlw	4
  3782  0005AC  243C               	addwf	btemp+1,w,c
  3783  0005AE  6ED9               	movwf	fsr2l,c
  3784  0005B0  0E00               	movlw	0
  3785  0005B2  203D               	addwfc	btemp+2,w,c
  3786  0005B4  6EDA               	movwf	fsr2h,c
  3787  0005B6  CFDE F03C          	movff	postinc2,btemp+1
  3788  0005BA  CFDD F03D          	movff	postdec2,btemp+2
  3789                           
  3790                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3791  0005BE  0EFD               	movlw	-3
  3792  0005C0  CFE3 F045          	movff	plusw1,btemp+10
  3793  0005C4  0EFE               	movlw	-2
  3794  0005C6  CFE3 F046          	movff	plusw1,btemp+11
  3795  0005CA  503C               	movf	btemp+1,w,c
  3796  0005CC  2445               	addwf	btemp+10,w,c
  3797  0005CE  6ED9               	movwf	fsr2l,c
  3798  0005D0  503D               	movf	btemp+2,w,c
  3799  0005D2  2046               	addwfc	btemp+11,w,c
  3800  0005D4  6EDA               	movwf	fsr2h,c
  3801  0005D6  50DF               	movf	indf2,w,c
  3802  0005D8  6E46               	movwf	btemp+11,c
  3803                           
  3804                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3805  0005DA  0EFF               	movlw	-1
  3806  0005DC  C046  FFE3         	movff	btemp+11,plusw1
  3807                           
  3808                           ;pipe.c: 63: pipe->pos_read_pipe = (pipe->pos_read_pipe + 1) % 4;
  3809                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3810  0005E0  0EFD               	movlw	-3
  3811  0005E2  CFE3 F03C          	movff	plusw1,btemp+1
  3812  0005E6  0EFE               	movlw	-2
  3813  0005E8  CFE3 F03D          	movff	plusw1,btemp+2
  3814  0005EC  0E04               	movlw	4
  3815  0005EE  243C               	addwf	btemp+1,w,c
  3816  0005F0  6ED9               	movwf	fsr2l,c
  3817  0005F2  0E00               	movlw	0
  3818  0005F4  203D               	addwfc	btemp+2,w,c
  3819  0005F6  6EDA               	movwf	fsr2h,c
  3820  0005F8  CFDE F03C          	movff	postinc2,btemp+1
  3821  0005FC  CFDD F03D          	movff	postdec2,btemp+2
  3822  000600  0E01               	movlw	1
  3823  000602  263C               	addwf	btemp+1,f,c
  3824  000604  0E00               	movlw	0
  3825  000606  223D               	addwfc	btemp+2,f,c
  3826  000608  0E03               	movlw	3
  3827  00060A  163C               	andwf	btemp+1,f,c
  3828  00060C  0E00               	movlw	0
  3829  00060E  163D               	andwf	btemp+2,f,c
  3830                           
  3831                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3832  000610  0EFD               	movlw	-3
  3833  000612  CFE3 F045          	movff	plusw1,btemp+10
  3834  000616  0EFE               	movlw	-2
  3835  000618  CFE3 F046          	movff	plusw1,btemp+11
  3836  00061C  0E04               	movlw	4
  3837  00061E  2445               	addwf	btemp+10,w,c
  3838  000620  6ED9               	movwf	fsr2l,c
  3839  000622  0E00               	movlw	0
  3840  000624  2046               	addwfc	btemp+11,w,c
  3841  000626  6EDA               	movwf	fsr2h,c
  3842  000628  C03C  FFDE         	movff	btemp+1,postinc2
  3843  00062C  C03D  FFDD         	movff	btemp+2,postdec2
  3844                           
  3845                           ;pipe.c: 64: pipe->pipe_itens--;
  3846                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3847  000630  0EFD               	movlw	-3
  3848  000632  CFE3 F03C          	movff	plusw1,btemp+1
  3849  000636  0EFE               	movlw	-2
  3850  000638  CFE3 F03D          	movff	plusw1,btemp+2
  3851  00063C  0E08               	movlw	8
  3852  00063E  243C               	addwf	btemp+1,w,c
  3853  000640  6ED9               	movwf	fsr2l,c
  3854  000642  0E00               	movlw	0
  3855  000644  203D               	addwfc	btemp+2,w,c
  3856  000646  6EDA               	movwf	fsr2h,c
  3857  000648  06DE               	decf	postinc2,f,c
  3858  00064A  0E00               	movlw	0
  3859  00064C  5ADD               	subwfb	postdec2,f,c
  3860                           
  3861                           ;pipe.c: 67: if (pipe->pos_bloqued_write > 0) {
  3862                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3863  00064E  0EFD               	movlw	-3
  3864  000650  CFE3 F03C          	movff	plusw1,btemp+1
  3865  000654  0EFE               	movlw	-2
  3866  000656  CFE3 F03D          	movff	plusw1,btemp+2
  3867  00065A  0E0C               	movlw	12
  3868  00065C  243C               	addwf	btemp+1,w,c
  3869  00065E  6ED9               	movwf	fsr2l,c
  3870  000660  0E00               	movlw	0
  3871  000662  203D               	addwfc	btemp+2,w,c
  3872  000664  6EDA               	movwf	fsr2h,c
  3873  000666  50DE               	movf	postinc2,w,c
  3874  000668  10DE               	iorwf	postinc2,w,c
  3875  00066A  B4D8               	btfsc	status,2,c
  3876  00066C  D032               	goto	l1470
  3877                           
  3878                           ;pipe.c: 68: F_APTOS[pipe->pos_bloqued_write].task_state = READY;
  3879  00066E  0E6E               	movlw	110
  3880  000670  6EE6               	movwf	postinc1,c
  3881  000672  0E00               	movlw	0
  3882  000674  6EE6               	movwf	postinc1,c
  3883                           
  3884                           ;stkvar	read_pipe@pipe @ sp[(-3)+-2]
  3885  000676  0EFB               	movlw	-5
  3886  000678  CFE3 F03C          	movff	plusw1,btemp+1
  3887  00067C  0EFC               	movlw	-4
  3888  00067E  CFE3 F03D          	movff	plusw1,btemp+2
  3889  000682  0E0C               	movlw	12
  3890  000684  243C               	addwf	btemp+1,w,c
  3891  000686  6ED9               	movwf	fsr2l,c
  3892  000688  0E00               	movlw	0
  3893  00068A  203D               	addwfc	btemp+2,w,c
  3894  00068C  6EDA               	movwf	fsr2h,c
  3895  00068E  CFDE F03C          	movff	postinc2,btemp+1
  3896  000692  CFDD F03D          	movff	postdec2,btemp+2
  3897  000696  C03C  FFE6         	movff	btemp+1,postinc1
  3898  00069A  C03D  FFE6         	movff	btemp+2,postinc1
  3899  00069E  EC61  F007         	call	___wmul	;wreg free
  3900  0006A2  0EF6               	movlw	low (_F_APTOS+8)
  3901  0006A4  243B               	addwf	btemp,w,c
  3902  0006A6  6ED9               	movwf	fsr2l,c
  3903  0006A8  0E00               	movlw	high (_F_APTOS+8)
  3904  0006AA  203C               	addwfc	btemp+1,w,c
  3905  0006AC  6EDA               	movwf	fsr2h,c
  3906  0006AE  0E01               	movlw	1
  3907  0006B0  6EDF               	movwf	indf2,c
  3908                           
  3909                           ;pipe.c: 69: pipe->pos_bloqued_write = 0;
  3910                           ;stkvar	read_pipe@pipe @ sp[(-1)+-2]
  3911  0006B2  0EFD               	movlw	-3
  3912  0006B4  CFE3 F03C          	movff	plusw1,btemp+1
  3913  0006B8  0EFE               	movlw	-2
  3914  0006BA  CFE3 F03D          	movff	plusw1,btemp+2
  3915  0006BE  0E0C               	movlw	12
  3916  0006C0  243C               	addwf	btemp+1,w,c
  3917  0006C2  6ED9               	movwf	fsr2l,c
  3918  0006C4  0E00               	movlw	0
  3919  0006C6  203D               	addwfc	btemp+2,w,c
  3920  0006C8  6EDA               	movwf	fsr2h,c
  3921  0006CA  0E00               	movlw	0
  3922  0006CC  6EDE               	movwf	postinc2,c
  3923  0006CE  0E00               	movlw	0
  3924  0006D0  6EDD               	movwf	postdec2,c
  3925  0006D2                     l1470:
  3926                           
  3927                           ;pipe.c: 73: }
  3928                           ;pipe.c: 75: return dado;
  3929                           ;stkvar	read_pipe@dado @ sp[(-1)+0]
  3930  0006D2  0EFF               	movlw	-1
  3931  0006D4  CFE3 F03B          	movff	plusw1,btemp
  3932                           
  3933                           ; _read_pipe: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, arg
      +                          size = 2, vargsize = 0
  3934  0006D8  52E5               	movf	postdec1,f,c
  3935  0006DA  52E5               	movf	postdec1,f,c
  3936  0006DC  52E5               	movf	postdec1,f,c
  3937  0006DE  0012               	return		;funcret
  3938  0006E0                     __end_of_read_pipe:
  3939                           	opt stack 0
  3940                           tosu	equ	0xFFF
  3941                           tosh	equ	0xFFE
  3942                           tosl	equ	0xFFD
  3943                           stkptr	equ	0xFFC
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           intcon	equ	0xFF2
  3951                           postinc0	equ	0xFEE
  3952                           postdec0	equ	0xFED
  3953                           plusw0	equ	0xFEB
  3954                           fsr0h	equ	0xFEA
  3955                           fsr0l	equ	0xFE9
  3956                           wreg	equ	0xFE8
  3957                           postinc1	equ	0xFE6
  3958                           postdec1	equ	0xFE5
  3959                           plusw1	equ	0xFE3
  3960                           fsr1h	equ	0xFE2
  3961                           fsr1l	equ	0xFE1
  3962                           bsr	equ	0xFE0
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           plusw2	equ	0xFDB
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _task_idle *****************
  3972 ;; Defined at:
  3973 ;;		line 68 in file "kernel.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1  [STACK] void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0, btemp+11
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3987 ;;      Params:         0       0       0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    4
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_setupOS
  3998 ;; This function uses a reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text20
  4002  001290                     __ptext20:
  4003                           	opt stack 0
  4004  001290                     _task_idle:
  4005                           	opt stack 23
  4006                           
  4007                           ;kernel.c: 70: TRISDbits.RD4 = 0;
  4008                           
  4009                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  4010                           ;incstack = 0
  4011  001290  9895               	bcf	3989,4,c	;volatile
  4012  001292                     l1176:
  4013                           
  4014                           ;kernel.c: 73: PORTDbits.RD4 = ~PORTDbits.RD4;
  4015  001292  A883               	btfss	3971,4,c	;volatile
  4016  001294  D002               	goto	u28_20
  4017  001296  0E01               	movlw	1
  4018  001298  D001               	goto	u28_26
  4019  00129A                     u28_20:
  4020  00129A  0E00               	movlw	0
  4021  00129C                     u28_26:
  4022  00129C  0AFF               	xorlw	255
  4023  00129E  6E46               	movwf	btemp+11,c
  4024  0012A0  3A46               	swapf	btemp+11,f,c
  4025  0012A2  5083               	movf	3971,w,c	;volatile
  4026  0012A4  1846               	xorwf	btemp+11,w,c
  4027  0012A6  0BEF               	andlw	-17
  4028  0012A8  1846               	xorwf	btemp+11,w,c
  4029  0012AA  6E83               	movwf	3971,c	;volatile
  4030                           
  4031                           ;kernel.c: 74: __nop();
  4032  0012AC  F000               	nop	
  4033  0012AE  D7F1               	goto	l1176
  4034  0012B0                     __end_of_task_idle:
  4035                           	opt stack 0
  4036                           tosu	equ	0xFFF
  4037                           tosh	equ	0xFFE
  4038                           tosl	equ	0xFFD
  4039                           stkptr	equ	0xFFC
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           postinc0	equ	0xFEE
  4048                           postdec0	equ	0xFED
  4049                           plusw0	equ	0xFEB
  4050                           fsr0h	equ	0xFEA
  4051                           fsr0l	equ	0xFE9
  4052                           wreg	equ	0xFE8
  4053                           postinc1	equ	0xFE6
  4054                           postdec1	equ	0xFE5
  4055                           plusw1	equ	0xFE3
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           bsr	equ	0xFE0
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           plusw2	equ	0xFDB
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _int_high *****************
  4068 ;; Defined at:
  4069 ;;		line 102 in file "kernel.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  i               2   15[COMRAM] unsigned int 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp+10, btemp+11,
      + prodl, prodh
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4083 ;;      Params:         0       0       0       0       0       0       0
  4084 ;;      Locals:         2       0       0       0       0       0       0
  4085 ;;      Temps:         15       0       0       0       0       0       0
  4086 ;;      Totals:        17       0       0       0       0       0       0
  4087 ;;Total ram usage:       17 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		___wmul
  4092 ;;		_dispatcher
  4093 ;; This function is called by:
  4094 ;;		Interrupt level 2
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	intcode
  4099  000008                     __pintcode:
  4100                           	opt stack 0
  4101  000008                     _int_high:
  4102                           	opt stack 19
  4103                           
  4104                           ;incstack = 0
  4105  000008  ED33  F004         	call	int_func,f	;refresh shadow registers
  4106                           tosu	equ	0xFFF
  4107                           tosh	equ	0xFFE
  4108                           tosl	equ	0xFFD
  4109                           stkptr	equ	0xFFC
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           postinc0	equ	0xFEE
  4118                           postdec0	equ	0xFED
  4119                           plusw0	equ	0xFEB
  4120                           fsr0h	equ	0xFEA
  4121                           fsr0l	equ	0xFE9
  4122                           wreg	equ	0xFE8
  4123                           postinc1	equ	0xFE6
  4124                           postdec1	equ	0xFE5
  4125                           plusw1	equ	0xFE3
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           bsr	equ	0xFE0
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           plusw2	equ	0xFDB
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137                           	psect	intcode_body
  4138  000866                     __pintcode_body:
  4139                           	opt stack 19
  4140  000866                     int_func:
  4141                           	opt stack 19
  4142  000866  0006               	pop		; remove dummy address from shadow register refresh
  4143  000868  CFE1 F003          	movff	fsr1l,??_int_high+2
  4144  00086C  CFE2 F004          	movff	fsr1h,??_int_high+3
  4145  000870  CFD9 F005          	movff	fsr2l,??_int_high+4
  4146  000874  CFDA F006          	movff	fsr2h,??_int_high+5
  4147  000878  CFF3 F007          	movff	prodl,??_int_high+6
  4148  00087C  CFF4 F008          	movff	prodh,??_int_high+7
  4149  000880  C03B  F009         	movff	btemp,??_int_high+8
  4150  000884  C03C  F00A         	movff	btemp+1,??_int_high+9
  4151  000888  C03D  F00B         	movff	btemp+2,??_int_high+10
  4152  00088C  C043  F00C         	movff	btemp+8,??_int_high+11
  4153  000890  C044  F00D         	movff	btemp+9,??_int_high+12
  4154  000894  C045  F00E         	movff	btemp+10,??_int_high+13
  4155  000898  C046  F00F         	movff	btemp+11,??_int_high+14
  4156  00089C  EE15  F064         	lfsr	1,___inthi_sp
  4157                           
  4158                           ;kernel.c: 104: u_int i;
  4159                           ;kernel.c: 106: if (INTCONbits.TMR0IF) {
  4160  0008A0  A4F2               	btfss	intcon,2,c	;volatile
  4161  0008A2  D07C               	goto	i2l100
  4162                           
  4163                           ;kernel.c: 107: INTCONbits.TMR0IF = 0;
  4164  0008A4  94F2               	bcf	intcon,2,c	;volatile
  4165                           
  4166                           ;kernel.c: 108: TMR0L = 252;
  4167  0008A6  0EFC               	movlw	252
  4168  0008A8  6ED6               	movwf	4054,c	;volatile
  4169                           
  4170                           ;kernel.c: 110: for (i = 1; i < tasks_installed; i++) {
  4171  0008AA  0E00               	movlw	0
  4172  0008AC  6E11               	movwf	int_high@i+1,c
  4173  0008AE  0E01               	movlw	1
  4174  0008B0  6E10               	movwf	int_high@i,c
  4175  0008B2  D05F               	goto	i2l95
  4176  0008B4                     
  4177                           ;kernel.c: 111: if (F_APTOS[i].task_state == SLEEPING) {
  4178  0008B4  0E6E               	movlw	110
  4179  0008B6  6EE6               	movwf	postinc1,c
  4180  0008B8  0E00               	movlw	0
  4181  0008BA  6EE6               	movwf	postinc1,c
  4182  0008BC  C010  FFE6         	movff	int_high@i,postinc1
  4183  0008C0  C011  FFE6         	movff	int_high@i+1,postinc1
  4184  0008C4  EC61  F007         	call	___wmul	;wreg free
  4185  0008C8  0E08               	movlw	8
  4186  0008CA  263B               	addwf	btemp,f,c
  4187  0008CC  0E00               	movlw	0
  4188  0008CE  223C               	addwfc	btemp+1,f,c
  4189  0008D0  0EEE               	movlw	low _F_APTOS
  4190  0008D2  243B               	addwf	btemp,w,c
  4191  0008D4  6ED9               	movwf	fsr2l,c
  4192  0008D6  0E00               	movlw	high _F_APTOS
  4193  0008D8  203C               	addwfc	btemp+1,w,c
  4194  0008DA  6EDA               	movwf	fsr2h,c
  4195  0008DC  0E03               	movlw	3
  4196  0008DE  18DE               	xorwf	postinc2,w,c
  4197  0008E0  A4D8               	btfss	status,2,c
  4198  0008E2  D045               	goto	i2l98
  4199                           
  4200                           ;kernel.c: 112: F_APTOS[i].delay_time--;
  4201  0008E4  0E6E               	movlw	110
  4202  0008E6  6EE6               	movwf	postinc1,c
  4203  0008E8  0E00               	movlw	0
  4204  0008EA  6EE6               	movwf	postinc1,c
  4205  0008EC  C010  FFE6         	movff	int_high@i,postinc1
  4206  0008F0  C011  FFE6         	movff	int_high@i+1,postinc1
  4207  0008F4  EC61  F007         	call	___wmul	;wreg free
  4208  0008F8  0E06               	movlw	6
  4209  0008FA  263B               	addwf	btemp,f,c
  4210  0008FC  0E00               	movlw	0
  4211  0008FE  223C               	addwfc	btemp+1,f,c
  4212  000900  0EEE               	movlw	low _F_APTOS
  4213  000902  243B               	addwf	btemp,w,c
  4214  000904  6ED9               	movwf	fsr2l,c
  4215  000906  0E00               	movlw	high _F_APTOS
  4216  000908  203C               	addwfc	btemp+1,w,c
  4217  00090A  6EDA               	movwf	fsr2h,c
  4218  00090C  06DE               	decf	postinc2,f,c
  4219  00090E  0E00               	movlw	0
  4220  000910  5ADD               	subwfb	postdec2,f,c
  4221                           
  4222                           ;kernel.c: 113: if (F_APTOS[i].delay_time == 0) {
  4223  000912  0E6E               	movlw	110
  4224  000914  6EE6               	movwf	postinc1,c
  4225  000916  0E00               	movlw	0
  4226  000918  6EE6               	movwf	postinc1,c
  4227  00091A  C010  FFE6         	movff	int_high@i,postinc1
  4228  00091E  C011  FFE6         	movff	int_high@i+1,postinc1
  4229  000922  EC61  F007         	call	___wmul	;wreg free
  4230  000926  0E06               	movlw	6
  4231  000928  263B               	addwf	btemp,f,c
  4232  00092A  0E00               	movlw	0
  4233  00092C  223C               	addwfc	btemp+1,f,c
  4234  00092E  0EEE               	movlw	low _F_APTOS
  4235  000930  243B               	addwf	btemp,w,c
  4236  000932  6ED9               	movwf	fsr2l,c
  4237  000934  0E00               	movlw	high _F_APTOS
  4238  000936  203C               	addwfc	btemp+1,w,c
  4239  000938  6EDA               	movwf	fsr2h,c
  4240  00093A  50DE               	movf	postinc2,w,c
  4241  00093C  10DE               	iorwf	postinc2,w,c
  4242  00093E  A4D8               	btfss	status,2,c
  4243  000940  D016               	goto	i2l98
  4244                           
  4245                           ;kernel.c: 114: F_APTOS[i].task_state = READY;
  4246  000942  0E6E               	movlw	110
  4247  000944  6EE6               	movwf	postinc1,c
  4248  000946  0E00               	movlw	0
  4249  000948  6EE6               	movwf	postinc1,c
  4250  00094A  C010  FFE6         	movff	int_high@i,postinc1
  4251  00094E  C011  FFE6         	movff	int_high@i+1,postinc1
  4252  000952  EC61  F007         	call	___wmul	;wreg free
  4253  000956  0E08               	movlw	8
  4254  000958  263B               	addwf	btemp,f,c
  4255  00095A  0E00               	movlw	0
  4256  00095C  223C               	addwfc	btemp+1,f,c
  4257  00095E  0EEE               	movlw	low _F_APTOS
  4258  000960  243B               	addwf	btemp,w,c
  4259  000962  6ED9               	movwf	fsr2l,c
  4260  000964  0E00               	movlw	high _F_APTOS
  4261  000966  203C               	addwfc	btemp+1,w,c
  4262  000968  6EDA               	movwf	fsr2h,c
  4263  00096A  0E01               	movlw	1
  4264  00096C  6EDF               	movwf	indf2,c
  4265  00096E                     i2l98:
  4266  00096E  4A10               	infsnz	int_high@i,f,c
  4267  000970  2A11               	incf	int_high@i+1,f,c
  4268  000972                     i2l95:
  4269  000972  5029               	movf	_tasks_installed,w,c
  4270  000974  5C10               	subwf	int_high@i,w,c
  4271  000976  502A               	movf	_tasks_installed+1,w,c
  4272  000978  5811               	subwfb	int_high@i+1,w,c
  4273  00097A  A0D8               	btfss	status,0,c
  4274  00097C  D79B               	goto	i2l96
  4275                           
  4276                           ;kernel.c: 115: }
  4277                           ;kernel.c: 116: }
  4278                           ;kernel.c: 117: }
  4279                           ;kernel.c: 119: quantum--;
  4280  00097E  0647               	decf	_quantum,f,c
  4281  000980  A0D8               	btfss	status,0,c
  4282  000982  0648               	decf	_quantum+1,f,c
  4283                           
  4284                           ;kernel.c: 120: if (quantum == 0) {
  4285  000984  5047               	movf	_quantum,w,c
  4286  000986  1048               	iorwf	_quantum+1,w,c
  4287  000988  A4D8               	btfss	status,2,c
  4288  00098A  D008               	goto	i2l100
  4289                           
  4290                           ;kernel.c: 121: quantum = 4;
  4291  00098C  0E00               	movlw	0
  4292  00098E  6E48               	movwf	_quantum+1,c
  4293  000990  0E04               	movlw	4
  4294  000992  6E47               	movwf	_quantum,c
  4295                           
  4296                           ;kernel.c: 122: dispatcher(READY);
  4297  000994  0E01               	movlw	1
  4298  000996  6EE6               	movwf	postinc1,c
  4299  000998  EC0A  F000         	call	_dispatcher	;wreg free
  4300  00099C                     i2l100:
  4301  00099C  C00F  F046         	movff	??_int_high+14,btemp+11
  4302  0009A0  C00E  F045         	movff	??_int_high+13,btemp+10
  4303  0009A4  C00D  F044         	movff	??_int_high+12,btemp+9
  4304  0009A8  C00C  F043         	movff	??_int_high+11,btemp+8
  4305  0009AC  C00B  F03D         	movff	??_int_high+10,btemp+2
  4306  0009B0  C00A  F03C         	movff	??_int_high+9,btemp+1
  4307  0009B4  C009  F03B         	movff	??_int_high+8,btemp
  4308  0009B8  C008  FFF4         	movff	??_int_high+7,prodh
  4309  0009BC  C007  FFF3         	movff	??_int_high+6,prodl
  4310  0009C0  C006  FFDA         	movff	??_int_high+5,fsr2h
  4311  0009C4  C005  FFD9         	movff	??_int_high+4,fsr2l
  4312  0009C8  C004  FFE2         	movff	??_int_high+3,fsr1h
  4313  0009CC  C003  FFE1         	movff	??_int_high+2,fsr1l
  4314  0009D0  0011               	retfie		f
  4315  0009D2                     __end_of_int_high:
  4316                           	opt stack 0
  4317  0000                     tosu	equ	0xFFF
  4318                           tosh	equ	0xFFE
  4319                           tosl	equ	0xFFD
  4320                           stkptr	equ	0xFFC
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           postinc0	equ	0xFEE
  4329                           postdec0	equ	0xFED
  4330                           plusw0	equ	0xFEB
  4331                           fsr0h	equ	0xFEA
  4332                           fsr0l	equ	0xFE9
  4333                           wreg	equ	0xFE8
  4334                           postinc1	equ	0xFE6
  4335                           postdec1	equ	0xFE5
  4336                           plusw1	equ	0xFE3
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           bsr	equ	0xFE0
  4340                           indf2	equ	0xFDF
  4341                           postinc2	equ	0xFDE
  4342                           postdec2	equ	0xFDD
  4343                           plusw2	equ	0xFDB
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           tosu	equ	0xFFF
  4348                           tosh	equ	0xFFE
  4349                           tosl	equ	0xFFD
  4350                           stkptr	equ	0xFFC
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           postinc0	equ	0xFEE
  4359                           postdec0	equ	0xFED
  4360                           plusw0	equ	0xFEB
  4361                           fsr0h	equ	0xFEA
  4362                           fsr0l	equ	0xFE9
  4363                           wreg	equ	0xFE8
  4364                           postinc1	equ	0xFE6
  4365                           postdec1	equ	0xFE5
  4366                           plusw1	equ	0xFE3
  4367                           fsr1h	equ	0xFE2
  4368                           fsr1l	equ	0xFE1
  4369                           bsr	equ	0xFE0
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378                           	psect	rparam
  4379  0000                     tosu	equ	0xFFF
  4380                           tosh	equ	0xFFE
  4381                           tosl	equ	0xFFD
  4382                           stkptr	equ	0xFFC
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           postinc0	equ	0xFEE
  4391                           postdec0	equ	0xFED
  4392                           plusw0	equ	0xFEB
  4393                           fsr0h	equ	0xFEA
  4394                           fsr0l	equ	0xFE9
  4395                           wreg	equ	0xFE8
  4396                           postinc1	equ	0xFE6
  4397                           postdec1	equ	0xFE5
  4398                           plusw1	equ	0xFE3
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           bsr	equ	0xFE0
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           plusw2	equ	0xFDB
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410                           	psect	temp
  4411  00003B                     btemp:
  4412                           	opt stack 0
  4413  00003B                     	ds	12
  4414  0000                     wtemp0	set	btemp
  4415  0000                     wtemp1	set	btemp+2
  4416  0000                     wtemp2	set	btemp+4
  4417  0000                     wtemp3	set	btemp+6
  4418  0000                     wtemp4	set	btemp+8
  4419  0000                     wtemp5	set	btemp+10
  4420  0000                     wtemp6	set	btemp+1
  4421  0000                     ttemp0	set	btemp
  4422  0000                     ttemp1	set	btemp+3
  4423  0000                     ttemp2	set	btemp+6
  4424  0000                     ttemp3	set	btemp+9
  4425  0000                     ltemp0	set	btemp
  4426  0000                     ltemp1	set	btemp+4
  4427  0000                     ltemp2	set	btemp+8
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           stkptr	equ	0xFFC
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           postinc0	equ	0xFEE
  4440                           postdec0	equ	0xFED
  4441                           plusw0	equ	0xFEB
  4442                           fsr0h	equ	0xFEA
  4443                           fsr0l	equ	0xFE9
  4444                           wreg	equ	0xFE8
  4445                           postinc1	equ	0xFE6
  4446                           postdec1	equ	0xFE5
  4447                           plusw1	equ	0xFE3
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           bsr	equ	0xFE0
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           postdec2	equ	0xFDD
  4454                           plusw2	equ	0xFDB
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         1082
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115     38      60
    BANK0           128    110     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    _SRAMmerge@pSegA	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    _SRAMmerge@pSegB	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMInitHeap@pHeap	near PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@temp	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    SRAMalloc@pHeap	near PTR struct _SALLOC size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), 

    read_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    write_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    create_pipe@pipe	PTR struct pipe size(2) Largest target is 14
		 -> pipe(COMRAM[14]), 

    sem_post@s	PTR struct sem size(2) Largest target is 3
		 -> s(COMRAM[2]), 

    sem_wait@s	PTR struct sem size(2) Largest target is 3
		 -> s(COMRAM[2]), 

    s	PTR struct sem size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    F_APTOS.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao3(), aviao2(), ctpista(), 

    create_task@task_f	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao3(), aviao2(), ctpista(), 

    S77tcb$task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao3(), aviao2(), ctpista(), 

    task.task_f	PTR PTR FTN()void  size(2) Largest target is 1
		 -> task_idle(), aviao3(), aviao2(), ctpista(), 

    sp__SRAMalloc	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 

    main@mem	PTR unsigned char  size(2) Largest target is 512
		 -> _uDynamicHeap(BIGRAM[512]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_SRAMalloc
    _setupOS->_create_task
    _SRAMalloc->__SRAMmerge

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _aviao3 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _task_idle in COMRAM

    None.

Critical Paths under _aviao2 in COMRAM

    None.

Critical Paths under _aviao3 in COMRAM

    None.

Critical Paths under _ctpista in COMRAM

    None.

Critical Paths under _int_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_create_task
    _setupOS->_create_task

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _aviao3 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _task_idle in BANK0

    None.

Critical Paths under _aviao2 in BANK0

    None.

Critical Paths under _aviao3 in BANK0

    None.

Critical Paths under _ctpista in BANK0

    None.

Critical Paths under _int_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _aviao3 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _task_idle in BANK1

    None.

Critical Paths under _aviao2 in BANK1

    None.

Critical Paths under _aviao3 in BANK1

    None.

Critical Paths under _ctpista in BANK1

    None.

Critical Paths under _int_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _aviao3 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _task_idle in BANK2

    None.

Critical Paths under _aviao2 in BANK2

    None.

Critical Paths under _aviao3 in BANK2

    None.

Critical Paths under _ctpista in BANK2

    None.

Critical Paths under _int_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _aviao3 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _task_idle in BANK3

    None.

Critical Paths under _aviao2 in BANK3

    None.

Critical Paths under _aviao3 in BANK3

    None.

Critical Paths under _ctpista in BANK3

    None.

Critical Paths under _int_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _aviao3 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _task_idle in BANK4

    None.

Critical Paths under _aviao2 in BANK4

    None.

Critical Paths under _aviao3 in BANK4

    None.

Critical Paths under _ctpista in BANK4

    None.

Critical Paths under _int_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _aviao3 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _task_idle in BANK5

    None.

Critical Paths under _aviao2 in BANK5

    None.

Critical Paths under _aviao3 in BANK5

    None.

Critical Paths under _ctpista in BANK5

    None.

Critical Paths under _int_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5795
                                             36 COMRAM     2     2      0
                          _SRAMalloc
                        _create_task
                            _setupOS
                           _start_os
 ---------------------------------------------------------------------------------
 (1) _start_os                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOS                                              0     0      0    2465
                       _SRAMInitHeap
                        _create_task
 ---------------------------------------------------------------------------------
 (2) _create_task                                        116   110      6    2360
                                             17 COMRAM     6     0      6
                                              0 BANK0    110   110      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (2) _SRAMInitHeap                                         4     4      0     105
                                             17 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SRAMalloc                                           11     9      2     969
                                             25 COMRAM    11     9      2
                         __SRAMmerge
 ---------------------------------------------------------------------------------
 (2) __SRAMmerge                                           8     6      2     478
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               1     1      0    4426
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao3                                               0     0      0    8424
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4084
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                              2     2      0   11841
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _task_idle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao2                                               1     1      0    4426
                        _create_pipe
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (5) _create_pipe                                          2     0      2      86
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _aviao3                                               0     0      0    8424
                              _delay
                         _write_pipe
 ---------------------------------------------------------------------------------
 (5) _write_pipe                                           3     0      3    4340
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _delay                                                2     0      2    4084
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ctpista                                              2     2      0   11841
                          _read_pipe
                           _sem_post
                           _sem_wait
 ---------------------------------------------------------------------------------
 (5) _sem_wait                                             2     0      2    3114
                            ___lwmod
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _sem_post                                             2     0      2    4399
                            ___lwmod
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (5) _read_pipe                                            3     1      2    4305
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_high                                            17    17      0    4162
                                              0 COMRAM    17    17      0
                             ___wmul
                         _dispatcher
 ---------------------------------------------------------------------------------
 (10) _dispatcher                                          1     0      1    2787
                             ___wmul
                       _rr_scheduler
 ---------------------------------------------------------------------------------
 (11) _rr_scheduler                                        2     2      0    1502
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    1263
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     171
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SRAMalloc
     __SRAMmerge
   _create_task
     ___wmul
   _setupOS
     _SRAMInitHeap
     _create_task
       ___wmul
   _start_os

 _aviao2 (ROOT)
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao3 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _task_idle (ROOT)

 _aviao2 (ROOT)
   _create_pipe
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _aviao3 (ROOT)
   _delay
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _write_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _ctpista (ROOT)
   _read_pipe
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_post
     ___lwmod
     ___wmul
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul
   _sem_wait
     ___lwmod
     _dispatcher
       ___wmul
       _rr_scheduler
         ___lwmod
         ___wmul

 _int_high (ROOT)
   ___wmul
   _dispatcher
     ___wmul
     _rr_scheduler
       ___lwmod
       ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     426      17       69.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      6E       5       85.9%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73     26      3C       1       52.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       4       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      15        0.0%
DATA                 0      0     4D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Oct 27 11:01:30 2018

                      _s 0039                       l19 10DA                       l72 0358  
                     u70 1150            SRAMalloc@temp 0020                      l221 0B7E  
                    l213 0B10                      l215 0B18                      l231 1144  
                    l216 0B3E                      l232 1172                      l241 0DBE  
                    l217 0BC8                      l218 0B5E                      l139 0F5C  
                    l244 0DCC                      l245 0E0C                      l239 0DB2  
                    l882 0CD0                      l892 0D40                      _BSR 000FE0  
                    u401 1128                      u440 0DBA                      _TOS 000FFD  
          create_task@id 0012                      wreg 000FE8           SRAMalloc@pHeap 0023  
      SRAMInitHeap@pHeap 0014        SRAMInitHeap@count 0012                     l1500 0CB0  
                   l1406 02EA                     l1176 1292                     l1274 1004  
                   l1450 085C                     l1540 125C                     l1470 06D2  
                   l1438 072C                     l1544 1272                     l1458 059E  
                   l1386 00D0                     l1486 0AF6                     l1558 0FC6  
                   i2l95 0972                     i2l96 08B4                     i2l98 096E  
                   _TOSH 000FFE                     _TOSL 000FFD                     _WREG 000FE8  
                   _TOSU 000FFF                     u2_20 0CF8                     u4_20 0D5E  
                   _main 1070                     _pipe 002B                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 003B  
                   prodh 000FF4                     prodl 000FF3                     start 000C  
        SRAMalloc@nBytes 0022             ___param_bank 000000          SRAMalloc@segLen 001E  
                  ?_main 0001          _tasks_installed 0029                    i2l100 099C  
        __end_of___lwmod 0D74                    _TMR0L 000FD6                    u28_20 129A  
                  u60_20 0A04                    u28_26 129C                    u55_20 0528  
                  u68_20 0FA2                    u68_26 0FA4                    u69_20 0FDA  
                  u69_26 0FDC               __SRAMmerge 0D74                    _delay 1190  
        __end_of_ctpista 0FEC          create_task@task 0080       __size_of_SRAMalloc 00DE  
                  tablat 000FF5                    ltemp0 003B                    ltemp1 003F  
                  ltemp2 0043          __end_of_setupOS 124C                    plusw0 000FEB  
                  plusw1 000FE3                    plusw2 000FDB                    ttemp0 003B  
                  ttemp1 003E                    ttemp2 0041                    ttemp3 0044  
                  status 000FD8                    wtemp0 003B                    wtemp1 003D  
                  wtemp2 003F                    wtemp3 0041                    wtemp4 0043  
                  wtemp5 0045                    wtemp6 003C          __initialization 11D8  
           __end_of_main 10DC                   ??_main 0025            __activetblptr 000000  
                 _STATUS 000FD8                   _STKPTR 000FFC     __size_of_create_pipe 00A6  
   __size_of_create_task 005A                   ___wmul 0EC2                   _aviao2 124C  
                 _aviao3 126E        __end_of_SRAMalloc 0BDC                   clear_0 11F8  
                 clear_1 120A         __end_of_int_high 09D2         create_task@prior 0014  
       __end_of_sem_wait 0CB8         __end_of_sem_post 0AFE             __pdataCOMRAM 0047  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_setupOS 0018              ?__SRAMmerge 0012         __end_of_start_os 12B4  
             __accesstop 0080  __end_of__initialization 1210            ___rparam_used 000001  
         __pcstackCOMRAM 0001               ___inthi_sp 0564            __end_of_delay 11D8  
        __SRAMmerge@uSum 0015            __uDynamicHeap 0314       __size_of_read_pipe 018C  
    __size_of__SRAMmerge 00A8       __size_of_task_idle 0020                  _F_APTOS 00EE  
             _dispatcher 0014                ?_int_high 0001                  __Hparam 0000  
                __Lparam 0000          __size_of___wmul 0096                  ___lwmod 0CB8  
              ?_start_os 0001          __size_of_aviao2 0022          __size_of_aviao3 0022  
                __pcinit 11D8                  __ramtop 0600            ?_SRAMInitHeap 0001  
                __ptext0 1070                  __ptext1 12B0                  __ptext2 1216  
                __ptext3 10DC                  __ptext4 0EC2                  __ptext5 1136  
                __ptext6 0AFE                  __ptext7 0D74                  __ptext8 124C  
                __ptext9 06E0                _T0CONbits 000FD5                  _ctpista 0F58  
      __end_of_read_pipe 06E0                  _setupOS 1216        create_task@task_f 0016  
                _quantum 0047                  main@mem 0025           __pintcode_body 0866  
   end_of_initialization 1210        __end_of_task_idle 12B0                  int_func 0866  
             ??_int_high 0001                  postdec0 000FED                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_start_os 0012           ??_SRAMInitHeap 0012  
              _PORTDbits 000F83                _SRAMalloc 0AFE                _TRISDbits 000F95  
           ??__SRAMmerge 0014            ??_create_task 0018       __end_of__SRAMmerge 0E1C  
         __end_of___wmul 0F58            __pidataCOMRAM 12B4           __end_of_aviao2 126E  
         __end_of_aviao3 1290               _write_pipe 06E0               ?_SRAMalloc 001A  
    start_initialization 11D8       SRAMalloc@segHeader 001F         __SRAMmerge@pSegA 0012  
       __SRAMmerge@pSegB 0018         __SRAMmerge@uSegA 0016         __SRAMmerge@uSegB 0017  
    __end_of_create_pipe 0EC2      __end_of_create_task 1136      __size_of_dispatcher 0540  
            __pbssBIGRAM 00EE              __pbssCOMRAM 0027            __pcstackBANK0 0080  
   __end_of_SRAMInitHeap 1190        __size_of_int_high 09CA                __pintcode 0008  
      __size_of_sem_wait 00DC        __size_of_sem_post 012C        __size_of_start_os 0004  
            ??_SRAMalloc 001C                 ?_setupOS 0001           __size_of_delay 0048  
   __end_of_rr_scheduler 1070                _read_pipe 0554              _create_pipe 0E1C  
            _create_task 10DC                _task_idle 1290      __size_of_write_pipe 0186  
               __Hrparam 0000                 __Lrparam 0000                int_high@i 0010  
     __end_of_dispatcher 0554         __size_of___lwmod 00BC         __size_of_ctpista 0094  
  __size_of_SRAMInitHeap 005A                 __ptext10 0014                 __ptext11 0FEC  
               __ptext20 1290                 __ptext12 0CB8                 __ptext13 0E1C  
               __ptext14 126E                 __ptext15 1190                 __ptext16 0F58  
               __ptext17 0BDC                 __ptext18 09D2                 __ptext19 0554  
       __size_of_setupOS 0036            __size_of_main 006C                 _int_high 0008  
               _sem_wait 0BDC                 _sem_post 09D2             _task_running 0027  
               _start_os 12B0             _SRAMInitHeap 1136    __size_of_rr_scheduler 0084  
             _INTCONbits 000FF2                 intlevel1 0000                 intlevel2 0000  
           _rr_scheduler 0FEC             ?_create_task 0012       __end_of_write_pipe 0866  
